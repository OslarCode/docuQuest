"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[5196],{3721:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"js/ambito","title":"\xc1mbito de variables","description":"El \xe1mbito de una variable en JavaScript se refiere al contexto en el cual una variable es v\xe1lida y puede ser accedida. El \xe1mbito determina d\xf3nde en tu c\xf3digo una variable es reconocida y d\xf3nde no lo es. Entender c\xf3mo funciona el \xe1mbito es crucial para evitar errores y escribir c\xf3digo JavaScript eficiente y mantenible. Aqu\xed est\xe1 una explicaci\xf3n de c\xf3mo funciona el \xe1mbito de una variable en JavaScript:","source":"@site/docs/js/ambito.md","sourceDirName":"js","slug":"/js/ambito","permalink":"/docuQuest/docs/js/ambito","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/ambito.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Let VS Var","permalink":"/docuQuest/docs/js/letVar"},"next":{"title":"Console.log()","permalink":"/docuQuest/docs/js/consoleLog"}}');var i=a(4848),l=a(8453);const s={},r="\xc1mbito de variables",c={},d=[{value:"\xc1mbito Global",id:"\xe1mbito-global",level:2},{value:"\xc1mbito Local (Funciones y Bloques)",id:"\xe1mbito-local-funciones-y-bloques",level:2},{value:"\xc1mbito de Bloque (ES6)",id:"\xe1mbito-de-bloque-es6",level:2},{value:"\xc1mbito de Funci\xf3n Anidado",id:"\xe1mbito-de-funci\xf3n-anidado",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\xe1mbito-de-variables",children:"\xc1mbito de variables"})}),"\n",(0,i.jsx)(n.h1,{id:"\xe1mbito-de-una-variable",children:"\xc1mbito de una variable"}),"\n",(0,i.jsx)(n.p,{children:"El \xe1mbito de una variable en JavaScript se refiere al contexto en el cual una variable es v\xe1lida y puede ser accedida. El \xe1mbito determina d\xf3nde en tu c\xf3digo una variable es reconocida y d\xf3nde no lo es. Entender c\xf3mo funciona el \xe1mbito es crucial para evitar errores y escribir c\xf3digo JavaScript eficiente y mantenible. Aqu\xed est\xe1 una explicaci\xf3n de c\xf3mo funciona el \xe1mbito de una variable en JavaScript:"}),"\n",(0,i.jsx)(n.h2,{id:"\xe1mbito-global",children:"\xc1mbito Global"}),"\n",(0,i.jsx)(n.p,{children:"Cuando declaras una variable fuera de cualquier funci\xf3n o bloque de c\xf3digo, se convierte en una variable global. Esto significa que la variable es accesible desde cualquier parte de tu programa, ya sea dentro de funciones, bucles, o cualquier otro bloque de c\xf3digo."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'let nombre = "Juan"; // Variable global\n\nfunction saludar() {\n  console.log("Hola, " + nombre);\n}\n\nsaludar(); // Muestra "Hola, Juan"\n\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'// Lo correcto es declarar la variable dentro de la funci\xf3n\nfunction saludar() {\n  let nombre = "Juan"; // Variable local a la funci\xf3n\n  console.log("Hola, " + nombre);\n}\n\nsaludar(); // Muestra "Hola, Juan"\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Las variables globales pueden ser \xfatiles, pero debes tener cuidado al usarlas, ya que pueden causar colisiones de nombres y comportamientos inesperados en programas grandes y complejos."}),"\n",(0,i.jsx)(n.h2,{id:"\xe1mbito-local-funciones-y-bloques",children:"\xc1mbito Local (Funciones y Bloques)"}),"\n",(0,i.jsx)(n.p,{children:"En JavaScript, el \xe1mbito local se crea cuando declaras una variable dentro de una funci\xf3n o un bloque de c\xf3digo (como un bucle o una declaraci\xf3n condicional). Estas variables son accesibles s\xf3lo dentro de ese contexto y no pueden ser vistas desde fuera."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'function saludar() {\n  let mensaje = "Hola, Mundo"; // Variable local\n  console.log(mensaje);\n}\n\nsaludar(); // Muestra "Hola, Mundo"\nconsole.log(mensaje); // Error: mensaje no est\xe1 definido\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Las variables locales tienen un alcance limitado, lo que significa que su vida \xfatil se limita al tiempo que existe la funci\xf3n o el bloque en el que se declararon."}),"\n",(0,i.jsx)(n.h2,{id:"\xe1mbito-de-bloque-es6",children:"\xc1mbito de Bloque (ES6)"}),"\n",(0,i.jsx)(n.p,{children:"A partir de ECMAScript 6 (ES6), puedes usar let y const para declarar variables con \xe1mbito de bloque. Esto significa que las variables son v\xe1lidas s\xf3lo dentro del bloque en el que se declaran, como un bucle for o una declaraci\xf3n if."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"if (true) {\n  let x = 10; // Variable con \xe1mbito de bloque\n  console.log(x); // Muestra 10\n}\n\nconsole.log(x); // Error: x no est\xe1 definido\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Esto ayuda a evitar problemas de colisi\xf3n de nombres y mejora la claridad del c\xf3digo al limitar el alcance de las variables."}),"\n",(0,i.jsx)(n.h2,{id:"\xe1mbito-de-funci\xf3n-anidado",children:"\xc1mbito de Funci\xf3n Anidado"}),"\n",(0,i.jsx)(n.p,{children:"Las funciones anidadas tienen acceso al \xe1mbito de sus funciones contenedoras. Esto significa que una funci\xf3n interna puede acceder a las variables de su funci\xf3n externa."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'function externa() {\n  let mensaje = "Hola, ";\n\n  function interna() {\n    console.log(mensaje + "Mundo");\n  }\n\n  interna(); // Muestra "Hola, Mundo"\n}\n\nexterna();\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"La funci\xf3n interna puede acceder a la variable mensaje de la funci\xf3n externa."}),"\n",(0,i.jsx)(n.p,{children:"En resumen, el \xe1mbito de una variable en JavaScript determina su visibilidad y accesibilidad en diferentes partes del c\xf3digo. Entender y gestionar el \xe1mbito de las variables es esencial para escribir c\xf3digo JavaScript eficiente, evitar errores y mantener una buena organizaci\xf3n en tus programas."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var o=a(6540);const i={},l=o.createContext(i);function s(e){const n=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);