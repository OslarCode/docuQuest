"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[5818],{8090:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"js/asincronia/asyncAwait","title":"Async/Await","description":"1. Async/Await","source":"@site/docs/js/asincronia/asyncAwait.md","sourceDirName":"js/asincronia","slug":"/js/asincronia/asyncAwait","permalink":"/docuQuest/docs/js/asincronia/asyncAwait","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/asincronia/asyncAwait.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Promesas","permalink":"/docuQuest/docs/js/asincronia/promesas"},"next":{"title":"Manejo de errores","permalink":"/docuQuest/docs/js/asincronia/errores"}}');var o=a(4848),r=a(8453);const i={},c="Async/Await",l={},d=[{value:"1. Async/Await",id:"1-asyncawait",level:2},{value:"La Evoluci\xf3n de la Asincron\xeda en JavaScript",id:"la-evoluci\xf3n-de-la-asincron\xeda-en-javascript",level:3},{value:"Introducci\xf3n a Async/Await",id:"introducci\xf3n-a-asyncawait",level:3},{value:"\u2705 \xbfQu\xe9 son <code>async</code> y <code>await</code> en JavaScript?",id:"-qu\xe9-son-async-y-await-en-javascript",level:2},{value:"\ud83e\udde0 Definici\xf3n (sencilla):",id:"-definici\xf3n-sencilla",level:3},{value:"\ud83c\udfaf Prop\xf3sito:",id:"-prop\xf3sito",level:2},{value:"\ud83d\udd27 Requisitos:",id:"-requisitos",level:2},{value:"\u2705 Ejemplo real: obtener datos simulados de una API",id:"-ejemplo-real-obtener-datos-simulados-de-una-api",level:2},{value:"\ud83d\udd0d \xbfQu\xe9 hace el c\xf3digo?:",id:"-qu\xe9-hace-el-c\xf3digo",level:3},{value:"\ud83e\udde9 \xbfC\xf3mo se relaciona con las Promesas?",id:"-c\xf3mo-se-relaciona-con-las-promesas",level:2},{value:"2. Declaraci\xf3n de Funciones Asincr\xf3nicas con <code>async</code>",id:"2-declaraci\xf3n-de-funciones-asincr\xf3nicas-con-async",level:2},{value:"Definici\xf3n y Uso de <code>async</code>",id:"definici\xf3n-y-uso-de-async",level:3},{value:"\ud83e\uddea Escenario pr\xe1ctico: obtener el perfil de un usuario desde un &quot;servidor&quot;",id:"-escenario-pr\xe1ctico-obtener-el-perfil-de-un-usuario-desde-un-servidor",level:3},{value:"\ud83d\udd0d Qu\xe9 hace este ejemplo:",id:"-qu\xe9-hace-este-ejemplo",level:3},{value:"Ventajas de Usar <code>async</code>",id:"ventajas-de-usar-async",level:3},{value:"3. La Palabra Clave <code>await</code>",id:"3-la-palabra-clave-await",level:2},{value:"Definici\xf3n y Uso de <code>await</code>",id:"definici\xf3n-y-uso-de-await",level:3},{value:"\ud83c\udfaf Ejemplo: Obtener datos clim\xe1ticos simulados de una ciudad",id:"-ejemplo-obtener-datos-clim\xe1ticos-simulados-de-una-ciudad",level:3},{value:"\u2705 \xbfQu\xe9 aprendiste con este ejemplo?",id:"-qu\xe9-aprendiste-con-este-ejemplo",level:3},{value:"Ventajas de Usar <code>await</code>",id:"ventajas-de-usar-await",level:3},{value:"Ejemplo Completo con <code>async</code> y <code>await</code>",id:"ejemplo-completo-con-async-y-await",level:3},{value:"\ud83c\udfaf Ejemplo: Obtener informaci\xf3n de un usuario y luego sus publicaciones",id:"-ejemplo-obtener-informaci\xf3n-de-un-usuario-y-luego-sus-publicaciones",level:3},{value:"\u2705 \xbfQu\xe9 demuestra este ejemplo?",id:"-qu\xe9-demuestra-este-ejemplo",level:3},{value:"\u2705 1. HTML (interfaz sencilla con Bootstrap opcional)",id:"-1-html-interfaz-sencilla-con-bootstrap-opcional",level:3},{value:"\u2705 2. JavaScript (app.js con async/await + DOM + comentarios)",id:"-2-javascript-appjs-con-asyncawait--dom--comentarios",level:3},{value:"\ud83e\uddea \xbfC\xf3mo probarlo?",id:"-c\xf3mo-probarlo",level:3},{value:"Comparaci\xf3n con Promesas Tradicionales",id:"comparaci\xf3n-con-promesas-tradicionales",level:2},{value:"Async/Await y Manejo de Errores",id:"asyncawait-y-manejo-de-errores",level:3},{value:"4. Buenas Pr\xe1cticas y Consideraciones",id:"4-buenas-pr\xe1cticas-y-consideraciones",level:2},{value:"Eficiencia y Rendimiento",id:"eficiencia-y-rendimiento",level:3},{value:"Uso Correcto de <code>await</code>",id:"uso-correcto-de-await",level:3},{value:"Manejo de Errores",id:"manejo-de-errores",level:3},{value:"Compatibilidad",id:"compatibilidad",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:3}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"asyncawait",children:"Async/Await"})}),"\n",(0,o.jsx)(n.h2,{id:"1-asyncawait",children:"1. Async/Await"}),"\n",(0,o.jsx)(n.h3,{id:"la-evoluci\xf3n-de-la-asincron\xeda-en-javascript",children:"La Evoluci\xf3n de la Asincron\xeda en JavaScript"}),"\n",(0,o.jsxs)(n.p,{children:['La evoluci\xf3n del manejo de asincron\xeda en JavaScript ha sido un viaje desde los callbacks, que aunque poderosos, pod\xedan llevar al infame "callback hell", hasta las promesas, que introdujeron una forma m\xe1s estructurada y manejable de manejar la asincron\xeda. Sin embargo, incluso con promesas, el c\xf3digo puede volverse complejo y dif\xedcil de leer cuando se anidan m\xfaltiples operaciones asincr\xf3nicas. Es en este contexto que ',(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," emergen como herramientas revolucionarias que simplifican enormemente la escritura y lectura de c\xf3digo asincr\xf3nico."]}),"\n",(0,o.jsx)(n.h3,{id:"introducci\xf3n-a-asyncawait",children:"Introducci\xf3n a Async/Await"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," son caracter\xedsticas introducidas en ECMAScript 2017 (ES8). Estas palabras clave permiten escribir c\xf3digo asincr\xf3nico que se lee y se comporta de manera similar al c\xf3digo s\xedncrono, haciendo que las operaciones asincr\xf3nicas sean m\xe1s intuitivas y menos propensas a errores. ",(0,o.jsx)(n.code,{children:"async"})," se utiliza para declarar funciones asincr\xf3nicas, mientras que ",(0,o.jsx)(n.code,{children:"await"})," se usa dentro de estas funciones para esperar la resoluci\xf3n de promesas."]}),"\n",(0,o.jsxs)(n.h2,{id:"-qu\xe9-son-async-y-await-en-javascript",children:["\u2705 \xbfQu\xe9 son ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," en JavaScript?"]}),"\n",(0,o.jsx)(n.h3,{id:"-definici\xf3n-sencilla",children:"\ud83e\udde0 Definici\xf3n (sencilla):"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," son ",(0,o.jsx)(n.strong,{children:"palabras clave"})," de JavaScript que permiten escribir ",(0,o.jsx)(n.strong,{children:"c\xf3digo asincr\xf3nico"})," de forma clara, como si fuera s\xedncrono."]}),"\n",(0,o.jsxs)(n.li,{children:["Son una ",(0,o.jsx)(n.strong,{children:"forma moderna de trabajar con Promesas"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-prop\xf3sito",children:"\ud83c\udfaf Prop\xf3sito:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Evitar el ",(0,o.jsx)(n.strong,{children:"callback hell"})," (anidaci\xf3n de funciones)."]}),"\n",(0,o.jsxs)(n.li,{children:["Hacer que el c\xf3digo sea ",(0,o.jsx)(n.strong,{children:"m\xe1s limpio, f\xe1cil de leer y mantener"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Reemplazar ",(0,o.jsx)(n.code,{children:".then()"})," y ",(0,o.jsx)(n.code,{children:".catch()"})," con una sintaxis m\xe1s directa."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-requisitos",children:"\ud83d\udd27 Requisitos:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await"})," solo se puede usar ",(0,o.jsxs)(n.strong,{children:["dentro de una funci\xf3n marcada como ",(0,o.jsx)(n.code,{children:"async"})]}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await"})," ",(0,o.jsx)(n.strong,{children:"pausa"})," la ejecuci\xf3n de la funci\xf3n hasta que la Promesa se resuelve."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-ejemplo-real-obtener-datos-simulados-de-una-api",children:"\u2705 Ejemplo real: obtener datos simulados de una API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Simulamos una funci\xf3n que devuelve una promesa con datos despu\xe9s de un tiempo\nfunction obtenerDatosDeServidor(nombre) {\n  return new Promise((resolve) => {\n    // Simulamos retraso (ej. conexi\xf3n lenta)\n    setTimeout(() => {\n      resolve(`\u2705 Datos recibidos de ${nombre}`);\n    }, 2000);\n  });\n}\n\n// Declaramos una funci\xf3n asincr\xf3nica usando "async"\nasync function iniciarDescarga() {\n  console.log("\ud83d\udce1 Iniciando descarga de datos...");\n\n  // "await" pausa hasta que la promesa se resuelva\n  const datos1 = await obtenerDatosDeServidor("servidor 1");\n  console.log(datos1); // \u2705 Datos recibidos de servidor 1\n\n  const datos2 = await obtenerDatosDeServidor("servidor 2");\n  console.log(datos2); // \u2705 Datos recibidos de servidor 2\n\n  const datos3 = await obtenerDatosDeServidor("servidor 3");\n  console.log(datos3); // \u2705 Datos recibidos de servidor 3\n\n  console.log("\ud83c\udf89 Descarga completada.");\n}\n\n// Llamamos a la funci\xf3n asincr\xf3nica\niniciarDescarga();\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-qu\xe9-hace-el-c\xf3digo",children:"\ud83d\udd0d \xbfQu\xe9 hace el c\xf3digo?:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"obtenerDatosDeServidor(...)"}),": simula una petici\xf3n que tarda 2 segundos."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"async function iniciarDescarga()"}),": define una funci\xf3n asincr\xf3nica."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await obtenerDatosDeServidor(...)"}),": espera a que los datos est\xe9n listos ",(0,o.jsx)(n.strong,{children:"antes de continuar"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"console.log(...)"}),": muestra el resultado como si fuera c\xf3digo s\xedncrono."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-c\xf3mo-se-relaciona-con-las-promesas",children:"\ud83e\udde9 \xbfC\xf3mo se relaciona con las Promesas?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Cada ",(0,o.jsx)(n.code,{children:"await"})," espera el ",(0,o.jsx)(n.strong,{children:"resultado de una Promesa"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Internamente, ",(0,o.jsx)(n.code,{children:"async"})," siempre ",(0,o.jsx)(n.strong,{children:"devuelve una Promesa"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Puedes combinarlo con ",(0,o.jsx)(n.code,{children:"try/catch"})," para manejar errores f\xe1cilmente (mucho m\xe1s claro que ",(0,o.jsx)(n.code,{children:".catch()"}),")."]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"2-declaraci\xf3n-de-funciones-asincr\xf3nicas-con-async",children:["2. Declaraci\xf3n de Funciones Asincr\xf3nicas con ",(0,o.jsx)(n.code,{children:"async"})]}),"\n",(0,o.jsxs)(n.h3,{id:"definici\xf3n-y-uso-de-async",children:["Definici\xf3n y Uso de ",(0,o.jsx)(n.code,{children:"async"})]}),"\n",(0,o.jsxs)(n.p,{children:["La palabra clave ",(0,o.jsx)(n.code,{children:"async"})," se coloca antes de la declaraci\xf3n de una funci\xf3n para convertirla en una funci\xf3n asincr\xf3nica. Una funci\xf3n marcada con ",(0,o.jsx)(n.code,{children:"async"})," siempre devuelve una promesa. Si la funci\xf3n devuelve un valor, este se envuelve en una promesa resuelta autom\xe1ticamente. Si la funci\xf3n arroja una excepci\xf3n, esta se envuelve en una promesa rechazada."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["Sintaxis b\xe1sica de ",(0,o.jsx)(n.code,{children:"async"}),":"]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"async function nombreFuncion() {\n  // c\xf3digo asincr\xf3nico\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-escenario-pr\xe1ctico-obtener-el-perfil-de-un-usuario-desde-un-servidor",children:'\ud83e\uddea Escenario pr\xe1ctico: obtener el perfil de un usuario desde un "servidor"'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Simulamos una funci\xf3n que devuelve una promesa con los datos del usuario\nfunction obtenerPerfilUsuario(id) {\n  return new Promise((resolve, reject) => {\n    // Simulamos una petici\xf3n asincr\xf3nica que tarda 2 segundos\n    setTimeout(() => {\n      // Simulamos que el usuario existe si el ID es 1\n      if (id === 1) {\n        resolve({\n          nombre: "Mar\xeda",\n          edad: 30,\n          profesion: "Desarrolladora Web"\n        });\n      } else {\n        // Si el ID no es v\xe1lido, rechazamos la promesa con un error\n        reject(new Error("\u274c Usuario no encontrado"));\n      }\n    }, 2000); // 2 segundos de espera simulada\n  });\n}\n\n// Definimos una funci\xf3n asincr\xf3nica para usar "await"\nasync function mostrarPerfil(id) {\n  console.log("\ud83d\udce1 Buscando perfil del usuario...");\n\n  try {\n    // Esperamos a que se resuelva la promesa de obtenerPerfilUsuario\n    const perfil = await obtenerPerfilUsuario(id);\n\n    // Si se resuelve correctamente, mostramos los datos\n    console.log("\u2705 Perfil encontrado:");\n    console.log("Nombre:", perfil.nombre);\n    console.log("Edad:", perfil.edad);\n    console.log("Profesi\xf3n:", perfil.profesion);\n  } catch (error) {\n    // Si ocurre un error (por ejemplo, usuario no encontrado), lo capturamos aqu\xed\n    console.error("Error al obtener perfil:", error.message);\n  }\n\n  console.log("\ud83d\udd1a Fin del proceso.");\n}\n\n// Llamamos a la funci\xf3n con un ID v\xe1lido\nmostrarPerfil(1);\n\n// Puedes probar tambi\xe9n con un ID no v\xe1lido para forzar el error\n// mostrarPerfil(99);\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-qu\xe9-hace-este-ejemplo",children:"\ud83d\udd0d Qu\xe9 hace este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Simula una llamada real a una API con ",(0,o.jsx)(n.code,{children:"setTimeout"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Usa ",(0,o.jsx)(n.code,{children:"async/await"})," para escribir el c\xf3digo de forma clara y secuencial."]}),"\n",(0,o.jsxs)(n.li,{children:["Captura errores f\xe1cilmente con ",(0,o.jsx)(n.code,{children:"try/catch"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Muestra una operaci\xf3n realista de c\xf3mo se usar\xeda ",(0,o.jsx)(n.code,{children:"async"})," en una app."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"ventajas-de-usar-async",children:["Ventajas de Usar ",(0,o.jsx)(n.code,{children:"async"})]}),"\n",(0,o.jsxs)(n.p,{children:["El uso de ",(0,o.jsx)(n.code,{children:"async"})," en la declaraci\xf3n de funciones ofrece varias ventajas:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Claridad y Legibilidad"}),": Al declarar funciones como asincr\xf3nicas, se mejora la claridad del c\xf3digo, indicando expl\xedcitamente que se realizar\xe1n operaciones asincr\xf3nicas dentro de la funci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Manejo Impl\xedcito de Promesas"}),": ",(0,o.jsx)(n.code,{children:"async"})," simplifica el manejo de promesas al permitir que los valores de retorno y las excepciones se manejen autom\xe1ticamente como promesas resueltas o rechazadas."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compatibilidad"}),": ",(0,o.jsx)(n.code,{children:"async"})," es compatible con todas las caracter\xedsticas modernas de JavaScript y se integra bien con otras estructuras y patrones de c\xf3digo."]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"3-la-palabra-clave-await",children:["3. La Palabra Clave ",(0,o.jsx)(n.code,{children:"await"})]}),"\n",(0,o.jsxs)(n.h3,{id:"definici\xf3n-y-uso-de-await",children:["Definici\xf3n y Uso de ",(0,o.jsx)(n.code,{children:"await"})]}),"\n",(0,o.jsxs)(n.p,{children:["La palabra clave ",(0,o.jsx)(n.code,{children:"await"})," se utiliza dentro de funciones asincr\xf3nicas para pausar la ejecuci\xf3n de la funci\xf3n hasta que una promesa se resuelva. Al utilizar ",(0,o.jsx)(n.code,{children:"await"}),", el c\xf3digo parece ejecutarse de manera s\xedncrona, lo que facilita la lectura y el mantenimiento."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["Sintaxis b\xe1sica de ",(0,o.jsx)(n.code,{children:"await"}),":"]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"async function nombreFuncion() {\n  let resultado = await promesa;\n  // c\xf3digo que depende de la promesa resuelta\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-ejemplo-obtener-datos-clim\xe1ticos-simulados-de-una-ciudad",children:"\ud83c\udfaf Ejemplo: Obtener datos clim\xe1ticos simulados de una ciudad"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Simulamos una funci\xf3n que devuelve una promesa con datos del clima\nfunction obtenerClima(ciudad) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulamos que solo tenemos datos para "Madrid"\n      if (ciudad === "Madrid") {\n        resolve({\n          temperatura: 25,\n          estado: "Soleado",\n          humedad: "40%"\n        });\n      } else {\n        reject(new Error("No hay datos disponibles para esta ciudad"));\n      }\n    }, 1500); // Simulamos que tarda 1.5 segundos\n  });\n}\n\n// Creamos una funci\xf3n asincr\xf3nica para usar "await"\nasync function mostrarClima(ciudad) {\n  console.log(`\ud83d\udce1 Buscando clima para ${ciudad}...`);\n\n  try {\n    // \u23f3 Aqu\xed esperamos el resultado de la promesa sin bloquear la interfaz\n    const clima = await obtenerClima(ciudad);\n\n    // \u2705 Si todo va bien, mostramos los datos del clima\n    console.log(`\ud83c\udf24\ufe0f Clima en ${ciudad}:`);\n    console.log(`Temperatura: ${clima.temperatura}\xb0C`);\n    console.log(`Estado: ${clima.estado}`);\n    console.log(`Humedad: ${clima.humedad}`);\n  } catch (error) {\n    // \u274c Si hubo un error (por ejemplo, ciudad no encontrada), lo mostramos aqu\xed\n    console.error("\u26a0\ufe0f Error al obtener el clima:", error.message);\n  }\n\n  console.log("\u2705 Consulta finalizada.\\n");\n}\n\n// Ejecutamos la funci\xf3n con una ciudad v\xe1lida\nmostrarClima("Madrid");\n\n// Tambi\xe9n puedes probar con una ciudad no disponible\n// mostrarClima("Barcelona");\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-qu\xe9-aprendiste-con-este-ejemplo",children:"\u2705 \xbfQu\xe9 aprendiste con este ejemplo?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await"})," ",(0,o.jsx)(n.strong,{children:"espera"})," a que se resuelva una promesa y ",(0,o.jsx)(n.strong,{children:"contin\xfaa"})," solo cuando tiene el resultado."]}),"\n",(0,o.jsxs)(n.li,{children:["Puedes usar ",(0,o.jsx)(n.code,{children:"try/catch"})," para ",(0,o.jsx)(n.strong,{children:"capturar errores f\xe1cilmente"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["El c\xf3digo se ve ",(0,o.jsx)(n.strong,{children:"m\xe1s limpio y secuencial"})," que con ",(0,o.jsx)(n.code,{children:".then()"})," y callbacks anidados."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["\xbfTe gustar\xeda ahora ver un ejemplo donde usemos ",(0,o.jsx)(n.code,{children:"await"})," ",(0,o.jsx)(n.strong,{children:"dentro de un bucle"})," o para ",(0,o.jsx)(n.strong,{children:"varias llamadas en secuencia"}),"?"]}),"\n",(0,o.jsxs)(n.h3,{id:"ventajas-de-usar-await",children:["Ventajas de Usar ",(0,o.jsx)(n.code,{children:"await"})]}),"\n",(0,o.jsxs)(n.p,{children:["El uso de ",(0,o.jsx)(n.code,{children:"await"})," dentro de funciones asincr\xf3nicas ofrece varias ventajas:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicidad y Legibilidad"}),": ",(0,o.jsx)(n.code,{children:"await"})," hace que el c\xf3digo asincr\xf3nico se lea y se escriba de manera similar al c\xf3digo s\xedncrono, mejorando la comprensi\xf3n y el mantenimiento del c\xf3digo."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reducci\xf3n de Anidamiento"}),": ",(0,o.jsx)(n.code,{children:"await"})," ayuda a evitar el anidamiento excesivo de callbacks o ",(0,o.jsx)(n.code,{children:".then()"}),', conocido como "callback hell" o "pyramid of doom".']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Manejo de Errores Simplificado"}),": Los errores en funciones asincr\xf3nicas pueden manejarse f\xe1cilmente con bloques ",(0,o.jsx)(n.code,{children:"try...catch"}),", proporcionando una forma m\xe1s clara y coherente de gestionar excepciones."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"ejemplo-completo-con-async-y-await",children:["Ejemplo Completo con ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})]}),"\n",(0,o.jsxs)(n.p,{children:["Para ilustrar el uso de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),", consideremos un ejemplo completo en el que se obtienen datos de m\xfaltiples APIs y se combinan los resultados."]}),"\n",(0,o.jsx)(n.h3,{id:"-ejemplo-obtener-informaci\xf3n-de-un-usuario-y-luego-sus-publicaciones",children:"\ud83c\udfaf Ejemplo: Obtener informaci\xf3n de un usuario y luego sus publicaciones"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Simulamos una API que devuelve los datos de un usuario\nfunction obtenerUsuario(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (id === 1) {\n        resolve({ id: 1, nombre: "Ana", email: "ana@example.com" });\n      } else {\n        reject(new Error("Usuario no encontrado"));\n      }\n    }, 1000); // Tarda 1 segundo\n  });\n}\n\n// Simulamos una API que devuelve los posts de un usuario\nfunction obtenerPostsDeUsuario(userId) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve([\n        { id: 101, titulo: "Mi primer post", contenido: "Hola mundo" },\n        { id: 102, titulo: "Post sobre JavaScript", contenido: "Async/await es genial" }\n      ]);\n    }, 1500); // Tarda 1.5 segundos\n  });\n}\n\n// Creamos una funci\xf3n asincr\xf3nica para orquestar todo con async/await\nasync function mostrarInformacionCompleta(idUsuario) {\n  try {\n    console.log("\ud83d\udd0d Buscando usuario...");\n\n    // Esperamos a que se resuelva obtenerUsuario()\n    const usuario = await obtenerUsuario(idUsuario);\n    console.log(`\u2705 Usuario encontrado: ${usuario.nombre} (${usuario.email})`);\n\n    console.log("\ud83d\udce8 Obteniendo publicaciones...");\n\n    // Esperamos a que se resuelva obtenerPostsDeUsuario()\n    const posts = await obtenerPostsDeUsuario(usuario.id);\n    console.log(`\ud83d\udcdd ${usuario.nombre} ha escrito ${posts.length} publicaciones:`);\n\n    // Mostramos cada post\n    posts.forEach((post, index) => {\n      console.log(`  ${index + 1}. ${post.titulo} \u2192 ${post.contenido}`);\n    });\n  } catch (error) {\n    // Si ocurre un error en cualquiera de las dos promesas, lo capturamos aqu\xed\n    console.error("\u26a0\ufe0f Error:", error.message);\n  }\n}\n\n// Ejecutamos la funci\xf3n con un ID de usuario v\xe1lido\nmostrarInformacionCompleta(1);\n\n// Tambi\xe9n puedes probar con un ID no v\xe1lido para ver el manejo de errores\n// mostrarInformacionCompleta(2);\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-qu\xe9-demuestra-este-ejemplo",children:"\u2705 \xbfQu\xe9 demuestra este ejemplo?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["C\xf3mo usar ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," para ",(0,o.jsx)(n.strong,{children:"encadenar operaciones asincr\xf3nicas"})," de forma secuencial."]}),"\n",(0,o.jsxs)(n.li,{children:["C\xf3mo ",(0,o.jsx)(n.strong,{children:"manejar errores f\xe1cilmente"})," con ",(0,o.jsx)(n.code,{children:"try/catch"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["C\xf3mo ",(0,o.jsx)(n.strong,{children:"hacer el c\xf3digo m\xe1s legible"})," y natural, sin ",(0,o.jsx)(n.code,{children:".then()"})," ni callbacks anidados."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Ahora, vamos a convertir el ejemplo de ",(0,o.jsx)(n.code,{children:"async/await"})," en una peque\xf1a ",(0,o.jsx)(n.strong,{children:"app visual con HTML + JavaScript"})," donde el usuario puede introducir un ID y ver sus datos y publicaciones simuladas. A\xf1adiremos tambi\xe9n interacci\xf3n con el DOM y comentarios l\xednea por l\xednea."]}),"\n",(0,o.jsx)(n.h3,{id:"-1-html-interfaz-sencilla-con-bootstrap-opcional",children:"\u2705 1. HTML (interfaz sencilla con Bootstrap opcional)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n<head>\n  <meta charset="UTF-8">\n  <title>Consulta de Usuario</title>\n  <style>\n    body { font-family: sans-serif; padding: 2rem; }\n    .resultado { margin-top: 1rem; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; }\n    .error { color: red; }\n  </style>\n</head>\n<body>\n  <h1>Buscar Usuario</h1>\n\n  \x3c!-- Input para ingresar el ID del usuario --\x3e\n  <input type="number" id="userIdInput" placeholder="Introduce ID de usuario" />\n  <button id="buscarBtn">Buscar</button>\n\n  \x3c!-- Contenedor para mostrar resultados --\x3e\n  <div id="resultado" class="resultado"></div>\n\n  \x3c!-- Conectamos el archivo JS al final del body --\x3e\n  <script src="app.js"><\/script>\n</body>\n</html>\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-2-javascript-appjs-con-asyncawait--dom--comentarios",children:"\u2705 2. JavaScript (app.js con async/await + DOM + comentarios)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Funci\xf3n simulada para obtener usuario por ID\nfunction obtenerUsuario(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (id === 1) {\n        resolve({ id: 1, nombre: "Ana", email: "ana@example.com" });\n      } else {\n        reject(new Error("Usuario no encontrado"));\n      }\n    }, 1000);\n  });\n}\n\n// Funci\xf3n simulada para obtener publicaciones del usuario\nfunction obtenerPostsDeUsuario(userId) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve([\n        { id: 101, titulo: "Mi primer post", contenido: "Hola mundo" },\n        { id: 102, titulo: "Post sobre JavaScript", contenido: "Async/await es genial" }\n      ]);\n    }, 1200);\n  });\n}\n\n// Referencias a elementos del DOM\nconst input = document.getElementById("userIdInput");\nconst btn = document.getElementById("buscarBtn");\nconst resultado = document.getElementById("resultado");\n\n// Escuchamos clic en el bot\xf3n\nbtn.addEventListener("click", async () => {\n  const id = parseInt(input.value);\n  resultado.innerHTML = "\u23f3 Cargando informaci\xf3n...";\n\n  try {\n    // Obtenemos los datos del usuario\n    const usuario = await obtenerUsuario(id);\n\n    // Obtenemos sus posts\n    const posts = await obtenerPostsDeUsuario(usuario.id);\n\n    // Mostramos en el DOM\n    resultado.innerHTML = `\n      <h2>\ud83d\udc64 ${usuario.nombre}</h2>\n      <p>Email: ${usuario.email}</p>\n      <h3>\ud83d\udcda Publicaciones:</h3>\n      <ul>\n        ${posts.map(post => `<li><strong>${post.titulo}:</strong> ${post.contenido}</li>`).join("")}\n      </ul>\n    `;\n  } catch (error) {\n    // Mostramos error en el DOM\n    resultado.innerHTML = `<p class="error">\u26a0\ufe0f ${error.message}</p>`;\n  }\n});\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-c\xf3mo-probarlo",children:"\ud83e\uddea \xbfC\xf3mo probarlo?"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Guarda el HTML como ",(0,o.jsx)(n.code,{children:"index.html"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Guarda el JavaScript como ",(0,o.jsx)(n.code,{children:"app.js"})," en la misma carpeta."]}),"\n",(0,o.jsxs)(n.li,{children:["Abre ",(0,o.jsx)(n.code,{children:"index.html"})," en el navegador."]}),"\n",(0,o.jsxs)(n.li,{children:["Escribe ",(0,o.jsx)(n.code,{children:"1"})," para ver los datos correctos, o cualquier otro n\xfamero para ver el mensaje de error."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"comparaci\xf3n-con-promesas-tradicionales",children:"Comparaci\xf3n con Promesas Tradicionales"}),"\n",(0,o.jsxs)(n.p,{children:["Para comprender mejor las ventajas de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),", es \xfatil compararlas con el manejo de promesas tradicionales. Consideremos un ejemplo de manejo de promesas tradicionales:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Promesas Tradicionales:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Funci\xf3n que obtiene datos de 3 APIs en paralelo\nfunction obtenerDatosDeApis() {\n  // Promise.all espera que todas las promesas dentro del array se resuelvan\n  return Promise.all([\n    // Se hace una petici\xf3n fetch a la primera API y se transforma la respuesta en JSON\n    fetch('<https://api.example.com/datos1>').then(res => res.json()),\n\n    // Se hace lo mismo con la segunda API\n    fetch('<https://api.example.com/datos2>').then(res => res.json()),\n\n    // Y con la tercera API\n    fetch('<https://api.example.com/datos3>').then(res => res.json())\n  ])\n  // Cuando todas las promesas se resuelven, se reciben los tres resultados como un array\n  .then(([datos1, datos2, datos3]) => {\n    // Se devuelve un objeto con los datos combinados para acceder m\xe1s f\xe1cilmente por nombre\n    return { datos1, datos2, datos3 };\n  })\n  // Si alguna de las promesas falla, se captura el error aqu\xed\n  .catch(error => {\n    // Se muestra el error en consola\n    console.error(\"Error al obtener datos:\", error);\n\n    // Se relanza el error para que pueda manejarse en el siguiente nivel si se desea\n    throw error;\n  });\n}\n\n// Llamamos a la funci\xf3n y mostramos los datos combinados cuando se resuelvan todas las promesas\nobtenerDatosDeApis().then(datosCombinados => console.log(datosCombinados));\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udd0e ",(0,o.jsx)(n.strong,{children:"\xbfQu\xe9 hace este c\xf3digo?"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Llama a 3 APIs en paralelo."}),"\n",(0,o.jsxs)(n.li,{children:["Espera que las 3 se resuelvan con ",(0,o.jsx)(n.code,{children:"Promise.all()"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Devuelve un solo objeto con los datos ya convertidos a JSON."}),"\n",(0,o.jsx)(n.li,{children:"Captura errores globalmente en caso de que falle alguna petici\xf3n."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Async/Await:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Declaramos una funci\xf3n asincr\xf3nica que usar\xe1 async/await\nasync function obtenerDatosDeApis() {\n  try {\n    // Esperamos a que se resuelvan las tres promesas al mismo tiempo usando Promise.all\n    // Cada fetch hace una solicitud a una URL y se convierte a JSON con .then(res => res.json())\n    let [datos1, datos2, datos3] = await Promise.all([\n      fetch('<https://api.example.com/datos1>').then(res => res.json()),\n      fetch('<https://api.example.com/datos2>').then(res => res.json()),\n      fetch('<https://api.example.com/datos3>').then(res => res.json())\n    ]);\n\n    // Devolvemos un objeto con los tres resultados combinados\n    return { datos1, datos2, datos3 };\n  } catch (error) {\n    // Si alguna de las promesas falla, se captura el error aqu\xed\n    console.error(\"Error al obtener datos:\", error);\n\n    // Relanzamos el error para que pueda manejarse externamente si se desea\n    throw error;\n  }\n}\n\n// Llamamos a la funci\xf3n y cuando se resuelve mostramos los datos combinados por consola\nobtenerDatosDeApis().then(datosCombinados => console.log(datosCombinados));\n"})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," permiten escribir el mismo c\xf3digo de manera m\xe1s limpia y legible. La eliminaci\xf3n de m\xfaltiples ",(0,o.jsx)(n.code,{children:".then()"})," y ",(0,o.jsx)(n.code,{children:".catch()"})," mejora la claridad del c\xf3digo y facilita el manejo de errores con bloques ",(0,o.jsx)(n.code,{children:"try...catch"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"asyncawait-y-manejo-de-errores",children:"Async/Await y Manejo de Errores"}),"\n",(0,o.jsxs)(n.p,{children:["Una de las ventajas m\xe1s significativas de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," es la facilidad con la que se pueden manejar los errores en comparaci\xf3n con las promesas tradicionales. Al utilizar bloques ",(0,o.jsx)(n.code,{children:"try...catch"}),", el manejo de errores se vuelve m\xe1s intuitivo y estructurado."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Ejemplo de manejo de errores con async/await:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Definimos una funci\xf3n asincr\xf3nica llamada obtenerDatos\nasync function obtenerDatos() {\n  try {\n    // Esperamos la respuesta del servidor al hacer una solicitud fetch\n    let respuesta = await fetch('<https://api.example.com/datos>');\n\n    // Verificamos si la respuesta fue exitosa (status 200\u2013299)\n    // Si no fue exitosa, lanzamos un error manualmente\n    if (!respuesta.ok) {\n      throw new Error('Error en la solicitud');\n    }\n\n    // Si la respuesta fue exitosa, convertimos el cuerpo de la respuesta a JSON\n    let datos = await respuesta.json();\n\n    // Devolvemos los datos obtenidos\n    return datos;\n  } catch (error) {\n    // Si ocurre alg\xfan error (de red o del fetch), lo mostramos en consola\n    console.error(\"Error al obtener datos:\", error);\n\n    // Lanzamos nuevamente el error para que pueda manejarse fuera de esta funci\xf3n\n    throw error;\n  }\n}\n\n// Llamamos a la funci\xf3n obtenerDatos()\n// Si todo sale bien, se imprimen los datos en consola\nobtenerDatos()\n  .then(datos => console.log(datos)) // Aqu\xed se manejan los datos si la promesa se resuelve\n  .catch(error => console.error(\"Error en la aplicaci\xf3n:\", error)); // Aqu\xed se manejan los errores si la promesa fue rechazada\n"})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," se combinan con ",(0,o.jsx)(n.code,{children:"fetch"})," para obtener datos de una API. El bloque ",(0,o.jsx)(n.code,{children:"try"})," envuelve el c\xf3digo donde se espera la resoluci\xf3n de la promesa de ",(0,o.jsx)(n.code,{children:"fetch"}),". Si la respuesta no es exitosa (",(0,o.jsx)(n.code,{children:"!respuesta.ok"}),"), se lanza un error con ",(0,o.jsx)(n.code,{children:"throw new Error('Error en la solicitud')"}),". Este error es capturado por el bloque ",(0,o.jsx)(n.code,{children:"catch"}),", donde se maneja de manera adecuada con un mensaje de error espec\xedfico y se lanza nuevamente para ser capturado por el m\xe9todo ",(0,o.jsx)(n.code,{children:".catch()"})," al final de la cadena de promesas."]}),"\n",(0,o.jsx)(n.h2,{id:"4-buenas-pr\xe1cticas-y-consideraciones",children:"4. Buenas Pr\xe1cticas y Consideraciones"}),"\n",(0,o.jsx)(n.h3,{id:"eficiencia-y-rendimiento",children:"Eficiencia y Rendimiento"}),"\n",(0,o.jsxs)(n.p,{children:["Si bien ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," facilitan la escritura de c\xf3digo asincr\xf3nico, es importante tener en cuenta su impacto en el rendimiento. Las funciones marcadas con ",(0,o.jsx)(n.code,{children:"async"})," y que utilizan ",(0,o.jsx)(n.code,{children:"await"})," pueden pausar la ejecuci\xf3n, lo que puede tener implicaciones si se utilizan de manera indiscriminada en operaciones intensivas de CPU o en loops muy largos."]}),"\n",(0,o.jsxs)(n.h3,{id:"uso-correcto-de-await",children:["Uso Correcto de ",(0,o.jsx)(n.code,{children:"await"})]}),"\n",(0,o.jsxs)(n.p,{children:["Es crucial utilizar ",(0,o.jsx)(n.code,{children:"await"})," solo dentro de funciones marcadas como ",(0,o.jsx)(n.code,{children:"async"}),". Intentar utilizar ",(0,o.jsx)(n.code,{children:"await"})," fuera de una funci\xf3n ",(0,o.jsx)(n.code,{children:"async"})," resultar\xe1 en un error de sintaxis."]}),"\n",(0,o.jsx)(n.h3,{id:"manejo-de-errores",children:"Manejo de Errores"}),"\n",(0,o.jsxs)(n.p,{children:["Aunque ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," simplifican el manejo de errores con bloques ",(0,o.jsx)(n.code,{children:"try...catch"}),", es importante manejar adecuadamente los errores para evitar problemas inesperados en la aplicaci\xf3n."]}),"\n",(0,o.jsx)(n.h3,{id:"compatibilidad",children:"Compatibilidad"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," son caracter\xedsticas modernas de JavaScript introducidas en ES8, por lo que es esencial verificar la compatibilidad del navegador o entorno donde se ejecutar\xe1 el c\xf3digo."]}),"\n",(0,o.jsx)(n.h3,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,o.jsxs)(n.p,{children:["En resumen, ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," representan una evoluci\xf3n significativa en el manejo de la asincron\xeda en JavaScript. Estas palabras clave proporcionan una sintaxis m\xe1s clara y legible para trabajar con operaciones asincr\xf3nicas, mejorando la mantenibilidad y la eficiencia del c\xf3digo. Al convertir funciones en funciones asincr\xf3nicas con ",(0,o.jsx)(n.code,{children:"async"})," y pausar la ejecuci\xf3n con ",(0,o.jsx)(n.code,{children:"await"})," hasta que las promesas se resuelvan, los desarrolladores pueden escribir c\xf3digo que se ejecuta de manera similar al c\xf3digo s\xedncrono, pero manteniendo todas las ventajas de la asincron\xeda. El uso adecuado de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," no solo mejora la experiencia del desarrollador, sino que tambi\xe9n conduce a aplicaciones web m\xe1s robustas y eficientes."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var s=a(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);