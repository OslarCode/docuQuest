"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[5568],{8265:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"js/clases","title":"Clases","description":"\xbfQu\xe9 son las Clases en JavaScript?","source":"@site/docs/js/clases.md","sourceDirName":"js","slug":"/js/clases","permalink":"/docuQuest/docs/js/clases","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/clases.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Expresiones Regulares","permalink":"/docuQuest/docs/js/expresionesRegulares"},"next":{"title":"DOM","permalink":"/docuQuest/docs/js/dom/"}}');var o=s(4848),d=s(8453);const l={},c="Clases",r={},i=[{value:"\xbfQu\xe9 son las Clases en JavaScript?",id:"qu\xe9-son-las-clases-en-javascript",level:2},{value:"Declaraci\xf3n de Clases en JavaScript",id:"declaraci\xf3n-de-clases-en-javascript",level:2},{value:"Creaci\xf3n de Instancias de Clase",id:"creaci\xf3n-de-instancias-de-clase",level:2},{value:"M\xe9todos y Propiedades Est\xe1ticos",id:"m\xe9todos-y-propiedades-est\xe1ticos",level:2},{value:"Herencia de Clases en JavaScript",id:"herencia-de-clases-en-javascript",level:2},{value:"Palabra Clave <code>this</code> en M\xe9todos de Clase",id:"palabra-clave-this-en-m\xe9todos-de-clase",level:2},{value:"Conclusiones y Recomendaciones Finales",id:"conclusiones-y-recomendaciones-finales",level:2}];function t(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"clases",children:"Clases"})}),"\n",(0,o.jsx)(a.h2,{id:"qu\xe9-son-las-clases-en-javascript",children:"\xbfQu\xe9 son las Clases en JavaScript?"}),"\n",(0,o.jsx)(a.p,{children:"En JavaScript, una clase es una plantilla para crear objetos que define un conjunto de propiedades y m\xe9todos comunes. Las clases permiten modelar entidades del mundo real o abstracciones de datos de una manera m\xe1s organizada y estructurada. Cada objeto creado a partir de una clase se denomina instancia de esa clase, y hereda las propiedades y m\xe9todos definidos en la clase."}),"\n",(0,o.jsx)(a.h2,{id:"declaraci\xf3n-de-clases-en-javascript",children:"Declaraci\xf3n de Clases en JavaScript"}),"\n",(0,o.jsx)(a.p,{children:"La sintaxis para declarar una clase en JavaScript es bastante sencilla y se asemeja a la sintaxis utilizada en otros lenguajes de programaci\xf3n orientados a objetos como Java o C++. A continuaci\xf3n, se muestra un ejemplo b\xe1sico de c\xf3mo se declara una clase en JavaScript:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"class Persona {\n  constructor(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n\n  saludar() {\n    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} a\xf1os.`);\n  }\n}\n"})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, hemos declarado una clase llamada ",(0,o.jsx)(a.code,{children:"Persona"})," que tiene dos propiedades (",(0,o.jsx)(a.code,{children:"nombre"})," y ",(0,o.jsx)(a.code,{children:"edad"}),") y un m\xe9todo (",(0,o.jsx)(a.code,{children:"saludar"}),"). El m\xe9todo ",(0,o.jsx)(a.code,{children:"constructor"})," es un m\xe9todo especial que se ejecuta autom\xe1ticamente cuando se crea una nueva instancia de la clase. Aqu\xed es donde se inicializan las propiedades del objeto. El m\xe9todo ",(0,o.jsx)(a.code,{children:"saludar"})," simplemente imprime un mensaje de saludo con el nombre y la edad de la persona."]}),"\n",(0,o.jsx)(a.h2,{id:"creaci\xf3n-de-instancias-de-clase",children:"Creaci\xf3n de Instancias de Clase"}),"\n",(0,o.jsxs)(a.p,{children:["Una vez que hemos definido una clase, podemos crear instancias de esa clase utilizando la palabra clave ",(0,o.jsx)(a.code,{children:"new"}),". Por ejemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'let persona1 = new Persona("Juan", 30);\nlet persona2 = new Persona("Mar\xeda", 25);\n\npersona1.saludar(); // Salida: Hola, mi nombre es Juan y tengo 30 a\xf1os.\npersona2.saludar(); // Salida: Hola, mi nombre es Mar\xeda y tengo 25 a\xf1os.\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Aqu\xed, hemos creado dos instancias de la clase ",(0,o.jsx)(a.code,{children:"Persona"})," con diferentes valores para las propiedades ",(0,o.jsx)(a.code,{children:"nombre"})," y ",(0,o.jsx)(a.code,{children:"edad"}),", y luego hemos llamado al m\xe9todo ",(0,o.jsx)(a.code,{children:"saludar"})," en cada una de las instancias."]}),"\n",(0,o.jsx)(a.h2,{id:"m\xe9todos-y-propiedades-est\xe1ticos",children:"M\xe9todos y Propiedades Est\xe1ticos"}),"\n",(0,o.jsx)(a.p,{children:"Adem\xe1s de los m\xe9todos y propiedades de instancia, JavaScript tambi\xe9n permite definir m\xe9todos y propiedades est\xe1ticos en una clase. Estos son m\xe9todos y propiedades que pertenecen a la clase en s\xed misma, en lugar de a las instancias individuales de la clase. Se accede a los m\xe9todos est\xe1ticos utilizando el nombre de la clase en lugar de una instancia de la clase. Por ejemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"class Utilidades {\n  static sumar(a, b) {\n    return a + b;\n  }\n}\n\nconsole.log(Utilidades.sumar(5, 3)); // Salida: 8\n"})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, hemos definido un m\xe9todo est\xe1tico llamado ",(0,o.jsx)(a.code,{children:"sumar"})," en la clase ",(0,o.jsx)(a.code,{children:"Utilidades"}),". Este m\xe9todo se puede llamar directamente desde la clase sin necesidad de crear una instancia de la clase."]}),"\n",(0,o.jsx)(a.h2,{id:"herencia-de-clases-en-javascript",children:"Herencia de Clases en JavaScript"}),"\n",(0,o.jsxs)(a.p,{children:["Una de las caracter\xedsticas m\xe1s poderosas de las clases en JavaScript es la capacidad de heredar propiedades y m\xe9todos de una clase padre. Esto permite crear jerarqu\xedas de clases y reutilizar c\xf3digo de manera eficiente. La sintaxis para heredar de una clase en JavaScript es utilizando la palabra clave ",(0,o.jsx)(a.code,{children:"extends"}),". Por ejemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"class Empleado extends Persona {\n  constructor(nombre, edad, cargo) {\n    super(nombre, edad);\n    this.cargo = cargo;\n  }\n\n  presentarse() {\n    console.log(\n      `Hola, soy ${this.nombre}, tengo ${this.edad} a\xf1os y trabajo como ${this.cargo}.`\n    );\n  }\n}\n"})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, hemos creado una clase ",(0,o.jsx)(a.code,{children:"Empleado"})," que hereda de la clase ",(0,o.jsx)(a.code,{children:"Persona"}),". Utilizamos la palabra clave ",(0,o.jsx)(a.code,{children:"super"})," en el constructor para llamar al constructor de la clase padre y as\xed inicializar las propiedades ",(0,o.jsx)(a.code,{children:"nombre"})," y ",(0,o.jsx)(a.code,{children:"edad"}),". La clase ",(0,o.jsx)(a.code,{children:"Empleado"})," tambi\xe9n tiene un m\xe9todo adicional llamado ",(0,o.jsx)(a.code,{children:"presentarse"}),", que imprime un mensaje con el nombre,"]}),"\n",(0,o.jsx)(a.p,{children:"la edad y el cargo del empleado."}),"\n",(0,o.jsxs)(a.h2,{id:"palabra-clave-this-en-m\xe9todos-de-clase",children:["Palabra Clave ",(0,o.jsx)(a.code,{children:"this"})," en M\xe9todos de Clase"]}),"\n",(0,o.jsxs)(a.p,{children:["La palabra clave ",(0,o.jsx)(a.code,{children:"this"})," se utiliza dentro de los m\xe9todos de una clase para hacer referencia al objeto actual. Cuando se llama a un m\xe9todo en una instancia de una clase, ",(0,o.jsx)(a.code,{children:"this"})," se refiere a esa instancia espec\xedfica. Por ejemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"class Contador {\n  constructor() {\n    this.valor = 0;\n  }\n\n  incrementar() {\n    this.valor++;\n    console.log(`El valor actual es: ${this.valor}`);\n  }\n}\n\nlet contador = new Contador();\ncontador.incrementar(); // Salida: El valor actual es: 1\n"})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, ",(0,o.jsx)(a.code,{children:"this.valor"})," hace referencia a la propiedad ",(0,o.jsx)(a.code,{children:"valor"})," del objeto ",(0,o.jsx)(a.code,{children:"contador"})," cuando se llama al m\xe9todo ",(0,o.jsx)(a.code,{children:"incrementar"}),"."]}),"\n",(0,o.jsx)(a.h2,{id:"conclusiones-y-recomendaciones-finales",children:"Conclusiones y Recomendaciones Finales"}),"\n",(0,o.jsx)(a.p,{children:"En resumen, las clases en JavaScript son una caracter\xedstica fundamental que permite organizar y estructurar el c\xf3digo de manera m\xe1s orientada a objetos. Al comprender c\xf3mo funcionan las clases en JavaScript y c\xf3mo se pueden utilizar para crear objetos y definir comportamientos, los desarrolladores pueden escribir c\xf3digo m\xe1s limpio, modular y reutilizable."}),"\n",(0,o.jsx)(a.p,{children:"Algunas recomendaciones finales para trabajar con clases en JavaScript incluyen:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Familiarizarse con la sintaxis de las clases y c\xf3mo se declaran y utilizan."}),"\n",(0,o.jsxs)(a.li,{children:["Entender el concepto de herencia de clases y c\xf3mo se utiliza la palabra clave ",(0,o.jsx)(a.code,{children:"extends"})," para heredar propiedades y m\xe9todos de una clase padre."]}),"\n",(0,o.jsx)(a.li,{children:"Practicar el uso de m\xe9todos y propiedades est\xe1ticos para encapsular funcionalidades comunes."}),"\n",(0,o.jsxs)(a.li,{children:["Experimentar con el uso de la palabra clave ",(0,o.jsx)(a.code,{children:"this"})," dentro de los m\xe9todos de clase para acceder a las propiedades y m\xe9todos del objeto actual."]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Al dominar el uso de las clases en JavaScript, los desarrolladores pueden escribir c\xf3digo m\xe1s estructurado y mantenible, lo que les permite construir aplicaciones m\xe1s robustas y escalables."})]})}function u(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,a,s)=>{s.d(a,{R:()=>l,x:()=>c});var n=s(6540);const o={},d=n.createContext(o);function l(e){const a=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(d.Provider,{value:a},e.children)}}}]);