"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[3950],{8049:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"poo/buenasPracticas","title":"Proyecto final y buenas pr\xe1cticas con JavaScript","description":"En este sexto y \xfaltimo m\xf3dulo, consolidaremos los conocimientos adquiridos sobre la Programaci\xf3n Orientada a Objetos (POO) en JavaScript mediante el desarrollo de una mini aplicaci\xf3n web. Adem\xe1s, exploraremos buenas pr\xe1cticas y principios de dise\xf1o que nos permitir\xe1n escribir c\xf3digo limpio, reutilizable y mantenible","source":"@site/docs/poo/buenasPracticas.md","sourceDirName":"poo","slug":"/poo/buenasPracticas","permalink":"/docuQuest/docs/poo/buenasPracticas","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/poo/buenasPracticas.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"POO aplicada al desarrollo web con JavaScript","permalink":"/docuQuest/docs/poo/POOAplicada"},"next":{"title":"Flexbox (CSS Flexible Box Layout)","permalink":"/docuQuest/docs/flex/introduccion"}}');var r=n(4848),s=n(8453);const o={},t="Proyecto final y buenas pr\xe1cticas con JavaScript",c={},l=[{value:"Desarrollo de una Mini Aplicaci\xf3n Web Orientada a Objetos",id:"desarrollo-de-una-mini-aplicaci\xf3n-web-orientada-a-objetos",level:2},{value:"Definici\xf3n de clases y relaciones",id:"definici\xf3n-de-clases-y-relaciones",level:3},{value:"Manipulaci\xf3n del DOM",id:"manipulaci\xf3n-del-dom",level:3},{value:"Uso de eventos",id:"uso-de-eventos",level:3},{value:"Buenas Pr\xe1cticas y Optimizaci\xf3n",id:"buenas-pr\xe1cticas-y-optimizaci\xf3n",level:2},{value:"C\xf3digo limpio y reutilizable",id:"c\xf3digo-limpio-y-reutilizable",level:3},{value:"Principios SOLID en JavaScript",id:"principios-solid-en-javascript",level:3}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"proyecto-final-y-buenas-pr\xe1cticas-con-javascript",children:"Proyecto final y buenas pr\xe1cticas con JavaScript"})}),"\n",(0,r.jsx)(a.p,{children:"En este sexto y \xfaltimo m\xf3dulo, consolidaremos los conocimientos adquiridos sobre la Programaci\xf3n Orientada a Objetos (POO) en JavaScript mediante el desarrollo de una mini aplicaci\xf3n web. Adem\xe1s, exploraremos buenas pr\xe1cticas y principios de dise\xf1o que nos permitir\xe1n escribir c\xf3digo limpio, reutilizable y mantenible"}),"\n",(0,r.jsx)(a.h2,{id:"desarrollo-de-una-mini-aplicaci\xf3n-web-orientada-a-objetos",children:"Desarrollo de una Mini Aplicaci\xf3n Web Orientada a Objetos"}),"\n",(0,r.jsx)(a.p,{children:"Para aplicar los conceptos de POO en un contexto pr\xe1ctico, desarrollaremos una mini aplicaci\xf3n web que gestione una lista de tareas (To-Do List). Esta aplicaci\xf3n permitir\xe1 agregar, marcar como completadas y eliminar tareas, todo ello utilizando clases y manipulando el DOM de manera orientada a objetos"}),"\n",(0,r.jsx)(a.h3,{id:"definici\xf3n-de-clases-y-relaciones",children:"Definici\xf3n de clases y relaciones"}),"\n",(0,r.jsxs)(a.p,{children:["Comenzaremos definiendo dos clases principales: ",(0,r.jsx)(a.code,{children:"Tarea"})," y ",(0,r.jsx)(a.code,{children:"ListaDeTareas"})]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsxs)(a.strong,{children:["Clase ",(0,r.jsx)(a.code,{children:"Tarea"}),":"]})}),"\n",(0,r.jsxs)(a.p,{children:["Esta clase representar\xe1 una tarea individual con propiedades como ",(0,r.jsx)(a.code,{children:"id"}),", ",(0,r.jsx)(a.code,{children:"descripcion"})," y ",(0,r.jsx)(a.code,{children:"completada"})]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-jsx",children:"class Tarea {\n  constructor(id, descripcion) {\n    this.id = id;\n    this.descripcion = descripcion;\n    this.completada = false;\n  }\n\n  marcarComoCompletada() {\n    this.completada = true;\n  }\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsxs)(a.strong,{children:["Clase ",(0,r.jsx)(a.code,{children:"ListaDeTareas"}),":"]})}),"\n",(0,r.jsx)(a.p,{children:"Esta clase gestionar\xe1 un conjunto de tareas y proporcionar\xe1 m\xe9todos para agregar, eliminar y obtener tareas"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-jsx",children:"class ListaDeTareas {\n  constructor() {\n    this.tareas = [];\n    this.idActual = 1;\n  }\n\n  agregarTarea(descripcion) {\n    const tarea = new Tarea(this.idActual++, descripcion);\n    this.tareas.push(tarea);\n    return tarea;\n  }\n\n  eliminarTarea(id) {\n    this.tareas = this.tareas.filter((tarea) => tarea.id !== id);\n  }\n\n  obtenerTareas() {\n    return this.tareas;\n  }\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"manipulaci\xf3n-del-dom",children:"Manipulaci\xf3n del DOM"}),"\n",(0,r.jsx)(a.p,{children:"Para interactuar con el usuario, necesitaremos manipular el DOM para mostrar la lista de tareas y actualizarla en respuesta a las acciones del usuario"}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsxs)(a.strong,{children:["Clase ",(0,r.jsx)(a.code,{children:"InterfazDeUsuario"}),":"]})}),"\n",(0,r.jsx)(a.p,{children:"Esta clase se encargar\xe1 de la interacci\xf3n con el DOM, renderizando las tareas y manejando los eventos del usuario"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-jsx",children:'class InterfazDeUsuario {\n  constructor(listaDeTareas) {\n    this.listaDeTareas = listaDeTareas;\n    this.contenedorTareas = document.getElementById("contenedorTareas");\n    this.formulario = document.getElementById("formularioTarea");\n    this.inputTarea = document.getElementById("inputTarea");\n\n    this.formulario.addEventListener("submit", (e) => this.agregarTarea(e));\n  }\n\n  agregarTarea(evento) {\n    evento.preventDefault();\n    const descripcion = this.inputTarea.value.trim();\n    if (descripcion) {\n      const tarea = this.listaDeTareas.agregarTarea(descripcion);\n      this.inputTarea.value = "";\n      this.renderizarTarea(tarea);\n    }\n  }\n\n  renderizarTarea(tarea) {\n    const elementoTarea = document.createElement("div");\n    elementoTarea.className = "tarea";\n    elementoTarea.dataset.id = tarea.id;\n    elementoTarea.innerHTML = `\n      <span>${tarea.descripcion}</span>\n      <button class="completar">Completar</button>\n      <button class="eliminar">Eliminar</button>\n    `;\n\n    elementoTarea\n      .querySelector(".completar")\n      .addEventListener("click", () => this.completarTarea(tarea.id));\n    elementoTarea\n      .querySelector(".eliminar")\n      .addEventListener("click", () => this.eliminarTarea(tarea.id));\n\n    this.contenedorTareas.appendChild(elementoTarea);\n  }\n\n  completarTarea(id) {\n    const tarea = this.listaDeTareas.tareas.find((t) => t.id === id);\n    if (tarea) {\n      tarea.marcarComoCompletada();\n      const elementoTarea = this.contenedorTareas.querySelector(\n        `[data-id=\'${id}\']`\n      );\n      elementoTarea.classList.add("completada");\n    }\n  }\n\n  eliminarTarea(id) {\n    this.listaDeTareas.eliminarTarea(id);\n    const elementoTarea = this.contenedorTareas.querySelector(\n      `[data-id=\'${id}\']`\n    );\n    if (elementoTarea) {\n      this.contenedorTareas.removeChild(elementoTarea);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(a.h3,{id:"uso-de-eventos",children:"Uso de eventos"}),"\n",(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"InterfazDeUsuario"})," maneja eventos del usuario, como el env\xedo del formulario para agregar una tarea y los clics en los botones de completar y eliminar. Esto se logra utilizando el m\xe9todo ",(0,r.jsx)(a.code,{children:"addEventListener"})," para asociar funciones que respondan a estos eventos"]}),"\n",(0,r.jsx)(a.hr,{}),"\n",(0,r.jsx)(a.h2,{id:"buenas-pr\xe1cticas-y-optimizaci\xf3n",children:"Buenas Pr\xe1cticas y Optimizaci\xf3n"}),"\n",(0,r.jsx)(a.p,{children:"Para garantizar que nuestro c\xf3digo sea limpio, eficiente y f\xe1cil de mantener, es fundamental seguir ciertas buenas pr\xe1cticas y principios de dise\xf1o."}),"\n",(0,r.jsx)(a.h3,{id:"c\xf3digo-limpio-y-reutilizable",children:"C\xf3digo limpio y reutilizable"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Nombres descriptivos:"})," Utilizar nombres claros y significativos para variables, funciones y clases"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Funciones y m\xe9todos concisos:"})," Cada funci\xf3n o m\xe9todo debe realizar una \xfanica tarea espec\xedfica"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Evitar la duplicaci\xf3n de c\xf3digo:"})," Reutilizar funciones y m\xe9todos en lugar de repetir bloques de c\xf3digo similares"]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"principios-solid-en-javascript",children:"Principios SOLID en JavaScript"}),"\n",(0,r.jsx)(a.p,{children:"Los principios SOLID son cinco directrices que ayudan a dise\xf1ar software m\xe1s comprensible, flexible y mantenible:"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Responsabilidad \xdanica (Single Responsibility Principle):"})," Cada clase debe tener una \xfanica responsabilidad o motivo para cambiar"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Abierto/Cerrado (Open/Closed Principle):"})," Las clases deben estar abiertas para extensi\xf3n pero cerradas para modificaci\xf3n"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Sustituci\xf3n de Liskov (Liskov Substitution Principle):"})," Las clases derivadas deben ser sustituibles por sus clases base sin alterar el comportamiento esperado del programa"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Segregaci\xf3n de Interfaces (Interface Segregation Principle):"})," Los clientes no deben estar obligados a depender de interfaces que no utilizan"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Inversi\xf3n de Dependencias (Dependency Inversion Principle):"})," Las clases deben depender de abstracciones y no de implementaciones concretas"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Aplicar estos principios en JavaScript implica dise\xf1ar nuestras clases y m\xf3dulos de manera que sean f\xe1ciles de entender"})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>t});var i=n(6540);const r={},s=i.createContext(r);function o(e){const a=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:a},e.children)}}}]);