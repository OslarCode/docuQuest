"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[1269],{8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>c});var s=a(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},9485:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"js/asincronia/operacionesAsincronas","title":"Operaciones as\xedncronas comunes (Ajax VS Fetch)","description":"En el desarrollo web, la asincron\xeda juega un papel fundamental al permitir que las aplicaciones web permanezcan receptivas y eficientes mientras realizan tareas que pueden llevar tiempo, como las solicitudes de red o la temporizaci\xf3n. Las operaciones asincr\xf3nicas comunes en JavaScript incluyen el uso de AJAX/FETCH para hacer solicitudes HTTP asincr\xf3nicas y setTimeout/setInterval para manejar la temporizaci\xf3n.","source":"@site/docs/js/asincronia/operacionesAsincronas.md","sourceDirName":"js/asincronia","slug":"/js/asincronia/operacionesAsincronas","permalink":"/docuQuest/docs/js/asincronia/operacionesAsincronas","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/asincronia/operacionesAsincronas.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Manejo de errores","permalink":"/docuQuest/docs/js/asincronia/errores"},"next":{"title":"Generators","permalink":"/docuQuest/docs/js/generators"}}');var r=a(4848),i=a(8453);const o={},c="Operaciones as\xedncronas comunes (Ajax VS Fetch)",t={},l=[{value:"1. AJAX/FETCH",id:"1-ajaxfetch",level:2},{value:"AJAX: Una Introducci\xf3n Hist\xf3rica",id:"ajax-una-introducci\xf3n-hist\xf3rica",level:3},{value:"FETCH: La Evoluci\xf3n de AJAX",id:"fetch-la-evoluci\xf3n-de-ajax",level:3},{value:"Ventajas de <code>fetch</code> sobre <code>XMLHttpRequest</code>",id:"ventajas-de-fetch-sobre-xmlhttprequest",level:3},{value:"Ejemplo avanzado de <code>fetch</code>",id:"ejemplo-avanzado-de-fetch",level:3},{value:"2. setTimeout / setInterval",id:"2-settimeout--setinterval",level:2},{value:"Temporizaci\xf3n en JavaScript",id:"temporizaci\xf3n-en-javascript",level:3},{value:"setTimeout",id:"settimeout",level:3},{value:"Cancelaci\xf3n de <code>setTimeout</code>",id:"cancelaci\xf3n-de-settimeout",level:3},{value:"setInterval",id:"setinterval",level:3},{value:"Cancelaci\xf3n de <code>setInterval</code>",id:"cancelaci\xf3n-de-setinterval",level:3},{value:"Ejemplos Avanzados de setTimeout y setInterval",id:"ejemplos-avanzados-de-settimeout-y-setinterval",level:3},{value:"setTimeout Recursivo",id:"settimeout-recursivo",level:3},{value:"Usando Promesas con <code>setTimeout</code>",id:"usando-promesas-con-settimeout",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"operaciones-as\xedncronas-comunes-ajax-vs-fetch",children:"Operaciones as\xedncronas comunes (Ajax VS Fetch)"})}),"\n",(0,r.jsx)(n.h1,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,r.jsxs)(n.p,{children:["En el desarrollo web, la asincron\xeda juega un papel fundamental al permitir que las aplicaciones web permanezcan receptivas y eficientes mientras realizan tareas que pueden llevar tiempo, como las solicitudes de red o la temporizaci\xf3n. Las operaciones asincr\xf3nicas comunes en JavaScript incluyen el uso de AJAX/FETCH para hacer solicitudes HTTP asincr\xf3nicas y ",(0,r.jsx)(n.code,{children:"setTimeout"}),"/",(0,r.jsx)(n.code,{children:"setInterval"})," para manejar la temporizaci\xf3n."]}),"\n",(0,r.jsx)(n.h2,{id:"1-ajaxfetch",children:"1. AJAX/FETCH"}),"\n",(0,r.jsx)(n.h3,{id:"ajax-una-introducci\xf3n-hist\xf3rica",children:"AJAX: Una Introducci\xf3n Hist\xf3rica"}),"\n",(0,r.jsx)(n.p,{children:'AJAX, acr\xf3nimo de "Asynchronous JavaScript and XML," es una t\xe9cnica que permite a las aplicaciones web enviar y recibir datos de un servidor de manera as\xedncrona sin recargar la p\xe1gina. Introducido a mediados de la d\xe9cada de 2000, AJAX revolucion\xf3 el desarrollo web al permitir una experiencia de usuario m\xe1s din\xe1mica y fluida.'}),"\n",(0,r.jsxs)(n.p,{children:["AJAX utiliza el objeto ",(0,r.jsx)(n.code,{children:"XMLHttpRequest"})," (XHR) para enviar solicitudes HTTP al servidor y manejar las respuestas. Aunque el nombre sugiere el uso de XML, AJAX puede manejar varios formatos de datos, incluyendo JSON, HTML y texto plano."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo b\xe1sico de AJAX con ",(0,r.jsx)(n.code,{children:"XMLHttpRequest"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function hacerSolicitudAJAX() {\n  var xhr = new XMLHttpRequest();\n  xhr.open("GET", "<https://api.example.com/datos>", true);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      var datos = JSON.parse(xhr.responseText);\n      console.log(datos);\n    }\n  };\n\n  xhr.send();\n}\n\nhacerSolicitudAJAX();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, el objeto ",(0,r.jsx)(n.code,{children:"XMLHttpRequest"})," se utiliza para hacer una solicitud GET a una API. La propiedad ",(0,r.jsx)(n.code,{children:"onreadystatechange"})," maneja los cambios de estado del objeto XHR, y cuando el estado es 4 (completado) y el estado HTTP es 200 (\xe9xito), se procesa la respuesta."]}),"\n",(0,r.jsx)(n.h3,{id:"fetch-la-evoluci\xf3n-de-ajax",children:"FETCH: La Evoluci\xf3n de AJAX"}),"\n",(0,r.jsxs)(n.p,{children:["Aunque AJAX sigue siendo ampliamente utilizado, el m\xe9todo ",(0,r.jsx)(n.code,{children:"fetch"}),", introducido en la especificaci\xf3n de Fetch API, ofrece una alternativa moderna y m\xe1s f\xe1cil de usar para realizar solicitudes HTTP. ",(0,r.jsx)(n.code,{children:"fetch"})," devuelve una promesa que se resuelve con la respuesta del servidor, proporcionando una interfaz m\xe1s limpia y manejable para las operaciones asincr\xf3nicas."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Sintaxis b\xe1sica de ",(0,r.jsx)(n.code,{children:"fetch"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'fetch(url, opciones)\n  .then((respuesta) => respuesta.json())\n  .then((datos) => console.log(datos))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo b\xe1sico de ",(0,r.jsx)(n.code,{children:"fetch"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function hacerSolicitudFetch() {\n  fetch("<https://api.example.com/datos>")\n    .then((respuesta) => {\n      if (!respuesta.ok) {\n        throw new Error("Error en la solicitud");\n      }\n      return respuesta.json();\n    })\n    .then((datos) => console.log(datos))\n    .catch((error) => console.error("Error:", error));\n}\n\nhacerSolicitudFetch();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, ",(0,r.jsx)(n.code,{children:"fetch"})," se utiliza para hacer una solicitud GET a una API. La respuesta se convierte en JSON y se maneja con ",(0,r.jsx)(n.code,{children:".then()"}),". Si la solicitud falla, se lanza un error y se maneja con ",(0,r.jsx)(n.code,{children:".catch()"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"ventajas-de-fetch-sobre-xmlhttprequest",children:["Ventajas de ",(0,r.jsx)(n.code,{children:"fetch"})," sobre ",(0,r.jsx)(n.code,{children:"XMLHttpRequest"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sintaxis m\xe1s simple y limpia"}),": ",(0,r.jsx)(n.code,{children:"fetch"})," proporciona una sintaxis m\xe1s concisa y moderna en comparaci\xf3n con ",(0,r.jsx)(n.code,{children:"XMLHttpRequest"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Promesas"}),": ",(0,r.jsx)(n.code,{children:"fetch"})," utiliza promesas, lo que permite un manejo m\xe1s robusto y flexible de las operaciones asincr\xf3nicas."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuraci\xf3n m\xe1s flexible"}),": ",(0,r.jsx)(n.code,{children:"fetch"})," permite una configuraci\xf3n m\xe1s sencilla y directa de las solicitudes, incluyendo m\xe9todos HTTP, encabezados y cuerpos de solicitud."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"ejemplo-avanzado-de-fetch",children:["Ejemplo avanzado de ",(0,r.jsx)(n.code,{children:"fetch"})]}),"\n",(0,r.jsxs)(n.p,{children:["Para ilustrar el uso avanzado de ",(0,r.jsx)(n.code,{children:"fetch"}),", consideremos un ejemplo en el que se realiza una solicitud POST para enviar datos a una API:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'async function enviarDatosFetch() {\n  const datos = {\n    nombre: "Juan",\n    edad: 30,\n  };\n\n  try {\n    const respuesta = await fetch("<https://api.example.com/enviar>", {\n      method: "POST",\n      headers: {\n        "Content-Type": "application/json",\n      },\n      body: JSON.stringify(datos),\n    });\n\n    if (!respuesta.ok) {\n      throw new Error("Error en la solicitud");\n    }\n\n    const resultado = await respuesta.json();\n    console.log("Datos enviados:", resultado);\n  } catch (error) {\n    console.error("Error:", error);\n  }\n}\n\nenviarDatosFetch();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, ",(0,r.jsx)(n.code,{children:"fetch"})," se utiliza para enviar datos JSON a una API utilizando el m\xe9todo POST. La respuesta se maneja de manera asincr\xf3nica con ",(0,r.jsx)(n.code,{children:"async"})," y ",(0,r.jsx)(n.code,{children:"await"}),", proporcionando una estructura clara y manejable para la operaci\xf3n."]}),"\n",(0,r.jsx)(n.h2,{id:"2-settimeout--setinterval",children:"2. setTimeout / setInterval"}),"\n",(0,r.jsx)(n.h3,{id:"temporizaci\xf3n-en-javascript",children:"Temporizaci\xf3n en JavaScript"}),"\n",(0,r.jsxs)(n.p,{children:["La temporizaci\xf3n es otra \xe1rea crucial en la que JavaScript maneja operaciones asincr\xf3nicas. Las funciones ",(0,r.jsx)(n.code,{children:"setTimeout"})," y ",(0,r.jsx)(n.code,{children:"setInterval"})," permiten ejecutar c\xf3digo despu\xe9s de un retraso espec\xedfico o en intervalos regulares, respectivamente."]}),"\n",(0,r.jsx)(n.h3,{id:"settimeout",children:"setTimeout"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"setTimeout"})," se utiliza para ejecutar una funci\xf3n despu\xe9s de un retraso especificado en milisegundos. Esta funci\xf3n devuelve un identificador que puede utilizarse para cancelar la operaci\xf3n si es necesario."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Sintaxis b\xe1sica de ",(0,r.jsx)(n.code,{children:"setTimeout"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"setTimeout(funcion, retraso, ...argumentos);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo b\xe1sico de ",(0,r.jsx)(n.code,{children:"setTimeout"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function mostrarMensaje() {\n  console.log("Hola despu\xe9s de 2 segundos");\n}\n\nsetTimeout(mostrarMensaje, 2000);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, la funci\xf3n ",(0,r.jsx)(n.code,{children:"mostrarMensaje"})," se ejecutar\xe1 despu\xe9s de un retraso de 2000 milisegundos (2 segundos)."]}),"\n",(0,r.jsxs)(n.h3,{id:"cancelaci\xf3n-de-settimeout",children:["Cancelaci\xf3n de ",(0,r.jsx)(n.code,{children:"setTimeout"})]}),"\n",(0,r.jsxs)(n.p,{children:["El identificador devuelto por ",(0,r.jsx)(n.code,{children:"setTimeout"})," puede utilizarse para cancelar la operaci\xf3n utilizando la funci\xf3n ",(0,r.jsx)(n.code,{children:"clearTimeout"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo de cancelaci\xf3n de ",(0,r.jsx)(n.code,{children:"setTimeout"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const id = setTimeout(() => console.log("Esto no se ver\xe1"), 2000);\nclearTimeout(id);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, la funci\xf3n pasada a ",(0,r.jsx)(n.code,{children:"setTimeout"})," nunca se ejecutar\xe1 porque ",(0,r.jsx)(n.code,{children:"clearTimeout"})," se llama antes de que transcurra el retraso."]}),"\n",(0,r.jsx)(n.h3,{id:"setinterval",children:"setInterval"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"setInterval"})," se utiliza para ejecutar una funci\xf3n repetidamente en intervalos regulares especificados en milisegundos. Al igual que ",(0,r.jsx)(n.code,{children:"setTimeout"}),", devuelve un identificador que puede utilizarse para detener la ejecuci\xf3n."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Sintaxis b\xe1sica de ",(0,r.jsx)(n.code,{children:"setInterval"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"setInterval(funcion, intervalo, ...argumentos);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo b\xe1sico de ",(0,r.jsx)(n.code,{children:"setInterval"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function mostrarHora() {\n  console.log("Hora actual:", new Date().toLocaleTimeString());\n}\n\nsetInterval(mostrarHora, 1000);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, la funci\xf3n ",(0,r.jsx)(n.code,{children:"mostrarHora"})," se ejecutar\xe1 cada 1000 milisegundos (1 segundo), mostrando la hora actual."]}),"\n",(0,r.jsxs)(n.h3,{id:"cancelaci\xf3n-de-setinterval",children:["Cancelaci\xf3n de ",(0,r.jsx)(n.code,{children:"setInterval"})]}),"\n",(0,r.jsxs)(n.p,{children:["El identificador devuelto por ",(0,r.jsx)(n.code,{children:"setInterval"})," puede utilizarse para detener la repetici\xf3n utilizando la funci\xf3n ",(0,r.jsx)(n.code,{children:"clearInterval"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo de cancelaci\xf3n de ",(0,r.jsx)(n.code,{children:"setInterval"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const id = setInterval(\n  () => console.log("Esto se repetir\xe1 cada segundo"),\n  1000\n);\n\nsetTimeout(() => {\n  clearInterval(id);\n  console.log("Intervalo detenido");\n}, 5000);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, el intervalo se detendr\xe1 despu\xe9s de 5 segundos, utilizando ",(0,r.jsx)(n.code,{children:"clearInterval"})," dentro de un ",(0,r.jsx)(n.code,{children:"setTimeout"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"ejemplos-avanzados-de-settimeout-y-setinterval",children:"Ejemplos Avanzados de setTimeout y setInterval"}),"\n",(0,r.jsx)(n.h3,{id:"settimeout-recursivo",children:"setTimeout Recursivo"}),"\n",(0,r.jsxs)(n.p,{children:["Un patr\xf3n avanzado es el uso recursivo de ",(0,r.jsx)(n.code,{children:"setTimeout"})," para crear intervalos ajustables din\xe1micamente. Este enfoque ofrece m\xe1s control sobre el tiempo entre ejecuciones y permite ajustar o detener la repetici\xf3n en cualquier momento."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo de ",(0,r.jsx)(n.code,{children:"setTimeout"})," recursivo:"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function tareaRepetitiva() {\n  console.log(\n    "Tarea repetitiva ejecutada a las",\n    new Date().toLocaleTimeString()\n  );\n  setTimeout(tareaRepetitiva, 2000);\n}\n\nsetTimeout(tareaRepetitiva, 2000);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, ",(0,r.jsx)(n.code,{children:"tareaRepetitiva"})," se llama a s\xed misma utilizando ",(0,r.jsx)(n.code,{children:"setTimeout"}),", creando un intervalo ajustable que ejecuta la tarea cada 2 segundos."]}),"\n",(0,r.jsxs)(n.h3,{id:"usando-promesas-con-settimeout",children:["Usando Promesas con ",(0,r.jsx)(n.code,{children:"setTimeout"})]}),"\n",(0,r.jsxs)(n.p,{children:["Otra t\xe9cnica avanzada es combinar ",(0,r.jsx)(n.code,{children:"setTimeout"})," con promesas para manejar temporizaciones de manera m\xe1s estructurada y aprovechar el manejo de promesas."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Ejemplo de promesa con ",(0,r.jsx)(n.code,{children:"setTimeout"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function esperar(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function tareaAsincrona() {\n  console.log("Inicio de la tarea");\n  await esperar(3000);\n  console.log("Fin de la tarea despu\xe9s de 3 segundos");\n}\n\ntareaAsincrona();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, la funci\xf3n ",(0,r.jsx)(n.code,{children:"esperar"})," devuelve una promesa que se resuelve despu\xe9s de un retraso especificado. La funci\xf3n ",(0,r.jsx)(n.code,{children:"tareaAsincrona"})," utiliza ",(0,r.jsx)(n.code,{children:"await"})," para esperar la resoluci\xf3n de la promesa antes de continuar, proporcionando una estructura clara y asincr\xf3nica para la temporizaci\xf3n."]}),"\n",(0,r.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,r.jsxs)(n.p,{children:["La gesti\xf3n de operaciones asincr\xf3nicas en JavaScript es fundamental para el desarrollo de aplicaciones web modernas y eficientes. Las solicitudes HTTP asincr\xf3nicas, gestionadas a trav\xe9s de AJAX y FETCH, permiten la comunicaci\xf3n con servidores sin bloquear la interfaz de usuario, mejorando la experiencia del usuario. Las funciones de temporizaci\xf3n, ",(0,r.jsx)(n.code,{children:"setTimeout"})," y ",(0,r.jsx)(n.code,{children:" setInterval"}),", proporcionan mecanismos flexibles para manejar retrasos y repeticiones de tareas. Entender y aplicar estas t\xe9cnicas con destreza permite a los desarrolladores crear aplicaciones web que no solo son responsivas y fluidas, sino tambi\xe9n robustas y escalables. Al combinar estas herramientas con estructuras m\xe1s avanzadas como promesas y la sintaxis ",(0,r.jsx)(n.code,{children:"async/await"}),", es posible escribir c\xf3digo que sea tanto eficiente como f\xe1cil de mantener, logrando as\xed una armon\xeda entre funcionalidad y rendimiento en el desarrollo web."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);