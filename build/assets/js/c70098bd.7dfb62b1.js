"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[1960],{4508:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"js/api/metodosHTTP","title":"M\xe9todos HTTP","description":"En el desarrollo de aplicaciones web modernas, las APIs REST (Representational State Transfer) juegan un papel crucial al permitir la comunicaci\xf3n entre diferentes sistemas. Estas APIs utilizan los m\xe9todos HTTP para realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) sobre los datos. En este documento, exploraremos los conceptos b\xe1sicos de los m\xe9todos HTTP en las APIs REST, centr\xe1ndonos en los m\xe9todos GET, POST, PUT, DELETE y PATCH.","source":"@site/docs/js/api/metodosHTTP.md","sourceDirName":"js/api","slug":"/js/api/metodosHTTP","permalink":"/docuQuest/docs/js/api/metodosHTTP","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/api/metodosHTTP.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n","permalink":"/docuQuest/docs/js/api/introduccion"},"next":{"title":"Endpoints","permalink":"/docuQuest/docs/js/api/endpoints"}}');var n=s(4848),r=s(8453);const i={},t="M\xe9todos HTTP",c={},l=[{value:"1. GET: Recupera Datos del Servidor",id:"1-get-recupera-datos-del-servidor",level:2},{value:"Ejemplo B\xe1sico de GET en JavaScript",id:"ejemplo-b\xe1sico-de-get-en-javascript",level:3},{value:"Par\xe1metros de Consulta",id:"par\xe1metros-de-consulta",level:3},{value:"Encabezados de Solicitud",id:"encabezados-de-solicitud",level:3},{value:"2. POST: Env\xeda Nuevos Datos al Servidor",id:"2-post-env\xeda-nuevos-datos-al-servidor",level:2},{value:"Ejemplo B\xe1sico de POST en JavaScript",id:"ejemplo-b\xe1sico-de-post-en-javascript",level:3},{value:"Env\xedo de Formularios",id:"env\xedo-de-formularios",level:3},{value:"Archivos",id:"archivos",level:3},{value:"3. PUT: Actualiza Datos Existentes en el Servidor",id:"3-put-actualiza-datos-existentes-en-el-servidor",level:2},{value:"Ejemplo B\xe1sico de PUT en JavaScript",id:"ejemplo-b\xe1sico-de-put-en-javascript",level:3},{value:"Comparaci\xf3n con PATCH",id:"comparaci\xf3n-con-patch",level:3},{value:"4. DELETE: Elimina Datos del Servidor",id:"4-delete-elimina-datos-del-servidor",level:2},{value:"Ejemplo B\xe1sico de DELETE en JavaScript",id:"ejemplo-b\xe1sico-de-delete-en-javascript",level:3},{value:"Manejo de Respuestas",id:"manejo-de-respuestas",level:3},{value:"5. PATCH: Aplica Actualizaciones Parciales a los Datos",id:"5-patch-aplica-actualizaciones-parciales-a-los-datos",level:2},{value:"Ejemplo B\xe1sico de PATCH en JavaScript",id:"ejemplo-b\xe1sico-de-patch-en-javascript",level:3},{value:"Uso de JSON Patch",id:"uso-de-json-patch",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Resumen de M\xe9todos HTTP",id:"resumen-de-m\xe9todos-http",level:3},{value:"Pr\xe1cticas Recomendadas",id:"pr\xe1cticas-recomendadas",level:3},{value:"Futuras Consideraciones",id:"futuras-consideraciones",level:3}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"m\xe9todos-http",children:"M\xe9todos HTTP"})}),"\n",(0,n.jsx)(a.h1,{id:"conceptos-b\xe1sicos-de-m\xe9todos-http-en-apis-rest-de-javascript",children:"Conceptos B\xe1sicos de M\xe9todos HTTP en APIs REST de JavaScript"}),"\n",(0,n.jsx)(a.p,{children:"En el desarrollo de aplicaciones web modernas, las APIs REST (Representational State Transfer) juegan un papel crucial al permitir la comunicaci\xf3n entre diferentes sistemas. Estas APIs utilizan los m\xe9todos HTTP para realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) sobre los datos. En este documento, exploraremos los conceptos b\xe1sicos de los m\xe9todos HTTP en las APIs REST, centr\xe1ndonos en los m\xe9todos GET, POST, PUT, DELETE y PATCH."}),"\n",(0,n.jsx)(a.h2,{id:"1-get-recupera-datos-del-servidor",children:"1. GET: Recupera Datos del Servidor"}),"\n",(0,n.jsx)(a.p,{children:"El m\xe9todo GET es uno de los m\xe9todos HTTP m\xe1s utilizados y su prop\xf3sito principal es recuperar datos del servidor sin causar efectos secundarios. En el contexto de las APIs REST, GET se utiliza para solicitar la representaci\xf3n de un recurso espec\xedfico, y es seguro y idempotente, lo que significa que m\xfaltiples solicitudes id\xe9nticas no deben causar ning\xfan cambio en el estado del servidor."}),"\n",(0,n.jsx)(a.h3,{id:"ejemplo-b\xe1sico-de-get-en-javascript",children:"Ejemplo B\xe1sico de GET en JavaScript"}),"\n",(0,n.jsx)(a.p,{children:"Para ilustrar el uso del m\xe9todo GET, consideremos el siguiente ejemplo en JavaScript utilizando la API Fetch."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'fetch("<https://api.example.com/data>")\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["En este ejemplo, se realiza una solicitud GET a la URL ",(0,n.jsx)(a.code,{children:"https://api.example.com/data"}),". La funci\xf3n ",(0,n.jsx)(a.code,{children:"fetch"})," devuelve una promesa que se resuelve con la respuesta del servidor. Si la respuesta es correcta (",(0,n.jsx)(a.code,{children:"response.ok"}),"), se convierte a formato JSON y se registra en la consola."]}),"\n",(0,n.jsx)(a.h3,{id:"par\xe1metros-de-consulta",children:"Par\xe1metros de Consulta"}),"\n",(0,n.jsx)(a.p,{children:"Los par\xe1metros de consulta (query parameters) se utilizan para filtrar y especificar los datos que se desean recuperar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const queryParams = new URLSearchParams({\n  search: "JavaScript",\n  limit: 10,\n});\n\nfetch(`https://api.example.com/search?${queryParams}`)\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["En este ejemplo, se a\xf1aden par\xe1metros de consulta (",(0,n.jsx)(a.code,{children:"search"})," y ",(0,n.jsx)(a.code,{children:"limit"}),") a la URL para especificar los criterios de b\xfasqueda y el n\xfamero m\xe1ximo de resultados."]}),"\n",(0,n.jsx)(a.h3,{id:"encabezados-de-solicitud",children:"Encabezados de Solicitud"}),"\n",(0,n.jsx)(a.p,{children:"A veces es necesario incluir encabezados adicionales en las solicitudes GET, como autenticaci\xf3n o tipo de contenido."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'fetch("<https://api.example.com/data>", {\n  method: "GET",\n  headers: {\n    Authorization: "Bearer token",\n    "Content-Type": "application/json",\n  },\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsx)(a.p,{children:"En este ejemplo, se a\xf1aden encabezados para la autorizaci\xf3n y el tipo de contenido."}),"\n",(0,n.jsx)(a.h2,{id:"2-post-env\xeda-nuevos-datos-al-servidor",children:"2. POST: Env\xeda Nuevos Datos al Servidor"}),"\n",(0,n.jsx)(a.p,{children:"El m\xe9todo POST se utiliza para enviar nuevos datos al servidor, t\xedpicamente para crear nuevos recursos. A diferencia de GET, POST no es idempotente, lo que significa que enviar la misma solicitud varias veces puede tener efectos diferentes, como crear m\xfaltiples recursos."}),"\n",(0,n.jsx)(a.h3,{id:"ejemplo-b\xe1sico-de-post-en-javascript",children:"Ejemplo B\xe1sico de POST en JavaScript"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const data = {\n  name: "John Doe",\n  email: "john.doe@example.com",\n};\n\nfetch("<https://api.example.com/users>", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify(data),\n})\n  .then((response) => response.json())\n  .then((data) => console.log("User created:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["En este ejemplo, se env\xedan datos JSON al servidor para crear un nuevo usuario. Los datos se env\xedan en el cuerpo de la solicitud (",(0,n.jsx)(a.code,{children:"body"}),"), y el tipo de contenido se especifica como ",(0,n.jsx)(a.code,{children:"application/json"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"env\xedo-de-formularios",children:"Env\xedo de Formularios"}),"\n",(0,n.jsx)(a.p,{children:"El m\xe9todo POST tambi\xe9n se utiliza com\xfanmente para enviar datos de formularios."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const formData = new FormData();\nformData.append("username", "johndoe");\nformData.append("password", "password123");\n\nfetch("<https://api.example.com/login>", {\n  method: "POST",\n  body: formData,\n})\n  .then((response) => response.json())\n  .then((data) => console.log("Login success:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["En este ejemplo, se utiliza ",(0,n.jsx)(a.code,{children:"FormData"})," para enviar datos de un formulario de inicio de sesi\xf3n al servidor."]}),"\n",(0,n.jsx)(a.h3,{id:"archivos",children:"Archivos"}),"\n",(0,n.jsx)(a.p,{children:"La carga de archivos tambi\xe9n se realiza a menudo utilizando el m\xe9todo POST."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const fileInput = document.querySelector(\'input[type="file"]\');\nconst formData = new FormData();\nformData.append("file", fileInput.files[0]);\n\nfetch("<https://api.example.com/upload>", {\n  method: "POST",\n  body: formData,\n})\n  .then((response) => response.json())\n  .then((data) => console.log("File uploaded:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["En este ejemplo, se selecciona un archivo de un elemento de entrada de archivo y se env\xeda al servidor utilizando ",(0,n.jsx)(a.code,{children:"FormData"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"3-put-actualiza-datos-existentes-en-el-servidor",children:"3. PUT: Actualiza Datos Existentes en el Servidor"}),"\n",(0,n.jsx)(a.p,{children:"El m\xe9todo PUT se utiliza para actualizar recursos existentes en el servidor. Es idempotente, lo que significa que realizar la misma solicitud varias veces tendr\xe1 el mismo efecto que realizarla una sola vez. Normalmente, PUT reemplaza completamente el recurso especificado con los datos proporcionados."}),"\n",(0,n.jsx)(a.h3,{id:"ejemplo-b\xe1sico-de-put-en-javascript",children:"Ejemplo B\xe1sico de PUT en JavaScript"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const data = {\n  name: "Jane Doe",\n  email: "jane.doe@example.com",\n};\n\nfetch("<https://api.example.com/users/1>", {\n  method: "PUT",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify(data),\n})\n  .then((response) => response.json())\n  .then((data) => console.log("User updated:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["En este ejemplo, se actualizan los datos del usuario con ID 1. Los nuevos datos se env\xedan en el cuerpo de la solicitud, y se especifica el tipo de contenido como ",(0,n.jsx)(a.code,{children:"application/json"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"comparaci\xf3n-con-patch",children:"Comparaci\xf3n con PATCH"}),"\n",(0,n.jsx)(a.p,{children:"A diferencia de PATCH, PUT reemplaza completamente el recurso especificado. Si solo se desean realizar cambios parciales, PATCH es m\xe1s apropiado."}),"\n",(0,n.jsx)(a.h2,{id:"4-delete-elimina-datos-del-servidor",children:"4. DELETE: Elimina Datos del Servidor"}),"\n",(0,n.jsx)(a.p,{children:"El m\xe9todo DELETE se utiliza para eliminar recursos del servidor. Es idempotente, lo que significa que realizar la misma solicitud varias veces tendr\xe1 el mismo efecto que realizarla una sola vez."}),"\n",(0,n.jsx)(a.h3,{id:"ejemplo-b\xe1sico-de-delete-en-javascript",children:"Ejemplo B\xe1sico de DELETE en JavaScript"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'fetch("<https://api.example.com/users/1>", {\n  method: "DELETE",\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    console.log("User deleted");\n  })\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsx)(a.p,{children:"En este ejemplo, se elimina el usuario con ID 1. No se requiere un cuerpo de solicitud para DELETE."}),"\n",(0,n.jsx)(a.h3,{id:"manejo-de-respuestas",children:"Manejo de Respuestas"}),"\n",(0,n.jsx)(a.p,{children:"Algunas APIs pueden devolver una respuesta con detalles adicionales sobre la eliminaci\xf3n."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'fetch("<https://api.example.com/users/1>", {\n  method: "DELETE",\n})\n  .then((response) => response.json())\n  .then((data) => console.log("User deleted:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsx)(a.p,{children:"En este ejemplo, se maneja la respuesta JSON que proporciona detalles adicionales sobre la eliminaci\xf3n del recurso."}),"\n",(0,n.jsx)(a.h2,{id:"5-patch-aplica-actualizaciones-parciales-a-los-datos",children:"5. PATCH: Aplica Actualizaciones Parciales a los Datos"}),"\n",(0,n.jsx)(a.p,{children:"El m\xe9todo PATCH se utiliza para aplicar actualizaciones parciales a un recurso. A diferencia de PUT, que reemplaza completamente el recurso, PATCH permite modificar solo los campos especificados."}),"\n",(0,n.jsx)(a.h3,{id:"ejemplo-b\xe1sico-de-patch-en-javascript",children:"Ejemplo B\xe1sico de PATCH en JavaScript"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const data = {\n  email: "jane.doe@newdomain.com",\n};\n\nfetch("<https://api.example.com/users/1>", {\n  method: "PATCH",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify(data),\n})\n  .then((response) => response.json())\n  .then((data) => console.log("User partially updated:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsx)(a.p,{children:"En este ejemplo, solo se actualiza el campo de correo electr\xf3nico del usuario con ID 1, manteniendo el resto de los datos intactos."}),"\n",(0,n.jsx)(a.h3,{id:"uso-de-json-patch",children:"Uso de JSON Patch"}),"\n",(0,n.jsx)(a.p,{children:"JSON Patch es un formato est\xe1ndar para describir una serie de operaciones que deben aplicarse a un documento JSON."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-jsx",children:'const patchData = [\n  { op: "replace", path: "/email", value: "jane.doe@newdomain.com" },\n];\n\nfetch("<https://api.example.com/users/1>", {\n  method: "PATCH",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify(patchData),\n})\n  .then((response) => response.json())\n  .then((data) => console.log("User partially updated with JSON Patch:", data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,n.jsx)(a.p,{children:"En este ejemplo, se utiliza JSON Patch para actualizar el campo de correo electr\xf3nico."}),"\n",(0,n.jsx)(a.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,n.jsx)(a.p,{children:"Comprender los m\xe9todos HTTP en las APIs REST es fundamental para cualquier desarrollador web. Cada m\xe9todo tiene un prop\xf3sito espec\xedfico y se utiliza para diferentes operaciones CRUD"}),"\n",(0,n.jsx)(a.p,{children:". En este documento, hemos explorado en detalle los m\xe9todos GET, POST, PUT, DELETE y PATCH, proporcionando ejemplos pr\xe1cticos de su implementaci\xf3n en JavaScript."}),"\n",(0,n.jsx)(a.h3,{id:"resumen-de-m\xe9todos-http",children:"Resumen de M\xe9todos HTTP"}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"GET"}),": Utilizado para recuperar datos del servidor. Es seguro e idempotente."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"POST"}),": Utilizado para enviar nuevos datos al servidor. No es idempotente."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"PUT"}),": Utilizado para actualizar recursos existentes, reemplaz\xe1ndolos completamente. Es idempotente."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"DELETE"}),": Utilizado para eliminar recursos del servidor. Es idempotente."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"PATCH"}),": Utilizado para aplicar actualizaciones parciales a un recurso. No es idempotente pero permite modificaciones precisas."]}),"\n"]}),"\n",(0,n.jsx)(a.h3,{id:"pr\xe1cticas-recomendadas",children:"Pr\xe1cticas Recomendadas"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Seguridad"}),": Siempre proteger las API con mecanismos de autenticaci\xf3n y autorizaci\xf3n adecuados."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Validaci\xf3n"}),": Validar los datos enviados al servidor para evitar inconsistencias y errores."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Documentaci\xf3n"}),": Documentar las APIs de manera clara y detallada para facilitar su uso por otros desarrolladores."]}),"\n"]}),"\n",(0,n.jsx)(a.h3,{id:"futuras-consideraciones",children:"Futuras Consideraciones"}),"\n",(0,n.jsx)(a.p,{children:"El campo del desarrollo web est\xe1 en constante evoluci\xf3n. Tecnolog\xedas emergentes y nuevas pr\xe1cticas pueden cambiar la manera en que interactuamos con las APIs. Mantenerse actualizado con las mejores pr\xe1cticas y nuevas herramientas es crucial para el \xe9xito continuo en el desarrollo de aplicaciones web."}),"\n",(0,n.jsx)(a.p,{children:"Con este conocimiento, los desarrolladores est\xe1n mejor equipados para crear y mantener APIs REST eficientes y efectivas, aprovechando todo el potencial de los m\xe9todos HTTP en JavaScript."})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>t});var o=s(6540);const n={},r=o.createContext(n);function i(e){const a=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:a},e.children)}}}]);