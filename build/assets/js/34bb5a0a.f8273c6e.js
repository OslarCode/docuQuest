"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[49],{6087:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>t});const a=JSON.parse('{"id":"js/typeof","title":"Typeof","description":"El operador typeof es una herramienta fundamental en JavaScript que permite determinar el tipo de dato de una variable o expresi\xf3n. Este operador devuelve una cadena de texto que representa el tipo de dato del valor especificado, lo que facilita la escritura de c\xf3digo flexible y robusto al permitir la ejecuci\xf3n de acciones espec\xedficas seg\xfan el tipo de datos involucrado.","source":"@site/docs/js/typeof.md","sourceDirName":"js","slug":"/js/typeof","permalink":"/docuQuest/docs/js/typeof","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/typeof.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sets","permalink":"/docuQuest/docs/js/sets"},"next":{"title":"Expresiones Regulares","permalink":"/docuQuest/docs/js/expresionesRegulares"}}');var i=n(4848),s=n(8453);const r={},d="Typeof",l={},t=[{value:"Introducci\xf3n al Operador typeof en JavaScript",id:"introducci\xf3n-al-operador-typeof-en-javascript",level:2},{value:"Funcionamiento del Operador typeof",id:"funcionamiento-del-operador-typeof",level:2},{value:"Sintaxis del Operador typeof",id:"sintaxis-del-operador-typeof",level:3},{value:"Tipos de Datos Devueltos por typeof",id:"tipos-de-datos-devueltos-por-typeof",level:3},{value:"Ejemplos de Uso del Operador typeof",id:"ejemplos-de-uso-del-operador-typeof",level:3},{value:"Consideraciones Especiales",id:"consideraciones-especiales",level:2},{value:"Conclusiones",id:"conclusiones",level:2}];function c(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"typeof",children:"Typeof"})}),"\n",(0,i.jsx)(o.h1,{id:"el-operador-typeof-en-javascript-introducci\xf3n-y-funcionamiento",children:"El Operador typeof en JavaScript: Introducci\xf3n y Funcionamiento"}),"\n",(0,i.jsxs)(o.p,{children:["El operador ",(0,i.jsx)(o.code,{children:"typeof"})," es una herramienta fundamental en JavaScript que permite determinar el tipo de dato de una variable o expresi\xf3n. Este operador devuelve una cadena de texto que representa el tipo de dato del valor especificado, lo que facilita la escritura de c\xf3digo flexible y robusto al permitir la ejecuci\xf3n de acciones espec\xedficas seg\xfan el tipo de datos involucrado."]}),"\n",(0,i.jsx)(o.h2,{id:"introducci\xf3n-al-operador-typeof-en-javascript",children:"Introducci\xf3n al Operador typeof en JavaScript"}),"\n",(0,i.jsxs)(o.p,{children:["JavaScript es un lenguaje de programaci\xf3n din\xe1mico y de tipado d\xe9bil, lo que significa que las variables no est\xe1n asociadas a un tipo de datos espec\xedfico y pueden contener diferentes tipos de datos en diferentes momentos durante la ejecuci\xf3n del programa. En este contexto, el operador ",(0,i.jsx)(o.code,{children:"typeof"})," se convierte en una herramienta esencial para realizar operaciones condicionales y tomar decisiones basadas en el tipo de datos con el que se est\xe1 trabajando."]}),"\n",(0,i.jsx)(o.h2,{id:"funcionamiento-del-operador-typeof",children:"Funcionamiento del Operador typeof"}),"\n",(0,i.jsxs)(o.p,{children:["El operador ",(0,i.jsx)(o.code,{children:"typeof"})," se utiliza para determinar el tipo de dato de una variable o expresi\xf3n en JavaScript. Puede aplicarse a cualquier tipo de dato, incluyendo valores primitivos y objetos. Cuando se aplica a una variable o expresi\xf3n, el operador ",(0,i.jsx)(o.code,{children:"typeof"})," devuelve una cadena de texto que indica el tipo de dato de la variable o expresi\xf3n evaluada."]}),"\n",(0,i.jsx)(o.h3,{id:"sintaxis-del-operador-typeof",children:"Sintaxis del Operador typeof"}),"\n",(0,i.jsxs)(o.p,{children:["La sintaxis b\xe1sica del operador ",(0,i.jsx)(o.code,{children:"typeof"})," es la siguiente:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-jsx",children:"typeof variable;\n\n"})}),"\n",(0,i.jsxs)(o.p,{children:["Donde ",(0,i.jsx)(o.code,{children:"variable"})," es la variable o expresi\xf3n cuyo tipo de dato se desea conocer."]}),"\n",(0,i.jsx)(o.h3,{id:"tipos-de-datos-devueltos-por-typeof",children:"Tipos de Datos Devueltos por typeof"}),"\n",(0,i.jsxs)(o.p,{children:["El operador ",(0,i.jsx)(o.code,{children:"typeof"})," devuelve una de las siguientes cadenas de texto que representan los diferentes tipos de datos en JavaScript:"]}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"undefined"'}),": Indica que la variable o expresi\xf3n no est\xe1 definida o no tiene un valor asignado."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"boolean"'}),": Indica que la variable o expresi\xf3n es de tipo booleano."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"number"'}),": Indica que la variable o expresi\xf3n es de tipo num\xe9rico."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"string"'}),": Indica que la variable o expresi\xf3n es de tipo cadena de texto."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"object"'}),": Indica que la variable o expresi\xf3n es un objeto (excepto para valores ",(0,i.jsx)(o.code,{children:"null"}),")."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"function"'}),": Indica que la variable o expresi\xf3n es de tipo funci\xf3n."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:'"symbol"'}),": Indica que la variable o expresi\xf3n es de tipo s\xedmbolo (introducido en ECMAScript 6)."]}),"\n"]}),"\n",(0,i.jsx)(o.h3,{id:"ejemplos-de-uso-del-operador-typeof",children:"Ejemplos de Uso del Operador typeof"}),"\n",(0,i.jsxs)(o.p,{children:["A continuaci\xf3n, se presentan algunos ejemplos de uso del operador ",(0,i.jsx)(o.code,{children:"typeof"})," en JavaScript:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-jsx",children:'let x;\nconsole.log(typeof x); // Devuelve "undefined"\n\nlet y = 10;\nconsole.log(typeof y); // Devuelve "number"\n\nlet z = "Hola";\nconsole.log(typeof z); // Devuelve "string"\n\nlet objeto = {};\nconsole.log(typeof objeto); // Devuelve "object"\n\nlet funcion = function () {};\nconsole.log(typeof funcion); // Devuelve "function"\n\n'})}),"\n",(0,i.jsxs)(o.p,{children:["En estos ejemplos, el operador ",(0,i.jsx)(o.code,{children:"typeof"})," se aplica a diferentes variables y expresiones para determinar sus tipos de datos correspondientes."]}),"\n",(0,i.jsx)(o.h2,{id:"consideraciones-especiales",children:"Consideraciones Especiales"}),"\n",(0,i.jsxs)(o.p,{children:["Es importante tener en cuenta algunas consideraciones especiales al utilizar el operador ",(0,i.jsx)(o.code,{children:"typeof"})," en JavaScript:"]}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["El operador ",(0,i.jsx)(o.code,{children:"typeof"})," devuelve ",(0,i.jsx)(o.code,{children:'"object"'})," para valores de tipo objeto, excepto para valores ",(0,i.jsx)(o.code,{children:"null"}),", que devuelve ",(0,i.jsx)(o.code,{children:'"object"'}),". Esto se debe a una peculiaridad en la implementaci\xf3n original de JavaScript y puede generar confusiones en algunos casos."]}),"\n",(0,i.jsxs)(o.li,{children:["El operador ",(0,i.jsx)(o.code,{children:"typeof"})," no distingue entre diferentes tipos de objetos, como objetos regulares, arrays, o instancias de clases. Todos estos tipos de objetos devuelven ",(0,i.jsx)(o.code,{children:'"object"'})," cuando se aplica el operador ",(0,i.jsx)(o.code,{children:"typeof"}),"."]}),"\n",(0,i.jsxs)(o.li,{children:["El operador ",(0,i.jsx)(o.code,{children:"typeof"})," es \xfatil para verificar si una variable est\xe1 definida y tiene un valor asignado, especialmente al tratar con variables que pueden ser ",(0,i.jsx)(o.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,i.jsxs)(o.p,{children:["En resumen, el operador ",(0,i.jsx)(o.code,{children:"typeof"})," es una herramienta esencial en JavaScript para determinar el tipo de datos de una variable o expresi\xf3n. Proporciona una forma conveniente de realizar operaciones condicionales y tomar decisiones basadas en el tipo de datos involucrado. Con su capacidad para identificar diferentes tipos de datos, el operador ",(0,i.jsx)(o.code,{children:"typeof"})," es una herramienta valiosa en el arsenal de cualquier programador de JavaScript, permitiendo escribir c\xf3digo m\xe1s robusto y flexible. Sin embargo, es importante tener en cuenta sus peculiaridades y consideraciones especiales para evitar confusiones y errores en la programaci\xf3n."]})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>d});var a=n(6540);const i={},s=a.createContext(i);function r(e){const o=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:o},e.children)}}}]);