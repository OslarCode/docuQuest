"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[6751],{30:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>t});const a=JSON.parse('{"id":"js/generators","title":"Generators","description":"En el mundo de la programaci\xf3n, especialmente en el \xe1mbito de JavaScript, los Generators son una caracter\xedstica poderosa que permite la creaci\xf3n de iteradores personalizados de manera eficiente y elegante. En este texto, exploraremos en profundidad qu\xe9 son y c\xf3mo funcionan los Generators en JavaScript, centr\xe1ndonos en su importancia y su papel en el desarrollo de aplicaciones avanzadas.","source":"@site/docs/js/generators.md","sourceDirName":"js","slug":"/js/generators","permalink":"/docuQuest/docs/js/generators","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/generators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Operaciones as\xedncronas comunes (Ajax VS Fetch)","permalink":"/docuQuest/docs/js/asincronia/operacionesAsincronas"},"next":{"title":"Proxies","permalink":"/docuQuest/docs/js/proxies"}}');var o=r(4848),s=r(8453);const i={},l="Generators",c={},t=[{value:"<strong>Introducci\xf3n a los Generators en JavaScript</strong>",id:"introducci\xf3n-a-los-generators-en-javascript",level:2},{value:"<strong>Caracter\xedsticas Principales de los Generators</strong>",id:"caracter\xedsticas-principales-de-los-generators",level:3},{value:"<strong>Creaci\xf3n de un Generator en JavaScript</strong>",id:"creaci\xf3n-de-un-generator-en-javascript",level:3},{value:"<strong>Pausa y Reanudaci\xf3n de la Ejecuci\xf3n</strong>",id:"pausa-y-reanudaci\xf3n-de-la-ejecuci\xf3n",level:3},{value:"<strong>Generators como Iterables</strong>",id:"generators-como-iterables",level:3},{value:"<strong>Control de Flujo con Generators</strong>",id:"control-de-flujo-con-generators",level:3},{value:"<strong>Ejemplo pr\xe1ctico de generators</strong>",id:"ejemplo-pr\xe1ctico-de-generators",level:2},{value:"<strong>Conclusiones y Consideraciones Finales</strong>",id:"conclusiones-y-consideraciones-finales",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"generators",children:"Generators"})}),"\n",(0,o.jsx)(n.h1,{id:"conceptos-avanzados-en-javascript-generators",children:(0,o.jsx)(n.strong,{children:"Conceptos Avanzados en JavaScript: Generators"})}),"\n",(0,o.jsx)(n.p,{children:"En el mundo de la programaci\xf3n, especialmente en el \xe1mbito de JavaScript, los Generators son una caracter\xedstica poderosa que permite la creaci\xf3n de iteradores personalizados de manera eficiente y elegante. En este texto, exploraremos en profundidad qu\xe9 son y c\xf3mo funcionan los Generators en JavaScript, centr\xe1ndonos en su importancia y su papel en el desarrollo de aplicaciones avanzadas."}),"\n",(0,o.jsx)(n.h2,{id:"introducci\xf3n-a-los-generators-en-javascript",children:(0,o.jsx)(n.strong,{children:"Introducci\xf3n a los Generators en JavaScript"})}),"\n",(0,o.jsx)(n.p,{children:"Los Generators son una caracter\xedstica introducida en ECMAScript 2015 (ES6) que proporciona una forma sencilla de crear iteradores personalizados en JavaScript. Permiten pausar y reanudar la ejecuci\xf3n de una funci\xf3n, lo que facilita la implementaci\xf3n de algoritmos complejos y el control preciso sobre el flujo de ejecuci\xf3n."}),"\n",(0,o.jsx)(n.h3,{id:"caracter\xedsticas-principales-de-los-generators",children:(0,o.jsx)(n.strong,{children:"Caracter\xedsticas Principales de los Generators"})}),"\n",(0,o.jsx)(n.p,{children:"Antes de profundizar en c\xf3mo funcionan los Generators en JavaScript, es importante comprender algunas de sus caracter\xedsticas clave:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pausa y Reanudaci\xf3n"}),": Los Generators permiten pausar la ejecuci\xf3n de una funci\xf3n utilizando la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield"}),"\xa0y luego reanudarla en el punto donde se detuvo."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Iterables"}),": Los Generators pueden utilizarse para crear iterables personalizados, lo que facilita la creaci\xf3n de estructuras de datos iterables como listas, \xe1rboles y grafos."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Control de Flujo"}),": Los Generators proporcionan un control preciso sobre el flujo de ejecuci\xf3n, lo que permite implementar algoritmos complejos de una manera m\xe1s clara y legible."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"creaci\xf3n-de-un-generator-en-javascript",children:(0,o.jsx)(n.strong,{children:"Creaci\xf3n de un Generator en JavaScript"})}),"\n",(0,o.jsxs)(n.p,{children:["Veamos c\xf3mo se puede crear un Generator en JavaScript utilizando la funci\xf3n generadora (",(0,o.jsx)(n.code,{children:"function*"}),") y la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Definir un Generator\nfunction* miGenerator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\n// Crear una instancia del Generator\nconst generador = miGenerator();\n\n// Obtener valores del Generator\nconsole.log(generador.next().value); // Imprime: 1\nconsole.log(generador.next().value); // Imprime: 2\nconsole.log(generador.next().value); // Imprime: 3\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, definimos un Generator llamado\xa0",(0,o.jsx)(n.code,{children:"miGenerator"}),"\xa0utilizando la funci\xf3n generadora (",(0,o.jsx)(n.code,{children:"function*"}),"). Dentro del Generator, utilizamos la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield"}),"\xa0para pausar la ejecuci\xf3n y devolver un valor. Luego, creamos una instancia del Generator y utilizamos el m\xe9todo\xa0",(0,o.jsx)(n.code,{children:"next()"}),"\xa0para obtener cada valor del Generator secuencialmente."]}),"\n",(0,o.jsx)(n.h3,{id:"pausa-y-reanudaci\xf3n-de-la-ejecuci\xf3n",children:(0,o.jsx)(n.strong,{children:"Pausa y Reanudaci\xf3n de la Ejecuci\xf3n"})}),"\n",(0,o.jsxs)(n.p,{children:["Una de las caracter\xedsticas m\xe1s poderosas de los Generators es la capacidad de pausar y reanudar la ejecuci\xf3n de una funci\xf3n. Esto se logra utilizando la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield"}),", que detiene la ejecuci\xf3n y devuelve un valor, y el m\xe9todo\xa0",(0,o.jsx)(n.code,{children:"next()"}),", que reanuda la ejecuci\xf3n desde el punto donde se detuvo."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Definir un Generator\nfunction* contador() {\n  let i = 0;\n  while (true) {\n    yield i++;\n  }\n}\n\n// Crear una instancia del Generator\nconst generadorContador = contador();\n\n// Obtener valores del Generator\nconsole.log(generadorContador.next().value); // Imprime: 0\nconsole.log(generadorContador.next().value); // Imprime: 1\nconsole.log(generadorContador.next().value); // Imprime: 2\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, definimos un Generator llamado\xa0",(0,o.jsx)(n.code,{children:"contador"}),"\xa0que produce una secuencia infinita de n\xfameros crecientes. Utilizamos un bucle\xa0",(0,o.jsx)(n.code,{children:"while"}),"\xa0junto con la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield"}),"\xa0para pausar la ejecuci\xf3n y devolver el valor de\xa0",(0,o.jsx)(n.code,{children:"i"}),"\xa0en cada iteraci\xf3n."]}),"\n",(0,o.jsx)(n.h3,{id:"generators-como-iterables",children:(0,o.jsx)(n.strong,{children:"Generators como Iterables"})}),"\n",(0,o.jsx)(n.p,{children:"Los Generators pueden utilizarse para crear iterables personalizados en JavaScript, lo que facilita la creaci\xf3n y manipulaci\xf3n de estructuras de datos iterables como listas, \xe1rboles y grafos."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Definir un Generator para un iterable personalizado\nfunction* miIterable() {\n  yield "a";\n  yield "b";\n  yield "c";\n}\n\n// Crear un iterable a partir del Generator\nconst iterable = [...miIterable()];\n\n// Iterar sobre el iterable\nfor (const valor of iterable) {\n  console.log(valor);\n}\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, definimos un Generator llamado\xa0",(0,o.jsx)(n.code,{children:"miIterable"}),"\xa0que produce una secuencia de letras. Luego, utilizamos el operador spread (",(0,o.jsx)(n.code,{children:"..."}),") para crear un iterable a partir del Generator y lo recorremos utilizando un bucle\xa0",(0,o.jsx)(n.code,{children:"for...of"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"control-de-flujo-con-generators",children:(0,o.jsx)(n.strong,{children:"Control de Flujo con Generators"})}),"\n",(0,o.jsx)(n.p,{children:"Los Generators proporcionan un control de flujo preciso, lo que permite implementar algoritmos complejos de una manera m\xe1s clara y legible. Veamos un ejemplo de c\xf3mo se puede utilizar un Generator para implementar un algoritmo de b\xfasqueda en profundidad (DFS) en un \xe1rbol:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Definir un \xe1rbol como una estructura de datos\nconst arbol = {\n  valor: "A",\n  hijos: [\n    {\n      valor: "B",\n      hijos: [\n        { valor: "D", hijos: [] },\n        { valor: "E", hijos: [] },\n      ],\n    },\n    {\n      valor: "C",\n      hijos: [\n        { valor: "F", hijos: [] },\n        { valor: "G", hijos: [] },\n      ],\n    },\n  ],\n};\n\n// Generator para el recorrido en profundidad (DFS) del \xe1rbol\nfunction* dfs(arbol) {\n  yield arbol.valor;\n  for (const hijo of arbol.hijos) {\n    yield* dfs(hijo);\n  }\n}\n\n// Iterar sobre el resultado del DFS\nfor (const nodo of dfs(arbol)) {\n  console.log(nodo);\n}\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, definimos un \xe1rbol como una estructura de datos anidada y utilizamos un Generator llamado\xa0",(0,o.jsx)(n.code,{children:"dfs"}),"\xa0para realizar un recorrido en profundidad (DFS) del \xe1rbol. Utilizamos la recursi\xf3n para recorrer cada nodo del \xe1rbol y la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield*"}),"\xa0para delegar la ejecuci\xf3n a otro Generator cuando se encuentran hijos."]}),"\n",(0,o.jsx)(n.h2,{id:"ejemplo-pr\xe1ctico-de-generators",children:(0,o.jsx)(n.strong,{children:"Ejemplo pr\xe1ctico de generators"})}),"\n",(0,o.jsx)(n.p,{children:"Supongamos que necesitamos generar una secuencia infinita de n\xfameros pares utilizando un Generator. Podemos implementarlo de la siguiente manera:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Funci\xf3n generadora para generar n\xfameros pares\nfunction* numerosPares() {\n  let numero = 0;\n  while (true) {\n    yield numero;\n    numero += 2;\n  }\n}\n\n// Crear una instancia del Generator\nconst generadorNumerosPares = numerosPares();\n\n// Obtener los primeros 5 n\xfameros pares\nfor (let i = 0; i < 5; i++) {\n  console.log(generadorNumerosPares.next().value);\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, creamos una funci\xf3n generadora llamada\xa0",(0,o.jsx)(n.code,{children:"numerosPares"}),"\xa0que genera una secuencia infinita de n\xfameros pares. Utilizamos un bucle\xa0",(0,o.jsx)(n.code,{children:"while (true)"}),"\xa0para continuar generando n\xfameros pares indefinidamente, y la palabra clave\xa0",(0,o.jsx)(n.code,{children:"yield"}),"\xa0para pausar la ejecuci\xf3n y devolver el n\xfamero actual en la secuencia. Luego, creamos una instancia del Generator y utilizamos el m\xe9todo\xa0",(0,o.jsx)(n.code,{children:"next()"}),"\xa0para obtener los primeros 5 n\xfameros pares de la secuencia."]}),"\n",(0,o.jsx)(n.p,{children:"Este ejemplo ilustra c\xf3mo los Generators pueden utilizarse para generar secuencias infinitas de manera eficiente y controlada. La capacidad de pausar y reanudar la ejecuci\xf3n de una funci\xf3n hace que los Generators sean una herramienta poderosa para la creaci\xf3n de iteradores personalizados en JavaScript."}),"\n",(0,o.jsx)(n.h2,{id:"conclusiones-y-consideraciones-finales",children:(0,o.jsx)(n.strong,{children:"Conclusiones y Consideraciones Finales"})}),"\n",(0,o.jsx)(n.p,{children:"En conclusi\xf3n, los Generators son una caracter\xedstica poderosa en JavaScript que permite crear iteradores personalizados de manera eficiente y elegante. Permiten pausar y reanudar la ejecuci\xf3n de una funci\xf3n, lo que facilita la implementaci\xf3n de algoritmos complejos y el control preciso sobre el flujo de ejecuci\xf3n."}),"\n",(0,o.jsx)(n.p,{children:"Al comprender y utilizar correctamente los Generators en JavaScript, los desarrolladores pueden mejorar la eficiencia y la legibilidad de su c\xf3digo, proporcionando una forma m\xe1s clara y concisa de implementar algoritmos y manipular datos."}),"\n",(0,o.jsx)(n.p,{children:"Espero que este texto haya proporcionado una comprensi\xf3n profunda de los Gener"}),"\n",(0,o.jsx)(n.p,{children:"ators en JavaScript y c\xf3mo se pueden utilizar para crear iteradores personalizados y controlar el flujo de ejecuci\xf3n de manera efectiva. Con este conocimiento, podr\xe1s dise\xf1ar y desarrollar aplicaciones m\xe1s avanzadas y eficientes en JavaScript."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var a=r(6540);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);