"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[7843],{2017:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"js/api/autenticacionAutorizacion","title":"Autenticaci\xf3n y Autorizaci\xf3n","description":"Introducci\xf3n","source":"@site/docs/js/api/autenticacionAutorizacion.md","sourceDirName":"js/api","slug":"/js/api/autenticacionAutorizacion","permalink":"/docuQuest/docs/js/api/autenticacionAutorizacion","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/api/autenticacionAutorizacion.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Async/Await","permalink":"/docuQuest/docs/js/api/asyncAwait"},"next":{"title":"Casos de uso avanzados","permalink":"/docuQuest/docs/js/api/casosAvanzados"}}');var i=s(4848),o=s(8453);const r={},c="Autenticaci\xf3n y Autorizaci\xf3n",t={},l=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"M\xe9todos Comunes de Autenticaci\xf3n y Autorizaci\xf3n",id:"m\xe9todos-comunes-de-autenticaci\xf3n-y-autorizaci\xf3n",level:2},{value:"API Keys",id:"api-keys",level:3},{value:"Definici\xf3n y Funcionamiento",id:"definici\xf3n-y-funcionamiento",level:3},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas",level:3},{value:"Ejemplo de Uso",id:"ejemplo-de-uso",level:3},{value:"Tokens (JWT)",id:"tokens-jwt",level:3},{value:"Definici\xf3n y Funcionamiento",id:"definici\xf3n-y-funcionamiento-1",level:3},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas-1",level:3},{value:"Ejemplo de Uso con JWT",id:"ejemplo-de-uso-con-jwt",level:3},{value:"OAuth",id:"oauth",level:3},{value:"Definici\xf3n y Funcionamiento",id:"definici\xf3n-y-funcionamiento-2",level:3},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas-2",level:3},{value:"Ejemplo de Uso",id:"ejemplo-de-uso-1",level:3},{value:"Implementaci\xf3n de JWT (JSON Web Tokens)",id:"implementaci\xf3n-de-jwt-json-web-tokens",level:2},{value:"Introducci\xf3n a JWT",id:"introducci\xf3n-a-jwt",level:3},{value:"Generaci\xf3n y Validaci\xf3n de JWT",id:"generaci\xf3n-y-validaci\xf3n-de-jwt",level:3},{value:"Paso 1: Instalaci\xf3n de Dependencias",id:"paso-1-instalaci\xf3n-de-dependencias",level:3},{value:"Paso 2: Configuraci\xf3n del Servidor para Emitir Tokens",id:"paso-2-configuraci\xf3n-del-servidor-para-emitir-tokens",level:3},{value:"Paso 3: Validaci\xf3n de Tokens en Solicitudes Subsecuentes",id:"paso-3-validaci\xf3n-de-tokens-en-solicitudes-subsecuentes",level:3},{value:"Ejemplo de Cliente JavaScript",id:"ejemplo-de-cliente-javascript",level:3},{value:"Consideraciones de Seguridad",id:"consideraciones-de-seguridad",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"autenticaci\xf3n-y-autorizaci\xf3n",children:"Autenticaci\xf3n y Autorizaci\xf3n"})}),"\n",(0,i.jsx)(n.h1,{id:"autenticaci\xf3n-y-autorizaci\xf3n-en-las-apis-rest-de-javascript-para-p\xe1ginas-web",children:"Autenticaci\xf3n y Autorizaci\xf3n en las APIs REST de JavaScript para P\xe1ginas Web"}),"\n",(0,i.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,i.jsx)(n.p,{children:"La autenticaci\xf3n y la autorizaci\xf3n son dos pilares fundamentales que garantizan que solo los usuarios leg\xedtimos tengan acceso a los recursos adecuados. En el contexto de las APIs REST, existen varios m\xe9todos para implementar estos procesos, entre los que se destacan las API Keys, Tokens (JWT), y OAuth."}),"\n",(0,i.jsx)(n.h2,{id:"m\xe9todos-comunes-de-autenticaci\xf3n-y-autorizaci\xf3n",children:"M\xe9todos Comunes de Autenticaci\xf3n y Autorizaci\xf3n"}),"\n",(0,i.jsx)(n.h3,{id:"api-keys",children:"API Keys"}),"\n",(0,i.jsx)(n.h3,{id:"definici\xf3n-y-funcionamiento",children:"Definici\xf3n y Funcionamiento"}),"\n",(0,i.jsx)(n.p,{children:"Las API Keys son uno de los m\xe9todos m\xe1s simples para autenticar aplicaciones que consumen una API. Una API Key es una cadena \xfanica que se asigna a cada cliente que necesita acceder a la API. Esta clave se env\xeda con cada solicitud al servidor, generalmente a trav\xe9s de la URL, encabezados HTTP, o par\xe1metros de consulta."}),"\n",(0,i.jsx)(n.h3,{id:"ventajas-y-desventajas",children:"Ventajas y Desventajas"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ventajas"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simplicidad: F\xe1cil de implementar y usar."}),"\n",(0,i.jsx)(n.li,{children:"Control de Acceso: Permite rastrear y controlar el acceso a la API."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Desventajas"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Seguridad: Las claves pueden ser interceptadas si no se usan HTTPS."}),"\n",(0,i.jsx)(n.li,{children:"Limitaciones: No proporcionan un m\xe9todo robusto para la gesti\xf3n de permisos de usuarios."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-uso",children:"Ejemplo de Uso"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const apiKey = "your_api_key_here";\nconst url = `https://api.example.com/data?api_key=${apiKey}`;\n\nfetch(url)\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tokens-jwt",children:"Tokens (JWT)"}),"\n",(0,i.jsx)(n.h3,{id:"definici\xf3n-y-funcionamiento-1",children:"Definici\xf3n y Funcionamiento"}),"\n",(0,i.jsx)(n.p,{children:"Los JSON Web Tokens (JWT) son un m\xe9todo compacto y seguro para transmitir informaci\xf3n entre partes como un objeto JSON. Son particularmente \xfatiles para la autenticaci\xf3n y la autorizaci\xf3n en aplicaciones web. Un JWT se compone de tres partes: el encabezado (header), el payload, y la firma (signature)."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Header"}),": Incluye el tipo de token (JWT) y el algoritmo de encriptaci\xf3n utilizado."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Payload"}),": Contiene las declaraciones (claims), que son la informaci\xf3n que se desea transmitir, como el identificador de usuario y otros metadatos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Signature"}),": Se genera combinando el header y el payload codificados en base64, firmados con un secreto o una clave privada."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ventajas-y-desventajas-1",children:"Ventajas y Desventajas"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ventajas"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Seguridad: La firma asegura que el token no ha sido alterado."}),"\n",(0,i.jsx)(n.li,{children:"Escalabilidad: Los tokens pueden ser verificados sin necesidad de almacenar la sesi\xf3n en el servidor."}),"\n",(0,i.jsx)(n.li,{children:"Flexibilidad: Pueden incluir cualquier informaci\xf3n relevante en el payload."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Desventajas"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tama\xf1o: Los JWT pueden ser relativamente grandes."}),"\n",(0,i.jsx)(n.li,{children:"Seguridad: Si la clave privada es comprometida, todos los tokens emitidos son vulnerables."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-uso-con-jwt",children:"Ejemplo de Uso con JWT"}),"\n",(0,i.jsx)(n.p,{children:"Se detalla m\xe1s adelante en este documento."}),"\n",(0,i.jsx)(n.h3,{id:"oauth",children:"OAuth"}),"\n",(0,i.jsx)(n.h3,{id:"definici\xf3n-y-funcionamiento-2",children:"Definici\xf3n y Funcionamiento"}),"\n",(0,i.jsx)(n.p,{children:"OAuth es un protocolo de autorizaci\xf3n que permite a las aplicaciones obtener acceso limitado a los recursos de usuario en un servidor sin exponer las credenciales del usuario. Funciona delegando el acceso a trav\xe9s de tokens de acceso que tienen permisos espec\xedficos."}),"\n",(0,i.jsx)(n.h3,{id:"ventajas-y-desventajas-2",children:"Ventajas y Desventajas"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ventajas"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Seguridad: No se comparten las credenciales del usuario con las aplicaciones cliente."}),"\n",(0,i.jsx)(n.li,{children:"Control Granular: Permite otorgar permisos espec\xedficos."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Desventajas"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complejidad: Es m\xe1s complejo de implementar en comparaci\xf3n con otros m\xe9todos."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-uso-1",children:"Ejemplo de Uso"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const clientId = "your_client_id";\nconst clientSecret = "your_client_secret";\nconst redirectUri = "<https://yourapp.com/callback>";\nconst authUrl = `https://authorization-server.com/auth?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\n// Redirigir al usuario al URL de autorizaci\xf3n\nwindow.location.href = authUrl;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementaci\xf3n-de-jwt-json-web-tokens",children:"Implementaci\xf3n de JWT (JSON Web Tokens)"}),"\n",(0,i.jsx)(n.h3,{id:"introducci\xf3n-a-jwt",children:"Introducci\xf3n a JWT"}),"\n",(0,i.jsx)(n.p,{children:"Como se mencion\xf3 anteriormente, los JWT son ampliamente utilizados para la autenticaci\xf3n y la autorizaci\xf3n en aplicaciones web. Su estructura y forma de trabajo los hacen ideales para aplicaciones que requieren una autenticaci\xf3n ligera y sin estado. A continuaci\xf3n, se proporciona un ejemplo detallado de c\xf3mo implementar JWT en una aplicaci\xf3n web usando JavaScript."}),"\n",(0,i.jsx)(n.h3,{id:"generaci\xf3n-y-validaci\xf3n-de-jwt",children:"Generaci\xf3n y Validaci\xf3n de JWT"}),"\n",(0,i.jsx)(n.h3,{id:"paso-1-instalaci\xf3n-de-dependencias",children:"Paso 1: Instalaci\xf3n de Dependencias"}),"\n",(0,i.jsxs)(n.p,{children:["Para manejar JWT en una aplicaci\xf3n Node.js, es com\xfan utilizar bibliotecas como ",(0,i.jsx)(n.code,{children:"jsonwebtoken"}),". Primero, necesitamos instalar esta biblioteca."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install jsonwebtoken\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"paso-2-configuraci\xf3n-del-servidor-para-emitir-tokens",children:"Paso 2: Configuraci\xf3n del Servidor para Emitir Tokens"}),"\n",(0,i.jsx)(n.p,{children:"En este paso, configuramos un servidor Express para emitir tokens JWT cuando un usuario inicia sesi\xf3n correctamente."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const express = require("express");\nconst jwt = require("jsonwebtoken");\nconst bodyParser = require("body-parser");\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.json());\n\nconst users = [\n  { id: 1, username: "user1", password: "password1" },\n  { id: 2, username: "user2", password: "password2" },\n];\n\nconst secretKey = "your_secret_key";\n\napp.post("/login", (req, res) => {\n  const { username, password } = req.body;\n\n  const user = users.find(\n    (u) => u.username === username && u.password === password\n  );\n  if (user) {\n    const token = jwt.sign(\n      { id: user.id, username: user.username },\n      secretKey,\n      { expiresIn: "1h" }\n    );\n    res.json({ token });\n  } else {\n    res.status(401).send("Invalid credentials");\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Server running at <http://localhost>:${port}/`);\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"En este c\xf3digo:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Configuramos un servidor Express que escucha en el puerto 3000."}),"\n",(0,i.jsxs)(n.li,{children:["Utilizamos ",(0,i.jsx)(n.code,{children:"body-parser"})," para manejar las solicitudes JSON."]}),"\n",(0,i.jsxs)(n.li,{children:["Definimos un endpoint ",(0,i.jsx)(n.code,{children:"/login"})," que emite un token JWT si las credenciales son v\xe1lidas."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"paso-3-validaci\xf3n-de-tokens-en-solicitudes-subsecuentes",children:"Paso 3: Validaci\xf3n de Tokens en Solicitudes Subsecuentes"}),"\n",(0,i.jsx)(n.p,{children:"Una vez que un cliente tiene un token, puede incluirlo en las solicitudes a endpoints protegidos. Configuramos middleware en el servidor para validar estos tokens."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const authenticateToken = (req, res, next) => {\n  const authHeader = req.headers["authorization"];\n  const token = authHeader && authHeader.split(" ")[1];\n\n  if (token == null) return res.sendStatus(401);\n\n  jwt.verify(token, secretKey, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n\napp.get("/protected", authenticateToken, (req, res) => {\n  res.send("This is a protected route");\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"En este c\xf3digo:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"authenticateToken"})," es un middleware que verifica la validez del token."]}),"\n",(0,i.jsxs)(n.li,{children:["Si el token es v\xe1lido, permite el acceso al endpoint protegido ",(0,i.jsx)(n.code,{children:"/protected"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-cliente-javascript",children:"Ejemplo de Cliente JavaScript"}),"\n",(0,i.jsxs)(n.p,{children:["Para realizar solicitudes autenticadas desde un cliente JavaScript, podemos usar la Fetch API junto con ",(0,i.jsx)(n.code,{children:"async/await"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'async function login(username, password) {\n  const response = await fetch("<http://localhost:3000/login>", {\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n    },\n    body: JSON.stringify({ username, password }),\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    localStorage.setItem("token", data.token);\n    console.log("Login successful");\n  } else {\n    console.error("Login failed");\n  }\n}\n\nasync function accessProtectedResource() {\n  const token = localStorage.getItem("token");\n  const response = await fetch("<http://localhost:3000/protected>", {\n    method: "GET",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (response.ok) {\n    const data = await response.text();\n    console.log("Protected resource:", data);\n  } else {\n    console.error("Access denied");\n  }\n}\n\n// Example usage\nlogin("user1", "password1").then(() => {\n  accessProtectedResource();\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"En este c\xf3digo:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["La funci\xf3n ",(0,i.jsx)(n.code,{children:"login"})," realiza una solicitud POST al servidor para obtener un token y lo almacena en ",(0,i.jsx)(n.code,{children:"localStorage"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["La funci\xf3n ",(0,i.jsx)(n.code,{children:"accessProtectedResource"})," recupera el token de ",(0,i.jsx)(n.code,{children:"localStorage"})," y lo usa en el encabezado ",(0,i.jsx)(n.code,{children:"Authorization"})," para acceder a un recurso protegido."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"consideraciones-de-seguridad",children:"Consideraciones de Seguridad"}),"\n",(0,i.jsx)(n.p,{children:"Aunque los JWT proporcionan una soluci\xf3n eficiente para la autenticaci\xf3n y la autorizaci\xf3n, es importante seguir buenas pr\xe1cticas de seguridad:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTPS"}),": Siempre utilizar HTTPS para proteger los tokens durante la transmisi\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Caducidad"}),": Configurar una caducidad razonable para los tokens (",(0,i.jsx)(n.code,{children:"expiresIn"}),"), y considerar el uso de tokens de actualizaci\xf3n (refresh tokens) para obtener nuevos tokens sin necesidad de volver a autenticar al usuario."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Almacenamiento Seguro"}),": Almacenar los tokens de forma segura, preferiblemente en ",(0,i.jsx)(n.code,{children:"localStorage"})," o ",(0,i.jsx)(n.code,{children:"sessionStorage"}),". Evitar el uso de cookies si no est\xe1n configuradas correctamente para ser seguras (e.g., HttpOnly y Secure)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validaci\xf3n Rigurosa"}),": Validar tokens en cada solicitud a recursos protegidos y manejar los errores de verificaci\xf3n adecuadamente."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:""}),"\n",(0,i.jsx)(n.p,{children:"Conclusi\xf3n"}),"\n",(0,i.jsx)(n.p,{children:"La autenticaci\xf3n y la autorizaci\xf3n son componentes esenciales en el desarrollo de APIs REST seguras. M\xe9todos como las API Keys, Tokens (JWT), y OAuth ofrecen diferentes niveles de seguridad y complejidad. Los JWT, en particular, ofrecen una soluci\xf3n robusta y flexible que permite la autenticaci\xf3n sin estado, lo que los hace ideales para aplicaciones modernas que requieren escalabilidad y eficiencia."}),"\n",(0,i.jsx)(n.p,{children:"Este documento ha explorado en detalle c\xf3mo funcionan estos m\xe9todos, con un enfoque en la implementaci\xf3n de JWT en una aplicaci\xf3n web con JavaScript. Al seguir las pr\xe1cticas recomendadas y aplicar estos m\xe9todos correctamente, los desarrolladores pueden asegurar que sus aplicaciones web proporcionen acceso seguro y controlado a los recursos, protegiendo tanto los datos del usuario como la integridad del sistema."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var a=s(6540);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);