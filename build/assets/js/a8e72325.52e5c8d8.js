"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[3910],{3010:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"js/dom/acceso","title":"Acceso al DOM","description":"El acceso y manipulaci\xf3n del Modelo de Objetos del Documento (DOM) es una habilidad fundamental para los desarrolladores web. El DOM proporciona una representaci\xf3n estructurada del documento HTML o XML, permitiendo a los desarrolladores acceder y manipular su contenido y estructura utilizando JavaScript. Esta capacidad es esencial para crear p\xe1ginas web din\xe1micas e interactivas. En este texto, exploraremos en profundidad los m\xe9todos principales para acceder al DOM: getElementById, getElementsByClassName, getElementsByTagName, y los selectores CSS avanzados querySelector y querySelectorAll.","source":"@site/docs/js/dom/acceso.md","sourceDirName":"js/dom","slug":"/js/dom/acceso","permalink":"/docuQuest/docs/js/dom/acceso","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/dom/acceso.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n","permalink":"/docuQuest/docs/js/dom/introduccion"},"next":{"title":"Estructura del DOM","permalink":"/docuQuest/docs/js/dom/estructura"}}');var o=s(4848),t=s(8453);const i={},a="Acceso al DOM",c={},d=[{value:"1. getElementById: M\xe9todo para obtener un elemento por su ID \xfanico",id:"1-getelementbyid-m\xe9todo-para-obtener-un-elemento-por-su-id-\xfanico",level:2},{value:"1.1 Uso y Sintaxis",id:"11-uso-y-sintaxis",level:3},{value:"1.2 Ejemplo Pr\xe1ctico",id:"12-ejemplo-pr\xe1ctico",level:3},{value:"1.3 Ventajas y Limitaciones",id:"13-ventajas-y-limitaciones",level:3},{value:"2. getElementsByClassName: Obtener elementos por su clase",id:"2-getelementsbyclassname-obtener-elementos-por-su-clase",level:2},{value:"2.1 Uso y Sintaxis",id:"21-uso-y-sintaxis",level:3},{value:"2.2 Ejemplo Pr\xe1ctico",id:"22-ejemplo-pr\xe1ctico",level:3},{value:"2.3 Ventajas y Limitaciones",id:"23-ventajas-y-limitaciones",level:3},{value:"3. getElementsByTagName: Obtener elementos por su etiqueta",id:"3-getelementsbytagname-obtener-elementos-por-su-etiqueta",level:2},{value:"3.1 Uso y Sintaxis",id:"31-uso-y-sintaxis",level:3},{value:"3.2 Ejemplo Pr\xe1ctico",id:"32-ejemplo-pr\xe1ctico",level:3},{value:"3.3 Ventajas y Limitaciones",id:"33-ventajas-y-limitaciones",level:3},{value:"4. querySelector y querySelectorAll: Selectores CSS para obtener elementos",id:"4-queryselector-y-queryselectorall-selectores-css-para-obtener-elementos",level:2},{value:"4.1 Uso y Sintaxis",id:"41-uso-y-sintaxis",level:3},{value:"4.2 Ejemplo Pr\xe1ctico",id:"42-ejemplo-pr\xe1ctico",level:3},{value:"4.3 Ventajas y Limitaciones",id:"43-ventajas-y-limitaciones",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function r(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"acceso-al-dom",children:"Acceso al DOM"})}),"\n",(0,o.jsx)(n.h1,{id:"acceso-al-dom-de-javascript-en-p\xe1ginas-web",children:"Acceso al DOM de JavaScript en P\xe1ginas Web"}),"\n",(0,o.jsxs)(n.p,{children:["El acceso y manipulaci\xf3n del Modelo de Objetos del Documento (DOM) es una habilidad fundamental para los desarrolladores web. El DOM proporciona una representaci\xf3n estructurada del documento HTML o XML, permitiendo a los desarrolladores acceder y manipular su contenido y estructura utilizando JavaScript. Esta capacidad es esencial para crear p\xe1ginas web din\xe1micas e interactivas. En este texto, exploraremos en profundidad los m\xe9todos principales para acceder al DOM: ",(0,o.jsx)(n.code,{children:"getElementById"}),", ",(0,o.jsx)(n.code,{children:"getElementsByClassName"}),", ",(0,o.jsx)(n.code,{children:"getElementsByTagName"}),", y los selectores CSS avanzados ",(0,o.jsx)(n.code,{children:"querySelector"})," y ",(0,o.jsx)(n.code,{children:"querySelectorAll"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"1-getelementbyid-m\xe9todo-para-obtener-un-elemento-por-su-id-\xfanico",children:"1. getElementById: M\xe9todo para obtener un elemento por su ID \xfanico"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getElementById"})," es uno de los m\xe9todos m\xe1s utilizados y directos para acceder a elementos en el DOM. Este m\xe9todo permite obtener un \xfanico elemento que tiene un atributo ",(0,o.jsx)(n.code,{children:"id"})," espec\xedfico. Debido a que los valores de ",(0,o.jsx)(n.code,{children:"id"})," deben ser \xfanicos dentro de un documento HTML, este m\xe9todo siempre devuelve un solo elemento."]}),"\n",(0,o.jsx)(n.h3,{id:"11-uso-y-sintaxis",children:"1.1 Uso y Sintaxis"}),"\n",(0,o.jsxs)(n.p,{children:["La sintaxis b\xe1sica de ",(0,o.jsx)(n.code,{children:"getElementById"})," es simple:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'let element = document.getElementById("elementId");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Donde ",(0,o.jsx)(n.code,{children:"'elementId'"})," es el valor del atributo ",(0,o.jsx)(n.code,{children:"id"})," del elemento que se desea obtener."]}),"\n",(0,o.jsx)(n.h3,{id:"12-ejemplo-pr\xe1ctico",children:"1.2 Ejemplo Pr\xe1ctico"}),"\n",(0,o.jsx)(n.p,{children:"Consideremos el siguiente documento HTML:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Ejemplo de getElementById</title>\n  </head>\n  <body>\n    <div id="content">Contenido original</div>\n    <script>\n      let contentDiv = document.getElementById("content");\n      console.log(contentDiv.textContent); // Salida: Contenido original\n\n      // Modificar el contenido del elemento\n      contentDiv.textContent = "Contenido modificado";\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"getElementById"})," se utiliza para obtener el elemento ",(0,o.jsx)(n.code,{children:"<div>"})," con el ",(0,o.jsx)(n.code,{children:"id"}),' "content" y luego se modifica su contenido de texto.']}),"\n",(0,o.jsx)(n.h3,{id:"13-ventajas-y-limitaciones",children:"1.3 Ventajas y Limitaciones"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Ventajas"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicidad y eficiencia"}),": ",(0,o.jsx)(n.code,{children:"getElementById"})," es r\xe1pido y f\xe1cil de usar."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Unicidad"}),": Garantiza que el elemento obtenido es \xfanico, lo que reduce la ambig\xfcedad en el c\xf3digo."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Limitaciones"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Unicidad requerida"}),": Solo puede usarse si se conoce el ",(0,o.jsx)(n.code,{children:"id"})," \xfanico del elemento."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Acceso limitado"}),": No se puede utilizar para obtener m\xfaltiples elementos o para seleccionar elementos basados en otros atributos."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-getelementsbyclassname-obtener-elementos-por-su-clase",children:"2. getElementsByClassName: Obtener elementos por su clase"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getElementsByClassName"})," permite obtener una colecci\xf3n de todos los elementos que tienen una clase espec\xedfica. A diferencia de ",(0,o.jsx)(n.code,{children:"getElementById"}),", este m\xe9todo devuelve una colecci\xf3n (HTMLCollection) de elementos, ya que m\xfaltiples elementos pueden compartir la misma clase."]}),"\n",(0,o.jsx)(n.h3,{id:"21-uso-y-sintaxis",children:"2.1 Uso y Sintaxis"}),"\n",(0,o.jsxs)(n.p,{children:["La sintaxis b\xe1sica de ",(0,o.jsx)(n.code,{children:"getElementsByClassName"})," es la siguiente:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'let elements = document.getElementsByClassName("className");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Donde ",(0,o.jsx)(n.code,{children:"'className'"})," es el valor del atributo ",(0,o.jsx)(n.code,{children:"class"})," de los elementos que se desean obtener."]}),"\n",(0,o.jsx)(n.h3,{id:"22-ejemplo-pr\xe1ctico",children:"2.2 Ejemplo Pr\xe1ctico"}),"\n",(0,o.jsx)(n.p,{children:"Consideremos el siguiente documento HTML:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Ejemplo de getElementsByClassName</title>\n  </head>\n  <body>\n    <div class="item">Elemento 1</div>\n    <div class="item">Elemento 2</div>\n    <div class="item">Elemento 3</div>\n    <script>\n      let items = document.getElementsByClassName("item");\n      console.log(items.length); // Salida: 3\n\n      // Modificar el contenido de cada elemento\n      for (let i = 0; i < items.length; i++) {\n        items[i].textContent = "Elemento " + (i + 1) + " modificado";\n      }\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"getElementsByClassName"})," se utiliza para obtener todos los elementos ",(0,o.jsx)(n.code,{children:"<div>"}),' con la clase "item" y luego se modifica su contenido.']}),"\n",(0,o.jsx)(n.h3,{id:"23-ventajas-y-limitaciones",children:"2.3 Ventajas y Limitaciones"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Ventajas"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Selecci\xf3n m\xfaltiple"}),": Permite obtener m\xfaltiples elementos que comparten la misma clase."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Eficiencia"}),": R\xe1pido en la selecci\xf3n de elementos basados en clases."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Limitaciones"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Acceso est\xe1tico"}),": La colecci\xf3n devuelta es est\xe1tica y no se actualiza si el DOM cambia despu\xe9s de la selecci\xf3n inicial."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Sin compatibilidad con m\xfaltiples clases"}),": Solo selecciona elementos que tienen exactamente la clase especificada, no puede combinar clases en una sola llamada."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"3-getelementsbytagname-obtener-elementos-por-su-etiqueta",children:"3. getElementsByTagName: Obtener elementos por su etiqueta"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getElementsByTagName"})," permite obtener una colecci\xf3n de todos los elementos que tienen un nombre de etiqueta espec\xedfico. Este m\xe9todo es muy \xfatil para acceder a todos los elementos de un tipo particular, como todos los p\xe1rrafos ",(0,o.jsx)(n.code,{children:"<p>"})," o todos los enlaces ",(0,o.jsx)(n.code,{children:"<a>"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"31-uso-y-sintaxis",children:"3.1 Uso y Sintaxis"}),"\n",(0,o.jsxs)(n.p,{children:["La sintaxis b\xe1sica de ",(0,o.jsx)(n.code,{children:"getElementsByTagName"})," es la siguiente:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'let elements = document.getElementsByTagName("tagName");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Donde ",(0,o.jsx)(n.code,{children:"'tagName'"})," es el nombre de la etiqueta de los elementos que se desean obtener."]}),"\n",(0,o.jsx)(n.h3,{id:"32-ejemplo-pr\xe1ctico",children:"3.2 Ejemplo Pr\xe1ctico"}),"\n",(0,o.jsx)(n.p,{children:"Consideremos el siguiente documento HTML:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Ejemplo de getElementsByTagName</title>\n  </head>\n  <body>\n    <p>P\xe1rrafo 1</p>\n    <p>P\xe1rrafo 2</p>\n    <p>P\xe1rrafo 3</p>\n    <script>\n      let paragraphs = document.getElementsByTagName("p");\n      console.log(paragraphs.length); // Salida: 3\n\n      // Modificar el contenido de cada p\xe1rrafo\n      for (let i = 0; i < paragraphs.length; i++) {\n        paragraphs[i].textContent = "P\xe1rrafo " + (i + 1) + " modificado";\n      }\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"getElementsByTagName"})," se utiliza para obtener todos los elementos ",(0,o.jsx)(n.code,{children:"<p>"})," y luego se modifica su contenido."]}),"\n",(0,o.jsx)(n.h3,{id:"33-ventajas-y-limitaciones",children:"3.3 Ventajas y Limitaciones"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Ventajas"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Selecci\xf3n amplia"}),": Permite obtener todos los elementos de un tipo particular en el documento."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flexibilidad"}),": \xdatil para seleccionar elementos independientemente de sus clases o atributos."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Limitaciones"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Acceso est\xe1tico"}),": La colecci\xf3n devuelta es est\xe1tica y no se actualiza si el DOM cambia despu\xe9s de la selecci\xf3n inicial."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Poco espec\xedfico"}),": Puede devolver una gran cantidad de elementos, lo que puede no ser eficiente si se buscan elementos muy espec\xedficos."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"4-queryselector-y-queryselectorall-selectores-css-para-obtener-elementos",children:"4. querySelector y querySelectorAll: Selectores CSS para obtener elementos"}),"\n",(0,o.jsxs)(n.p,{children:["Los m\xe9todos ",(0,o.jsx)(n.code,{children:"querySelector"})," y ",(0,o.jsx)(n.code,{children:"querySelectorAll"})," son los m\xe9todos m\xe1s potentes y flexibles para acceder a los elementos del DOM. Estos m\xe9todos permiten seleccionar elementos utilizando selectores CSS, lo que proporciona una gran versatilidad en la selecci\xf3n de elementos."]}),"\n",(0,o.jsx)(n.h3,{id:"41-uso-y-sintaxis",children:"4.1 Uso y Sintaxis"}),"\n",(0,o.jsxs)(n.p,{children:["La sintaxis b\xe1sica de ",(0,o.jsx)(n.code,{children:"querySelector"})," y ",(0,o.jsx)(n.code,{children:"querySelectorAll"})," es la siguiente:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'let element = document.querySelector("selector");\nlet elements = document.querySelectorAll("selector");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Donde ",(0,o.jsx)(n.code,{children:"'selector'"})," es un selector CSS que describe los elementos que se desean obtener."]}),"\n",(0,o.jsx)(n.h3,{id:"42-ejemplo-pr\xe1ctico",children:"4.2 Ejemplo Pr\xe1ctico"}),"\n",(0,o.jsx)(n.p,{children:"Consideremos el siguiente documento HTML:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Ejemplo de querySelector y querySelectorAll</title>\n  </head>\n  <body>\n    <div class="container">\n      <p class="text">Texto 1</p>\n      <p class="text">Texto 2</p>\n    </div>\n    <script>\n      // Usar querySelector para obtener el primer p\xe1rrafo con la clase "text"\n      var firstText = document.querySelector(".text");\n      console.log(firstText.textContent); // Salida: Texto 1\n\n      // Usar querySelectorAll para obtener todos los p\xe1rrafos con la clase "text"\n      var allTexts = document.querySelectorAll(".text");\n      console.log(allTexts.length); // Salida: 2\n\n      // Modificar el contenido de cada p\xe1rrafo\n      allTexts.forEach(function (text, index) {\n        text.textContent = "Texto " + (index + 1) + " modificado";\n      });\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"querySelector"}),' se utiliza para obtener el primer p\xe1rrafo con la clase "text", y ',(0,o.jsx)(n.code,{children:"querySelectorAll"}),' se utiliza para obtener todos los p\xe1rrafos con la clase "text" y modificar su contenido.']}),"\n",(0,o.jsx)(n.h3,{id:"43-ventajas-y-limitaciones",children:"4.3 Ventajas y Limitaciones"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Ventajas"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flexibilidad"}),": Permite usar cualquier selector CSS, lo que proporciona una gran versatilidad."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Selecci\xf3n espec\xedfica"}),": Puede combinar selectores de clase, ID y etiqueta para obtener elementos muy espec\xedficos."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Actualizaci\xf3n en tiempo real"}),": La colecci\xf3n devuelta por ",(0,o.jsx)(n.code,{children:"querySelectorAll"})," es est\xe1tica, pero los cambios en el DOM pueden ser reflejados si se vuelven a ejecutar las consultas."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Limitaciones"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Rendimiento: Puede ser m\xe1s lento que los m\xe9todos espec\xedficos (",(0,o.jsx)(n.code,{children:"getElementById"}),", ",(0,o.jsx)(n.code,{children:"getElementsByClassName"}),", ",(0,o.jsx)(n.code,{children:"getElementsByTagName"}),") en documentos grandes debido a la flexibilidad del selector."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complejidad"}),": La sintaxis de los selectores CSS puede ser compleja para consultas muy espec\xedficas."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,o.jsxs)(n.p,{children:["El acceso y manipulaci\xf3n del DOM mediante JavaScript es una t\xe9cnica esencial para el desarrollo de aplicaciones web din\xe1micas e interactivas. Los m\xe9todos ",(0,o.jsx)(n.code,{children:"getElementById"}),", ",(0,o.jsx)(n.code,{children:"getElementsByClassName"}),", ",(0,o.jsx)(n.code,{children:"getElementsByTagName"}),", y los selectores CSS ",(0,o.jsx)(n.code,{children:"querySelector"})," y ",(0,o.jsx)(n.code,{children:"querySelectorAll"})," proporcionan diversas formas de acceder y manipular los elementos del DOM, cada uno con sus propias ventajas y limitaciones. La elecci\xf3n del m\xe9todo adecuado depende de las necesidades espec\xedficas de la tarea y del nivel de especificidad requerido en la selecci\xf3n de elementos. Comprender y dominar estos m\xe9todos es crucial para cualquier desarrollador web que aspire a crear experiencias de usuario ricas y funcionales en la web moderna."]}),"\n",(0,o.jsx)(n.hr,{})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var l=s(6540);const o={},t=l.createContext(o);function i(e){const n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);