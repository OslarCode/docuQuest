"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[9757],{7831:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"js/dom/estructura","title":"Estructura del DOM","description":"El Modelo de Objetos del Documento, conocido como DOM (Document Object Model), es una pieza fundamental en la construcci\xf3n y manipulaci\xf3n de p\xe1ginas web din\xe1micas. El DOM ofrece una representaci\xf3n estructurada del documento HTML o XML, permitiendo a los desarrolladores acceder y modificar su contenido y estructura mediante lenguajes de programaci\xf3n como JavaScript. Esta representaci\xf3n toma la forma de un \xe1rbol jer\xe1rquico, donde cada nodo del \xe1rbol corresponde a una parte espec\xedfica del documento.","source":"@site/docs/js/dom/estructura.md","sourceDirName":"js/dom","slug":"/js/dom/estructura","permalink":"/docuQuest/docs/js/dom/estructura","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/dom/estructura.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Acceso al DOM","permalink":"/docuQuest/docs/js/dom/acceso"},"next":{"title":"Eventos","permalink":"/docuQuest/docs/js/dom/eventos"}}');var d=o(4848),r=o(8453);const l={},s="Estructura del DOM",i={},a=[{value:"1. Document: Objeto ra\xedz que representa todo el documento",id:"1-document-objeto-ra\xedz-que-representa-todo-el-documento",level:2},{value:"1.1 Propiedades y M\xe9todos del Objeto Document",id:"11-propiedades-y-m\xe9todos-del-objeto-document",level:3},{value:"1.2 Ejemplo de Uso del Objeto Document",id:"12-ejemplo-de-uso-del-objeto-document",level:3},{value:"2. Elementos: Nodos que representan etiquetas HTML",id:"2-elementos-nodos-que-representan-etiquetas-html",level:2},{value:"2.1 Propiedades y M\xe9todos de los Elementos",id:"21-propiedades-y-m\xe9todos-de-los-elementos",level:3},{value:"2.2 Ejemplo de Manipulaci\xf3n de Elementos",id:"22-ejemplo-de-manipulaci\xf3n-de-elementos",level:3},{value:"3. Atributos: Propiedades de los elementos que contienen informaci\xf3n adicional",id:"3-atributos-propiedades-de-los-elementos-que-contienen-informaci\xf3n-adicional",level:2},{value:"3.1 Propiedades y M\xe9todos para Manipular Atributos",id:"31-propiedades-y-m\xe9todos-para-manipular-atributos",level:3},{value:"3.2 Ejemplo de Manipulaci\xf3n de Atributos",id:"32-ejemplo-de-manipulaci\xf3n-de-atributos",level:3},{value:"4. Textos: Representan el texto dentro de los elementos",id:"4-textos-representan-el-texto-dentro-de-los-elementos",level:2},{value:"4.1 Propiedades y M\xe9todos de los Nodos de Texto",id:"41-propiedades-y-m\xe9todos-de-los-nodos-de-texto",level:3},{value:"4.2 Ejemplo de Manipulaci\xf3n de Nodos de Texto",id:"42-ejemplo-de-manipulaci\xf3n-de-nodos-de-texto",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"estructura-del-dom",children:"Estructura del DOM"})}),"\n",(0,d.jsx)(n.h1,{id:"la-estructura-del-dom-de-javascript-en-p\xe1ginas-web",children:"La Estructura del DOM de JavaScript en P\xe1ginas Web"}),"\n",(0,d.jsx)(n.p,{children:"El Modelo de Objetos del Documento, conocido como DOM (Document Object Model), es una pieza fundamental en la construcci\xf3n y manipulaci\xf3n de p\xe1ginas web din\xe1micas. El DOM ofrece una representaci\xf3n estructurada del documento HTML o XML, permitiendo a los desarrolladores acceder y modificar su contenido y estructura mediante lenguajes de programaci\xf3n como JavaScript. Esta representaci\xf3n toma la forma de un \xe1rbol jer\xe1rquico, donde cada nodo del \xe1rbol corresponde a una parte espec\xedfica del documento."}),"\n",(0,d.jsx)(n.h2,{id:"1-document-objeto-ra\xedz-que-representa-todo-el-documento",children:"1. Document: Objeto ra\xedz que representa todo el documento"}),"\n",(0,d.jsxs)(n.p,{children:["El nodo ",(0,d.jsx)(n.code,{children:"Document"})," es el punto de entrada al contenido del DOM y representa el documento entero. Este nodo ra\xedz es crucial porque act\xfaa como el contenedor de todos los dem\xe1s nodos en la jerarqu\xeda del DOM. El objeto ",(0,d.jsx)(n.code,{children:"Document"})," proporciona las interfaces necesarias para acceder y manipular los elementos del documento."]}),"\n",(0,d.jsx)(n.h3,{id:"11-propiedades-y-m\xe9todos-del-objeto-document",children:"1.1 Propiedades y M\xe9todos del Objeto Document"}),"\n",(0,d.jsxs)(n.p,{children:["El objeto ",(0,d.jsx)(n.code,{children:"Document"})," ofrece una amplia variedad de propiedades y m\xe9todos que permiten a los desarrolladores interactuar con el documento de manera eficiente. Algunas de las propiedades m\xe1s importantes incluyen:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"documentElement"})}),": Devuelve el elemento ra\xedz del documento, generalmente el elemento ",(0,d.jsx)(n.code,{children:"<html>"})," en documentos HTML."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"body"})}),": Devuelve el elemento ",(0,d.jsx)(n.code,{children:"<body>"})," del documento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"head"})}),": Devuelve el elemento ",(0,d.jsx)(n.code,{children:"<head>"})," del documento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"title"})}),": Permite acceder y modificar el t\xedtulo del documento."]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Adem\xe1s de estas propiedades, el objeto ",(0,d.jsx)(n.code,{children:"Document"})," ofrece numerosos m\xe9todos que facilitan la manipulaci\xf3n del DOM:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"getElementById(id)"})}),": Devuelve el elemento con el ",(0,d.jsx)(n.code,{children:"id"})," especificado."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"getElementsByClassName(className)"})}),": Devuelve una colecci\xf3n de todos los elementos que tienen la clase especificada."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"getElementsByTagName(tagName)"})}),": Devuelve una colecci\xf3n de todos los elementos que tienen el nombre de etiqueta especificado."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"querySelector(selector)"})}),": Devuelve el primer elemento que coincide con el selector CSS especificado."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"querySelectorAll(selector)"})}),": Devuelve una lista est\xe1tica de todos los elementos que coinciden con el selector CSS especificado."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"12-ejemplo-de-uso-del-objeto-document",children:"1.2 Ejemplo de Uso del Objeto Document"}),"\n",(0,d.jsxs)(n.p,{children:["El siguiente ejemplo muestra c\xf3mo utilizar algunas de las propiedades y m\xe9todos del objeto ",(0,d.jsx)(n.code,{children:"Document"})," para acceder y modificar elementos en un documento HTML:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Document</title>\r\n  </head>\r\n  <body>\r\n    <div id="content">Contenido Original</div>\r\n    <script>\r\n      // Acceder al t\xedtulo del documento\r\n      console.log(document.title); // Salida: Ejemplo de Document\r\n\r\n      // Modificar el t\xedtulo del documento\r\n      document.title = "Nuevo T\xedtulo";\r\n\r\n      // Acceder al cuerpo del documento\r\n      var body = document.body;\r\n      console.log(body);\r\n\r\n      // Acceder y modificar el contenido de un elemento por su ID\r\n      var contentDiv = document.getElementById("content");\r\n      contentDiv.textContent = "Contenido Modificado";\r\n\r\n      // A\xf1adir un nuevo elemento al cuerpo\r\n      var newElement = document.createElement("p");\r\n      newElement.textContent = "Este es un nuevo p\xe1rrafo";\r\n      body.appendChild(newElement);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,d.jsx)(n.h2,{id:"2-elementos-nodos-que-representan-etiquetas-html",children:"2. Elementos: Nodos que representan etiquetas HTML"}),"\n",(0,d.jsx)(n.p,{children:"Los nodos de elementos son componentes esenciales del DOM y representan las etiquetas HTML que estructuran el contenido de una p\xe1gina web. Cada elemento del DOM tiene propiedades y m\xe9todos que permiten su manipulaci\xf3n."}),"\n",(0,d.jsx)(n.h3,{id:"21-propiedades-y-m\xe9todos-de-los-elementos",children:"2.1 Propiedades y M\xe9todos de los Elementos"}),"\n",(0,d.jsx)(n.p,{children:"Cada nodo de elemento en el DOM hereda propiedades y m\xe9todos que facilitan su manipulaci\xf3n. Algunas de las propiedades m\xe1s comunes son:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"id"})}),": Permite obtener o establecer el atributo ",(0,d.jsx)(n.code,{children:"id"})," del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"className"})}),": Permite obtener o establecer el atributo ",(0,d.jsx)(n.code,{children:"class"})," del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"innerHTML"})}),": Permite obtener o establecer el HTML contenido dentro del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"textContent"})}),": Permite obtener o establecer el texto contenido dentro del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"style"})}),": Permite acceder y modificar los estilos en l\xednea del elemento."]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Los m\xe9todos m\xe1s utilizados incluyen:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"appendChild(node)"})}),": A\xf1ade un nodo como hijo del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"removeChild(node)"})}),": Elimina un nodo hijo del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"replaceChild(newNode, oldNode)"})}),": Reemplaza un nodo hijo por otro."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"setAttribute(name, value)"})}),": Establece el valor de un atributo del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"getAttribute(name)"})}),": Obtiene el valor de un atributo del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"addEventListener(type, listener)"})}),": A\xf1ade un manejador de eventos al elemento."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"22-ejemplo-de-manipulaci\xf3n-de-elementos",children:"2.2 Ejemplo de Manipulaci\xf3n de Elementos"}),"\n",(0,d.jsx)(n.p,{children:"El siguiente ejemplo demuestra c\xf3mo crear, modificar y eliminar nodos de elementos en un documento HTML:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Manipulaci\xf3n de Elementos</title>\r\n  </head>\r\n  <body>\r\n    <div id="container">\r\n      <p class="text">P\xe1rrafo 1</p>\r\n      <p class="text">P\xe1rrafo 2</p>\r\n    </div>\r\n    <script>\r\n      // Crear un nuevo elemento\r\n      var newElement = document.createElement("p");\r\n      newElement.textContent = "P\xe1rrafo 3";\r\n      newElement.className = "text";\r\n\r\n      // A\xf1adir el nuevo elemento al contenedor\r\n      var container = document.getElementById("container");\r\n      container.appendChild(newElement);\r\n\r\n      // Modificar el contenido de un elemento existente\r\n      var firstParagraph = container.getElementsByClassName("text")[0];\r\n      firstParagraph.textContent = "P\xe1rrafo Modificado 1";\r\n\r\n      // Eliminar un elemento existente\r\n      var secondParagraph = container.getElementsByClassName("text")[1];\r\n      container.removeChild(secondParagraph);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,d.jsx)(n.h2,{id:"3-atributos-propiedades-de-los-elementos-que-contienen-informaci\xf3n-adicional",children:"3. Atributos: Propiedades de los elementos que contienen informaci\xf3n adicional"}),"\n",(0,d.jsx)(n.p,{children:"Los atributos son pares clave-valor que proporcionan informaci\xf3n adicional sobre los elementos HTML. Estos atributos pueden ser manipulados din\xe1micamente a trav\xe9s del DOM."}),"\n",(0,d.jsx)(n.h3,{id:"31-propiedades-y-m\xe9todos-para-manipular-atributos",children:"3.1 Propiedades y M\xe9todos para Manipular Atributos"}),"\n",(0,d.jsx)(n.p,{children:"Los atributos de los elementos HTML se pueden gestionar mediante varias propiedades y m\xe9todos:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"setAttribute(name, value)"})}),": Establece el valor de un atributo."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"getAttribute(name)"})}),": Obtiene el valor de un atributo."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"removeAttribute(name)"})}),": Elimina un atributo del elemento."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"hasAttribute(name)"})}),": Verifica si el elemento tiene un atributo espec\xedfico."]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Adem\xe1s, algunos atributos tienen propiedades asociadas que permiten un acceso m\xe1s directo. Por ejemplo, el atributo ",(0,d.jsx)(n.code,{children:"class"})," puede ser manipulado mediante la propiedad ",(0,d.jsx)(n.code,{children:"className"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"32-ejemplo-de-manipulaci\xf3n-de-atributos",children:"3.2 Ejemplo de Manipulaci\xf3n de Atributos"}),"\n",(0,d.jsx)(n.p,{children:"El siguiente ejemplo ilustra c\xf3mo trabajar con los atributos de los elementos HTML:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Manipulaci\xf3n de Atributos</title>\r\n  </head>\r\n  <body>\r\n    <a id="myLink" href="<https://www.ejemplo.com>" target="_blank"\r\n      >Enlace a Ejemplo</a\r\n    >\r\n    <script>\r\n      var link = document.getElementById("myLink");\r\n\r\n      // Obtener el valor del atributo href\r\n      console.log(link.getAttribute("href")); // Salida: <https://www.ejemplo.com>\r\n\r\n      // Establecer un nuevo valor para el atributo href\r\n      link.setAttribute("href", "<https://www.nuevo-ejemplo.com>");\r\n\r\n      // Eliminar el atributo target\r\n      link.removeAttribute("target");\r\n\r\n      // Verificar si el enlace tiene un atributo title\r\n      console.log(link.hasAttribute("title")); // Salida: false\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,d.jsx)(n.h2,{id:"4-textos-representan-el-texto-dentro-de-los-elementos",children:"4. Textos: Representan el texto dentro de los elementos"}),"\n",(0,d.jsx)(n.p,{children:"Los nodos de texto en el DOM representan el contenido textual de los elementos HTML. Estos nodos son fundamentales para la presentaci\xf3n de informaci\xf3n legible por el usuario."}),"\n",(0,d.jsx)(n.h3,{id:"41-propiedades-y-m\xe9todos-de-los-nodos-de-texto",children:"4.1 Propiedades y M\xe9todos de los Nodos de Texto"}),"\n",(0,d.jsx)(n.p,{children:"Los nodos de texto tienen propiedades y m\xe9todos espec\xedficos que permiten su manipulaci\xf3n:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"textContent"})}),": Permite obtener o establecer el contenido textual de un nodo."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"nodeValue"})}),": Similar a ",(0,d.jsx)(n.code,{children:"textContent"}),", permite obtener o establecer el valor del nodo de texto."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"splitText(offset)"})}),": Divide un nodo de texto en dos en la posici\xf3n especificada."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"42-ejemplo-de-manipulaci\xf3n-de-nodos-de-texto",children:"4.2 Ejemplo de Manipulaci\xf3n de Nodos de Texto"}),"\n",(0,d.jsx)(n.p,{children:"El siguiente ejemplo demuestra c\xf3mo crear, modificar y dividir nodos de texto en un documento HTML:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Manipulaci\xf3n de Nodos de Texto</title>\r\n  </head>\r\n  <body>\r\n    <div id="textContainer">Texto Original</div>\r\n    <script>\r\n      var container = document.getElementById("textContainer");\r\n\r\n      // Modificar el contenido textual de un elemento\r\n      container.textContent = "Texto Modificado";\r\n\r\n      // Crear un nuevo nodo de texto y a\xf1adirlo al contenedor\r\n      var newText = document.createTextNode(" - Texto Adicional");\r\n      container.appendChild(newText);\r\n\r\n      // Dividir un nodo de texto\r\n      var textNode = container.firstChild;\r\n      var splitNode = textNode.splitText(13);\r\n      console.log(textNode.nodeValue); // Salida: Texto Modificado\r\n      console.log(splitNode.nodeValue); // Salida:  - Texto Adicional\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,d.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,d.jsxs)(n.p,{children:["El DOM de JavaScript es una herramienta poderosa y flexible que permite a los desarrolladores web interactuar con el contenido y la estructura de los documentos HTML y XML de manera program\xe1tica. Comprender la estructura del DOM y c\xf3mo manipular sus diferentes componentes es esencial para crear aplicaciones web din\xe1micas y eficientes. Desde el objeto ra\xedz ",(0,d.jsx)(n.code,{children:"Document"})," hasta los nodos de elementos, atributos y texto, cada parte del DOM juega un papel crucial en la representaci\xf3n y manipulaci\xf3n del contenido web. A trav\xe9s de ejemplos pr\xe1cticos, hemos explorado las capacidades del DOM y c\xf3mo pueden ser aprovechadas para mejorar la experiencia del usuario y la funcionalidad de las p\xe1ginas web."]}),"\n",(0,d.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>s});var t=o(6540);const d={},r=t.createContext(d);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);