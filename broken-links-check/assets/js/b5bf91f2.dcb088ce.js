"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[9482],{3638:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"js/asincronia","title":"Asincron\xeda","description":"\ud83e\udde9 \xbfQu\xe9 es la Asincron\xeda en JavaScript?","source":"@site/docs/js/asincronia.md","sourceDirName":"js","slug":"/js/asincronia","permalink":"/docuQuest/docs/js/asincronia","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/asincronia.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Depuraci\xf3n del c\xf3digo","permalink":"/docuQuest/docs/js/depuracionCodigo"},"next":{"title":"Fundamentos de la programaci\xf3n orientada a objetos (Poo)","permalink":"/docuQuest/docs/poo/fundamentosPOO"}}');var r=a(4848),s=a(8453);const i={},t="Asincron\xeda",l={},c=[{value:"\ud83e\udde9 <strong>\xbfQu\xe9 es la Asincron\xeda en JavaScript?</strong>",id:"-qu\xe9-es-la-asincron\xeda-en-javascript",level:2},{value:"\ud83c\udf7d\ufe0f <strong>Ejemplo del mundo real:</strong>",id:"\ufe0f-ejemplo-del-mundo-real",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript",level:3},{value:"\ud83d\udcc1 <strong>Ejemplo Real: Leer un Archivo SIN Bloquear la Interfaz</strong>",id:"-ejemplo-real-leer-un-archivo-sin-bloquear-la-interfaz",level:3},{value:"\ud83e\udde0 <strong>\xbfQu\xe9 est\xe1 pasando aqu\xed?</strong>",id:"-qu\xe9-est\xe1-pasando-aqu\xed",level:2},{value:"\u2705 <strong>Comportamiento ASINCR\xd3NICO (FileReader):</strong>",id:"-comportamiento-asincr\xf3nico-filereader",level:3},{value:"\u274c <strong>Comportamiento S\xcdNCRONO (conteo de n\xfameros):</strong>",id:"-comportamiento-s\xedncrono-conteo-de-n\xfameros",level:3},{value:"Ventajas y desaf\xedos de la Asincron\xeda",id:"ventajas-y-desaf\xedos-de-la-asincron\xeda",level:2},{value:"\ud83e\udde9 <strong>\xbfQu\xe9 son los Callbacks?</strong>",id:"-qu\xe9-son-los-callbacks",level:2},{value:"\ud83d\udcde <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-1",level:3},{value:"\ud83d\udd27 <strong>Ejemplos Pr\xe1cticos de Callbacks</strong>",id:"-ejemplos-pr\xe1cticos-de-callbacks",level:2},{value:"<strong>Ejemplo 1: Callback S\xcdNCRONO (inmediato)</strong>",id:"ejemplo-1-callback-s\xedncrono-inmediato",level:3},{value:"<strong>Ejemplo 2: Callback ASINCR\xd3NICO (con setTimeout)</strong>",id:"ejemplo-2-callback-asincr\xf3nico-con-settimeout",level:3},{value:"\ud83d\udcc1 <strong>Ejemplo Real: Callbacks con FileReader</strong>",id:"-ejemplo-real-callbacks-con-filereader",level:2},{value:"\u2705 <strong>Ventajas:</strong>",id:"-ventajas",level:3},{value:"\u26a0\ufe0f <strong>Problemas (lo veremos despu\xe9s):</strong>",id:"\ufe0f-problemas-lo-veremos-despu\xe9s",level:3},{value:"\ud83e\udde9 <strong>\xbfQu\xe9 es el Callback Hell?</strong>",id:"-qu\xe9-es-el-callback-hell",level:2},{value:"\ud83d\udd25 <strong>El Infierno de los Callbacks (Callback Hell)</strong>",id:"-el-infierno-de-los-callbacks-callback-hell",level:3},{value:"\ud83d\udcbb <strong>Ejemplo Real: Callback Hell en Acci\xf3n</strong>",id:"-ejemplo-real-callback-hell-en-acci\xf3n",level:3},{value:"\ud83c\udfaf <strong>Los Problemas del Callback Hell</strong>",id:"-los-problemas-del-callback-hell",level:3},{value:"1. <strong>\ud83d\udd3a Pir\xe1mide de la Muerte (Pyramid of Doom)</strong>",id:"1--pir\xe1mide-de-la-muerte-pyramid-of-doom",level:3},{value:"2. <strong>\u274c Manejo de Errores Complicado</strong>",id:"2--manejo-de-errores-complicado",level:3},{value:"3. <strong>\ud83d\udd04 D\xedficil de Reutilizar</strong>",id:"3--d\xedficil-de-reutilizar",level:3},{value:"4. <strong>\ud83d\udc1b D\xedficil de Depurar</strong>",id:"4--d\xedficil-de-depurar",level:3},{value:"\ud83d\udca1 <strong>Ejemplo del Mundo Real: Proceso de Compra</strong>",id:"-ejemplo-del-mundo-real-proceso-de-compra",level:3},{value:"\ud83d\udd25 <strong>Se\xf1ales de Callback Hell:</strong>",id:"-se\xf1ales-de-callback-hell",level:3},{value:"\u2705 <strong>Soluciones</strong>",id:"-soluciones",level:3},{value:"\ud83e\udde9 <strong>\xbfQu\xe9 son las Promesas?</strong>",id:"-qu\xe9-son-las-promesas",level:2},{value:"\ud83d\udcda <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real-1",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-2",level:3},{value:"\ud83d\udd27 <strong>Estructura B\xe1sica de una Promesa</strong>",id:"-estructura-b\xe1sica-de-una-promesa",level:3},{value:"\ud83d\udcbb <strong>Ejemplo Real: Demo Interactivo de Promesas</strong>",id:"-ejemplo-real-demo-interactivo-de-promesas",level:3},{value:"\ud83d\udd04 <strong>Convertir Callbacks a Promesas</strong>",id:"-convertir-callbacks-a-promesas",level:2},{value:"\u274c <strong>ANTES (Callback Hell):</strong>",id:"-antes-callback-hell",level:3},{value:"\u2705 <strong>AHORA (con Promesas):</strong>",id:"-ahora-con-promesas",level:3},{value:"\u2705 <strong>Ventajas de las Promesas:</strong>",id:"-ventajas-de-las-promesas",level:3},{value:"\ud83d\udd27 <strong>M\xe9todos \xdatiles:</strong>",id:"-m\xe9todos-\xfatiles",level:3},{value:"\ud83d\udca1 <strong>Casos de Uso Comunes:</strong>",id:"-casos-de-uso-comunes",level:3},{value:"\ud83e\udde9 <strong>\xbfQu\xe9 es Async/Await?</strong>",id:"-qu\xe9-es-asyncawait",level:2},{value:"\ud83d\udcda <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real-2",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-3",level:3},{value:"\ud83d\udd27 <strong>Sintaxis B\xe1sica de Async/Await</strong>",id:"-sintaxis-b\xe1sica-de-asyncawait",level:3},{value:"\ud83d\udcbb <strong>Ejemplo Real: Demo Interactivo de Async/Await</strong>",id:"-ejemplo-real-demo-interactivo-de-asyncawait",level:3},{value:"\ud83d\udd04 <strong>Conversi\xf3n de Promesas a Async/Await</strong>",id:"-conversi\xf3n-de-promesas-a-asyncawait",level:3},{value:"\u274c <strong>ANTES (con Promesas):</strong>",id:"-antes-con-promesas",level:3},{value:"\u2705 <strong>AHORA (con Async/Await):</strong>",id:"-ahora-con-asyncawait",level:3},{value:"\ud83c\udfaf <strong>Reglas B\xe1sicas de Async/Await</strong>",id:"-reglas-b\xe1sicas-de-asyncawait",level:2},{value:"1. <strong><code>async</code> antes de <code>function</code></strong>",id:"1-async-antes-de-function",level:3},{value:"2. <strong><code>await</code> solo dentro de funciones <code>async</code></strong>",id:"2-await-solo-dentro-de-funciones-async",level:3},{value:"3. <strong>Manejo de errores con <code>try/catch</code></strong>",id:"3-manejo-de-errores-con-trycatch",level:3},{value:"\ud83d\udca1 <strong>Ejemplo del Mundo Real: Proceso de Compra</strong>",id:"-ejemplo-del-mundo-real-proceso-de-compra-1",level:2},{value:"\u2705 <strong>Ventajas de Async/Await:</strong>",id:"-ventajas-de-asyncawait",level:3},{value:"\u26a0\ufe0f <strong>Errores Comunes:</strong>",id:"\ufe0f-errores-comunes",level:3},{value:"\ud83d\udca1 <strong>Consejos:</strong>",id:"-consejos",level:3},{value:"\ud83e\udde9 <strong>\xbfPor qu\xe9 es importante manejar errores en asincron\xeda?</strong>",id:"-por-qu\xe9-es-importante-manejar-errores-en-asincron\xeda",level:2},{value:"\ud83c\udf73 <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real-3",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-4",level:3},{value:"\ud83d\udd27 <strong>M\xe9todos para Manejar Errores</strong>",id:"-m\xe9todos-para-manejar-errores",level:2},{value:"1. <strong>Con Callbacks (patr\xf3n error-first)</strong>",id:"1-con-callbacks-patr\xf3n-error-first",level:3},{value:"2. <strong>Con Promesas (.catch())</strong>",id:"2-con-promesas-catch",level:3},{value:"3. <strong>Con Async/Await (try/catch)</strong>",id:"3-con-asyncawait-trycatch",level:3},{value:"\ud83d\udcbb <strong>Ejemplo Real: Demo Interactivo de Manejo de Errores</strong>",id:"-ejemplo-real-demo-interactivo-de-manejo-de-errores",level:2},{value:"<strong>Los Temidos &quot;Errores de Red&quot;</strong>",id:"los-temidos-errores-de-red",level:2},{value:"<strong>Ejemplo Sencillo en C\xf3digo</strong>",id:"ejemplo-sencillo-en-c\xf3digo",level:3},{value:"<strong>En Resumen:</strong>",id:"en-resumen",level:3},{value:"Ejemplo real de e<strong>rrores de red en la asincron\xeda</strong>",id:"ejemplo-real-de-errores-de-red-en-la-asincron\xeda",level:3},{value:"<strong>Errores de Validaci\xf3n: El Problema no es el Viaje, sino lo que Traes</strong>",id:"errores-de-validaci\xf3n-el-problema-no-es-el-viaje-sino-lo-que-traes",level:2},{value:"<strong>\xbfEn qu\xe9 consisten los Errores de Validaci\xf3n?</strong>",id:"en-qu\xe9-consisten-los-errores-de-validaci\xf3n",level:3},{value:"<strong>Ejemplo Sencillo en C\xf3digo</strong>",id:"ejemplo-sencillo-en-c\xf3digo-1",level:3},{value:"<strong>Diferencia Clave entre Error de Red y Error de Validaci\xf3n</strong>",id:"diferencia-clave-entre-error-de-red-y-error-de-validaci\xf3n",level:3},{value:"<strong>En Resumen:</strong>",id:"en-resumen-1",level:3},{value:"<strong>Ejemplo real de errores de validaci\xf3n</strong>",id:"ejemplo-real-de-errores-de-validaci\xf3n",level:3},{value:"<strong>Errores de Timeout: El Camarero que Nunca Regresa</strong>",id:"errores-de-timeout-el-camarero-que-nunca-regresa",level:2},{value:"<strong>\xbfEn qu\xe9 consisten los Errores de Timeout?</strong>",id:"en-qu\xe9-consisten-los-errores-de-timeout",level:3},{value:"<strong>Ejemplo Sencillo en C\xf3digo</strong>",id:"ejemplo-sencillo-en-c\xf3digo-2",level:3},{value:"<strong>Opci\xf3n 1: Con <code>setTimeout()</code> y <code>AbortController</code> (la forma moderna)</strong>",id:"opci\xf3n-1-con-settimeout-y-abortcontroller-la-forma-moderna",level:3},{value:"<strong>Opci\xf3n 2: Con <code>Promise.race()</code> (concepto m\xe1s avanzado)</strong>",id:"opci\xf3n-2-con-promiserace-concepto-m\xe1s-avanzado",level:3},{value:"<strong>\xbfPor qu\xe9 ocurren los Timeouts?</strong>",id:"por-qu\xe9-ocurren-los-timeouts",level:3},{value:"<strong>\xbfC\xf3mo manejarlos en la pr\xe1ctica?</strong>",id:"c\xf3mo-manejarlos-en-la-pr\xe1ctica",level:3},{value:"<strong>En Resumen:</strong>",id:"en-resumen-2",level:3},{value:"<strong>Ejemplo real de errores de tiempo de espera</strong>",id:"ejemplo-real-de-errores-de-tiempo-de-espera",level:3},{value:"\u2705 <strong>Mejores Pr\xe1cticas</strong>",id:"-mejores-pr\xe1cticas",level:2},{value:"\u274c <strong>Errores Comunes:</strong>",id:"-errores-comunes",level:3},{value:"\ud83d\udee1\ufe0f <strong>Estrategias Avanzadas:</strong>",id:"\ufe0f-estrategias-avanzadas",level:3},{value:"\ud83e\udde9 <strong>\xbfQu\xe9 es el Event Loop?</strong>",id:"-qu\xe9-es-el-event-loop",level:2},{value:"\ud83c\udf7d\ufe0f <strong>Ejemplo del mundo real:</strong>",id:"\ufe0f-ejemplo-del-mundo-real-1",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-5",level:3},{value:"\ud83d\udd27 <strong>Los Componentes del Event Loop</strong>",id:"-los-componentes-del-event-loop",level:2},{value:"1. <strong>Call Stack (Pila de Llamadas)</strong>",id:"1-call-stack-pila-de-llamadas",level:2},{value:"Analog\xeda del Libro de Recetas",id:"analog\xeda-del-libro-de-recetas",level:2},{value:"El Famoso Error: Stack Overflow",id:"el-famoso-error-stack-overflow",level:3},{value:"Call Stack vs C\xf3digo As\xedncrono",id:"call-stack-vs-c\xf3digo-as\xedncrono",level:3},{value:"Depurando el Call Stack",id:"depurando-el-call-stack",level:3},{value:"Ejemplo Pr\xe1ctico del Mundo Real",id:"ejemplo-pr\xe1ctico-del-mundo-real",level:3},{value:"Reglas Fundamentales del Call Stack",id:"reglas-fundamentales-del-call-stack",level:3},{value:"<strong>En Resumen Muy Sencillo:</strong>",id:"en-resumen-muy-sencillo",level:3},{value:"2. <strong>Callback Queue (Cola de Tareas)</strong>",id:"2-callback-queue-cola-de-tareas",level:2},{value:"C\xf3digo Explicado Paso a Paso",id:"c\xf3digo-explicado-paso-a-paso",level:3},{value:"Analog\xeda del Restaurante Detallada",id:"analog\xeda-del-restaurante-detallada",level:3},{value:"Reglas Clave del Callback Queue",id:"reglas-clave-del-callback-queue",level:3},{value:"Ejemplo Pr\xe1ctico y \xdatil",id:"ejemplo-pr\xe1ctico-y-\xfatil",level:3},{value:"<strong>En Resumen Muy Sencillo:</strong>",id:"en-resumen-muy-sencillo-1",level:3},{value:"3. <strong>Microtask Queue (Cola de Microtareas)</strong>",id:"3-microtask-queue-cola-de-microtareas",level:2},{value:"Analog\xeda de la Emergencia Hospitalaria",id:"analog\xeda-de-la-emergencia-hospitalaria",level:3},{value:"Jerarqu\xeda de Colas en JavaScript",id:"jerarqu\xeda-de-colas-en-javascript",level:3},{value:"Ejemplo con M\xfaltiples Niveles",id:"ejemplo-con-m\xfaltiples-niveles",level:3},{value:"Caso Real: Promesas vs setTimeout",id:"caso-real-promesas-vs-settimeout",level:3},{value:"El Problema del &quot;Starvation&quot;",id:"el-problema-del-starvation",level:3},{value:"M\xe9todos que usan Microtask Queue",id:"m\xe9todos-que-usan-microtask-queue",level:3},{value:"Reglas de Oro de la Microtask Queue",id:"reglas-de-oro-de-la-microtask-queue",level:3},{value:"<strong>En Resumen Muy Sencillo:</strong>",id:"en-resumen-muy-sencillo-2",level:3},{value:"\ud83d\udcbb <strong>Demo Interactivo: Visualizando el Event Loop</strong>",id:"-demo-interactivo-visualizando-el-event-loop",level:2},{value:"\ud83c\udfaf <strong>El Orden de Ejecuci\xf3n (\xa1CRUCIAL!)</strong>",id:"-el-orden-de-ejecuci\xf3n-crucial",level:2},{value:"\ud83d\udcbb <strong>Demo Interactivo: Visualizando el Call Stack y la pila de funciones</strong>",id:"-demo-interactivo-visualizando-el-call-stack-y-la-pila-de-funciones",level:2},{value:"\ud83d\udd04 <strong>Ejemplo Real Sencillo: C\xf3mo se Apilan las Funciones</strong>",id:"-ejemplo-real-sencillo-c\xf3mo-se-apilan-las-funciones",level:2},{value:"\ud83c\udf55 Simulador de Pedidos de Comida",id:"-simulador-de-pedidos-de-comida",level:2},{value:"\ud83c\udfaf <strong>C\xf3mo probar y ver el Call Stack en acci\xf3n:</strong>",id:"-c\xf3mo-probar-y-ver-el-call-stack-en-acci\xf3n",level:2},{value:"\ud83d\udcc8 <strong>Secuencia que ver\xe1s:</strong>",id:"-secuencia-que-ver\xe1s",level:2},{value:"\ud83d\udd0d <strong>Lo m\xe1s importante que ver\xe1s visualmente:</strong>",id:"-lo-m\xe1s-importante-que-ver\xe1s-visualmente",level:2},{value:"\ud83d\udea8 <strong>Stack Overflow (Desbordamiento de Pila)</strong>",id:"-stack-overflow-desbordamiento-de-pila",level:2},{value:"\ud83d\udcc1 <strong>1. stack-overflow.html</strong>",id:"-1-stack-overflowhtml",level:2},{value:"\u26a1 <strong>2. stack-overflow-demo.js</strong>",id:"-2-stack-overflow-demojs",level:2},{value:"\ud83c\udfaf <strong>C\xf3mo usar la demo:</strong>",id:"-c\xf3mo-usar-la-demo",level:2},{value:"<strong>Prueba Segura (No crashea):</strong>",id:"prueba-segura-no-crashea",level:3},{value:"<strong>Stack Overflow (\xa1Cuidado!):</strong>",id:"stack-overflow-cuidado",level:3},{value:"<strong>Recursi\xf3n Mutua:</strong>",id:"recursi\xf3n-mutua",level:3},{value:"\ud83d\udd0d <strong>Qu\xe9 observar:</strong>",id:"-qu\xe9-observar",level:2},{value:"\u26a0\ufe0f <strong>Advertencia importante:</strong>",id:"\ufe0f-advertencia-importante",level:2},{value:"\ud83e\udde9 <strong>Las Dos Colas: Task Queue vs Microtask Queue</strong>",id:"-las-dos-colas-task-queue-vs-microtask-queue",level:2},{value:"\ud83d\udd27 <strong>Task Queue (Cola de Tareas)</strong>",id:"-task-queue-cola-de-tareas",level:2},{value:"Sistema de Notificaciones con Prioridades",id:"sistema-de-notificaciones-con-prioridades",level:2},{value:"\ud83d\udcc1 <strong>1. index.html</strong>",id:"-1-indexhtml",level:2},{value:"\ud83c\udfa8 <strong>2. styles.css</strong>",id:"-2-stylescss",level:2},{value:"\u26a1 <strong>3. visualizacion.js</strong>",id:"-3-visualizacionjs",level:2},{value:"\u26a1 <strong>3. notificaciones.js</strong>",id:"-3-notificacionesjs",level:2},{value:"\ud83d\udccb <strong>Instrucciones de uso:</strong>",id:"-instrucciones-de-uso",level:2},{value:"\ud83c\udfaf <strong>Qu\xe9 podr\xe1s visualizar:</strong>",id:"-qu\xe9-podr\xe1s-visualizar",level:2},{value:"\ud83d\udd27 Microtask <strong>Queue</strong>",id:"-microtask-queue",level:2},{value:"Sistema de Cach\xe9 con Actualizaci\xf3n Inteligente",id:"sistema-de-cach\xe9-con-actualizaci\xf3n-inteligente",level:2},{value:"\ud83d\udcc1 <strong>1. index.html</strong>",id:"-1-indexhtml-1",level:2},{value:"\ud83c\udfa8 <strong>2. styles.css</strong>",id:"-2-stylescss-1",level:2},{value:"\u26a1 <strong>3. visualizacion.js</strong>",id:"-3-visualizacionjs-1",level:2},{value:"\u26a1 <strong>3. cache-system.js</strong>",id:"-3-cache-systemjs",level:2},{value:"\ud83d\udccb <strong>Instrucciones de uso:</strong>",id:"-instrucciones-de-uso-1",level:2},{value:"\ud83c\udfaf <strong>Qu\xe9 podr\xe1s visualizar:</strong>",id:"-qu\xe9-podr\xe1s-visualizar-1",level:2},{value:"\ud83d\udcbb <strong>Demo Interactivo: Todas las Colas en Acci\xf3n</strong>",id:"-demo-interactivo-todas-las-colas-en-acci\xf3n",level:2},{value:"\ud83e\udde9 <strong>\xbfQu\xe9 es Promise.all()?</strong>",id:"-qu\xe9-es-promiseall",level:2},{value:"\ud83c\udf89 <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real-4",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-6",level:3},{value:"\ud83d\udd27 <strong>Sintaxis B\xe1sica de Promise.all()</strong>",id:"-sintaxis-b\xe1sica-de-promiseall",level:2},{value:"\ud83d\udcbb <strong>Demo Interactivo: Promise.all() en Acci\xf3n</strong>",id:"-demo-interactivo-promiseall-en-acci\xf3n",level:2},{value:"\ud83d\udcc1 Estructura de Archivos",id:"-estructura-de-archivos",level:2},{value:"1. <strong>index.html</strong>",id:"1-indexhtml",level:3},{value:"2. <strong>styles.css</strong>",id:"2-stylescss",level:3},{value:"3. <strong>app.js</strong>",id:"3-appjs",level:3},{value:"\ud83d\udccb Instrucciones de Uso",id:"-instrucciones-de-uso-2",level:2},{value:"\ud83c\udfaf Conceptos Explicados",id:"-conceptos-explicados",level:2},{value:"<strong>Promise.all() - Comportamiento Clave:</strong>",id:"promiseall---comportamiento-clave",level:3},{value:"<strong>Casos de Uso Comunes:</strong>",id:"casos-de-uso-comunes",level:3},{value:"\ud83c\udfaf <strong>Caracter\xedsticas Clave de Promise.all()</strong>",id:"-caracter\xedsticas-clave-de-promiseall",level:2},{value:"<strong>Ventajas:</strong>",id:"ventajas",level:3},{value:"Cuando usar Promise.all()",id:"cuando-usar-promiseall",level:2},{value:"Cuando no usar Prmise All()",id:"cuando-no-usar-prmise-all",level:2},{value:"Alternativas",id:"alternativas",level:2},{value:"\ud83d\udd27 <strong>Alternativas a Promise.all()</strong>",id:"-alternativas-a-promiseall",level:2},{value:"<strong>Promise.allSettled()</strong> - No se detiene por errores. Sintaxis b\xe1sica.",id:"promiseallsettled---no-se-detiene-por-errores-sintaxis-b\xe1sica",level:3},{value:"<strong>Promise.race()</strong> - La primera que termine. Sintaxis b\xe1sica.",id:"promiserace---la-primera-que-termine-sintaxis-b\xe1sica",level:3},{value:"\u2705 <strong>\xbfCu\xe1ndo usar Promise.all()?</strong>",id:"-cu\xe1ndo-usar-promiseall",level:3},{value:"\u274c <strong>\xbfCu\xe1ndo NO usar Promise.all()?</strong>",id:"-cu\xe1ndo-no-usar-promiseall",level:3},{value:"\ud83d\udca1 <strong>Casos de Uso Reales:</strong>",id:"-casos-de-uso-reales",level:3},{value:"\ud83d\udcda \xbfQu\xe9 es Promise.race()?",id:"-qu\xe9-es-promiserace",level:2},{value:"\ud83d\udd0d Analog\xeda Simple:",id:"-analog\xeda-simple",level:3},{value:"\ud83d\udcbb C\xd3DIGO EJEMPLO SENCILLO",id:"-c\xf3digo-ejemplo-sencillo",level:3},{value:"\ud83c\udfaf SALIDA ESPERADA DEL C\xd3DIGO:",id:"-salida-esperada-del-c\xf3digo",level:3},{value:"\ud83d\udcd6 EXPLICACI\xd3N VISUAL",id:"-explicaci\xf3n-visual",level:3},{value:"\ud83c\udd9a COMPARACI\xd3N R\xc1PIDA",id:"-comparaci\xf3n-r\xe1pida",level:2},{value:"\ud83d\udca1 CASOS DE USO REALES",id:"-casos-de-uso-reales-1",level:3},{value:"1. <strong>Timeout Autom\xe1tico:</strong>",id:"1-timeout-autom\xe1tico",level:3},{value:"2. <strong>M\xfaltiples Servidores:</strong>",id:"2-m\xfaltiples-servidores",level:3},{value:"3. <strong>Carga con Fallback:</strong>",id:"3-carga-con-fallback",level:3},{value:"\ud83d\udcbb <strong>Demo Interactivo: Promise.race() en Acci\xf3n</strong>",id:"-demo-interactivo-promiserace-en-acci\xf3n",level:2},{value:"\ud83c\udfaf <strong>Caracter\xedsticas Clave de Promise.race()</strong>",id:"-caracter\xedsticas-clave-de-promiserace",level:2},{value:"\u2705 <strong>Comportamiento:</strong>",id:"-comportamiento",level:3},{value:"\u26a0\ufe0f <strong>Casos Especiales:</strong>",id:"\ufe0f-casos-especiales",level:3},{value:"\u2705 <strong>\xbfCu\xe1ndo usar Promise.race()?</strong>",id:"-cu\xe1ndo-usar-promiserace",level:3},{value:"\u274c <strong>\xbfCu\xe1ndo NO usar Promise.race()?</strong>",id:"-cu\xe1ndo-no-usar-promiserace",level:3},{value:"\ud83d\udca1 <strong>Diferencias con Promise.all():</strong>",id:"-diferencias-con-promiseall",level:3},{value:"\ud83d\udce5 <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real-5",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-7",level:3},{value:"\ud83d\udd27 <strong>Sintaxis B\xe1sica de AbortController</strong>",id:"-sintaxis-b\xe1sica-de-abortcontroller",level:2},{value:"\ud83d\udcbb <strong>Demo Interactivo: AbortController en Acci\xf3n</strong>",id:"-demo-interactivo-abortcontroller-en-acci\xf3n",level:2},{value:"\ud83c\udfaf <strong>Caracter\xedsticas Clave de AbortController</strong>",id:"-caracter\xedsticas-clave-de-abortcontroller",level:2},{value:"\u2705 <strong>Ventajas:</strong>",id:"-ventajas-1",level:3},{value:"\ud83d\udee0\ufe0f <strong>Operaciones que Soportan AbortController</strong>",id:"\ufe0f-operaciones-que-soportan-abortcontroller",level:2},{value:"<strong>1. Fetch API</strong>",id:"1-fetch-api",level:3},{value:"<strong>2. Promesas Personalizadas</strong>",id:"2-promesas-personalizadas",level:3},{value:"<strong>3. Event Listeners</strong>",id:"3-event-listeners",level:3},{value:"\ud83c\udfaf <strong>Casos de Uso Pr\xe1cticos</strong>",id:"-casos-de-uso-pr\xe1cticos",level:2},{value:"<strong>1. B\xfasqueda en Tiempo Real</strong>",id:"1-b\xfasqueda-en-tiempo-real",level:3},{value:"\ud83e\udde0 <strong>Explicaci\xf3n del flujo</strong>",id:"-explicaci\xf3n-del-flujo",level:3},{value:"\ud83e\uddea Simulaci\xf3n de API (opcional)",id:"-simulaci\xf3n-de-api-opcional",level:3},{value:"\ud83d\udccc Ventajas de este patr\xf3n",id:"-ventajas-de-este-patr\xf3n",level:3},{value:"\u2705 <strong>\xbfCu\xe1ndo usar AbortController?</strong>",id:"-cu\xe1ndo-usar-abortcontroller",level:3},{value:"\u274c <strong>Limitaciones:</strong>",id:"-limitaciones",level:3},{value:"\ud83d\udca1 <strong>Mejores Pr\xe1cticas:</strong>",id:"-mejores-pr\xe1cticas-1",level:3},{value:"\ud83d\udcde <strong>Ejemplo del mundo real:</strong>",id:"-ejemplo-del-mundo-real-6",level:3},{value:"\ud83d\udcbb <strong>Traducci\xf3n a JavaScript:</strong>",id:"-traducci\xf3n-a-javascript-8",level:3},{value:"\ud83d\udd27 <strong>Patr\xf3n B\xe1sico de Retry</strong>",id:"-patr\xf3n-b\xe1sico-de-retry",level:2},{value:"\ud83e\udde0 <strong>Qu\xe9 hace este patr\xf3n paso a paso</strong>:",id:"-qu\xe9-hace-este-patr\xf3n-paso-a-paso",level:3},{value:"\ud83d\udcbb <strong>Demo Interactivo: Retry Autom\xe1tico en Acci\xf3n</strong>",id:"-demo-interactivo-retry-autom\xe1tico-en-acci\xf3n",level:2},{value:"\ud83c\udfaf <strong>Estrategias de Backoff (Espera entre Reintentos)</strong>",id:"-estrategias-de-backoff-espera-entre-reintentos",level:2},{value:"<strong>1. Backoff Lineal</strong>",id:"1-backoff-lineal",level:3},{value:"<strong>2. Backoff Exponencial</strong>",id:"2-backoff-exponencial",level:3},{value:"<strong>3. Backoff Fibonacci</strong>",id:"3-backoff-fibonacci",level:3},{value:"<strong>4. Backoff con Jitter (Aleatoriedad)</strong>",id:"4-backoff-con-jitter-aleatoriedad",level:3},{value:"\ud83d\udd27 <strong>Patr\xf3n Avanzado: Retry con Circuit Breaker</strong>",id:"-patr\xf3n-avanzado-retry-con-circuit-breaker",level:2},{value:"\ud83c\udfaf <strong>Casos de Uso Pr\xe1cticos</strong>",id:"-casos-de-uso-pr\xe1cticos-1",level:2},{value:"<strong>1. Peticiones HTTP con Fetch</strong>",id:"1-peticiones-http-con-fetch",level:3},{value:"\ud83e\udde0 <strong>Qu\xe9 hace este patr\xf3n paso a paso</strong>",id:"-qu\xe9-hace-este-patr\xf3n-paso-a-paso-1",level:3},{value:"\ud83e\uddf0 Mejores pr\xe1cticas comunes que podr\xedas agregar:",id:"-mejores-pr\xe1cticas-comunes-que-podr\xedas-agregar",level:3},{value:"<strong>2. Conexiones de Base de Datos</strong>",id:"2-conexiones-de-base-de-datos",level:3},{value:"\ud83e\udde0 <strong>C\xf3mo funciona este patr\xf3n</strong>",id:"-c\xf3mo-funciona-este-patr\xf3n",level:3},{value:"\ud83d\udccc <strong>Ventajas pr\xe1cticas de este patr\xf3n</strong>",id:"-ventajas-pr\xe1cticas-de-este-patr\xf3n",level:3},{value:"<strong>3. Procesamiento de Archivos</strong>",id:"3-procesamiento-de-archivos",level:3},{value:"\ud83e\udde0 <strong>Qu\xe9 hace esta funci\xf3n paso a paso</strong>",id:"-qu\xe9-hace-esta-funci\xf3n-paso-a-paso",level:3},{value:"\ud83d\udccc <strong>Ventajas pr\xe1cticas de este patr\xf3n</strong>:",id:"-ventajas-pr\xe1cticas-de-este-patr\xf3n-1",level:3},{value:"\u2705 <strong>\xbfCu\xe1ndo usar Retry Autom\xe1tico?</strong>",id:"-cu\xe1ndo-usar-retry-autom\xe1tico",level:3},{value:"\u274c <strong>\xbfCu\xe1ndo NO usar Retry?</strong>",id:"-cu\xe1ndo-no-usar-retry",level:3},{value:"\ud83d\udca1 <strong>Mejores Pr\xe1cticas:</strong>",id:"-mejores-pr\xe1cticas-2",level:3},{value:"<strong>1. \ud83d\udea8 ERROR HANDLING AVANZADO</strong>",id:"1--error-handling-avanzado",level:3},{value:"<strong>2. \ud83d\udd04 PATRONES DE CONCURRENCIA</strong>",id:"2--patrones-de-concurrencia",level:3},{value:"<strong>3. \ud83d\udce1 STREAMS Y DATA FLOW</strong>",id:"3--streams-y-data-flow",level:3},{value:"<strong>4. \ud83d\udee1\ufe0f CIRCUIT BREAKER PATTERN</strong>",id:"4-\ufe0f-circuit-breaker-pattern",level:3},{value:"<strong>5. \u26a1 PERFORMANCE Y OPTIMIZACI\xd3N</strong>",id:"5--performance-y-optimizaci\xf3n",level:3},{value:"<strong>6. \ud83d\udd17 COMPOSICI\xd3N DE PROMESAS AVANZADA</strong>",id:"6--composici\xf3n-de-promesas-avanzada",level:3},{value:"<strong>7. \ud83c\udf10 ASINCRON\xcdA EN NODE.JS</strong>",id:"7--asincron\xeda-en-nodejs",level:3},{value:"\xbfPor qu\xe9 es importante manejar errores?",id:"por-qu\xe9-es-importante-manejar-errores",level:2},{value:"1. Callbacks - La forma antigua",id:"1-callbacks---la-forma-antigua",level:2},{value:"2. Promesas - La forma moderna",id:"2-promesas---la-forma-moderna",level:2},{value:"3. Async/Await - La forma m\xe1s legible",id:"3-asyncawait---la-forma-m\xe1s-legible",level:2},{value:"4. Ejemplo del Mundo Real: Cargar Datos de una API",id:"4-ejemplo-del-mundo-real-cargar-datos-de-una-api",level:2},{value:"Resumen de Reglas de Oro:",id:"resumen-de-reglas-de-oro",level:2},{value:"1. Patr\xf3n &quot;Result Object&quot; - Alternativa a Try/Catch",id:"1-patr\xf3n-result-object---alternativa-a-trycatch",level:2},{value:"2. Error Boundaries con Funci\xf3n Wrapper",id:"2-error-boundaries-con-funci\xf3n-wrapper",level:2},{value:"3. Patr\xf3n &quot;Railway Oriented Programming&quot;",id:"3-patr\xf3n-railway-oriented-programming",level:2},{value:"4. Sistema de Recuperaci\xf3n y Reintentos",id:"4-sistema-de-recuperaci\xf3n-y-reintentos",level:2},{value:"5. Monitorizaci\xf3n y Logging Avanzado",id:"5-monitorizaci\xf3n-y-logging-avanzado",level:2},{value:"Resumen de Metodolog\xedas Avanzadas:",id:"resumen-de-metodolog\xedas-avanzadas",level:2},{value:"\xbfQu\xe9 es la limitaci\xf3n de concurrencia?",id:"qu\xe9-es-la-limitaci\xf3n-de-concurrencia",level:2},{value:"\xbfPor qu\xe9 es importante en JavaScript?",id:"por-qu\xe9-es-importante-en-javascript",level:2},{value:"1. Ejemplo del Mundo Real: Cajeros del Banco",id:"1-ejemplo-del-mundo-real-cajeros-del-banco",level:2},{value:"2. Limitaci\xf3n Simple para Peticiones HTTP",id:"2-limitaci\xf3n-simple-para-peticiones-http",level:2},{value:"3. Patr\xf3n &quot;Pool de Workers&quot; Reutilizable",id:"3-patr\xf3n-pool-de-workers-reutilizable",level:2},{value:"4. Ejemplo con APIs Reales (fetch)",id:"4-ejemplo-con-apis-reales-fetch",level:2},{value:"Resumen Visual:",id:"resumen-visual",level:2},{value:"Reglas de Oro:",id:"reglas-de-oro",level:2},{value:"\xbfPor qu\xe9 necesitamos esto?",id:"por-qu\xe9-necesitamos-esto",level:2},{value:"Debouncing",id:"debouncing",level:2},{value:"Analog\xeda: El Ascensor",id:"analog\xeda-el-ascensor",level:3},{value:"Ejemplo Pr\xe1ctico: Search Input en una Web",id:"ejemplo-pr\xe1ctico-search-input-en-una-web",level:3},{value:"Throttling",id:"throttling",level:2},{value:"Analog\xeda: El Sem\xe1foro",id:"analog\xeda-el-sem\xe1foro",level:3},{value:"Ejemplo Pr\xe1ctico: Bot\xf3n de &quot;Cargar M\xe1s&quot;",id:"ejemplo-pr\xe1ctico-bot\xf3n-de-cargar-m\xe1s",level:3},{value:"Comparaci\xf3n directa",id:"comparaci\xf3n-directa",level:2},{value:"Casos de uso del mundo real",id:"casos-de-uso-del-mundo-real",level:2},{value:"Resumen Final:",id:"resumen-final",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"asincron\xeda",children:"Asincron\xeda"})}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-es-la-asincron\xeda-en-javascript",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es la Asincron\xeda en JavaScript?"})]}),"\n",(0,r.jsx)(e.p,{children:"Imagina que est\xe1s en un restaurante:"}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-ejemplo-del-mundo-real",children:["\ud83c\udf7d\ufe0f ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"S\xedncrono (sin asincron\xeda):"})," El camarero toma tu pedido, va a la cocina, ESPERA ah\xed hasta que tu comida est\xe9 lista, te la trae, y solo entonces atiende al siguiente cliente."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"As\xedncrono (con asincron\xeda):"})," El camarero toma tu pedido, lo env\xeda a la cocina, y MIENTRAS se cocina, \xe9l sigue atendiendo a otros clientes. Cuando tu comida est\xe1 lista, te la trae."]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:["La ",(0,r.jsx)(e.strong,{children:"asincron\xeda"})," significa que JavaScript puede empezar una tarea larga (como leer un archivo o hacer una petici\xf3n a internet) y ",(0,r.jsx)(e.strong,{children:"seguir haciendo otras cosas"}),' mientras espera, en lugar de "congelarse" esperando.']}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-real-leer-un-archivo-sin-bloquear-la-interfaz",children:["\ud83d\udcc1 ",(0,r.jsx)(e.strong,{children:"Ejemplo Real: Leer un Archivo SIN Bloquear la Interfaz"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo pr\xe1ctico que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Ejemplo de Asincron\xeda</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n      }\n      button {\n        padding: 10px 15px;\n        margin: 5px;\n        cursor: pointer;\n      }\n      #mensajes {\n        margin-top: 20px;\n        padding: 10px;\n        border: 1px solid #ccc;\n        background: #f9f9f9;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>\ud83d\udcc1 Demo: Leer archivo SIN bloquear la interfaz</h2>\n\n    \x3c!-- Input para seleccionar archivo --\x3e\n    <input type="file" id="archivoInput" accept=".txt" />\n\n    \x3c!-- Botones para demostrar que la interfaz NO se bloquea --\x3e\n    <div>\n      <button onclick="mostrarMensajeRapido()">\n        Haz clic aqu\xed (deber\xeda funcionar siempre)\n      </button>\n      <button onclick="contarNumeros()">Contar n\xfameros (tarea pesada)</button>\n    </div>\n\n    <div id="mensajes"></div>\n\n    <script>\n      const mensajesDiv = document.getElementById("mensajes");\n      const archivoInput = document.getElementById("archivoInput");\n\n      // Funci\xf3n para agregar mensajes a la pantalla\n      function agregarMensaje(mensaje) {\n        mensajesDiv.innerHTML += `<div>${new Date().toLocaleTimeString()}: ${mensaje}</div>`;\n      }\n\n      // 1\ufe0f\u20e3 DEMOSTRACI\xd3N: La interfaz responde incluso mientras leemos archivos\n      archivoInput.addEventListener("change", function (evento) {\n        const archivo = evento.target.files[0];\n\n        if (!archivo) {\n          agregarMensaje("\u274c No se seleccion\xf3 ning\xfan archivo");\n          return;\n        }\n\n        agregarMensaje("\ud83d\udcd6 **Comenzando a leer el archivo...**");\n\n        // FileReader lee archivos de forma ASINCR\xd3NICA\n        const lector = new FileReader();\n\n        // Esto se ejecutar\xe1 CUANDO TERMINE de leer el archivo\n        lector.onload = function () {\n          agregarMensaje(\n            "\u2705 **Archivo le\xeddo completo:** " +\n              lector.result.substring(0, 50) +\n              "..."\n          );\n        };\n\n        // Esto se ejecuta si hay ERROR\n        lector.onerror = function () {\n          agregarMensaje("\u274c Error al leer el archivo");\n        };\n\n        // INICIAMOS la lectura (esto es asincr\xf3nico)\n        lector.readAsText(archivo);\n\n        // Este mensaje aparece INMEDIATAMENTE, sin esperar a que termine la lectura\n        agregarMensaje(\n          "\u23f3 La lectura empez\xf3, pero puedes seguir usando los botones..."\n        );\n      });\n\n      // 2\ufe0f\u20e3 DEMOSTRACI\xd3N: Este bot\xf3n SIEMPRE debe funcionar\n      function mostrarMensajeRapido() {\n        agregarMensaje(\n          "\ud83c\udfaf \xa1Este bot\xf3n funciona! (La interfaz NO est\xe1 bloqueada)"\n        );\n      }\n\n      // 3\ufe0f\u20e3 COMPARACI\xd3N: Esto S\xcd bloquear\xeda la interfaz (NO asincr\xf3nico)\n      function contarNumeros() {\n        agregarMensaje("\ud83d\udd22 Comenzando conteo pesado...");\n\n        // Esto BLOQUEA la interfaz porque es s\xedncrono y toma tiempo\n        let resultado = 0;\n        for (let i = 0; i < 500000000; i++) {\n          resultado += i;\n        }\n\n        agregarMensaje("\u2714\ufe0f Conteo terminado: " + resultado);\n      }\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-est\xe1-pasando-aqu\xed",children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 est\xe1 pasando aqu\xed?"})]}),"\n",(0,r.jsxs)(e.h3,{id:"-comportamiento-asincr\xf3nico-filereader",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Comportamiento ASINCR\xd3NICO (FileReader):"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Seleccionas un archivo"}),"\n",(0,r.jsxs)(e.li,{children:["JavaScript ",(0,r.jsx)(e.strong,{children:"inicia"})," la lectura"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"INMEDIATAMENTE"}),' muestra el mensaje "La lectura empez\xf3..."']}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Puedes seguir haciendo clic en botones"})," mientras se lee el archivo"]}),"\n",(0,r.jsx)(e.li,{children:"Cuando termina la lectura, muestra el contenido"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-comportamiento-s\xedncrono-conteo-de-n\xfameros",children:["\u274c ",(0,r.jsx)(e.strong,{children:"Comportamiento S\xcdNCRONO (conteo de n\xfameros):"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:'Haces clic en "Contar n\xfameros"'}),"\n",(0,r.jsxs)(e.li,{children:["La interfaz ",(0,r.jsx)(e.strong,{children:"SE CONGELA"})," - no puedes hacer clic en otros botones"]}),"\n",(0,r.jsx)(e.li,{children:"Solo cuando termina el c\xe1lculo, todo vuelve a la normalidad"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Por lo tanto, La asincron\xeda en JavaScript permite ejecutar tareas sin bloquear el flujo principal del programa, lo que es esencial para manejar operaciones como peticiones a servidores, lectura de archivos o temporizadores Esta capacidad hace que las aplicaciones web sean m\xe1s r\xe1pidas, reactivas y eficientes."}),"\n",(0,r.jsx)(e.h2,{id:"ventajas-y-desaf\xedos-de-la-asincron\xeda",children:"Ventajas y desaf\xedos de la Asincron\xeda"}),"\n",(0,r.jsxs)(e.p,{children:["La asincron\xeda en JavaScript ofrece ventajas clave como una ",(0,r.jsx)(e.strong,{children:"interfaz de usuario m\xe1s fluida"}),", ",(0,r.jsx)(e.strong,{children:"manejo eficiente de operaciones I/O"})," y ",(0,r.jsx)(e.strong,{children:"mayor escalabilidad"})," en aplicaciones, especialmente en entornos como Node.js. Al permitir que tareas se ejecuten en segundo plano, evita que el hilo principal se bloquee, mejorando la experiencia del usuario y el rendimiento del sistema."]}),"\n",(0,r.jsxs)(e.p,{children:["Sin embargo, tambi\xe9n implica desaf\xedos: el ",(0,r.jsx)(e.strong,{children:"manejo de errores"})," puede ser m\xe1s complejo, la estructura del c\xf3digo puede volverse dif\xedcil de mantener (especialmente con callbacks), y pueden surgir ",(0,r.jsx)(e.strong,{children:"condiciones de carrera"})," si no se controlan correctamente los tiempos de ejecuci\xf3n. Aunque herramientas modernas como promesas y ",(0,r.jsx)(e.code,{children:"async/await"})," han simplificado mucho estas tareas, entender y manejar la asincron\xeda sigue siendo una habilidad avanzada."]}),"\n",(0,r.jsx)(e.p,{children:"La asincron\xeda en JavaScript se gestiona mediante tres mecanismos principales:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Callbacks"}),", funciones que se ejecutan tras completar una tarea, pero que pueden complicar el c\xf3digo (problema conocido como ",(0,r.jsx)(e.em,{children:"callback hell"}),")."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Promesas"}),", que ofrecen una forma m\xe1s estructurada de manejar tareas asincr\xf3nicas y sus posibles resultados (\xe9xito o error)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Async/Await"}),", que permite escribir c\xf3digo asincr\xf3nico de forma legible y parecida al c\xf3digo tradicional, facilitando el manejo y comprensi\xf3n del flujo del programa."]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-son-los-callbacks",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 son los Callbacks?"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"Imagina que le pides a un amigo que te llame cuando termine de trabajar:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real",children:["\ud83d\udcde ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:['Le dices: "Cuando termines tu trabajo, ',(0,r.jsx)(e.strong,{children:"ll\xe1mame"}),'"']}),"\n",(0,r.jsxs)(e.li,{children:["El ",(0,r.jsx)(e.strong,{children:"callback"}),' es esa "llamada" que recibes cuando la tarea est\xe1 completa']}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-1",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:["Un ",(0,r.jsx)(e.strong,{children:"callback"})," es simplemente una ",(0,r.jsx)(e.strong,{children:"funci\xf3n que se pasa como argumento"})," a otra funci\xf3n, y que se ejecutar\xe1 ",(0,r.jsx)(e.strong,{children:"cuando termine cierta tarea"}),"."]}),"\n",(0,r.jsxs)(e.h2,{id:"-ejemplos-pr\xe1cticos-de-callbacks",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Ejemplos Pr\xe1cticos de Callbacks"})]}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-1-callback-s\xedncrono-inmediato",children:(0,r.jsx)(e.strong,{children:"Ejemplo 1: Callback S\xcdNCRONO (inmediato)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Funci\xf3n que ACEPTA un callback\nfunction saludar(nombre, callback) {\n  console.log(`\ud83d\udc4b Hola ${nombre}`);\n  // Ejecutamos el callback inmediatamente\n  callback();\n}\n\n// Funci\xf3n callback que PASAMOS como argumento\nfunction despedirse() {\n  console.log("\xa1Hasta luego!");\n}\n\n// Usamos la funci\xf3n con nuestro callback\nsaludar("Mar\xeda", despedirse);\n\n// Resultado en consola:\n// \ud83d\udc4b Hola Mar\xeda\n// \xa1Hasta luego!\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-2-callback-asincr\xf3nico-con-settimeout",children:(0,r.jsx)(e.strong,{children:"Ejemplo 2: Callback ASINCR\xd3NICO (con setTimeout)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Funci\xf3n que hace algo y luego ejecuta el callback\nfunction hacerTarea(nombreTarea, duracion, callback) {\n  console.log(`\ud83d\udd28 Comenzando: ${nombreTarea}`);\n\n  // Simulamos una tarea que toma tiempo (ASINCR\xd3NICA)\n  setTimeout(function () {\n    console.log(`\u2705 Terminado: ${nombreTarea}`);\n    // Ejecutamos el callback CUANDO TERMINA la tarea\n    callback();\n  }, duracion);\n}\n\n// Callback que se ejecutar\xe1 cuando termine la tarea\nfunction tareaTerminada() {\n  console.log("\ud83c\udf89 \xa1Callback ejecutado! La tarea termin\xf3");\n}\n\n// Usamos la funci\xf3n\nhacerTarea("lavar platos", 2000, tareaTerminada);\nconsole.log("\ud83d\udcdd Mientras tanto, puedo seguir haciendo otras cosas...");\n\n// Resultado en consola:\n// \ud83d\udd28 Comenzando: lavar platos\n// \ud83d\udcdd Mientras tanto, puedo seguir haciendo otras cosas...\n// (espera 2 segundos...)\n// \u2705 Terminado: lavar platos\n// \ud83c\udf89 \xa1Callback ejecutado! La tarea termin\xf3\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-ejemplo-real-callbacks-con-filereader",children:["\ud83d\udcc1 ",(0,r.jsx)(e.strong,{children:"Ejemplo Real: Callbacks con FileReader"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes el ejemplo pr\xe1ctico que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Callbacks en Acci\xf3n</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n      }\n      #contenedor {\n        margin: 20px 0;\n      }\n      .mensaje {\n        padding: 10px;\n        margin: 5px 0;\n        border-left: 4px solid #007bff;\n        background: #f8f9fa;\n      }\n      .exito {\n        border-left-color: #28a745;\n        background: #d4edda;\n      }\n      .error {\n        border-left-color: #dc3545;\n        background: #f8d7da;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>\ud83d\udcde Demo: Callbacks en JavaScript</h2>\n\n    <div>\n      <button onclick="demoCallbackSincrono()">Callback Sincrono</button>\n      <button onclick="demoCallbackAsincrono()">Callback Asincrono</button>\n      <input type="file" id="archivo" accept=".txt" />\n    </div>\n\n    <div id="contenedor"></div>\n\n    <script>\n      const contenedor = document.getElementById("contenedor");\n\n      function mostrarMensaje(texto, tipo = "info") {\n        const div = document.createElement("div");\n        div.className = `mensaje ${tipo}`;\n        div.textContent = `${new Date().toLocaleTimeString()}: ${texto}`;\n        contenedor.appendChild(div);\n      }\n\n      // 1\ufe0f\u20e3 CALLBACK S\xcdNCRONO\n      function demoCallbackSincrono() {\n        mostrarMensaje("--- CALLBACK S\xcdNCRONO ---");\n\n        // Funci\xf3n que usa un callback\n        function procesarArray(array, callback) {\n          mostrarMensaje(`Procesando array: [${array}]`);\n\n          // Por cada elemento, ejecutamos el callback\n          for (let i = 0; i < array.length; i++) {\n            callback(array[i], i);\n          }\n\n          mostrarMensaje("Procesamiento terminado");\n        }\n\n        // Callback que pasamos como argumento\n        function mostrarElemento(elemento, indice) {\n          mostrarMensaje(`Elemento ${indice}: ${elemento}`);\n        }\n\n        // Usamos la funci\xf3n con nuestro callback\n        procesarArray(["manzana", "naranja", "pl\xe1tano"], mostrarElemento);\n      }\n\n      // 2\ufe0f\u20e3 CALLBACK ASINCR\xd3NICO\n      function demoCallbackAsincrono() {\n        mostrarMensaje("--- CALLBACK ASINCR\xd3NICO ---");\n\n        function tareaLarga(nombre, segundos, callbackExito, callbackError) {\n          mostrarMensaje(`\u23f3 Iniciando tarea: ${nombre}`);\n\n          setTimeout(() => {\n            // Simulamos que a veces falla\n            const exito = Math.random() > 0.3;\n\n            if (exito) {\n              mostrarMensaje(`\u2705 ${nombre} completada`);\n              callbackExito(`Resultado de ${nombre}`);\n            } else {\n              mostrarMensaje(`\u274c ${nombre} fall\xf3`);\n              callbackError(`Error en ${nombre}`);\n            }\n          }, segundos * 1000);\n        }\n\n        // Callbacks para \xe9xito y error\n        function cuandoExito(resultado) {\n          mostrarMensaje(`\ud83c\udf89 \xa1\xc9xito! ${resultado}`, "exito");\n        }\n\n        function cuandoError(error) {\n          mostrarMensaje(`\ud83d\ude1e Fall\xf3: ${error}`, "error");\n        }\n\n        // Ejecutamos la tarea con callbacks\n        tareaLarga("Descargar archivo", 2, cuandoExito, cuandoError);\n        mostrarMensaje("\ud83d\udcdd Esta l\xednea se ejecuta INMEDIATAMENTE, sin esperar");\n      }\n\n      // 3\ufe0f\u20e3 CALLBACK EN EL MUNDO REAL: FileReader\n      document\n        .getElementById("archivo")\n        .addEventListener("change", function (e) {\n          const archivo = e.target.files[0];\n          if (!archivo) return;\n\n          mostrarMensaje("--- FILEREADER CON CALLBACKS ---");\n\n          const lector = new FileReader();\n\n          // CALLBACK para cuando se carga el archivo\n          lector.onload = function (evento) {\n            mostrarMensaje(`\ud83d\udcc4 Archivo le\xeddo: ${archivo.name}`, "exito");\n            mostrarMensaje(\n              `Contenido: ${evento.target.result.substring(0, 50)}...`\n            );\n          };\n\n          // CALLBACK para errores\n          lector.onerror = function () {\n            mostrarMensaje("\u274c Error leyendo el archivo", "error");\n          };\n\n          // CALLBACK para progreso\n          lector.onprogress = function (evento) {\n            if (evento.lengthComputable) {\n              const porcentaje = (evento.loaded / evento.total) * 100;\n              mostrarMensaje(`\ud83d\udcca Progreso: ${porcentaje.toFixed(1)}%`);\n            }\n          };\n\n          lector.readAsText(archivo);\n          mostrarMensaje(\n            "\ud83d\udd04 Lectura iniciada... puedes seguir usando los botones"\n          );\n        });\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ventajas",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ventajas:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Sencillos de entender al principio"}),"\n",(0,r.jsx)(e.li,{children:"Permiten manejar operaciones as\xedncronas"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-problemas-lo-veremos-despu\xe9s",children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Problemas (lo veremos despu\xe9s):"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Callback Hell"}),": Callbacks dentro de callbacks dentro de callbacks..."]}),"\n",(0,r.jsx)(e.li,{children:"D\xedficil manejo de errores"}),"\n",(0,r.jsx)(e.li,{children:"C\xf3digo dif\xedcil de leer y mantener"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-es-el-callback-hell",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es el Callback Hell?"})]}),"\n",(0,r.jsx)(e.p,{children:"Imagina que est\xe1s organizando una fiesta y necesitas:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Comprar ingredientes"})," \u2192 luego"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Cocinar"})," \u2192 luego"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Decorar"})," \u2192 luego"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Enviar invitaciones"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Cada paso DEPENDE del anterior. Con callbacks, esto se convierte en..."}),"\n",(0,r.jsxs)(e.h3,{id:"-el-infierno-de-los-callbacks-callback-hell",children:["\ud83d\udd25 ",(0,r.jsx)(e.strong,{children:"El Infierno de los Callbacks (Callback Hell)"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// \xa1ESTE ES EL CALLBACK HELL!\ncomprarIngredientes(function (ingredientes) {\n  cocinar(ingredientes, function (comida) {\n    decorar(function () {\n      enviarInvitaciones(function () {\n        console.log("\ud83c\udf89 \xa1Fiesta lista!");\n        // \xbfY si quiero agregar m\xe1s pasos?\n        limpiarCasa(function () {\n          prepararMusica(function () {\n            // \ud83d\ude35 \xa1Se vuelve inmanejable!\n          });\n        });\n      });\n    });\n  });\n});\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-real-callback-hell-en-acci\xf3n",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Ejemplo Real: Callback Hell en Acci\xf3n"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un demo interactivo para que veas el problema:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Callback Hell - Demo Interactivo</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        padding: 20px;\n        background: #f5f5f5;\n      }\n      .container {\n        max-width: 800px;\n        margin: 0 auto;\n        background: white;\n        padding: 20px;\n        border-radius: 10px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      }\n      .paso {\n        padding: 10px;\n        margin: 10px 0;\n        border-left: 4px solid;\n        background: #f8f9fa;\n      }\n      .paso-1 {\n        border-color: #007bff;\n      }\n      .paso-2 {\n        border-color: #28a745;\n        margin-left: 20px;\n      }\n      .paso-3 {\n        border-color: #ffc107;\n        margin-left: 40px;\n      }\n      .paso-4 {\n        border-color: #dc3545;\n        margin-left: 60px;\n      }\n      .paso-5 {\n        border-color: #6f42c1;\n        margin-left: 80px;\n      }\n      .error {\n        background: #f8d7da;\n        border-color: #dc3545;\n      }\n      .exito {\n        background: #d4edda;\n        border-color: #28a745;\n      }\n      button {\n        padding: 10px 15px;\n        margin: 5px;\n        cursor: pointer;\n        border: none;\n        border-radius: 5px;\n      }\n      .btn-bueno {\n        background: #28a745;\n        color: white;\n      }\n      .btn-malo {\n        background: #dc3545;\n        color: white;\n      }\n      .codigo {\n        background: #2d2d2d;\n        color: #f8f9fa;\n        padding: 15px;\n        border-radius: 5px;\n        font-family: "Courier New", monospace;\n        margin: 15px 0;\n        overflow-x: auto;\n      }\n    </style>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83d\udd25 Callback Hell - Demo Interactivo</h1>\n\n      <p>\n        <strong>Problema:</strong> Callbacks dentro de callbacks dentro de\n        callbacks...\n      </p>\n\n      <div class="codigo">\n        // \xa1C\xd3DIGO DEL INFIERNO! \ud83d\ude08<br />\n        loginUsuario(function(usuario) {<br />\n        &nbsp;&nbsp;obtenerDatosUsuario(usuario, function(datos) {<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;cargarAmigos(datos, function(amigos) {<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cargarFotos(amigos, function(fotos)\n        {<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// \xbfD\xf3nde estoy?\n        \xa1Socorro!<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;});<br />\n        &nbsp;&nbsp;});<br />\n        });\n      </div>\n\n      <button class="btn-malo" onclick="ejecutarCallbackHell()">\n        \ud83d\udd34 Ejecutar Callback Hell\n      </button>\n      <button class="btn-bueno" onclick="ejecutarConPromesas()">\n        \ud83d\udfe2 Ejecutar con Promesas\n      </button>\n\n      <div id="resultado" style="margin-top: 20px;"></div>\n    </div>\n\n    <script>\n      const resultado = document.getElementById("resultado");\n\n      function limpiarResultado() {\n        resultado.innerHTML = "";\n      }\n\n      function agregarPaso(texto, nivel = 1, tipo = "info") {\n        const div = document.createElement("div");\n        div.className = `paso paso-${nivel} ${tipo}`;\n        div.innerHTML = `${new Date().toLocaleTimeString()}: ${texto}`;\n        resultado.appendChild(div);\n      }\n\n      // Simulamos funciones asincr\xf3nicas con callbacks\n      function simularTarea(\n        nombre,\n        duracion,\n        callbackExito,\n        callbackError = null\n      ) {\n        setTimeout(() => {\n          // Simulamos un 20% de probabilidad de error\n          const exito = Math.random() > 0.2;\n\n          if (exito) {\n            callbackExito(`Resultado de ${nombre}`);\n          } else {\n            if (callbackError) {\n              callbackError(`Error en ${nombre}`);\n            } else {\n              // Si no hay manejo de errores... \xa1CRASH!\n              throw new Error(`Error no manejado en: ${nombre}`);\n            }\n          }\n        }, duracion);\n      }\n\n      // \ud83d\udd25 VERSI\xd3N CON CALLBACK HELL\n      function ejecutarCallbackHell() {\n        limpiarResultado();\n        agregarPaso("\ud83d\ude80 INICIANDO CALLBACK HELL...", 1);\n\n        // \xa1ESTE ES EL INFIERNO!\n        simularTarea(\n          "Paso 1: Login",\n          1000,\n          function (resultado1) {\n            agregarPaso(`\u2705 ${resultado1}`, 1, "exito");\n\n            simularTarea(\n              "Paso 2: Cargar perfil",\n              800,\n              function (resultado2) {\n                agregarPaso(`\u2705 ${resultado2}`, 2, "exito");\n\n                simularTarea(\n                  "Paso 3: Cargar amigos",\n                  600,\n                  function (resultado3) {\n                    agregarPaso(`\u2705 ${resultado3}`, 3, "exito");\n\n                    simularTarea(\n                      "Paso 4: Cargar fotos",\n                      400,\n                      function (resultado4) {\n                        agregarPaso(`\u2705 ${resultado4}`, 4, "exito");\n\n                        simularTarea(\n                          "Paso 5: Mostrar dashboard",\n                          200,\n                          function (resultado5) {\n                            agregarPaso(`\u2705 ${resultado5}`, 5, "exito");\n                            agregarPaso("\ud83c\udf89 \xa1Proceso completado!", 1, "exito");\n                          },\n                          function (error) {\n                            agregarPaso(`\u274c ${error} - TODO FALL\xd3`, 5, "error");\n                          }\n                        );\n                      },\n                      function (error) {\n                        agregarPaso(\n                          `\u274c ${error} - No se pudieron cargar fotos`,\n                          4,\n                          "error"\n                        );\n                      }\n                    );\n                  },\n                  function (error) {\n                    agregarPaso(\n                      `\u274c ${error} - No se pudieron cargar amigos`,\n                      3,\n                      "error"\n                    );\n                  }\n                );\n              },\n              function (error) {\n                agregarPaso(\n                  `\u274c ${error} - No se pudo cargar perfil`,\n                  2,\n                  "error"\n                );\n              }\n            );\n          },\n          function (error) {\n            agregarPaso(`\u274c ${error} - Login fall\xf3`, 1, "error");\n          }\n        );\n      }\n\n      // \u2705 VERSI\xd3N CON PROMESAS (para comparar)\n      function ejecutarConPromesas() {\n        limpiarResultado();\n        agregarPaso("\ud83d\ude80 INICIANDO CON PROMESAS...", 1);\n\n        // Esto lo veremos en la siguiente clase, pero muestra la diferencia\n        agregarPaso("\ud83d\udcdd Con promesas ser\xeda algo as\xed:", 1);\n        agregarPaso("loginUsuario()", 1);\n        agregarPaso(".then(obtenerDatosUsuario)", 2);\n        agregarPaso(".then(cargarAmigos)", 3);\n        agregarPaso(".then(cargarFotos)", 4);\n        agregarPaso(".then(mostrarDashboard)", 5);\n        agregarPaso(".catch(manejarError) \u2190 \xa1UN SOLO MANEJADOR!", 1, "exito");\n      }\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-los-problemas-del-callback-hell",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Los Problemas del Callback Hell"})]}),"\n",(0,r.jsxs)(e.h3,{id:"1--pir\xe1mide-de-la-muerte-pyramid-of-doom",children:["1. ",(0,r.jsx)(e.strong,{children:"\ud83d\udd3a Pir\xe1mide de la Muerte (Pyramid of Doom)"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// C\xf3digo que se va desplazando hacia la derecha...\ntarea1(function () {\n  tarea2(function () {\n    tarea3(function () {\n      tarea4(function () {\n        tarea5(function () {\n          // \xbfD\xf3nde empez\xf3 esto?\n        });\n      });\n    });\n  });\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"2--manejo-de-errores-complicado",children:["2. ",(0,r.jsx)(e.strong,{children:"\u274c Manejo de Errores Complicado"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// \xa1Tengo que manejar errores en CADA nivel!\ntarea1(\n  function (result1) {\n    tarea2(\n      result1,\n      function (result2) {\n        tarea3(\n          result2,\n          function (result3) {\n            // \xc9xito\n          },\n          function (error3) {\n            // Error en tarea3\n          }\n        );\n      },\n      function (error2) {\n        // Error en tarea2\n      }\n    );\n  },\n  function (error1) {\n    // Error en tarea1\n  }\n);\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"3--d\xedficil-de-reutilizar",children:["3. ",(0,r.jsx)(e.strong,{children:"\ud83d\udd04 D\xedficil de Reutilizar"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// \xbfC\xf3mo reutilizo solo los pasos 2 y 3?\nfunction procesoCompleto(callback) {\n  paso1(function () {\n    paso2(function () {\n      paso3(function () {\n        paso4(function () {\n          callback();\n        });\n      });\n    });\n  });\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"4--d\xedficil-de-depurar",children:["4. ",(0,r.jsx)(e.strong,{children:"\ud83d\udc1b D\xedficil de Depurar"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\xbfEn qu\xe9 paso fall\xf3?"}),"\n",(0,r.jsxs)(e.li,{children:["\xbfD\xf3nde poner ",(0,r.jsx)(e.code,{children:"console.log"}),"?"]}),"\n",(0,r.jsx)(e.li,{children:"El stack trace se pierde en callbacks"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-proceso-de-compra",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Ejemplo del Mundo Real: Proceso de Compra"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// CALLBACK HELL en un proceso de compra\nprocesarPago(function (pagoExitoso) {\n  if (pagoExitoso) {\n    verificarInventario(function (inventarioDisponible) {\n      if (inventarioDisponible) {\n        generarFactura(function (factura) {\n          enviarEmailConfirmacion(function (emailEnviado) {\n            if (emailEnviado) {\n              actualizarInventario(function () {\n                console.log("\u2705 Compra completada");\n              });\n            } else {\n              console.log("\u274c Error enviando email");\n            }\n          });\n        });\n      } else {\n        console.log("\u274c Sin inventario");\n      }\n    });\n  } else {\n    console.log("\u274c Pago fall\xf3");\n  }\n});\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-se\xf1ales-de-callback-hell",children:["\ud83d\udd25 ",(0,r.jsx)(e.strong,{children:"Se\xf1ales de Callback Hell:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mucha indentaci\xf3n"})," hacia la derecha"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsxs)(e.strong,{children:["}",(0,r.jsx)(e.code,{children:"});"}),"}",(0,r.jsx)(e.code,{children:"});"}),"}`});"]})," al final"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"D\xedficil seguir"})," la l\xf3gica del c\xf3digo"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"M\xfaltiples manejadores"})," de errores"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-soluciones",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Soluciones"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Promesas"})," - Para c\xf3digo m\xe1s plano"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Async/Await"})," - Para c\xf3digo que parece s\xedncrono"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Funciones separadas"})," - Dividir en funciones m\xe1s peque\xf1as"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["En el siguiente enlace tienes mas ejemplo de ",(0,r.jsx)(e.a,{href:"https://codepen.io/oslar/pen/bNEvBaN",children:"CallbackHell"})]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-son-las-promesas",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 son las Promesas?"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"Imagina que le pides a un amigo que te traiga un libro de la biblioteca:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-1",children:["\ud83d\udcda ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:['Tu amigo te dice: "',(0,r.jsx)(e.strong,{children:"Te prometo"}),' que te traer\xe9 el libro"']}),"\n",(0,r.jsxs)(e.li,{children:["La promesa puede tener 3 estados:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud83d\udcdd Pendiente:"})," Est\xe1 yendo a la biblioteca"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Cumplida:"})," Te trae el libro"]}),"\n",(0,r.jsxs)(e.li,{children:["\u274c ",(0,r.jsx)(e.strong,{children:"Rechazada:"})," No hab\xeda libros o la biblioteca estaba cerrada"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-2",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:["Una ",(0,r.jsx)(e.strong,{children:"Promesa"})," es un objeto que representa una operaci\xf3n que ",(0,r.jsx)(e.strong,{children:"puede completarse ahora o en el futuro"}),", y que eventualmente producir\xe1 un valor."]}),"\n",(0,r.jsxs)(e.h3,{id:"-estructura-b\xe1sica-de-una-promesa",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Estructura B\xe1sica de una Promesa"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Creando una promesa\nconst miPromesa = new Promise((resolve, reject) => {\n  // Aqu\xed va el c\xf3digo asincr\xf3nico\n\n  const exito = true; // Simulamos que puede salir bien o mal\n\n  if (exito) {\n    resolve("\ud83c\udf89 \xa1La operaci\xf3n fue exitosa!"); // Se cumpli\xf3 la promesa\n  } else {\n    reject("\u274c Algo sali\xf3 mal"); // Se rechaz\xf3 la promesa\n  }\n});\n\n// Usando la promesa\nmiPromesa\n  .then((resultado) => {\n    console.log(resultado); // Se ejecuta si se RESUELVE\n  })\n  .catch((error) => {\n    console.log(error); // Se ejecuta si se RECHAZA\n  });\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-real-demo-interactivo-de-promesas",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Ejemplo Real: Demo Interactivo de Promesas"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Promesas en JavaScript - Demo Interactivo</title>\n    <body>\n    <div class="container">\n      <h1>\ud83e\udd1d Promesas en JavaScript</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> Una promesa es un objeto que\n        representa una tarea que\n        <strong>puede completarse ahora o en el futuro</strong>.\n      </p>\n\n      <div class="ejemplo">\n        <h3>\ud83d\udcdd Estados de una Promesa:</h3>\n        <div class="estado pendiente">\u23f3 PENDING (Pendiente)</div>\n        <div class="estado cumplida">\u2705 FULFILLED (Cumplida)</div>\n        <div class="estado rechazada">\u274c REJECTED (Rechazada)</div>\n      </div>\n\n      <h2>\ud83c\udfaf Demo Interactivo</h2>\n\n      <button class="btn-exito" onclick="ejecutarPromesaExitosa()">\n        \u2705 Probar Promesa Exitosa\n      </button>\n      <button class="btn-error" onclick="ejecutarPromesaFallida()">\n        \u274c Probar Promesa Fallida\n      </button>\n      <button class="btn-ejemplo" onclick="simularLlamadaAPI()">\n        \ud83c\udf10 Simular Llamada API\n      </button>\n\n      <div id="resultado" style="margin-top: 20px;"></div>\n\n      <div class="codigo">\n        // CREAR una promesa:<br />\n        const promesa = new Promise((resolve, reject) => {<br />\n        &nbsp;&nbsp;// C\xf3digo asincr\xf3nico aqu\xed<br />\n        &nbsp;&nbsp;if (todoBien) {<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;resolve("\u2705 \xc9xito");<br />\n        &nbsp;&nbsp;} else {<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;reject("\u274c Error");<br />\n        &nbsp;&nbsp;}<br />\n        });<br /><br />\n        // USAR la promesa:<br />\n        promesa<br />\n        &nbsp;&nbsp;.then(resultado => console.log(resultado))<br />\n        &nbsp;&nbsp;.catch(error => console.log(error));\n      </div>\n    </div>\n    </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.estado {\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 5px;\n  text-align: center;\n  font-weight: bold;\n}\n.pendiente {\n  background: #fff3cd;\n  color: #856404;\n  border: 2px dashed #ffc107;\n}\n.cumplida {\n  background: #d4edda;\n  color: #155724;\n  border: 2px solid #28a745;\n}\n.rechazada {\n  background: #f8d7da;\n  color: #721c24;\n  border: 2px solid #dc3545;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-exito {\n  background: #28a745;\n  color: white;\n}\n.btn-error {\n  background: #dc3545;\n  color: white;\n}\n.btn-ejemplo {\n  background: #007bff;\n  color: white;\n}\n.ejemplo {\n  background: #e9ecef;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n  border-left: 4px solid #007bff;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Obtenemos del DOM (documento HTML) el elemento con id="resultado".\n// Este ser\xe1 el contenedor donde mostraremos mensajes en pantalla.\nconst resultado = document.getElementById("resultado");\n\n/**\n * \ud83d\udce2 Funci\xf3n mostrarMensaje\n * Muestra en pantalla un mensaje con un tipo visual (info, pendiente, cumplida, rechazada\u2026)\n * y a\xf1ade una marca de tiempo.\n *\n * @param {string} mensaje - El texto que queremos mostrar al usuario\n * @param {string} tipo - Tipo de mensaje (por defecto "info"). Se usa como clase CSS para estilos diferentes.\n */\nfunction mostrarMensaje(mensaje, tipo = "info") {\n  // Creamos din\xe1micamente un nuevo elemento <div>\n  const div = document.createElement("div");\n\n  // Asignamos al div una clase compuesta: "estado" y el tipo.\n  // Ejemplo: "estado cumplida" \u2192 esto sirve para aplicar estilos CSS diferentes.\n  div.className = `estado ${tipo}`;\n\n  // Insertamos en el interior del div el texto junto a la hora actual.\n  // toLocaleTimeString() nos da la hora local en formato legible (hh:mm:ss)\n  div.innerHTML = `${new Date().toLocaleTimeString()}: ${mensaje}`;\n\n  // A\xf1adimos el div como hijo al contenedor \'resultado\', as\xed se mostrar\xe1 en pantalla.\n  resultado.appendChild(div);\n}\n\n/**\n * \ud83e\uddf9 Funci\xf3n limpiarResultado\n * Borra todo el contenido del contenedor "resultado".\n * Esto se usa antes de iniciar una nueva demostraci\xf3n para no mezclar mensajes antiguos.\n */\nfunction limpiarResultado() {\n  resultado.innerHTML = "";\n}\n\n// -----------------------------------------------------------------------------\n// 1\ufe0f\u20e3 PROMESA EXITOSA\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83d\udfe2 ejecutarPromesaExitosa\n * Crea y ejecuta una promesa que se resuelve correctamente despu\xe9s de 2 segundos.\n * Sirve para entender c\xf3mo funciona el flujo as\xedncrono cuando la promesa se cumple.\n */\nfunction ejecutarPromesaExitosa() {\n  // Primero limpiamos el resultado para tener una "pantalla" limpia.\n  limpiarResultado();\n\n  // Mostramos un primer mensaje informativo al usuario.\n  mostrarMensaje("\ud83d\ude80 Creando promesa exitosa...", "pendiente");\n\n  // Creamos una nueva promesa manualmente.\n  // Esta promesa simula una tarea que tarda 2 segundos en completarse.\n  const promesaExitosa = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Despu\xe9s de 2 segundos llamamos a resolve, que indica "\xa1todo fue bien!".\n      resolve("\ud83c\udf89 \xa1La promesa se cumpli\xf3 exitosamente!");\n    }, 2000);\n  });\n\n  // Usamos la promesa reci\xe9n creada\n  promesaExitosa\n    // .then() se ejecuta cuando la promesa se resuelve correctamente.\n    .then((resultado) => {\n      mostrarMensaje(resultado, "cumplida");\n    })\n    // .catch() se ejecuta si la promesa fue rechazada (en este caso no ocurrir\xe1, pero es buena pr\xe1ctica incluirlo).\n    .catch((error) => {\n      mostrarMensaje(error, "rechazada");\n    });\n\n  // Importante: esta l\xednea se ejecuta inmediatamente,\n  // antes de que la promesa se cumpla.\n  // Esto demuestra que las promesas NO bloquean el flujo principal.\n  mostrarMensaje(\n    "\ud83d\udcdd Esta l\xednea se ejecuta INMEDIATAMENTE (la promesa est\xe1 pendiente)",\n    "pendiente"\n  );\n}\n\n// -----------------------------------------------------------------------------\n// 2\ufe0f\u20e3 PROMESA FALLIDA\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83d\udd34 ejecutarPromesaFallida\n * Crea una promesa que falla (reject) despu\xe9s de 2 segundos.\n * Sirve para aprender a manejar errores con promesas.\n */\nfunction ejecutarPromesaFallida() {\n  limpiarResultado();\n  mostrarMensaje("\ud83d\ude80 Creando promesa que fallar\xe1...", "pendiente");\n\n  // Creamos una promesa que rechaza en lugar de resolver.\n  const promesaFallida = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulamos que ocurri\xf3 un error.\n      reject("\ud83d\ude1e La promesa fue rechazada - algo sali\xf3 mal");\n    }, 2000);\n  });\n\n  promesaFallida\n    .then((resultado) => {\n      // Esto no se ejecutar\xe1 porque la promesa falla.\n      mostrarMensaje(resultado, "cumplida");\n    })\n    .catch((error) => {\n      // Esto s\xed se ejecutar\xe1 porque la promesa fue rechazada.\n      mostrarMensaje(error, "rechazada");\n    });\n}\n\n// -----------------------------------------------------------------------------\n// 3\ufe0f\u20e3 EJEMPLO REAL: Simular llamada a API\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83c\udf10 simularLlamadaAPI\n * Simula el comportamiento t\xedpico de una llamada a una API externa:\n * - Tarda un tiempo en responder\n * - A veces responde con \xe9xito, otras veces falla\n * - Devuelve datos o un error\n * - Utiliza finally() para hacer algo sin importar el resultado\n */\nfunction simularLlamadaAPI() {\n  limpiarResultado();\n  mostrarMensaje("\ud83c\udf10 Simulando llamada a API...", "pendiente");\n\n  /**\n   * \ud83d\udce1 llamadaAPI\n   * Esta funci\xf3n devuelve una promesa que simula la respuesta de un servidor.\n   * No realiza una llamada real, solo emula tiempos de espera y respuestas aleatorias.\n   */\n  function llamadaAPI() {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Math.random() devuelve un n\xfamero entre 0 y 1.\n        // Si es mayor a 0.3 consideramos que la API "funcion\xf3".\n        const exito = Math.random() > 0.3;\n\n        if (exito) {\n          // Datos simulados de un usuario obtenidos desde la "API"\n          const datosUsuario = {\n            id: 1,\n            nombre: "Ana Garc\xeda",\n            email: "ana@ejemplo.com",\n          };\n          resolve(datosUsuario); // promesa resuelta exitosamente\n        } else {\n          // Simulamos un error t\xedpico de red o servidor.\n          reject("\ud83d\udd34 Error 404: API no disponible");\n        }\n      }, 1500); // simulamos que tarda 1.5 segundos en responder\n    });\n  }\n\n  // Consumimos la promesa devuelta por llamadaAPI\n  llamadaAPI()\n    .then((usuario) => {\n      // Si la promesa se resuelve correctamente, mostramos los datos recibidos.\n      mostrarMensaje(\n        `\u2705 Usuario obtenido: ${usuario.nombre} (${usuario.email})`,\n        "cumplida"\n      );\n    })\n    .catch((error) => {\n      // Si algo falla, mostramos el error al usuario.\n      mostrarMensaje(error, "rechazada");\n    })\n    .finally(() => {\n      // finally() se ejecuta SIEMPRE, haya \xe9xito o error.\n      // Es ideal para tareas de limpieza o mensajes finales.\n      mostrarMensaje("\ud83c\udfc1 La operaci\xf3n termin\xf3 (\xe9xito o error)");\n    });\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-convertir-callbacks-a-promesas",children:["\ud83d\udd04 ",(0,r.jsx)(e.strong,{children:"Convertir Callbacks a Promesas"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed est\xe1 c\xf3mo solucionamos el Callback Hell con promesas:"}),"\n",(0,r.jsxs)(e.h3,{id:"-antes-callback-hell",children:["\u274c ",(0,r.jsx)(e.strong,{children:"ANTES (Callback Hell):"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// \ud83d\ude35 Callback Hell\nhacerTarea1(\n  function (result1) {\n    hacerTarea2(\n      result1,\n      function (result2) {\n        hacerTarea3(\n          result2,\n          function (result3) {\n            console.log("Resultado final:", result3);\n          },\n          function (error3) {\n            console.error("Error en tarea 3:", error3);\n          }\n        );\n      },\n      function (error2) {\n        console.error("Error en tarea 2:", error2);\n      }\n    );\n  },\n  function (error1) {\n    console.error("Error en tarea 1:", error1);\n  }\n);\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ahora-con-promesas",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"AHORA (con Promesas):"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// \ud83d\ude0e Con Promesas (mucho m\xe1s limpio)\nhacerTarea1()\n  .then((result1) => hacerTarea2(result1))\n  .then((result2) => hacerTarea3(result2))\n  .then((result3) => {\n    console.log("Resultado final:", result3);\n  })\n  .catch((error) => {\n    // \xa1UN SOLO manejador de errores para TODAS las tareas!\n    console.error("Algo fall\xf3:", error);\n  });\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ventajas-de-las-promesas",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ventajas de las Promesas:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"C\xf3digo m\xe1s plano"})," - Sin pir\xe1mides de callbacks"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mejor manejo de errores"})," - Un solo ",(0,r.jsx)(e.code,{children:".catch()"})," para todo"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"M\xe1s legible"})," - Se lee como instrucciones secuenciales"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"F\xe1cil de encadenar"})," - ",(0,r.jsx)(e.code,{children:".then().then().then()"})]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-m\xe9todos-\xfatiles",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"M\xe9todos \xdatiles:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:".then()"})," - Para cuando la promesa se cumple"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:".catch()"})," - Para cuando la promesa falla"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:".finally()"})," - Se ejecuta siempre (\xe9xito o error)"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-casos-de-uso-comunes",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Casos de Uso Comunes:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Llamadas a APIs (",(0,r.jsx)(e.code,{children:"fetch"}),")"]}),"\n",(0,r.jsx)(e.li,{children:"Lectura de archivos"}),"\n",(0,r.jsx)(e.li,{children:"Operaciones de base de datos"}),"\n",(0,r.jsx)(e.li,{children:"Carga de im\xe1genes"}),"\n",(0,r.jsx)(e.li,{children:"Temporizadores"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-es-asyncawait",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es Async/Await?"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"Imagina que tienes un asistiente que te trae cosas:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-2",children:["\ud83d\udcda ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con promesas:"}),' "Tr\xe1eme el libro, Y LUEGO l\xe9eme el primer cap\xedtulo, Y LUEGO..."']}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con async/await:"}),' "Espera aqu\xed mientras voy por el libro. \xa1Ya lo tengo! Ahora voy a leerte el primer cap\xedtulo..."']}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-3",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Async/Await"})," es una forma de escribir c\xf3digo asincr\xf3nico que ",(0,r.jsx)(e.strong,{children:"parece s\xedncrono"}),", pero sin bloquear el hilo principal."]}),"\n",(0,r.jsxs)(e.h3,{id:"-sintaxis-b\xe1sica-de-asyncawait",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Sintaxis B\xe1sica de Async/Await"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// La palabra "async" hace que una funci\xf3n devuelva una promesa\nasync function miFuncion() {\n  // "await" hace que JavaScript ESPERE a que la promesa se resuelva\n  const resultado = await algunaPromesa();\n  return resultado;\n}\n\n// Es equivalente a:\nfunction miFuncion() {\n  return algunaPromesa().then((resultado) => resultado);\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-real-demo-interactivo-de-asyncawait",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Ejemplo Real: Demo Interactivo de Async/Await"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Async/Await - Demo Interactivo</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\u23f3 Async/Await en JavaScript</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> Una forma de escribir c\xf3digo\n        asincr\xf3nico que se <strong>lee como c\xf3digo s\xedncrono</strong>.\n      </p>\n\n      <div class="comparacion">\n        <div class="columna promesas">\n          <h3>\ud83d\udcdd Con Promesas</h3>\n          <div class="codigo">\n            obtenerUsuario()<br />\n            &nbsp;&nbsp;.then(usuario => {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;return obtenerPosts(usuario);<br />\n            &nbsp;&nbsp;})<br />\n            &nbsp;&nbsp;.then(posts => {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;return obtenerComentarios(posts);<br />\n            &nbsp;&nbsp;})<br />\n            &nbsp;&nbsp;.then(comentarios => {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;mostrarResultado(comentarios);<br />\n            &nbsp;&nbsp;})<br />\n            &nbsp;&nbsp;.catch(error => {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;console.error(error);<br />\n            &nbsp;&nbsp;});\n          </div>\n        </div>\n\n        <div class="columna async-await">\n          <h3>\ud83c\udfaf Con Async/Await</h3>\n          <div class="codigo">\n            async function proceso() {<br />\n            &nbsp;&nbsp;try {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;const usuario = await obtenerUsuario();<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;const posts = await\n            obtenerPosts(usuario);<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;const comentarios = await\n            obtenerComentarios(posts);<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;mostrarResultado(comentarios);<br />\n            &nbsp;&nbsp;} catch (error) {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;console.error(error);<br />\n            &nbsp;&nbsp;}<br />\n            }\n          </div>\n        </div>\n      </div>\n      <h2>\ud83c\udfaf Demo Interactivo</h2>\n      <button class="btn-ejemplo" onclick="ejecutarProcesoCompleto()">\n        \ud83d\ude80 Ejecutar Proceso con Async/Await\n      </button>\n      <button class="btn-comparar" onclick="compararConPromesas()">\n        \ud83d\udd04 Comparar con Promesas\n      </button>\n      <div id="resultado" style="margin-top: 20px;"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.paso {\n  padding: 12px;\n  margin: 8px 0;\n  border-radius: 5px;\n  border-left: 4px solid;\n}\n.info {\n  background: #d1ecf1;\n  border-color: #17a2b8;\n}\n.exito {\n  background: #d4edda;\n  border-color: #28a745;\n}\n.error {\n  background: #f8d7da;\n  border-color: #dc3545;\n}\n.espera {\n  background: #fff3cd;\n  border-color: #ffc107;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-ejemplo {\n  background: #007bff;\n  color: white;\n}\n.btn-comparar {\n  background: #6f42c1;\n  color: white;\n}\n.comparacion {\n  display: flex;\n  gap: 20px;\n  margin: 20px 0;\n}\n.columna {\n  flex: 1;\n  padding: 15px;\n  border-radius: 5px;\n}\n.promesas {\n  background: #e7f3ff;\n  border: 2px solid #007bff;\n}\n.async-await {\n  background: #f0e7ff;\n  border: 2px solid #6f42c1;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Obtenemos el elemento HTML con id="resultado".\n// Aqu\xed iremos a\xf1adiendo mensajes visuales que muestran el progreso de cada paso.\nconst resultado = document.getElementById("resultado");\n\n/**\n * \ud83d\udcdd mostrarPaso\n * Crea un elemento <div> con el mensaje y lo a\xf1ade al contenedor.\n * Incluye la hora exacta para que veas el orden temporal de ejecuci\xf3n.\n *\n * @param {string} mensaje - Texto a mostrar\n * @param {string} tipo - Tipo de mensaje (info, espera, exito, error). Sirve para aplicar estilos CSS diferentes.\n */\nfunction mostrarPaso(mensaje, tipo = "info") {\n  const div = document.createElement("div");\n  div.className = `paso ${tipo}`;\n  div.innerHTML = `${new Date().toLocaleTimeString()}: ${mensaje}`;\n  resultado.appendChild(div);\n}\n\n/**\n * \ud83e\uddf9 limpiarResultado\n * Borra todo el contenido dentro de \'resultado\'.\n * Se usa al iniciar cada proceso para que no se mezclen mensajes de ejecuciones anteriores.\n */\nfunction limpiarResultado() {\n  resultado.innerHTML = "";\n}\n\n// -----------------------------------------------------------------------------\n// \ud83e\uddea FUNCIONES QUE SIMULAN TAREAS AS\xcdNCRONAS\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83d\udfe2 simularTarea\n * Simula una tarea que tarda cierto tiempo en completarse y que SIEMPRE se resuelve bien.\n * Ideal para probar flujos asincr\xf3nicos en serie.\n *\n * @param {string} nombre - Nombre descriptivo de la tarea\n * @param {number} duracion - Tiempo que tarda la tarea en "terminar" (por defecto 1000 ms)\n * @returns {Promise} - Promesa que se resuelve tras el tiempo indicado\n */\nfunction simularTarea(nombre, duracion = 1000) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(`\u2705 ${nombre} completado`);\n    }, duracion);\n  });\n}\n\n/**\n * \ud83d\udd34 simularTareaConError\n * Simula una tarea que SIEMPRE falla despu\xe9s de cierto tiempo.\n * Ideal para probar manejo de errores.\n *\n * @param {string} nombre - Nombre de la tarea fallida\n * @param {number} duracion - Tiempo que tarda antes de fallar\n * @returns {Promise} - Promesa que se rechaza tras el tiempo indicado\n */\nfunction simularTareaConError(nombre, duracion = 1000) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(`\u274c Error en ${nombre}`);\n    }, duracion);\n  });\n}\n\n// -----------------------------------------------------------------------------\n// 1\ufe0f\u20e3 PROCESO CON ASYNC / AWAIT\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83e\udded ejecutarProcesoCompleto\n * Demuestra c\xf3mo usar async/await para ejecutar tareas asincr\xf3nicas en orden.\n * Visualmente, parece c\xf3digo "normal" y legible, pero en realidad sigue siendo asincr\xf3nico.\n */\nasync function ejecutarProcesoCompleto() {\n  limpiarResultado();\n  mostrarPaso("\ud83d\ude80 INICIANDO PROCESO CON ASYNC/AWAIT...", "info");\n\n  try {\n    // Cada paso se ejecuta en secuencia porque usamos \'await\' antes de cada promesa.\n\n    mostrarPaso("1. Iniciando sesi\xf3n...", "espera");\n    const paso1 = await simularTarea("Inicio de sesi\xf3n", 1500);\n    mostrarPaso(paso1, "exito");\n\n    mostrarPaso("2. Cargando perfil de usuario...", "espera");\n    const paso2 = await simularTarea("Carga de perfil", 1200);\n    mostrarPaso(paso2, "exito");\n\n    mostrarPaso("3. Obteniendo amigos...", "espera");\n    const paso3 = await simularTarea("Lista de amigos", 1000);\n    mostrarPaso(paso3, "exito");\n\n    mostrarPaso("4. Cargando mensajes...", "espera");\n    const paso4 = await simularTarea("Mensajes", 800);\n    mostrarPaso(paso4, "exito");\n\n    // Si llegamos hasta aqu\xed, ning\xfan paso fall\xf3.\n    mostrarPaso("\ud83c\udf89 \xa1Todo el proceso completado exitosamente!", "exito");\n  } catch (error) {\n    // Si ocurre cualquier error en CUALQUIER \'await\', el flujo salta directamente aqu\xed.\n    mostrarPaso(error, "error");\n  }\n}\n\n// -----------------------------------------------------------------------------\n// 2\ufe0f\u20e3 MISMO PROCESO USANDO ENCADENAMIENTO DE PROMESAS\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83e\ude84 compararConPromesas\n * Ejecuta el mismo flujo que la funci\xf3n anterior pero usando el estilo cl\xe1sico con then() y catch().\n * Sirve para comparar legibilidad y manejo de errores.\n */\nfunction compararConPromesas() {\n  limpiarResultado();\n  mostrarPaso("\ud83d\udd04 EJECUTANDO EL MISMO PROCESO CON PROMESAS...", "info");\n\n  mostrarPaso("1. Iniciando sesi\xf3n...", "espera");\n\n  // Cada .then espera a que termine la promesa anterior.\n  simularTarea("Inicio de sesi\xf3n", 1500)\n    .then((resultado1) => {\n      mostrarPaso(resultado1, "exito");\n      mostrarPaso("2. Cargando perfil de usuario...", "espera");\n      return simularTarea("Carga de perfil", 1200);\n    })\n    .then((resultado2) => {\n      mostrarPaso(resultado2, "exito");\n      mostrarPaso("3. Obteniendo amigos...", "espera");\n      return simularTarea("Lista de amigos", 1000);\n    })\n    .then((resultado3) => {\n      mostrarPaso(resultado3, "exito");\n      mostrarPaso("4. Cargando mensajes...", "espera");\n      return simularTarea("Mensajes", 800);\n    })\n    .then((resultado4) => {\n      mostrarPaso(resultado4, "exito");\n      mostrarPaso("\ud83c\udf89 \xa1Todo el proceso completado exitosamente!", "exito");\n    })\n    .catch((error) => {\n      // Si ocurre un error en cualquiera de las tareas, el flujo salta directamente aqu\xed.\n      mostrarPaso(error, "error");\n    });\n}\n\n// -----------------------------------------------------------------------------\n// 3\ufe0f\u20e3 MANEJO DE ERRORES CON ASYNC / AWAIT\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83e\uddf0 procesoConPosibleError\n * Ejemplo realista: algunas operaciones pueden fallar de forma aleatoria.\n * Mostramos c\xf3mo capturar y manejar ese error con try/catch/finally.\n */\nasync function procesoConPosibleError() {\n  try {\n    mostrarPaso("\ud83d\udd0d Buscando datos del usuario...", "info");\n\n    // Simulamos que a veces la operaci\xf3n funciona y otras falla\n    const exito = Math.random() > 0.5;\n\n    if (exito) {\n      // Si "hay suerte", esperamos la promesa y mostramos el resultado\n      const datos = await simularTarea("Obtenci\xf3n de datos", 1000);\n      mostrarPaso(datos, "exito");\n      return datos;\n    } else {\n      // Si "no hay suerte", forzamos un error intencional\n      await simularTareaConError("Obtenci\xf3n de datos", 1000);\n    }\n  } catch (error) {\n    // Captura cualquier error que ocurra dentro del bloque try\n    mostrarPaso(`\ud83d\udca5 Error capturado: ${error}`, "error");\n\n    // Aqu\xed podr\xedas implementar l\xf3gica de recuperaci\xf3n,\n    // como reintentar la petici\xf3n o mostrar un mensaje al usuario.\n    mostrarPaso("\ud83d\udd04 Intentando recuperaci\xf3n...", "info");\n  } finally {\n    // finally() se ejecuta siempre, haya error o no.\n    mostrarPaso("\ud83c\udfc1 Este c\xf3digo se ejecuta SIEMPRE (\xe9xito o error)", "info");\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-conversi\xf3n-de-promesas-a-asyncawait",children:["\ud83d\udd04 ",(0,r.jsx)(e.strong,{children:"Conversi\xf3n de Promesas a Async/Await"})]}),"\n",(0,r.jsxs)(e.h3,{id:"-antes-con-promesas",children:["\u274c ",(0,r.jsx)(e.strong,{children:"ANTES (con Promesas):"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'function cargarDatosUsuario() {\n  return obtenerUsuario()\n    .then((usuario) => {\n      return obtenerPosts(usuario.id);\n    })\n    .then((posts) => {\n      return obtenerComentarios(posts[0].id);\n    })\n    .then((comentarios) => {\n      console.log("Comentarios:", comentarios);\n      return comentarios;\n    })\n    .catch((error) => {\n      console.error("Error:", error);\n    });\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ahora-con-asyncawait",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"AHORA (con Async/Await):"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'async function cargarDatosUsuario() {\n  try {\n    const usuario = await obtenerUsuario();\n    const posts = await obtenerPosts(usuario.id);\n    const comentarios = await obtenerComentarios(posts[0].id);\n    console.log("Comentarios:", comentarios);\n    return comentarios;\n  } catch (error) {\n    console.error("Error:", error);\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-reglas-b\xe1sicas-de-asyncawait",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Reglas B\xe1sicas de Async/Await"})]}),"\n",(0,r.jsxs)(e.h3,{id:"1-async-antes-de-function",children:["1. ",(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"async"})," antes de ",(0,r.jsx)(e.code,{children:"function"})]})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Correcto\nasync function miFuncion() { }\n\n// Tambi\xe9n con arrow functions\nconst miFuncion = async () => { };\n\n// ERROR: Falta async\nfunction miFuncion() {\n    await algunaPromesa(); // \u274c Error: await solo en funciones async\n}\n\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"2-await-solo-dentro-de-funciones-async",children:["2. ",(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"await"})," solo dentro de funciones ",(0,r.jsx)(e.code,{children:"async"})]})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"async function procesoCorrecto() {\n    const resultado = await algunaPromesa(); // \u2705\n}\n\nfunction procesoIncorrecto() {\n    const resultado = await algunaPromesa(); // \u274c Error\n}\n\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"3-manejo-de-errores-con-trycatch",children:["3. ",(0,r.jsxs)(e.strong,{children:["Manejo de errores con ",(0,r.jsx)(e.code,{children:"try/catch"})]})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'async function procesoSeguro() {\n  try {\n    const datos = await obtenerDatos();\n    return datos;\n  } catch (error) {\n    console.error("Algo fall\xf3:", error);\n    return null;\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-ejemplo-del-mundo-real-proceso-de-compra-1",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Ejemplo del Mundo Real: Proceso de Compra"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'async function procesarCompra(usuarioId, productos) {\n  try {\n    // 1. Verificar usuario\n    const usuario = await verificarUsuario(usuarioId);\n\n    // 2. Verificar inventario\n    const inventario = await verificarInventario(productos);\n\n    // 3. Procesar pago\n    const pago = await procesarPago(usuario, productos);\n\n    // 4. Generar factura\n    const factura = await generarFactura(pago);\n\n    // 5. Enviar confirmaci\xf3n\n    await enviarEmailConfirmacion(usuario, factura);\n\n    console.log("\u2705 Compra procesada exitosamente");\n    return factura;\n  } catch (error) {\n    console.error("\u274c Error en la compra:", error);\n    // Revertir cambios si es necesario\n    await revertirTransaccion();\n    throw error; // Relanzar el error\n  }\n}\n\n// Uso simple y limpio\nprocesarCompra(123, ["producto1", "producto2"])\n  .then((factura) => console.log("Factura:", factura))\n  .catch((error) => console.error("Fall\xf3:", error));\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ventajas-de-asyncawait",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ventajas de Async/Await:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"C\xf3digo m\xe1s legible"})," - Parece s\xedncrono"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mejor manejo de errores"})," - Con ",(0,r.jsx)(e.code,{children:"try/catch"})," tradicional"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"F\xe1cil de depurar"})," - Mejor stack trace"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Menos anidamiento"})," - Sin callbacks o ",(0,r.jsx)(e.code,{children:".then()"})," encadenados"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-errores-comunes",children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Errores Comunes:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Olvidar ",(0,r.jsx)(e.code,{children:"async"})," antes de la funci\xf3n"]}),"\n",(0,r.jsxs)(e.li,{children:["Usar ",(0,r.jsx)(e.code,{children:"await"})," fuera de funci\xf3n ",(0,r.jsx)(e.code,{children:"async"})]}),"\n",(0,r.jsxs)(e.li,{children:["Olvidar el ",(0,r.jsx)(e.code,{children:"try/catch"})," para manejar errores"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-consejos",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Consejos:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Usa ",(0,r.jsx)(e.code,{children:"async/await"})," para c\xf3digo m\xe1s limpio"]}),"\n",(0,r.jsxs)(e.li,{children:["Comb\xednalo con ",(0,r.jsx)(e.code,{children:"try/catch"})," para robustez"]}),"\n",(0,r.jsxs)(e.li,{children:["Recuerda que ",(0,r.jsx)(e.code,{children:"async"})," siempre devuelve una Promesa"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-por-qu\xe9-es-importante-manejar-errores-en-asincron\xeda",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfPor qu\xe9 es importante manejar errores en asincron\xeda?"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"Imagina que est\xe1s cocinando y dejas algo en el horno:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-3",children:["\ud83c\udf73 ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sin manejo de errores:"})," Dejas la comida en el horno sin timer. \xa1Se quema!"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con manejo de errores:"})," Pones un timer que suena cuando est\xe1 lista, y otro que avisa si hay humo."]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-4",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:["En operaciones asincr\xf3nicas, ",(0,r.jsx)(e.strong,{children:"muchas cosas pueden fallar"}),": conexi\xf3n de red, archivos que no existen, datos inv\xe1lidos... Si no manejamos estos errores, nuestra aplicaci\xf3n puede fallar silenciosamente."]}),"\n",(0,r.jsxs)(e.h2,{id:"-m\xe9todos-para-manejar-errores",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"M\xe9todos para Manejar Errores"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.h3,{id:"1-con-callbacks-patr\xf3n-error-first",children:["1. ",(0,r.jsx)(e.strong,{children:"Con Callbacks (patr\xf3n error-first)"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udcdc leerArchivo(nombreArchivo, callback)\n * Este ejemplo usa el patr\xf3n cl\xe1sico de callbacks en Node.js y JavaScript:\n * \ud83d\udc49 El primer par\xe1metro de la funci\xf3n callback siempre representa el ERROR.\n * \ud83d\udc49 El segundo par\xe1metro representa el resultado correcto.\n *\n * @param {string} nombreArchivo - Nombre del archivo que queremos "leer".\n * @param {function} callback - Funci\xf3n que se llamar\xe1 cuando termine la operaci\xf3n as\xedncrona.\n */\nfunction leerArchivo(nombreArchivo, callback) {\n  // Simulamos un proceso as\xedncrono usando setTimeout,\n  // como si estuvi\xe9ramos leyendo un archivo desde el disco o un servidor.\n  setTimeout(() => {\n    // Math.random() genera un n\xfamero entre 0 y 1.\n    // Si es mayor que 0.3, simulamos que el archivo S\xcd existe.\n    const archivoExiste = Math.random() > 0.3;\n\n    if (archivoExiste) {\n      // \u2705 Caso exitoso:\n      // Llamamos al callback pasando:\n      // - null como primer argumento (porque NO hay error)\n      // - el contenido del archivo como segundo argumento\n      callback(null, `\ud83d\udcc4 Contenido de ${nombreArchivo}`);\n    } else {\n      // \u274c Caso de error:\n      // Llamamos al callback pasando:\n      // - un mensaje de error como primer argumento\n      // - null como segundo argumento (porque no hay contenido v\xe1lido)\n      callback("\u274c Archivo no encontrado", null);\n    }\n  }, 1000); // simulamos que tarda 1 segundo en "leer"\n}\n\n// -----------------------------------------------------------------------------\n// \ud83e\uddea USO DEL PATR\xd3N DE CALLBACKS\n// -----------------------------------------------------------------------------\n\n// Llamamos a leerArchivo pasando el nombre del archivo y una funci\xf3n callback.\n// Esta funci\xf3n ser\xe1 ejecutada CUANDO termine la lectura (de forma as\xedncrona).\nleerArchivo("mi-documento.txt", (error, contenido) => {\n  // Esta funci\xf3n callback recibe dos par\xe1metros:\n  // error \u2192 si hay error, contendr\xe1 un mensaje\n  // contenido \u2192 si no hay error, contendr\xe1 los datos obtenidos\n\n  if (error) {\n    // Si hay error, lo mostramos por consola y salimos de la funci\xf3n\n    console.error("Error:", error);\n    return; // importante: esto evita ejecutar el resto del bloque\n  }\n\n  // Si no hubo error, mostramos el contenido obtenido\n  console.log("Contenido:", contenido);\n});\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"2-con-promesas-catch",children:["2. ",(0,r.jsx)(e.strong,{children:"Con Promesas (.catch())"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udcdc leerArchivoPromesa(nombreArchivo)\n * Esta funci\xf3n devuelve una PROMESA.\n * Ya no necesitamos usar callbacks manualmente como en el patr\xf3n anterior.\n *\n * @param {string} nombreArchivo - Nombre del archivo a "leer".\n * @returns {Promise<string>} - Una promesa que:\n *   - \u2705 se resuelve con el contenido si el archivo existe.\n *   - \u274c se rechaza con un mensaje de error si no existe.\n */\nfunction leerArchivoPromesa(nombreArchivo) {\n  return new Promise((resolve, reject) => {\n    // Creamos y devolvemos una nueva promesa.\n    // Esta promesa representa un trabajo as\xedncrono que terminar\xe1 bien o mal.\n\n    // Simulamos un retardo de 1 segundo para "leer" el archivo.\n    setTimeout(() => {\n      // Generamos un resultado aleatorio para simular si el archivo existe o no.\n      const archivoExiste = Math.random() > 0.3;\n\n      if (archivoExiste) {\n        // \u2705 Si el archivo "existe", resolvemos la promesa con el contenido.\n        resolve(`\ud83d\udcc4 Contenido de ${nombreArchivo}`);\n      } else {\n        // \u274c Si no existe, rechazamos la promesa con un mensaje de error.\n        reject("\u274c Archivo no encontrado");\n      }\n    }, 1000);\n  });\n}\n\n// -----------------------------------------------------------------------------\n// \ud83e\uddea USO DE LA PROMESA\n// -----------------------------------------------------------------------------\n\n// Llamamos a la funci\xf3n. En vez de pasarle un callback, encadenamos .then() y .catch().\nleerArchivoPromesa("mi-documento.txt")\n  .then((contenido) => {\n    // .then() se ejecuta cuando la promesa se resuelve correctamente.\n    // El valor que recibimos aqu\xed es lo que se pas\xf3 a "resolve".\n    console.log("Contenido:", contenido);\n  })\n  .catch((error) => {\n    // .catch() se ejecuta si la promesa fue rechazada.\n    // El valor que recibimos aqu\xed es lo que se pas\xf3 a "reject".\n    console.error("Error:", error);\n  });\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"3-con-asyncawait-trycatch",children:["3. ",(0,r.jsx)(e.strong,{children:"Con Async/Await (try/catch)"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"/**\n * \ud83d\udcdc procesarArchivo()\n * Esta funci\xf3n usa async/await para leer un archivo de forma as\xedncrona\n * sin necesidad de encadenar callbacks ni then().\n *\n * \ud83d\udc49 'async' indica que esta funci\xf3n SIEMPRE devolver\xe1 una promesa.\n * \ud83d\udc49 'await' pausa la ejecuci\xf3n dentro de esta funci\xf3n hasta que la promesa termine.\n */\nasync function procesarArchivo() {\n  try {\n    // \u23f8\ufe0f 'await' espera a que leerArchivoPromesa termine.\n    // Si la promesa se resuelve, su valor se guarda en 'contenido'.\n    // Si la promesa se rechaza, autom\xe1ticamente lanza una excepci\xf3n que ser\xe1 capturada en el catch.\n    const contenido = await leerArchivoPromesa(\"mi-documento.txt\");\n\n    // \u2705 Si todo sali\xf3 bien, esta l\xednea se ejecuta con el contenido correcto.\n    console.log(\"Contenido:\", contenido);\n  } catch (error) {\n    // \u274c Si la promesa fue rechazada (por ejemplo, si el archivo no existe),\n    // el flujo salta directamente aqu\xed y 'error' contiene el mensaje del reject.\n    console.error(\"Error:\", error);\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"-ejemplo-real-demo-interactivo-de-manejo-de-errores",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Ejemplo Real: Demo Interactivo de Manejo de Errores"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Manejo de Errores en Asincron\xeda - Demo Interactivo</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83d\udea8 Manejo de Errores en Asincron\xeda</h1>\n      <p>\n        <strong>Regla de oro:</strong> <em>Siempre</em> maneja los errores en\n        operaciones asincr\xf3nicas.\n      </p>\n      <div class="metodos">\n        <div class="metodo callbacks">\n          <h3>\ud83d\udcde Con Callbacks</h3>\n          <div class="codigo">\n            funcion((error, resultado) => {<br />\n            &nbsp;&nbsp;if (error) {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;// Manejar error<br />\n            &nbsp;&nbsp;} else {<br />\n            &nbsp;&nbsp;&nbsp;&nbsp;// Usar resultado<br />\n            &nbsp;&nbsp;}<br />\n            });\n          </div>\n        </div>\n        <div class="metodo promesas">\n          <h3>\ud83e\udd1d Con Promesas</h3>\n          <div class="codigo">\n            promesa<br />\n            &nbsp;&nbsp;.then(resultado => {})<br />\n            &nbsp;&nbsp;.catch(error => {});\n          </div>\n        </div>\n\n        <div class="metodo async-await">\n          <h3>\u23f3 Con Async/Await</h3>\n          <div class="codigo">\n            try {<br />\n            &nbsp;&nbsp;const resultado = await promesa;<br />\n            } catch (error) {<br />\n            &nbsp;&nbsp;// Manejar error<br />\n            }\n          </div>\n        </div>\n      </div>\n      <h2>\ud83c\udfaf Demo Interactivo</h2>\n      <button class="btn-exito" onclick="probarOperacionExitosa()">\n        \u2705 Probar Operaci\xf3n Exitosa\n      </button>\n      <button class="btn-error" onclick="probarOperacionFallida()">\n        \u274c Probar Operaci\xf3n Fallida\n      </button>\n      <button class="btn-api" onclick="simularLlamadaAPI()">\n        \ud83c\udf10 Simular Llamada API\n      </button>\n      <button class="btn-reintento" onclick="probarReintentos()">\n        \ud83d\udd04 Probar Reintentos Autom\xe1ticos\n      </button>\n      <div id="resultado" style="margin-top: 20px;"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.resultado {\n  padding: 12px;\n  margin: 8px 0;\n  border-radius: 5px;\n  border-left: 4px solid;\n}\n.exito {\n  background: #d4edda;\n  border-color: #28a745;\n}\n.error {\n  background: #f8d7da;\n  border-color: #dc3545;\n}\n.advertencia {\n  background: #fff3cd;\n  border-color: #ffc107;\n}\n.info {\n  background: #d1ecf1;\n  border-color: #17a2b8;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-exito {\n  background: #28a745;\n  color: white;\n}\n.btn-error {\n  background: #dc3545;\n  color: white;\n}\n.btn-api {\n  background: #007bff;\n  color: white;\n}\n.btn-reintento {\n  background: #6f42c1;\n  color: white;\n}\n.metodos {\n  display: flex;\n  gap: 20px;\n  margin: 20px 0;\n}\n.metodo {\n  flex: 1;\n  padding: 15px;\n  border-radius: 5px;\n  border: 2px solid;\n}\n.callbacks {\n  border-color: #ffc107;\n  background: #fffbf0;\n}\n.promesas {\n  border-color: #17a2b8;\n  background: #f0f9ff;\n}\n.async-await {\n  border-color: #28a745;\n  background: #f0fff4;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Obtenemos el contenedor del DOM donde iremos pintando cada mensaje de estado.\nconst resultado = document.getElementById("resultado");\n\n/**\n * \ud83d\udce2 mostrarResultado\n * Crea un <div> con una clase acorde al tipo (info, exito, error, advertencia\u2026)\n * y le inserta un timestamp + el mensaje, para mostrarlo en pantalla.\n */\nfunction mostrarResultado(mensaje, tipo = "info") {\n  const div = document.createElement("div"); // Creamos el nodo <div>\n  div.className = `resultado ${tipo}`; // Clases CSS para estilado\n  div.innerHTML = `${new Date().toLocaleTimeString()}: ${mensaje}`; // Hora + texto\n  resultado.appendChild(div); // Lo a\xf1adimos al contenedor\n}\n\n/**\n * \ud83e\uddf9 limpiarResultado\n * Vac\xeda el contenedor para empezar \u201cen limpio\u201d cada demo.\n */\nfunction limpiarResultado() {\n  resultado.innerHTML = "";\n}\n\n/**\n * \ud83e\uddea operacionAsincrona\n * Simula una operaci\xf3n que tarda entre 1000 y 2000 ms y que puede\n * resolver (\xe9xito) o rechazar (error) en funci\xf3n de una probabilidad.\n *\n * @param {string} nombre - Etiqueta de la operaci\xf3n (para los mensajes)\n * @param {number} probabilidadExito - Valor entre 0 y 1 (por defecto 0.7)\n * @returns {Promise<string>}\n */\nfunction operacionAsincrona(nombre, probabilidadExito = 0.7) {\n  return new Promise((resolve, reject) => {\n    // Duraci\xf3n aleatoria entre 1000 ms y 2000 ms\n    const duracion = 1000 + Math.random() * 1000;\n\n    setTimeout(() => {\n      // La operaci\xf3n \u201csale bien\u201d si el aleatorio es menor que la probabilidad de \xe9xito\n      const exito = Math.random() < probabilidadExito;\n\n      if (exito) {\n        // Resolvemos con un mensaje incluyendo la duraci\xf3n redondeada\n        resolve(`\u2705 ${nombre} completado en ${duracion.toFixed(0)}ms`);\n      } else {\n        // Rechazamos con un mensaje de error (ver nota al final sobre usar Error)\n        reject(`\u274c ${nombre} fall\xf3 despu\xe9s de ${duracion.toFixed(0)}ms`);\n      }\n    }, duracion);\n  });\n}\n\n// -----------------------------------------------------------------------------\n// 1\ufe0f\u20e3 OPERACI\xd3N EXITOSA (manejo correcto con try/catch)\n// -----------------------------------------------------------------------------\n\n/**\n * Demostraci\xf3n con alta probabilidad de \xe9xito: se ve el flujo normal.\n */\nasync function probarOperacionExitosa() {\n  limpiarResultado();\n  mostrarResultado(\n    "\ud83d\ude80 Iniciando operaci\xf3n que probablemente tendr\xe1 \xe9xito...",\n    "info"\n  );\n\n  try {\n    // Esperamos a que la promesa se resuelva; si falla, saltar\xe1 al catch\n    const resultado = await operacionAsincrona("Proceso principal", 0.9);\n    mostrarResultado(resultado, "exito"); // Mensaje de \xe9xito\n    mostrarResultado("\ud83c\udf89 Continuando con el flujo normal...", "exito");\n  } catch (error) {\n    // Si hubiera error, lo mostramos y ejecutamos un plan B\n    mostrarResultado(error, "error");\n    mostrarResultado("\ud83d\udd04 Ejecutando plan de contingencia...", "advertencia");\n  }\n}\n\n// -----------------------------------------------------------------------------\n// 2\ufe0f\u20e3 OPERACI\xd3N FALLIDA (manejo expl\xedcito del error)\n// -----------------------------------------------------------------------------\n\n/**\n * Demostraci\xf3n con baja probabilidad de \xe9xito: queremos ver el manejo de errores.\n */\nasync function probarOperacionFallida() {\n  limpiarResultado();\n  mostrarResultado(\n    "\ud83d\ude80 Iniciando operaci\xf3n que probablemente fallar\xe1...",\n    "info"\n  );\n\n  try {\n    const resultado = await operacionAsincrona("Proceso riesgoso", 0.2);\n    mostrarResultado(resultado, "exito");\n  } catch (error) {\n    // Mostramos el error y damos respuestas \u201camigables\u201d/alternativas\n    mostrarResultado(error, "error");\n    mostrarResultado(\n      "\ud83d\udca1 Mostrando mensaje amigable al usuario...",\n      "advertencia"\n    );\n    mostrarResultado("\ud83d\udd04 Ofreciendo alternativas...", "info");\n  }\n}\n\n// -----------------------------------------------------------------------------\n// 3\ufe0f\u20e3 EJEMPLO REAL: Llamada a API con manejo de errores espec\xedficos\n// -----------------------------------------------------------------------------\n\n/**\n * Simula un fetch real y maneja:\n * - Errores HTTP (404, 500, otros)\n * - Errores de red/conexi\xf3n (TypeError t\xedpicamente en fetch)\n */\nasync function simularLlamadaAPI() {\n  limpiarResultado();\n  mostrarResultado("\ud83c\udf10 Simulando llamada a API real...", "info");\n\n  try {\n    // Hacemos la petici\xf3n; OJO: la URL debe ir como string plano sin <>\n    const response = await fetch(\n      "https://jsonplaceholder.typicode.com/users/1"\n    );\n\n    // fetch NO lanza error en 4xx/5xx; hay que revisar response.ok y status\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error("Usuario no encontrado (404)");\n      } else if (response.status === 500) {\n        throw new Error("Error del servidor (500)");\n      } else {\n        throw new Error(`Error HTTP: ${response.status}`);\n      }\n    }\n\n    // Si todo bien, parseamos el JSON\n    const usuario = await response.json();\n    mostrarResultado(`\u2705 Usuario obtenido: ${usuario.name}`, "exito");\n    mostrarResultado(`\ud83d\udce7 Email: ${usuario.email}`, "exito");\n  } catch (error) {\n    // Diferenciamos por tipo y/o mensaje\n    if (error.name === "TypeError" && String(error.message).includes("fetch")) {\n      // Suele indicar problemas de red/DNS/CORS en algunos contextos\n      mostrarResultado("\ud83d\udd0c Error de conexi\xf3n: Verifica tu internet", "error");\n    } else if (String(error.message).includes("404")) {\n      mostrarResultado("\ud83d\udc64 Usuario no encontrado", "error");\n    } else if (String(error.message).includes("500")) {\n      mostrarResultado("\ud83d\udda5\ufe0f Error del servidor, intenta m\xe1s tarde", "error");\n    } else {\n      mostrarResultado(\n        `\ud83d\udca5 Error inesperado: ${error.message || error}`,\n        "error"\n      );\n    }\n  }\n}\n\n// -----------------------------------------------------------------------------\n// 4\ufe0f\u20e3 EJEMPLO AVANZADO: Reintentos autom\xe1ticos con backoff lineal\n// -----------------------------------------------------------------------------\n\n/**\n * Intenta ejecutar una operaci\xf3n varias veces.\n * Si falla, espera un tiempo creciente antes de reintentar (1s, 2s, 3s\u2026).\n */\nasync function probarReintentos() {\n  limpiarResultado();\n  mostrarResultado("\ud83d\udd04 Probando sistema de reintentos autom\xe1ticos...", "info");\n\n  // Encapsulamos la l\xf3gica de reintentos para poder reutilizarla\n  async function operacionConReintentos(operacion, maxReintentos = 3) {\n    let ultimoError;\n\n    for (let intento = 1; intento <= maxReintentos; intento++) {\n      try {\n        mostrarResultado(\n          `\ud83d\udcdd Intento ${intento} de ${maxReintentos}...`,\n          "info"\n        );\n        const resultado = await operacion(); // Ejecutamos la operaci\xf3n\n        return resultado; // Si va bien, devolvemos y salimos\n      } catch (error) {\n        ultimoError = error; // Guardamos el \xfaltimo error\n        // \u26a0\ufe0f OJO: si error es string, error.message ser\xe1 undefined (ver nota final)\n        const msg = error?.message ?? String(error);\n        mostrarResultado(`\u26a0\ufe0f Intento ${intento} fall\xf3: ${msg}`, "advertencia");\n\n        // Si a\xfan quedan intentos, esperamos (backoff lineal)\n        if (intento < maxReintentos) {\n          const espera = intento * 1000; // 1s, 2s, 3s...\n          mostrarResultado(\n            `\u23f3 Esperando ${espera}ms antes de reintentar...`,\n            "info"\n          );\n          await new Promise((resolve) => setTimeout(resolve, espera));\n        }\n      }\n    }\n\n    // Si agotamos todo, lanzamos un error final con detalle\n    const finalMsg = ultimoError?.message ?? String(ultimoError);\n    throw new Error(`Todos los reintentos fallaron: ${finalMsg}`);\n  }\n\n  try {\n    // Ejemplo: operaci\xf3n con solo 10% de \xe9xito\n    const resultado = await operacionConReintentos(\n      () => operacionAsincrona("Tarea dif\xedcil", 0.1),\n      3\n    );\n    mostrarResultado(resultado, "exito");\n  } catch (error) {\n    mostrarResultado(error.message, "error");\n    mostrarResultado("\ud83d\udca1 Contacta al soporte t\xe9cnico", "advertencia");\n  }\n}\n\n// -----------------------------------------------------------------------------\n// 5\ufe0f\u20e3 COMPARACI\xd3N: \xbfQu\xe9 pasa SIN manejo de errores?\n// -----------------------------------------------------------------------------\n\n/**\n * Demuestra el anti-patr\xf3n de no manejar errores en promesas.\n * En apps reales, esto produce \u201cunhandled promise rejections\u201d.\n */\nfunction probarSinManejoErrores() {\n  limpiarResultado();\n  mostrarResultado("\ud83d\udd25 Probando qu\xe9 pasa SIN manejo de errores...", "info");\n\n  // Disparamos una operaci\xf3n con baja probabilidad de \xe9xito y SIN .catch()\n  operacionAsincrona("Operaci\xf3n sin protecci\xf3n", 0.3).then((resultado) => {\n    mostrarResultado(resultado, "exito");\n  });\n\n  // Si falla, el error no se captura aqu\xed \u2192 el runtime/buscador lo reportar\xe1\n  // como \u201cUnhandledPromiseRejection\u201d. Es un ejemplo de lo que NO hay que hacer.\n}\n'})}),"\n",(0,r.jsxs)(e.h1,{id:"-tipos-comunes-de-errores-en-asincron\xeda",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Tipos Comunes de Errores en Asincron\xeda"})]}),"\n",(0,r.jsx)(e.h2,{id:"los-temidos-errores-de-red",children:(0,r.jsx)(e.strong,{children:'Los Temidos "Errores de Red"'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["Ahora, pensad que nuestro camarero (JavaScript) tiene que ir a la bodega (un servidor en internet) a por una botella de vino muy especial. El viaje a la bodega es lo que llamamos una ",(0,r.jsx)(e.strong,{children:"petici\xf3n de red"})," (como ",(0,r.jsx)(e.code,{children:"fetch"}),")."]}),"\n",(0,r.jsxs)(e.p,{children:["Durante ese viaje, muchas cosas pueden salir mal. A estos problemas los llamamos ",(0,r.jsx)(e.strong,{children:"errores de red"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'"La bodega no existe" (Error 404):'})," Le diste una direcci\xf3n incorrecta al camarero. El servidor no encuentra lo que le pides."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'"El camino est\xe1 cortado" (Sin conexi\xf3n):'})," El camarero ni siquiera puede salir del restaurante porque la puerta est\xe1 bloqueada. No hay internet."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'"La bodega no te deja entrar" (Error 403 o 401):'})," La bodega es privada y necesitas una clave que no tienes."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'"El camarero se perdi\xf3 y nunca volvi\xf3" (Timeout):'})," El viaje est\xe1 tardando demasiado y el restaurante decide cancelar el pedido."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-sencillo-en-c\xf3digo",children:(0,r.jsx)(e.strong,{children:"Ejemplo Sencillo en C\xf3digo"})}),"\n",(0,r.jsxs)(e.p,{children:["Usamos ",(0,r.jsx)(e.code,{children:"fetch()"})," para hacer una petici\xf3n, como mandar a nuestro camarero. Pero como el viaje puede fallar, usamos ",(0,r.jsx)(e.code,{children:".catch()"})," para estar preparados."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Enviar a nuestro "camarero" (fetch) a por datos\nfetch("<https://api.ejemplo.com/datos>")\n  .then((response) => {\n    // \xa1Oh! El camarero volvi\xf3, pero quiz\xe1s con malas noticias\n    if (!response.ok) {\n      throw new Error(\n        `\xa1Error ${response.status}! La bodega no pudo darnos el vino.`\n      );\n    }\n    return response.json(); // Todo bien, leemos los datos (el vino)\n  })\n  .then((datos) => {\n    console.log("\xa1\xc9xito! Aqu\xed est\xe1n los datos:", datos);\n    // Aqu\xed mostramos los datos en la p\xe1gina web\n  })\n  .catch((error) => {\n    // \xa1Zona de rescate! Aqu\xed capturamos CUALQUIER error del viaje.\n    console.error("Algo sali\xf3 mal en el viaje:", error.message);\n    // Mostramos un mensaje bonito al usuario: "Lo sentimos, no hay datos por un problema de conexi\xf3n"\n  });\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 est\xe1 pasando aqu\xed?"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"fetch()"})," manda al camarero. Es una ",(0,r.jsx)(e.strong,{children:"operaci\xf3n as\xedncrona"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:".then()"})," se ejecuta cuando el camarero vuelve, ",(0,r.jsx)(e.strong,{children:"sin bloquear"})," el resto de la web."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:".catch()"})," es nuestro ",(0,r.jsx)(e.strong,{children:"plan B"}),". Atrapa ",(0,r.jsx)(e.strong,{children:"cualquier error"})," que haya pasado en el camino (red, servidor, etc.)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"response.ok"})," nos permite verificar si la respuesta del servidor fue exitosa (c\xf3digo 200) o fue un error (c\xf3digo 404, 500, etc.)."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"en-resumen",children:(0,r.jsx)(e.strong,{children:"En Resumen:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Asincron\xeda:"})," Hacer cosas sin tener que esperar a que terminen."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error de Red:"})," Cualquier fallo que ocurra cuando intentamos comunicarnos con un servidor externo."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Tu Deber como Programador:"})," Siempre ",(0,r.jsx)(e.strong,{children:"anticipar y manejar"})," estos errores con ",(0,r.jsx)(e.code,{children:".catch()"})," o ",(0,r.jsx)(e.code,{children:"try/catch"})," (en ",(0,r.jsx)(e.code,{children:"async/await"}),") para que tu aplicaci\xf3n no se rompa y le des una buena experiencia al usuario, incluso cuando las cosas salgan mal."]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\xa1Y esto es todo! Espero que ahora le perd\xe1is el miedo a manejar estos errores. Son como los baches en la carretera, siempre hay que estar preparados para ellos. \ud83d\ude0a"}),"\n",(0,r.jsxs)(e.h3,{id:"ejemplo-real-de-errores-de-red-en-la-asincron\xeda",children:["Ejemplo real de e",(0,r.jsx)(e.strong,{children:"rrores de red en la asincron\xeda"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udce1 obtenerDatos()\n * Realiza una llamada a una API REST usando fetch y async/await.\n * Controla errores tanto de red como de respuesta HTTP.\n *\n * @returns {Promise<object|undefined>} - Devuelve los datos JSON si la llamada es exitosa.\n */\nasync function obtenerDatos() {\n  try {\n    // \u23f3 Iniciamos la llamada a la API.\n    // OJO: en tu c\xf3digo original la URL ten\xeda "< >" \u2014 eso da error en fetch.\n    // \u2705 Debe ir as\xed:\n    const response = await fetch("https://api.ejemplo.com/datos");\n\n    // \u26a0\ufe0f fetch NO lanza error autom\xe1ticamente en errores HTTP (404, 500\u2026)\n    // Solo lanza error si hay problemas de red.\n    // Por eso debemos revisar manualmente response.ok\n    if (!response.ok) {\n      // Si la respuesta no es OK, lanzamos un error personalizado\n      throw new Error(`Error HTTP: ${response.status}`);\n    }\n\n    // \u2705 Si la respuesta fue correcta, parseamos el cuerpo como JSON\n    // y lo devolvemos al que llame a esta funci\xf3n\n    return await response.json();\n  } catch (error) {\n    // \ud83d\udea8 Si ocurre alg\xfan error durante el fetch o el parseo, se captura aqu\xed.\n\n    // TypeError suele indicar problemas de red, DNS, CORS o conexi\xf3n interrumpida.\n    if (error.name === "TypeError") {\n      console.error("Error de conexi\xf3n:", error.message);\n    } else {\n      // Cualquier otro tipo de error (HTTP personalizado u otros)\n      console.error("Otro error:", error);\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Qu\xe9 debes entender aqu\xed"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"fetch()"})," devuelve una promesa que:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Se resuelve siempre"}),", aunque la respuesta sea 404 o 500."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Se rechaza"})," solo si hay un problema de red (por ejemplo, no hay internet o la URL es inv\xe1lida)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"response.ok"})," es un booleano que vale ",(0,r.jsx)(e.code,{children:"true"})," solo si el c\xf3digo HTTP est\xe1 entre 200 y 299.\nSi no lo est\xe1, t\xfa mismo debes lanzar un ",(0,r.jsx)(e.code,{children:"Error"})," manual (como se hace con ",(0,r.jsx)(e.code,{children:"throw new Error(...)"}),")."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"await response.json()"})," tambi\xe9n puede lanzar error si la respuesta no es JSON v\xe1lido. Por eso es mejor tener todo dentro del ",(0,r.jsx)(e.code,{children:"try"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"catch"})," diferencia dos casos:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"TypeError"})," \u2192 normalmente indica que la petici\xf3n ni siquiera lleg\xf3 al servidor (por ejemplo, sin internet o fallo de CORS)."]}),"\n",(0,r.jsxs)(e.li,{children:["Cualquier otro \u2192 normalmente es un error que t\xfa lanzaste con ",(0,r.jsx)(e.code,{children:"throw"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Ejemplo de uso"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'(async () => {\n  const datos = await obtenerDatos();\n  if (datos) {\n    console.log("Datos recibidos:", datos);\n  } else {\n    console.log("No se pudieron obtener los datos");\n  }\n})();\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Pro tip"}),": si quieres mejorar a\xfan m\xe1s este patr\xf3n en un proyecto real, puedes:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"A\xf1adir un timeout manual si la API no responde."}),"\n",(0,r.jsx)(e.li,{children:"Controlar c\xf3digos de error espec\xedficos (404, 401, 500\u2026)."}),"\n",(0,r.jsx)(e.li,{children:"Devolver un objeto de error en lugar de solo mostrarlo en consola."}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"errores-de-validaci\xf3n-el-problema-no-es-el-viaje-sino-lo-que-traes",children:(0,r.jsx)(e.strong,{children:"Errores de Validaci\xf3n: El Problema no es el Viaje, sino lo que Traes"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["Imaginad que el camarero ",(0,r.jsx)(e.strong,{children:"s\xed lleg\xf3 a la bodega"})," y ",(0,r.jsx)(e.strong,{children:"s\xed le dieron la botella de vino"}),". No hubo ning\xfan error de red. \xa1El viaje fue un \xe9xito!"]}),"\n",(0,r.jsx)(e.p,{children:"Pero cuando el camarero vuelve y vosotros, los sommeliers (expertos en vino), la examin\xe1is, os dais cuenta de que..."}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\xa1Es un refresco, no un vino!"})," \u27a1\ufe0f El tipo de dato es incorrecto."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"La botella est\xe1 medio vac\xeda."})," \u27a1\ufe0f Faltan datos obligatorios."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'La etiqueta dice "A\xf1o: 18.500".'})," \u27a1\ufe0f Un a\xf1o imposible. Los datos no tienen sentido."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Pedisteis una botella y os trajeron una caja de 12."})," \u27a1\ufe0f La estructura no es la esperada."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"en-qu\xe9-consisten-los-errores-de-validaci\xf3n",children:(0,r.jsx)(e.strong,{children:"\xbfEn qu\xe9 consisten los Errores de Validaci\xf3n?"})}),"\n",(0,r.jsxs)(e.p,{children:["Un error de validaci\xf3n ocurre ",(0,r.jsx)(e.strong,{children:"despu\xe9s de que la comunicaci\xf3n con el servidor sea exitosa"})," (es decir, no hay error de red), pero los datos que recibimos ",(0,r.jsx)(e.strong,{children:"no cumplen con las reglas, el formato o la estructura que nuestra aplicaci\xf3n espera para funcionar correctamente."})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"La clave es:"}),' El servidor respondi\xf3, pero su respuesta es "inv\xe1lida" para nosotros.']}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-sencillo-en-c\xf3digo-1",children:(0,r.jsx)(e.strong,{children:"Ejemplo Sencillo en C\xf3digo"})}),"\n",(0,r.jsxs)(e.p,{children:["Pensad que pedimos los datos de un usuario a una API y esperamos un objeto con un ",(0,r.jsx)(e.code,{children:"nombre"})," (string) y una ",(0,r.jsx)(e.code,{children:"edad"})," (n\xfamero)."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Supongamos que esta petici\xf3n es EXITOSA (c\xf3digo 200)\nfetch("<https://api.ejemplo.com/usuario>")\n  .then((response) => response.json()) // Convertimos la respuesta a JSON (esto tambi\xe9n funciona)\n  .then((usuario) => {\n    // --- \xa1ZONA DE VALIDACI\xd3N! ---\n    // Aqu\xed comprobamos MANUALMENTE si los datos son correctos.\n\n    // \xbfEl usuario tiene la propiedad \'nombre\' y es un string?\n    if (!usuario.nombre || typeof usuario.nombre !== "string") {\n      throw new Error(\n        "Validaci\xf3n fall\xf3: El nombre es obligatorio y debe ser un texto."\n      );\n    }\n\n    // \xbfLa \'edad\' existe y es un n\xfamero mayor que 0?\n    if (!usuario.edad || typeof usuario.edad !== "number" || usuario.edad < 0) {\n      throw new Error(\n        "Validaci\xf3n fall\xf3: La edad es obligatoria y debe ser un n\xfamero positivo."\n      );\n    }\n\n    // --- Si pasamos la validaci\xf3n, todo est\xe1 bien ---\n    console.log(`Hola, ${usuario.nombre}. Tienes ${usuario.edad} a\xf1os.`);\n  })\n  .catch((error) => {\n    // \xa1OJO! Este \'catch\' captura TODOS los errores:\n    // - Errores de RED (el viaje fall\xf3)\n    // - Errores de VALIDACI\xd3N (el "vino" era malo)\n\n    console.error("Algo sali\xf3 mal:", error.message);\n  });\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\xbfY si el servidor nos devolviera esto?"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'// Caso 1: Error de validaci\xf3n (edad es string)\n{ "nombre": "Ana", "edad": "veinticinco" }\n\n// Caso 2: Error de validaci\xf3n (falta el nombre)\n{ "edad": 25 }\n\n'})}),"\n",(0,r.jsxs)(e.p,{children:["En ambos casos, nuestras comprobaciones con ",(0,r.jsx)(e.code,{children:"if"})," lanzar\xedan un error que caer\xeda en el ",(0,r.jsx)(e.code,{children:".catch"}),"."]}),"\n",(0,r.jsx)(e.h3,{id:"diferencia-clave-entre-error-de-red-y-error-de-validaci\xf3n",children:(0,r.jsx)(e.strong,{children:"Diferencia Clave entre Error de Red y Error de Validaci\xf3n"})}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Caracter\xedstica"}),(0,r.jsx)(e.th,{children:"Error de Red"}),(0,r.jsx)(e.th,{children:"Error de Validaci\xf3n"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo pasa?"})}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.strong,{children:"Durante"})," la comunicaci\xf3n."]}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.strong,{children:"Despu\xe9s"})," de una comunicaci\xf3n exitosa."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"\xbfEl servidor respondi\xf3?"})}),(0,r.jsx)(e.td,{children:"No, la petici\xf3n fall\xf3."}),(0,r.jsx)(e.td,{children:"S\xed, con un c\xf3digo de estado 200 (o similar)."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"La respuesta..."})}),(0,r.jsx)(e.td,{children:"Ni siquiera llega."}),(0,r.jsx)(e.td,{children:"Llega, pero su contenido es inv\xe1lido."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"\xbfQui\xe9n lo causa?"})}),(0,r.jsx)(e.td,{children:"Problemas de conexi\xf3n, servidor ca\xeddo, URL mala."}),(0,r.jsx)(e.td,{children:"Datos mal formados, faltan campos, tipos incorrectos."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"En la analog\xeda"})}),(0,r.jsx)(e.td,{children:"El camarero no pudo llegar a la bodega."}),(0,r.jsx)(e.td,{children:"El camarero trajo un refresco en lugar de vino."})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"en-resumen-1",children:(0,r.jsx)(e.strong,{children:"En Resumen:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error de Red:"}),' "No pude obtener una respuesta."']}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error de Validaci\xf3n:"}),' "Obtuve una respuesta, pero es incorrecta o in\xfatil para lo que necesito."']}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Como buenos desarrolladores, no solo debemos manejar los fallos en el viaje (red), sino tambi\xe9n ",(0,r.jsx)(e.strong,{children:"desconfiar de los datos que recibimos y validarlos siempre"})," antes de usarlos. \xa1Es la clave para apps robustas y seguras!"]}),"\n",(0,r.jsx)(e.p,{children:"\xbfQueda claro? \xa1Es la diferencia entre que el mensajero no llegue y que llegue con el paquete equivocado! \ud83d\udce6\u274c"}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-real-de-errores-de-validaci\xf3n",children:(0,r.jsx)(e.strong,{children:"Ejemplo real de errores de validaci\xf3n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udc64 procesarUsuario(datos)\n * Funci\xf3n as\xedncrona que valida datos de usuario y luego los guarda de forma as\xedncrona.\n * Usa try/catch para capturar y gestionar errores, tanto de validaci\xf3n como de backend.\n *\n * @param {Object} datos - Objeto con la informaci\xf3n del usuario (por ejemplo: { nombre, email })\n * @returns {Promise<Object>} - Devuelve el usuario guardado si todo sale bien.\n * @throws {Error} - Relanza cualquier error para que lo maneje la funci\xf3n que la llame.\n */\nasync function procesarUsuario(datos) {\n  try {\n    // \u2705 1. VALIDACI\xd3N S\xcdNCRONA\n    // Antes de hacer cualquier operaci\xf3n as\xedncrona, validamos los datos.\n    // Esto es inmediato y evita gastar recursos si ya sabemos que los datos son inv\xe1lidos.\n    if (!datos.email || !datos.email.includes("@")) {\n      // Lanzamos un error manualmente si el email no existe o no contiene "@"\n      throw new Error("Email inv\xe1lido");\n    }\n\n    // \ud83d\udd52 2. OPERACI\xd3N AS\xcdNCRONA\n    // Aqu\xed asumimos que guardarUsuario() es una funci\xf3n que devuelve una promesa.\n    // Por ejemplo, podr\xeda guardar datos en una base de datos o enviar la informaci\xf3n a una API.\n    const usuario = await guardarUsuario(datos);\n\n    // \u2705 Si la operaci\xf3n fue exitosa, devolvemos el usuario guardado.\n    return usuario;\n  } catch (error) {\n    // \ud83d\udea8 3. MANEJO DE ERRORES\n    // Capturamos tanto errores de validaci\xf3n (s\xedncronos) como errores de guardarUsuario (as\xedncronos).\n    console.error("Error procesando usuario:", error.message);\n\n    // \ud83d\udd01 Relanzamos el error para que lo gestione la funci\xf3n que llame a procesarUsuario().\n    // Esto es importante si queremos que la funci\xf3n superior decida qu\xe9 hacer.\n    throw error;\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Qu\xe9 debes entender aqu\xed"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Validaci\xf3n s\xedncrona"}),": no necesita ",(0,r.jsx)(e.code,{children:"await"}),". Es inmediata y sirve para ",(0,r.jsx)(e.strong,{children:"prevenir"})," llamadas innecesarias a la base de datos o API si los datos ya son inv\xe1lidos."]}),"\n",(0,r.jsxs)(e.li,{children:["Si el email no es v\xe1lido, ",(0,r.jsx)(e.code,{children:"throw new Error(...)"})," ",(0,r.jsx)(e.strong,{children:"interrumpe la ejecuci\xf3n"})," de la funci\xf3n y salta directamente al bloque ",(0,r.jsx)(e.code,{children:"catch"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Si la validaci\xf3n pasa, se llama a ",(0,r.jsx)(e.code,{children:"guardarUsuario(datos)"}),", que es una operaci\xf3n as\xedncrona.\n",(0,r.jsx)(e.code,{children:"await"})," espera a que termine y captura el resultado en ",(0,r.jsx)(e.code,{children:"usuario"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Cualquier error que ocurra en ",(0,r.jsx)(e.code,{children:"guardarUsuario"})," tambi\xe9n ser\xe1 capturado en el ",(0,r.jsx)(e.code,{children:"catch"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"throw error"})," dentro del ",(0,r.jsx)(e.code,{children:"catch"})," ",(0,r.jsx)(e.strong,{children:"relanza"})," el error para que ",(0,r.jsxs)(e.strong,{children:["el c\xf3digo que llama a ",(0,r.jsx)(e.code,{children:"procesarUsuario"})]})," pueda reaccionar.\n(Por ejemplo, mostrar un mensaje en la interfaz al usuario)."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Ejemplo de uso"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'(async () => {\n  try {\n    const nuevoUsuario = await procesarUsuario({\n      nombre: "Ana",\n      email: "ana@correo.com",\n    });\n    console.log("Usuario guardado correctamente:", nuevoUsuario);\n  } catch (error) {\n    console.log("No se pudo procesar el usuario:", error.message);\n  }\n})();\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Ejemplo con error de validaci\xf3n"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'(async () => {\n  try {\n    await procesarUsuario({ nombre: "Luis", email: "correo-invalido" });\n  } catch (error) {\n    console.log("\u274c Error capturado en el llamador:", error.message);\n    // Aqu\xed podr\xedas mostrar un mensaje en pantalla al usuario\n  }\n})();\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u2705 Este patr\xf3n es muy com\xfan en la pr\xe1ctica:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Validar r\xe1pido \u2192 lanzar error si hay problema."}),"\n",(0,r.jsx)(e.li,{children:"Esperar operaciones as\xedncronas \u2192 manejar errores si ocurren."}),"\n",(0,r.jsx)(e.li,{children:"Relanzar si la responsabilidad de manejar el error no es de esta funci\xf3n."}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"errores-de-timeout-el-camarero-que-nunca-regresa",children:(0,r.jsx)(e.strong,{children:"Errores de Timeout: El Camarero que Nunca Regresa"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"Imaginad esta situaci\xf3n: Mand\xe1is al camarero a la bodega, pero..."}),"\n",(0,r.jsxs)(e.p,{children:["\u231b ",(0,r.jsx)(e.strong,{children:"Pasan 5 minutos... 10 minutos... 15 minutos..."})," y el camarero no regresa. No sab\xe9is si se perdi\xf3, si est\xe1 atrapado, o si sigue esperando en la bodega."]}),"\n",(0,r.jsxs)(e.p,{children:["Finalmente, el gerente del restaurante dice: ",(0,r.jsx)(e.strong,{children:'"\xa1Basta! Hemos esperado demasiado. Cancelamos el pedido y seguimos con otros clientes."'})]}),"\n",(0,r.jsx)(e.h3,{id:"en-qu\xe9-consisten-los-errores-de-timeout",children:(0,r.jsx)(e.strong,{children:"\xbfEn qu\xe9 consisten los Errores de Timeout?"})}),"\n",(0,r.jsxs)(e.p,{children:["Un ",(0,r.jsx)(e.strong,{children:"timeout"})," ocurre cuando establecemos un ",(0,r.jsx)(e.strong,{children:"l\xedmite de tiempo m\xe1ximo"})," para una operaci\xf3n as\xedncrona (como una petici\xf3n de red), y esta ",(0,r.jsx)(e.strong,{children:"no se completa dentro de ese plazo"}),". No es que falle, es que ",(0,r.jsx)(e.strong,{children:"tarda demasiado"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"La clave es:"})," La petici\xf3n podr\xeda eventualmente tener \xe9xito, pero no podemos esperar eternamente."]}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-sencillo-en-c\xf3digo-2",children:(0,r.jsx)(e.strong,{children:"Ejemplo Sencillo en C\xf3digo"})}),"\n",(0,r.jsx)(e.p,{children:"JavaScript nos permite configurar timeouts f\xe1cilmente. Aqu\xed hay dos formas comunes:"}),"\n",(0,r.jsx)(e.h3,{id:"opci\xf3n-1-con-settimeout-y-abortcontroller-la-forma-moderna",children:(0,r.jsxs)(e.strong,{children:["Opci\xf3n 1: Con ",(0,r.jsx)(e.code,{children:"setTimeout()"})," y ",(0,r.jsx)(e.code,{children:"AbortController"})," (la forma moderna)"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Creamos un "control remoto" para cancelar la petici\xf3n\nconst controller = new AbortController();\nconst signal = controller.signal;\n\n// Configuramos nuestro "temporizador de cocina"\nsetTimeout(() => {\n  controller.abort(); // \xa1Cancelar la petici\xf3n despu\xe9s de 5 segundos!\n}, 5000);\n\n// Enviamos al camarero con el "control remoto"\nfetch("<https://api.ejemplo.com/datos-lentos>", { signal })\n  .then((response) => response.json())\n  .then((datos) => {\n    console.log("\xa1Datos recibidos!", datos);\n  })\n  .catch((error) => {\n    if (error.name === "AbortError") {\n      console.error("\u23f0 \xa1Timeout! La petici\xf3n tard\xf3 m\xe1s de 5 segundos.");\n    } else {\n      console.error("Otro tipo de error:", error.message);\n    }\n  });\n'})}),"\n",(0,r.jsx)(e.h3,{id:"opci\xf3n-2-con-promiserace-concepto-m\xe1s-avanzado",children:(0,r.jsxs)(e.strong,{children:["Opci\xf3n 2: Con ",(0,r.jsx)(e.code,{children:"Promise.race()"})," (concepto m\xe1s avanzado)"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Creamos una "carrera" entre la petici\xf3n y el timeout\nfunction fetchConTimeout(url, tiempoMaximo = 5000) {\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(\n      () => reject(new Error("\u23f0 \xa1Timeout! La petici\xf3n tard\xf3 demasiado")),\n      tiempoMaximo\n    );\n  });\n\n  const fetchPromise = fetch(url).then((response) => response.json());\n\n  // El que gane la carrera (se resuelva primero) define el resultado\n  return Promise.race([fetchPromise, timeoutPromise]);\n}\n\n// Usamos nuestra funci\xf3n con timeout\nfetchConTimeout("<https://api.ejemplo.com/datos-lentos>", 3000)\n  .then((datos) => console.log("\xa1\xc9xito!", datos))\n  .catch((error) => console.error("Error:", error.message));\n'})}),"\n",(0,r.jsx)(e.h3,{id:"por-qu\xe9-ocurren-los-timeouts",children:(0,r.jsx)(e.strong,{children:"\xbfPor qu\xe9 ocurren los Timeouts?"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Conexi\xf3n lenta:"})," La red del usuario es muy pobre."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Servidor sobrecargado:"})," El servidor est\xe1 procesando muchas peticiones y responde lentamente."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Datos muy grandes:"})," Se est\xe1n transfiriendo archivos pesados."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Procesamiento largo:"})," El servidor tarda mucho en generar la respuesta."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"c\xf3mo-manejarlos-en-la-pr\xe1ctica",children:(0,r.jsx)(e.strong,{children:"\xbfC\xf3mo manejarlos en la pr\xe1ctica?"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'async function obtenerDatos() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos\n\n    const response = await fetch("<https://api.ejemplo.com/datos>", {\n      signal: controller.signal,\n    });\n\n    clearTimeout(timeoutId); // Cancelar el timeout si la petici\xf3n tuvo \xe9xito\n\n    if (!response.ok) throw new Error(`Error del servidor: ${response.status}`);\n\n    const datos = await response.json();\n    console.log("Datos v\xe1lidos:", datos);\n  } catch (error) {\n    if (error.name === "AbortError") {\n      console.error(\n        "\u23f0 Timeout: Por favor, verifica tu conexi\xf3n o intenta m\xe1s tarde."\n      );\n      // Mostrar mensaje amigable al usuario\n    } else {\n      console.error("Otro error:", error.message);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"en-resumen-2",children:(0,r.jsx)(e.strong,{children:"En Resumen:"})}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Error"}),(0,r.jsx)(e.th,{children:"En la Analog\xeda"}),(0,r.jsx)(e.th,{children:"En C\xf3digo"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Error de Red"})}),(0,r.jsx)(e.td,{children:'"No pudo salir del restaurante"'}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"fetch"})," rechaza inmediatamente"]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Error de Validaci\xf3n"})}),(0,r.jsx)(e.td,{children:'"Trajo el producto equivocado"'}),(0,r.jsx)(e.td,{children:"Respuesta OK, pero datos inv\xe1lidos"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Timeout"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:'"Tard\xf3 demasiado, cancelamos el pedido"'})}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"AbortError"})," despu\xe9s de X segundos"]})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"La moraleja:"}),' Siempre estableced tiempos de espera razonables en vuestras peticiones. \xa1No dej\xe9is que vuestra aplicaci\xf3n espere eternamente! Es mejor decir "lo sentimos, int\xe9ntalo de nuevo" que dejar al usuario con una pantalla cargando indefinidamente.']}),"\n",(0,r.jsx)(e.p,{children:'\xbfVen por qu\xe9 los timeouts son como ese "gerente sensato" que mantiene el restaurante funcionando eficientemente? \ud83d\udd50\u26a1'}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-real-de-errores-de-tiempo-de-espera",children:(0,r.jsx)(e.strong,{children:"Ejemplo real de errores de tiempo de espera"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \u23f3 conTimeout(promesa, tiempoMs)\n * Envuelve una promesa y establece un tiempo m\xe1ximo de espera.\n * Si la promesa no se resuelve ni rechaza antes de que pase el tiempo,\n * se rechaza con un error de "Timeout".\n *\n * @param {Promise} promesa - La promesa original que queremos limitar.\n * @param {number} tiempoMs - Tiempo m\xe1ximo de espera en milisegundos.\n * @returns {Promise} - Promesa que se resuelve si la original lo hace a tiempo,\n *                      o se rechaza si se agota el tiempo.\n */\nfunction conTimeout(promesa, tiempoMs) {\n  return new Promise((resolve, reject) => {\n    // \ud83e\udded 1. Creamos un temporizador que rechazar\xe1 la promesa si pasa el tiempo indicado.\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`Timeout despu\xe9s de ${tiempoMs}ms`));\n    }, tiempoMs);\n\n    // \ud83e\udded 2. Encadenamos la promesa original:\n    promesa\n      // Si se resuelve a tiempo, resolvemos tambi\xe9n la promesa envolvente.\n      .then(resolve)\n      // Si falla antes del timeout, tambi\xe9n rechazamos la promesa envolvente.\n      .catch(reject)\n      // \ud83e\uddfd 3. finally() se ejecuta siempre: limpiamos el timeout para evitar fugas de memoria.\n      .finally(() => clearTimeout(timeoutId));\n  });\n}\n\n// -----------------------------------------------------------------------------\n// \ud83e\uddea Ejemplo de uso con timeout\n// -----------------------------------------------------------------------------\n\n/**\n * \ud83d\udce1 obtenerDatosConTimeout()\n * Intenta obtener datos con un l\xedmite de tiempo de 5 segundos.\n * Si la operaci\xf3n demora m\xe1s, se lanza un error de timeout.\n */\nasync function obtenerDatosConTimeout() {\n  try {\n    // \ud83d\udd25 Aqu\xed estamos llamando a obtenerDatos() (otra funci\xf3n as\xedncrona)\n    // pero la envolvemos en conTimeout para asegurarnos de que no tarde m\xe1s de 5 segundos.\n    const datos = await conTimeout(obtenerDatos(), 5000);\n\n    // Si llega aqu\xed, la promesa se resolvi\xf3 a tiempo \u2705\n    return datos;\n  } catch (error) {\n    // \ud83d\uded1 Si ocurre un error, distinguimos si fue por timeout o por otro motivo\n    if (error.message.includes("Timeout")) {\n      console.error("\u23f1\ufe0f La operaci\xf3n tard\xf3 demasiado");\n    } else {\n      console.error("\ud83d\udca5 Otro error:", error);\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Qu\xe9 est\xe1 pasando aqu\xed"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"setTimeout()"})," crea un temporizador que, al cumplirse ",(0,r.jsx)(e.code,{children:"tiempoMs"}),", ejecuta ",(0,r.jsx)(e.code,{children:"reject(new Error(...))"}),".\nEsto obliga a que la promesa falle si se demora demasiado."]}),"\n",(0,r.jsxs)(e.li,{children:["Mientras tanto, ",(0,r.jsx)(e.code,{children:"promesa.then().catch()"})," gestiona normalmente la promesa original:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Si se ",(0,r.jsx)(e.strong,{children:"resuelve antes de que expire el timeout"}),", se llama ",(0,r.jsx)(e.code,{children:"resolve()"})," y todo funciona."]}),"\n",(0,r.jsxs)(e.li,{children:["Si se ",(0,r.jsx)(e.strong,{children:"rechaza antes"}),", se llama ",(0,r.jsx)(e.code,{children:"reject()"})," con su error original."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:".finally(clearTimeout(...))"})," garantiza que ",(0,r.jsx)(e.strong,{children:"el timeout se limpie"}),", para evitar fugas de recursos."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Ejemplo pr\xe1ctico"}),":"]}),"\n",(0,r.jsxs)(e.p,{children:["Imagina que ",(0,r.jsx)(e.code,{children:"obtenerDatos()"})," llama a una API que a veces se cuelga."]}),"\n",(0,r.jsx)(e.p,{children:"En vez de dejar la interfaz esperando indefinidamente, estableces un tiempo l\xedmite."}),"\n",(0,r.jsxs)(e.p,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ventajas de este patr\xf3n"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Evita que la UI quede colgada por llamadas lentas."}),"\n",(0,r.jsxs)(e.li,{children:["Te permite mostrar mensajes como ",(0,r.jsx)(e.em,{children:"\u201cLa operaci\xf3n est\xe1 tardando demasiado, int\xe9ntalo de nuevo\u201d"}),"."]}),"\n",(0,r.jsx)(e.li,{children:"Te da un control preciso sobre la experiencia del usuario."}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udea8 ",(0,r.jsx)(e.strong,{children:"Importante"}),":"]}),"\n",(0,r.jsxs)(e.p,{children:["Esto ",(0,r.jsx)(e.strong,{children:"no cancela realmente"})," la petici\xf3n ",(0,r.jsx)(e.code,{children:"fetch"})," original (JavaScript no tiene cancelaci\xf3n nativa de promesas)."]}),"\n",(0,r.jsx)(e.p,{children:"Pero s\xed permite ignorar su resultado si tarda demasiado, y seguir con otro flujo."}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 Si quieres cancelarla realmente, puedes combinar este patr\xf3n con ",(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.code,{children:"AbortController"})}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udccc ",(0,r.jsxs)(e.strong,{children:["Ejemplo alternativo con cancelaci\xf3n real usando ",(0,r.jsx)(e.code,{children:"AbortController"})]})," (opcional):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"async function fetchConTimeout(url, tiempoMs) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), tiempoMs);\n\n  try {\n    const response = await fetch(url, { signal: controller.signal });\n    if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);\n    return await response.json();\n  } finally {\n    clearTimeout(timeoutId);\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 Esta versi\xf3n s\xed ",(0,r.jsx)(e.strong,{children:"interrumpe"})," la petici\xf3n al servidor, no solo la ignora."]}),"\n",(0,r.jsxs)(e.h2,{id:"-mejores-pr\xe1cticas",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Mejores Pr\xe1cticas"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Siempre"})," maneja errores en operaciones asincr\xf3nicas"]}),"\n",(0,r.jsxs)(e.li,{children:["Usa ",(0,r.jsx)(e.strong,{children:"try/catch"})," con async/await para c\xf3digo m\xe1s limpio"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Diferenciar"})," tipos de error (red, validaci\xf3n, servidor)"]}),"\n",(0,r.jsxs)(e.li,{children:["Proporciona ",(0,r.jsx)(e.strong,{children:"mensajes de error \xfatiles"})," al usuario"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-errores-comunes",children:["\u274c ",(0,r.jsx)(e.strong,{children:"Errores Comunes:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Olvidar el ",(0,r.jsx)(e.strong,{children:".catch()"})," en promesas"]}),"\n",(0,r.jsxs)(e.li,{children:["No usar ",(0,r.jsx)(e.strong,{children:"try/catch"})," con async/await"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Silenciar errores"})," sin notificar al usuario"]}),"\n",(0,r.jsxs)(e.li,{children:["No ",(0,r.jsx)(e.strong,{children:"relanzar errores"})," cuando es necesario"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-estrategias-avanzadas",children:["\ud83d\udee1\ufe0f ",(0,r.jsx)(e.strong,{children:"Estrategias Avanzadas:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Reintentos autom\xe1ticos"})," para errores temporales"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Circuit breakers"})," para evitar colapsar servicios"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Timeouts"})," para operaciones lentas"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fallbacks"})," (alternativas cuando el servicio principal falla)"]}),"\n"]}),"\n",(0,r.jsx)(e.h1,{id:"conceptos-sobre-el-mecanismo-de-la-asincron\xeda-en-javascript",children:"Conceptos sobre el mecanismo de la asincron\xeda en JavaScript"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-es-el-event-loop",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es el Event Loop?"})]}),"\n",(0,r.jsx)(e.p,{children:"Imagina un restaurante muy eficiente:"}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-ejemplo-del-mundo-real-1",children:["\ud83c\udf7d\ufe0f ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Cocina (Call Stack):"})," Donde se prepara un plato a la vez"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mesas (Web APIs):"})," Donde los clientes esperan su comida"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Camarero (Event Loop):"})," Que constantemente verifica si la cocina est\xe1 libre y trae nuevos pedidos"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-5",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:["El ",(0,r.jsx)(e.strong,{children:"Event Loop"})," es el mecanismo que permite a JavaScript manejar m\xfaltiples operaciones con un ",(0,r.jsx)(e.strong,{children:"solo hilo"}),", haciendo que parezca que hace varias cosas a la vez."]}),"\n",(0,r.jsxs)(e.h2,{id:"-los-componentes-del-event-loop",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Los Componentes del Event Loop"})]}),"\n",(0,r.jsxs)(e.h2,{id:"1-call-stack-pila-de-llamadas",children:["1. ",(0,r.jsx)(e.strong,{children:"Call Stack (Pila de Llamadas)"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["Imagina que el Call Stack es como ",(0,r.jsx)(e.strong,{children:"una pila de platos"})," o ",(0,r.jsx)(e.strong,{children:"una torre de libros"})," - solo puedes agregar o quitar del TOPE."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udd25 CALL STACK = PILA DE EJECUCI\xd3N\n *\n * REGLAS:\n * 1. \xdaltimo en entrar, primero en salir (LIFO - Last In, First Out)\n * 2. Solo una cosa a la vez (JavaScript es single-threaded)\n * 3. Si se llena demasiado = ERROR "Stack Overflow"\n */\n\nconsole.log("\ud83d\udcda Entendiendo el Call Stack paso a paso");\n\n// \ud83d\udccd EJEMPLO 1: Funci\xf3n simple\nfunction saludar() {\n  console.log("Hola!");\n  return "Listo";\n}\n\nfunction iniciar() {\n  console.log("Iniciando programa...");\n  const resultado = saludar(); // \ud83d\udccd Esta funci\xf3n entra al Call Stack\n  console.log("Resultado:", resultado);\n}\n\n// Ejecutamos\niniciar();\n\n/**\n * \ud83c\udfaf \xbfQU\xc9 PASA EN EL CALL STACK?\n *\n * PASO 1: iniciar() entra al Call Stack\n * Call Stack = [iniciar]\n *\n * PASO 2: console.log("Iniciando...") entra\n * Call Stack = [iniciar, console.log]\n *\n * PASO 3: console.log termina \u2192 SALE\n * Call Stack = [iniciar]\n *\n * PASO 4: saludar() entra\n * Call Stack = [iniciar, saludar]\n *\n * PASO 5: console.log("Hola!") entra y sale\n * Call Stack = [iniciar, saludar]\n *\n * PASO 6: saludar() termina \u2192 SALE\n * Call Stack = [iniciar]\n *\n * PASO 7: console.log("Resultado:") entra y sale\n * Call Stack = [iniciar]\n *\n * PASO 8: iniciar() termina \u2192 SALE\n * Call Stack = [] VAC\xcdO\n */\n'})}),"\n",(0,r.jsx)(e.h2,{id:"analog\xeda-del-libro-de-recetas",children:"Analog\xeda del Libro de Recetas"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udcd6 ANALOG\xcdA: LIBRO DE RECETAS\n *\n * Imagina que cocinas siguiendo una receta:\n * - Cada paso = funci\xf3n en el Call Stack\n * - Si la receta dice "ve a la p\xe1gina 30" = llamas otra funci\xf3n\n * - Cuando terminas esa p\xe1gina, vuelves donde estabas\n */\n\nconsole.log("\ud83c\udf73 Analog\xeda del libro de recetas");\n\nfunction recetaPrincipal() {\n  console.log("Paso 1: Preparar ingredientes");\n  prepararSalsa(); // \ud83d\udcd6 "Ve a la p\xe1gina de la salsa"\n  console.log("Paso 3: Cocinar todo junto");\n}\n\nfunction prepararSalsa() {\n  console.log("Paso 2.1: Picar tomates");\n  picarIngredientes(); // \ud83d\udcd6 "Ve a la p\xe1gina de picar"\n  console.log("Paso 2.3: Mezclar salsa");\n}\n\nfunction picarIngredientes() {\n  console.log("Paso 2.2: Picando... listo!");\n}\n\n// Ejecutamos la receta\nrecetaPrincipal();\n\n/**\n * \ud83c\udfaf ORDEN EN EL CALL STACK:\n *\n * 1. recetaPrincipal() entra\n * 2. console.log("Paso 1") entra y sale\n * 3. prepararSalsa() entra\n * 4. console.log("Paso 2.1") entra y sale\n * 5. picarIngredientes() entra\n * 6. console.log("Paso 2.2") entra y sale\n * 7. picarIngredientes() SALE\n * 8. console.log("Paso 2.3") entra y sale\n * 9. prepararSalsa() SALE\n * 10. console.log("Paso 3") entra y sale\n * 11. recetaPrincipal() SALE\n *\n * \ud83d\udccd PRINCIPIO LIFO: La \xfaltima funci\xf3n que entr\xf3 (picarIngredientes)\n * es la primera en salir\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"el-famoso-error-stack-overflow",children:"El Famoso Error: Stack Overflow"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udca5 STACK OVERFLOW = CALL STACK LLENO\n *\n * Ocurre cuando llamamos demasiadas funciones recursivamente\n * sin condici\xf3n de salida\n */\n\nconsole.log("\u26a0\ufe0f Cuidado con el Stack Overflow");\n\n// \u2705 RECURSI\xd3N CON CONDICI\xd3N DE SALIDA (SEGURA)\nfunction cuentaRegresivaSegura(numero) {\n  console.log("N\xfamero:", numero);\n\n  if (numero <= 0) {\n    // \u2705 CONDICI\xd3N DE SALIDA\n    console.log("\xa1Fin!");\n    return;\n  }\n\n  cuentaRegresivaSegura(numero - 1); // \ud83d\udccd Cada llamada agrega al Call Stack\n}\n\ncuentaRegresivaSegura(3);\n\n/**\n * \ud83c\udfaf CALL STACK en cuentaRegresivaSegura(3):\n *\n * 1. cuentaRegresivaSegura(3)\n * 2. cuentaRegresivaSegura(2)\n * 3. cuentaRegresivaSegura(1)\n * 4. cuentaRegresivaSegura(0) \u2192 CONDICI\xd3N DE SALIDA\n * 5. SALE cuentaRegresivaSegura(0)\n * 6. SALE cuentaRegresivaSegura(1)\n * 7. SALE cuentaRegresivaSegura(2)\n * 8. SALE cuentaRegresivaSegura(3)\n *\n * \u2705 Call Stack se mantiene controlado\n */\n\n// \u274c RECURSI\xd3N INFINITA (PELIGROSO)\nfunction recursionInfinita() {\n  console.log("\xa1Ayuda! Me repito infinitamente");\n  recursionInfinita(); // \u274c SIN CONDICI\xd3N DE SALIDA\n}\n\n// \xa1NO EJECUTES ESTO! Causar\xeda:\n// Uncaught RangeError: Maximum call stack size exceeded\n// recursionInfinita();\n'})}),"\n",(0,r.jsx)(e.h3,{id:"call-stack-vs-c\xf3digo-as\xedncrono",children:"Call Stack vs C\xf3digo As\xedncrono"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udd04 CALL STACK + ASINCRON\xcdA\n *\n * El Call Stack solo maneja c\xf3digo SINCR\xd3NICO\n * El c\xf3digo as\xedncrono va a Web APIs y luego al Callback Queue\n */\n\nconsole.log("\ud83d\udccd Call Stack: Inicio sincr\xf3nico");\n\n// \u23f0 Esto NO va al Call Stack inmediatamente\nsetTimeout(() => {\n  console.log("\ud83d\udd04 Esto estuvo en Callback Queue antes del Call Stack");\n}, 0);\n\n// \ud83d\udccd Esto S\xcd va al Call Stack inmediatamente\nconsole.log("\ud83d\udccd Call Stack: Fin sincr\xf3nico");\n\n/**\n * \ud83c\udfaf ORDEN REAL DE EJECUCI\xd3N:\n *\n * 1. console.log("\ud83d\udccd Inicio") \u2192 Call Stack \u2192 EJECUTADO\n * 2. setTimeout \u2192 Web APIs (NO al Call Stack)\n * 3. console.log("\ud83d\udccd Fin") \u2192 Call Stack \u2192 EJECUTADO\n *\n * \ud83d\udccd CALL STACK VAC\xcdO (todo el c\xf3digo sincr\xf3nico termin\xf3)\n *\n * 4. Funci\xf3n del setTimeout \u2192 Callback Queue \u2192 Call Stack \u2192 EJECUTADO\n *\n * \u26a0\ufe0f IMPORTANTE: El setTimeout aunque sea 0ms, NUNCA interrumpe el Call Stack\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"depurando-el-call-stack",children:"Depurando el Call Stack"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udc1b DEBUGGING: C\xf3mo ver el Call Stack en acci\xf3n\n */\n\nfunction funcionA() {\n  console.log("En funci\xf3n A");\n  funcionB(); // \ud83d\udccd Llamamos a B desde A\n}\n\nfunction funcionB() {\n  console.log("En funci\xf3n B");\n  funcionC(); // \ud83d\udccd Llamamos a C desde B\n}\n\nfunction funcionC() {\n  console.log("En funci\xf3n C");\n  console.trace("\ud83d\udccd \xa1Mira el Call Stack desde aqu\xed!"); // \ud83d\udc1b DEBUG\n}\n\nfuncionA();\n\n/**\n * \ud83c\udfaf SALIDA DE console.trace():\n *\n * console.trace()\n * funcionC\n * funcionB\n * funcionA\n * (c\xf3digo global)\n *\n * \ud83d\udccd Esto muestra exactamente la PILA de llamadas:\n * Qui\xe9n llam\xf3 a qui\xe9n, en orden inverso (del m\xe1s reciente al m\xe1s antiguo)\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-pr\xe1ctico-del-mundo-real",children:"Ejemplo Pr\xe1ctico del Mundo Real"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfea EJEMPLO REAL: Proceso de compra en tienda online\n */\n\nconsole.log("\ud83d\uded2 Iniciando proceso de compra...");\n\nfunction procesoCompra() {\n  validarUsuario();\n  const total = calcularTotal();\n  procesarPago(total);\n  confirmarCompra();\n}\n\nfunction validarUsuario() {\n  console.log("\u2705 Validando usuario...");\n  // Simulamos validaci\xf3n\n  return true;\n}\n\nfunction calcularTotal() {\n  console.log("\ud83d\udcb0 Calculando total...");\n  aplicarDescuento(); // \ud83d\udccd Llamada dentro de otra funci\xf3n\n  return 100;\n}\n\nfunction aplicarDescuento() {\n  console.log("\ud83c\udfaf Aplicando descuento...");\n}\n\nfunction procesarPago(monto) {\n  console.log("\ud83d\udcb3 Procesando pago:", monto);\n}\n\nfunction confirmarCompra() {\n  console.log("\ud83c\udf89 \xa1Compra confirmada!");\n}\n\n// Ejecutamos el proceso\nprocesoCompra();\n\n/**\n * \ud83c\udfaf CALL STACK durante procesoCompra():\n *\n * 1. procesoCompra() entra\n * 2. validarUsuario() entra \u2192 ejecuta \u2192 sale\n * 3. calcularTotal() entra\n * 4. aplicarDescuento() entra \u2192 ejecuta \u2192 sale\n * 5. calcularTotal() sale\n * 6. procesarPago() entra \u2192 ejecuta \u2192 sale\n * 7. confirmarCompra() entra \u2192 ejecuta \u2192 sale\n * 8. procesoCompra() sale\n *\n * \ud83d\udccd NUNCA hay m\xe1s de 3 funciones en el Call Stack a la vez\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"reglas-fundamentales-del-call-stack",children:"Reglas Fundamentales del Call Stack"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udccb REGLAS DE ORO DEL CALL STACK\n */\n\n// REGLA 1: \xdaltimo en Entrar, Primero en Salir (LIFO)\nfunction regla1() {\n  console.log("1\ufe0f\u20e3 Primero en entrar...");\n  function interna() {\n    console.log("2\ufe0f\u20e3 \xdaltimo en entrar...");\n    console.log("3\ufe0f\u20e3 \xa1Primero en salir!");\n  }\n  interna();\n  console.log("4\ufe0f\u20e3 Primero en entrar, \xfaltimo en salir");\n}\nregla1();\n\n// REGLA 2: Una ejecuci\xf3n a la vez\nfunction regla2() {\n  console.log("\ud83d\udccd JavaScript es single-threaded");\n  console.log("\ud83d\udccd Solo una funci\xf3n se ejecuta EN ESTE MOMENTO");\n  console.log("\ud83d\udccd Las dem\xe1s esperan su turno en el Call Stack");\n}\nregla2();\n\n// REGLA 3: El orden importa\nfunction regla3() {\n  console.log("A");\n  function segunda() {\n    console.log("B");\n    function tercera() {\n      console.log("C");\n    }\n    tercera();\n    console.log("D");\n  }\n  segunda();\n  console.log("E");\n}\nregla3(); // Salida: A, B, C, D, E\n\n/**\n * \ud83c\udfaf RESUMEN FINAL:\n *\n * CALL STACK = PILA DE EJECUCI\xd3N donde:\n * - Se ejecuta el c\xf3digo JavaScript\n * - Sigue principio LIFO (Last In, First Out)\n * - Es single-threaded (una cosa a la vez)\n * - Si se llena \u2192 Stack Overflow\n * - Solo maneja c\xf3digo SINCR\xd3NICO\n * - El c\xf3digo AS\xcdNCRONO va a otras partes (Web APIs, Callback Queue)\n */\n\nconsole.log("\ud83c\udfaf \xa1Ahora entiendes el Call Stack!");\n'})}),"\n",(0,r.jsx)(e.h3,{id:"en-resumen-muy-sencillo",children:(0,r.jsx)(e.strong,{children:"En Resumen Muy Sencillo:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfaa CALL STACK = TORRE DE PLATOS\n *\n * \ud83d\udccd Solo puedes:\n * - Agregar un plato al TOPE (llamar funci\xf3n)\n * - Quitar el plato del TOPE (funci\xf3n termina)\n *\n * \ud83d\udccd NO puedes:\n * - Agregar en medio\n * - Quitar del fondo\n * - Tener m\xfaltiples torres\n *\n * \ud83d\udccd Si la torre es muy alta: \xa1SE CAE! (Stack Overflow)\n */\n\nfunction resumen() {\n  console.log("\ud83d\udccd Call Stack = Ejecuci\xf3n inmediata y ordenada");\n  console.log("\ud83d\udccd \xdaltima funci\xf3n en entrar = Primera en salir");\n  console.log("\ud83d\udccd Base de todo el sistema JavaScript");\n}\n\nresumen();\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\xa1El Call Stack es el motor de ejecuci\xf3n de JavaScript - donde realmente sucede la magia!"})}),"\n",(0,r.jsxs)(e.h2,{id:"2-callback-queue-cola-de-tareas",children:["2. ",(0,r.jsx)(e.strong,{children:"Callback Queue (Cola de Tareas)"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["Imagina que JavaScript tiene ",(0,r.jsx)(e.strong,{children:"una persona que atiende (Call Stack)"})," y una ",(0,r.jsx)(e.strong,{children:"lista de espera (Callback Queue)"}),"."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * EJEMPLO PR\xc1CTICO DEL CALLBACK QUEUE\n *\n * PENSEMOS EN UN RESTAURANTE:\n * - El cocinero = Call Stack (solo puede hacer una cosa a la vez)\n * - Los pedidos en la mesa = Callback Queue (esperan su turno)\n * - El mesero = Event Loop (lleva pedidos al cocinero cuando est\xe1 libre)\n */\n\nconsole.log("\ud83d\udd39 Pedido 1: Entrada inmediata"); // Va directo al cocinero\n\nsetTimeout(() => {\n  console.log("\ud83d\udd52 Pedido 3: Llega despu\xe9s de 2 segundos"); // Espera en la lista\n}, 2000);\n\nsetTimeout(() => {\n  console.log("\ud83d\udd52 Pedido 2: Llega despu\xe9s de 0 segundos"); // Espera en la lista\n}, 0);\n\nconsole.log("\ud83d\udd39 Pedido 4: Entrada inmediata"); // Va directo al cocinero\n\n/**\n * \xbfQU\xc9 PASA EN ESTE C\xd3DIGO?\n *\n * RESULTADO EN CONSOLA:\n * \ud83d\udd39 Pedido 1: Entrada inmediata\n * \ud83d\udd39 Pedido 4: Entrada inmediata\n * \ud83d\udd52 Pedido 2: Llega despu\xe9s de 0 segundos\n * \ud83d\udd52 Pedido 3: Llega despu\xe9s de 2 segundos\n *\n * EXPLICACI\xd3N:\n * 1. El "cocinero" (Call Stack) procesa primero los console.log normales\n * 2. Los setTimeout van a la "lista de espera" (Callback Queue)\n * 3. Cuando el cocinero termina, el "mesero" (Event Loop) trae los pedidos de la lista\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"c\xf3digo-explicado-paso-a-paso",children:"C\xf3digo Explicado Paso a Paso"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * DEMOSTRACI\xd3N COMPLETA DEL CALLBACK QUEUE\n *\n * COMPONENTES PRINCIPALES:\n * 1. Call Stack: Donde se ejecuta el c\xf3digo principal (FILA DE EJECUCI\xd3N)\n * 2. Web APIs: Funciones como setTimeout, fetch, eventos (AYUDANTES EXTERNOS)\n * 3. Callback Queue: Cola donde esperan las funciones callback (LISTA DE ESPERA)\n * 4. Event Loop: Verifica constantemente si el Call Stack est\xe1 vac\xedo (MESERO)\n */\n\nconsole.log("\ud83d\ude80 INICIO: Esto va directo al Call Stack");\n\n/**\n * setTimeout ES UNA WEB API\n * - JavaScript le dice al navegador: "Ejecuta esto despu\xe9s de X tiempo"\n * - El navegador maneja el temporizador por su cuenta\n * - Cuando termina el tiempo, pone la funci\xf3n en el Callback Queue\n */\nsetTimeout(() => {\n  console.log("\u23f0 Timeout de 0ms - Viene del Callback Queue");\n}, 0);\n\n/**\n * OTRO EJEMPLO CON M\xc1S TIEMPO\n * - Este espera m\xe1s tiempo en las Web APIs\n * - Pero igual va al Callback Queue cuando termina\n */\nsetTimeout(() => {\n  console.log("\ud83d\udc22 Timeout de 1000ms - Tard\xf3 m\xe1s en llegar a la cola");\n}, 1000);\n\n/**\n * PROMESAS TIENEN PRIORIDAD DIFERENTE (Microtask Queue)\n * - Las promesas van a una cola ESPECIAL con mayor prioridad\n * - Se ejecutan ANTES que el Callback Queue normal\n */\nPromise.resolve().then(() => {\n  console.log("\u2705 Promesa - Viene de la Microtask Queue (m\xe1xima prioridad)");\n});\n\n/**\n * C\xd3DIGO SINCR\xd3NICO\n * - Esto se ejecuta INMEDIATAMENTE en el Call Stack\n * - No pasa por ninguna cola de espera\n */\nconsole.log("\ud83c\udfc1 FIN: \xdaltima l\xednea del c\xf3digo sincr\xf3nico");\n\n/**\n * \xbfQU\xc9 ORDEN SE EJECUTA?\n *\n * 1. \ud83d\ude80 INICIO: Esto va directo al Call Stack\n * 2. \ud83c\udfc1 FIN: \xdaltima l\xednea del c\xf3digo sincr\xf3nico\n * 3. \u2705 Promesa - Viene de la Microtask Queue (m\xe1xima prioridad)\n * 4. \u23f0 Timeout de 0ms - Viene del Callback Queue\n * 5. \ud83d\udc22 Timeout de 1000ms - Tard\xf3 m\xe1s en llegar a la cola\n *\n * \xbfPOR QU\xc9 ESTE ORDEN?\n * - Primero todo el c\xf3digo sincr\xf3nico del Call Stack\n * - Luego la Microtask Queue (promesas)\n * - Finalmente el Callback Queue (setTimeout)\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"analog\xeda-del-restaurante-detallada",children:"Analog\xeda del Restaurante Detallada"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"/**\n * ANALOG\xcdA COMPLETA DEL RESTAURANTE\n */\n\n// El restaurante (JavaScript) abre\nconsole.log(\"\ud83c\udf7d\ufe0f RESTAURANTE ABIERTO - Call Stack listo\");\n\n// Cliente 1: Llega y pide inmediatamente (c\xf3digo sincr\xf3nico)\nconsole.log(\"\ud83d\udc68\u200d\ud83c\udf73 Cliente 1: 'Quiero una hamburguesa' - ATENDIDO INMEDIATO\");\n\n// Cliente 2: Pide pero dice \"ll\xe1mame cuando est\xe9 listo en 2 segundos\" (setTimeout)\nsetTimeout(() => {\n  console.log(\"\ud83d\udcde Cliente 2: 'Mi pedido de pizza est\xe1 listo' - CALLBACK QUEUE\");\n}, 2000);\n\n// Cliente 3: Pide con urgencia m\xe1xima (Promise - Microtask Queue)\nPromise.resolve().then(() => {\n  console.log(\n    \"\ud83d\udea8 Cliente 3: 'URGENTE: Ensalada' - MICROTASK QUEUE (m\xe1xima prioridad)\"\n  );\n});\n\n// Cliente 4: Tambi\xe9n pide inmediatamente\nconsole.log(\"\ud83d\udc68\u200d\ud83c\udf73 Cliente 4: 'Quiero refresco' - ATENDIDO INMEDIATO\");\n\n// Cliente 5: Pide \"ll\xe1mame en 0 segundos\" (setTimeout 0ms)\nsetTimeout(() => {\n  console.log(\n    \"\ud83d\udcde Cliente 5: 'Mi caf\xe9 est\xe1 listo' - CALLBACK QUEUE (aunque sea 0ms)\"\n  );\n}, 0);\n\n/**\n * PROCESO EN EL RESTAURANTE:\n *\n * 1. \ud83c\udf7d\ufe0f RESTAURANTE ABIERTO - Call Stack listo\n * 2. \ud83d\udc68\u200d\ud83c\udf73 Cliente 1: 'Quiero una hamburguesa' - ATENDIDO INMEDIATO\n * 3. \ud83d\udc68\u200d\ud83c\udf73 Cliente 4: 'Quiero refresco' - ATENDIDO INMEDIATO\n *\n * (El cocinero termina todos los pedidos inmediatos)\n *\n * 4. \ud83d\udea8 Cliente 3: 'URGENTE: Ensalada' - MICROTASK QUEUE (m\xe1xima prioridad)\n *    - Las promesas tienen PRIORIDAD sobre los timeouts\n *\n * 5. \ud83d\udcde Cliente 5: 'Mi caf\xe9 est\xe1 listo' - CALLBACK QUEUE (aunque sea 0ms)\n *    - Los timeouts van DESPU\xc9S de las promesas, aunque digan 0ms\n *\n * 6. \ud83d\udcde Cliente 2: 'Mi pedido de pizza est\xe1 listo' - CALLBACK QUEUE\n *    - Despu\xe9s de 2 segundos reales\n */\n"})}),"\n",(0,r.jsx)(e.h3,{id:"reglas-clave-del-callback-queue",children:"Reglas Clave del Callback Queue"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * REGLAS FUNDAMENTALES DEL EVENT LOOP\n */\n\nconsole.log("\ud83d\udcda APRENDIENDO LAS REGLAS");\n\n// REGLA 1: El c\xf3digo sincr\xf3nico SIEMPRE se ejecuta primero\nconsole.log("1\ufe0f\u20e3 C\xf3digo sincr\xf3nico - PRIMERO SIEMPRE");\n\n// REGLA 2: Las Microtasks (Promesas) tienen m\xe1xima prioridad\nPromise.resolve().then(() => {\n  console.log("2\ufe0f\u20e3 Microtask (Promise) - SEGUNDO LUGAR - M\xe1xima prioridad");\n});\n\n// REGLA 3: Los Macrotasks (setTimeout) van despu\xe9s\nsetTimeout(() => {\n  console.log("3\ufe0f\u20e3 Macrotask (setTimeout) - TERCER LUGAR - Baja prioridad");\n}, 0);\n\n// REGLA 4: Incluso setTimeout(0) espera su turno\nsetTimeout(() => {\n  console.log("4\ufe0f\u20e3 setTimeout(0) - CUARTO LUGAR - Aunque sea 0ms, va a la cola");\n}, 0);\n\n// REGLA 5: El orden en la misma cola se respeta\nsetTimeout(() => {\n  console.log("5\ufe0f\u20e3 Primer setTimeout(100ms) - Se ejecuta por orden de llegada");\n}, 100);\n\nsetTimeout(() => {\n  console.log("6\ufe0f\u20e3 Segundo setTimeout(100ms) - Mismo tiempo, orden de c\xf3digo");\n}, 100);\n\n/**\n * RESUMEN DE PRIORIDADES:\n *\n * 1. \ud83e\udd47 C\xd3DIGO SINCR\xd3NICO (Call Stack)\n * 2. \ud83e\udd47 MICROTASKS (Promesas, queueMicrotask)\n * 3. \ud83e\udd48 MACROTASKS (setTimeout, setInterval, eventos)\n * 4. \ud83e\udd49 RENDERIZADO (Actualizaci\xf3n de pantalla)\n *\n * FLUJO: Sincr\xf3nico \u2192 Microtasks \u2192 Macrotasks \u2192 Render \u2192 Repetir\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-pr\xe1ctico-y-\xfatil",children:"Ejemplo Pr\xe1ctico y \xdatil"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * EJEMPLO PR\xc1CTICO: C\xf3mo usar este conocimiento en c\xf3digo real\n */\n\nfunction cargarDatosDeUsuario() {\n  console.log("1. Iniciando carga de datos...");\n\n  // SIMULAMOS UNA PETICI\xd3N A UNA API\n  setTimeout(() => {\n    console.log("3. Datos recibidos del servidor (despu\xe9s de 1 segundo)");\n\n    // PROCESAMOS LOS DATOS CON UNA PROMESA\n    Promise.resolve().then(() => {\n      console.log("4. Procesando datos (Microtask - alta prioridad)");\n    });\n  }, 1000);\n\n  console.log("2. Esperando datos... (esto se ejecuta inmediatamente)");\n}\n\n// EJECUTAMOS LA FUNCI\xd3N\ncargarDatosDeUsuario();\n\n/**\n * \xbfQU\xc9 PASA AQU\xcd?\n *\n * 1. "Iniciando carga de datos..." - Sincr\xf3nico, se ejecuta inmediatamente\n * 2. "Esperando datos..." - Sincr\xf3nico, se ejecuta inmediatamente\n * 3. El setTimeout espera 1 segundo en las Web APIs\n * 4. Despu\xe9s de 1 segundo: "Datos recibidos del servidor"\n * 5. Inmediatamente despu\xe9s: "Procesando datos" - Porque la promesa es Microtask\n *\n * ESTO ES IMPORTANTE PARA:\n * - Evitar bloqueos en la interfaz\n * - Manejar operaciones as\xedncronas correctamente\n * - Entender por qu\xe9 a veces el c\xf3digo no se ejecuta en el orden esperado\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"en-resumen-muy-sencillo-1",children:(0,r.jsx)(e.strong,{children:"En Resumen Muy Sencillo:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfaf RESUMEN SUPER SIMPLE:\n *\n * JavaScript = 1 cocinero + 2 listas de espera\n *\n * LISTA 1 (URGENTE): Microtask Queue - Promesas (M\xc1XIMA PRIORIDAD)\n * LISTA 2 (NORMAL): Callback Queue - setTimeout, eventos (BAJA PRIORIDAD)\n *\n * REGLA DE ORO:\n * 1. Terminar todo el trabajo inmediato (c\xf3digo normal)\n * 2. Atender todas las URGENCIAS (Promesas)\n * 3. Atender la lista normal (setTimeout)\n * 4. Repetir\n */\n\nconsole.log("\u2728 \xa1Ahora entiendes el Callback Queue!");\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"3-microtask-queue-cola-de-microtareas",children:["3. ",(0,r.jsx)(e.strong,{children:"Microtask Queue (Cola de Microtareas)"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["Es una ",(0,r.jsx)(e.strong,{children:"cola de M\xc1XIMA PRIORIDAD"})," donde esperan las promesas y otras microtareas. \xa1Tiene prioridad sobre el Callback Queue normal!"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udd25 MICROTASK QUEUE = COLA DE M\xc1XIMA PRIORIDAD\n *\n * REGLAS:\n * 1. M\xc1XIMA PRIORIDAD - Se ejecuta ANTES que el Callback Queue\n * 2. Solo para: Promesas, queueMicrotask(), MutationObserver\n * 3. Se vac\xeda COMPLETAMENTE antes de pasar al Callback Queue\n */\n\nconsole.log("\ud83d\udcda Entendiendo la Microtask Queue");\n\n// \ud83d\udccd C\xf3digo normal (Call Stack)\nconsole.log("1\ufe0f\u20e3 Call Stack: C\xf3digo sincr\xf3nico");\n\n// \u23f0 Macrotask (Callback Queue - BAJA prioridad)\nsetTimeout(() => {\n  console.log("4\ufe0f\u20e3 Callback Queue: setTimeout - \xdaLTIMO lugar");\n}, 0);\n\n// \u2705 Microtask (Microtask Queue - M\xc1XIMA prioridad)\nPromise.resolve().then(() => {\n  console.log("3\ufe0f\u20e3 Microtask Queue: Promise - SEGUNDO lugar");\n});\n\n// \ud83d\udccd M\xe1s c\xf3digo normal\nconsole.log("2\ufe0f\u20e3 Call Stack: M\xe1s c\xf3digo sincr\xf3nico");\n\n/**\n * \ud83c\udfaf ORDEN DE EJECUCI\xd3N:\n *\n * 1\ufe0f\u20e3 Call Stack: C\xf3digo sincr\xf3nico\n * 2\ufe0f\u20e3 Call Stack: M\xe1s c\xf3digo sincr\xf3nico\n * 3\ufe0f\u20e3 Microtask Queue: Promise - M\xc1XIMA PRIORIDAD\n * 4\ufe0f\u20e3 Callback Queue: setTimeout - BAJA PRIORIDAD\n *\n * \xa1La Promise se ejecuta ANTES del setTimeout aunque ambos est\xe9n "listos"!\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"analog\xeda-de-la-emergencia-hospitalaria",children:"Analog\xeda de la Emergencia Hospitalaria"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfe5 ANALOG\xcdA: HOSPITAL CON URGENCIAS\n *\n * - Pacientes normales = Callback Queue (sala de espera normal)\n * - Pacientes URGENTES = Microtask Queue (urgencias)\n * - El doctor SIEMPRE atiende urgencias primero\n */\n\nconsole.log("\ud83c\udfe5 Abriendo hospital...");\n\n// Paciente NORMAL (Callback Queue)\nsetTimeout(() => {\n  console.log("\ud83d\udc68\u200d\u2695\ufe0f Paciente NORMAL: Dolor de cabeza - Esper\xf3 su turno");\n}, 0);\n\n// Paciente URGENTE (Microtask Queue)\nPromise.resolve().then(() => {\n  console.log("\ud83d\ude91 Paciente URGENTE: Ataque al coraz\xf3n - ATENCI\xd3N INMEDIATA!");\n});\n\n// M\xe1s pacientes NORMALES\nsetTimeout(() => {\n  console.log("\ud83d\udc68\u200d\u2695\ufe0f Paciente NORMAL: Fiebre - Esper\xf3 su turno");\n}, 0);\n\nconsole.log("\ud83d\udccb Terminando registro de pacientes...");\n\n/**\n * \ud83c\udfaf ORDEN DE ATENCI\xd3N:\n *\n * 1. "\ud83c\udfe5 Abriendo hospital..." (Call Stack)\n * 2. "\ud83d\udccb Terminando registro..." (Call Stack)\n * 3. "\ud83d\ude91 Paciente URGENTE: Ataque al coraz\xf3n" (Microtask Queue - PRIMERO!)\n * 4. "\ud83d\udc68\u200d\u2695\ufe0f Paciente NORMAL: Dolor de cabeza" (Callback Queue)\n * 5. "\ud83d\udc68\u200d\u2695\ufe0f Paciente NORMAL: Fiebre" (Callback Queue)\n *\n * \xa1Los URGENTES siempre pasan primero!\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"jerarqu\xeda-de-colas-en-javascript",children:"Jerarqu\xeda de Colas en JavaScript"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfc6 JERARQU\xcdA DE COLAS - \xbfQU\xc9 SE EJECUTA PRIMERO?\n */\n\nconsole.log("\ud83e\udd47 Inicio: Call Stack siempre primero");\n\n// \ud83e\udd48 MICROTASK QUEUE (M\xc1XIMA prioridad despu\xe9s del Call Stack)\nPromise.resolve().then(() => {\n  console.log("\ud83e\udd48 Microtask: Promise - SEGUNDO lugar");\n});\n\nqueueMicrotask(() => {\n  console.log("\ud83e\udd48 Microtask: queueMicrotask() - Tambi\xe9n segundo lugar");\n});\n\n// \ud83e\udd49 CALLBACK QUEUE (BAJA prioridad)\nsetTimeout(() => {\n  console.log("\ud83e\udd49 Callback Queue: setTimeout - TERCER lugar");\n}, 0);\n\n// \ud83d\udccd CALL STACK (SIEMPRE primero)\nconsole.log("\ud83e\udd47 Call Stack: Fin del c\xf3digo sincr\xf3nico");\n\n/**\n * \ud83c\udfaf ORDEN DEFINITIVO:\n *\n * 1. \ud83e\udd47 TODO el Call Stack (c\xf3digo sincr\xf3nico)\n * 2. \ud83e\udd48 TODAS las Microtasks (se vac\xeda completamente)\n * 3. \ud83e\udd49 Callback Queue (solo UNA tarea por ciclo del event loop)\n *\n * FLUJO: Call Stack \u2192 (vac\xedo) \u2192 Microtask Queue \u2192 Callback Queue\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-con-m\xfaltiples-niveles",children:"Ejemplo con M\xfaltiples Niveles"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udd04 MICROTASKS DENTRO DE MICROTASKS\n *\n * Las microtasks se vac\xedan COMPLETAMENTE, incluso si se agregan nuevas\n */\n\nconsole.log("1\ufe0f\u20e3 Call Stack: Inicio");\n\n// Macrotask normal\nsetTimeout(() => {\n  console.log("6\ufe0f\u20e3 Callback Queue: setTimeout externo");\n}, 0);\n\n// Microtask principal\nPromise.resolve().then(() => {\n  console.log("3\ufe0f\u20e3 Microtask: Promise principal");\n\n  // \xa1Otra microtask DENTRO de una microtask!\n  Promise.resolve().then(() => {\n    console.log("4\ufe0f\u20e3 Microtask: Promise anidada");\n\n    // \xa1Y otra m\xe1s!\n    queueMicrotask(() => {\n      console.log("5\ufe0f\u20e3 Microtask: queueMicrotask anidada");\n    });\n  });\n});\n\nconsole.log("2\ufe0f\u20e3 Call Stack: Fin");\n\n/**\n * \ud83c\udfaf \xbfQU\xc9 PASA AQU\xcd?\n *\n * 1. "1\ufe0f\u20e3 Call Stack: Inicio"\n * 2. "2\ufe0f\u20e3 Call Stack: Fin"\n *\n * \ud83d\udccd CALL STACK VAC\xcdO - Ahora procesamos microtasks\n *\n * 3. "3\ufe0f\u20e3 Microtask: Promise principal"\n * 4. "4\ufe0f\u20e3 Microtask: Promise anidada"\n * 5. "5\ufe0f\u20e3 Microtask: queueMicrotask anidada"\n *\n * \u26a0\ufe0f IMPORTANTE: El Event Loop NO pasa al Callback Queue hasta que\n * la Microtask Queue est\xe9 COMPLETAMENTE VAC\xcdA\n *\n * 6. "6\ufe0f\u20e3 Callback Queue: setTimeout externo"\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"caso-real-promesas-vs-settimeout",children:"Caso Real: Promesas vs setTimeout"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udcbc CASO REAL: \xbfQu\xe9 se ejecuta primero en una aplicaci\xf3n?\n */\n\nfunction cargarDatosUsuario() {\n  console.log("1. Iniciando carga de datos...");\n\n  // Simulamos petici\xf3n HTTP (Macrotask)\n  setTimeout(() => {\n    console.log("4. Datos recibidos del servidor");\n\n    // Procesamos los datos (Microtask - alta prioridad)\n    Promise.resolve().then(() => {\n      console.log("5. Procesando datos recibidos - MICROTASK");\n    });\n  }, 0);\n\n  // Verificamos cache local (Microtask)\n  Promise.resolve().then(() => {\n    console.log("3. Verificando cache local - MICROTASK");\n  });\n\n  console.log("2. Configuraci\xf3n completada");\n}\n\ncargarDatosUsuario();\n\n/**\n * \ud83c\udfaf ORDEN EN UNA APLICACI\xd3N REAL:\n *\n * 1. "Iniciando carga de datos..." - Call Stack\n * 2. "Configuraci\xf3n completada" - Call Stack\n * 3. "Verificando cache local" - Microtask (ALTA prioridad)\n * 4. "Datos recibidos del servidor" - Callback Queue (BAJA prioridad)\n * 5. "Procesando datos recibidos" - Microtask (ALTA prioridad)\n *\n * \ud83d\udca1 POR QU\xc9 ES IMPORTANTE:\n * - Las promesas se ejecutan inmediatamente despu\xe9s del c\xf3digo actual\n * - Los timeouts esperan aunque su tiempo sea 0\n * - Podemos priorizar tareas cr\xedticas usando promesas\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"el-problema-del-starvation",children:'El Problema del "Starvation"'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \u26a0\ufe0f PELIGRO: MICROTASK STARVATION\n *\n * Si agregamos microtasks infinitamente, el Callback Queue NUNCA se ejecuta\n */\n\nconsole.log("\u26a0\ufe0f Demostraci\xf3n del problema de starvation");\n\nfunction starvationDemo() {\n  console.log("1. Inicio - Call Stack");\n\n  // Macrotask normal\n  setTimeout(() => {\n    console.log("\u274c ESTO NUNCA SE EJECUTA - Starvation!");\n  }, 0);\n\n  // Microtask que se llama a s\xed misma infinitamente\n  function microtaskInfinita() {\n    Promise.resolve().then(() => {\n      console.log("\ud83d\udd01 Microtask infinita ejecut\xe1ndose...");\n      microtaskInfinita(); // \u274c LLAMADA RECURSIVA\n    });\n  }\n\n  microtaskInfinita();\n}\n\n// \ud83d\udea8 \xa1CUIDADO! Este c\xf3digo bloquear\xe1 el event loop\n// starvationDemo();\n\n/**\n * \ud83c\udfaf \xbfQU\xc9 PASA CON starvationDemo()?\n *\n * 1. "Inicio - Call Stack" se ejecuta\n * 2. setTimeout se programa (va al Callback Queue)\n * 3. microtaskInfinita() comienza a agregar microtasks infinitamente\n * 4. El Event Loop NUNCA puede pasar al Callback Queue porque\n *    la Microtask Queue NUNCA se vac\xeda\n * 5. El setTimeout NUNCA se ejecuta = STARVATION\n *\n * \ud83d\udca1 SOLUCI\xd3N: No crear microtasks recursivamente sin control\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"m\xe9todos-que-usan-microtask-queue",children:"M\xe9todos que usan Microtask Queue"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udccb M\xc9TODOS QUE USAN MICROTASK QUEUE\n */\n\nconsole.log("\ud83d\udd27 M\xe9todos que van a Microtask Queue");\n\n// 1. PROMESAS (.then, .catch, .finally)\nPromise.resolve("dato").then((resultado) => {\n  console.log("1. Promise.then():", resultado);\n});\n\n// 2. queueMicrotask() - API expl\xedcita\nqueueMicrotask(() => {\n  console.log("2. queueMicrotask(): Funci\xf3n expl\xedcita");\n});\n\n// 3. MutationObserver - Para cambios en el DOM\n// (En entorno de navegador)\n// const observer = new MutationObserver(() => {\n//   console.log("3. MutationObserver: Cambio en DOM");\n// });\n\n// 4. process.nextTick() - En Node.js (a\xfan mayor prioridad)\n// process.nextTick(() => {\n//   console.log("4. process.nextTick(): Prioridad m\xe1xima en Node.js");\n// });\n\n// \ud83d\udccd Para comparar - Esto va a Callback Queue (BAJA prioridad)\nsetTimeout(() => {\n  console.log("5. setTimeout(): Callback Queue - \xdaltimo lugar");\n}, 0);\n\nconsole.log("\ud83d\udccd Call Stack: C\xf3digo normal");\n\n/**\n * \ud83c\udfaf ORDEN DE EJECUCI\xd3N:\n *\n * 1. "\ud83d\udd27 M\xe9todos que van a Microtask Queue"\n * 2. "\ud83d\udccd Call Stack: C\xf3digo normal"\n * 3. "1. Promise.then(): dato"\n * 4. "2. queueMicrotask(): Funci\xf3n expl\xedcita"\n * 5. "5. setTimeout(): Callback Queue - \xdaltimo lugar"\n */\n'})}),"\n",(0,r.jsx)(e.h3,{id:"reglas-de-oro-de-la-microtask-queue",children:"Reglas de Oro de la Microtask Queue"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udccb REGLAS DE ORO DE LA MICROTASK QUEUE\n */\n\nconsole.log("\ud83d\udcdc Reglas de la Microtask Queue");\n\n// REGLA 1: Se vac\xeda COMPLETAMENTE en cada ciclo\nPromise.resolve().then(() => {\n  console.log(\n    "1\ufe0f\u20e3 Regla 1: Microtask - Se ejecuta inmediatamente despu\xe9s del Call Stack"\n  );\n\n  Promise.resolve().then(() => {\n    console.log(\n      "1\ufe0f\u20e3 Regla 1: Microtask anidada - Tambi\xe9n se ejecuta ANTES de cualquier setTimeout"\n    );\n  });\n});\n\nsetTimeout(() => {\n  console.log(\n    "1\ufe0f\u20e3 Regla 1: setTimeout - Espera a que TODAS las microtasks terminen"\n  );\n}, 0);\n\n// REGLA 2: Orden de llegada en la misma cola\nPromise.resolve().then(() => console.log("2\ufe0f\u20e3 Regla 2: Promise A"));\nPromise.resolve().then(() => console.log("2\ufe0f\u20e3 Regla 2: Promise B"));\nqueueMicrotask(() => console.log("2\ufe0f\u20e3 Regla 2: queueMicrotask C"));\n\n// REGLA 3: No bloquear con microtasks infinitas\nfunction tareaSegura() {\n  let contador = 0;\n\n  function microtaskControlada() {\n    contador++;\n    console.log(`3\ufe0f\u20e3 Regla 3: Microtask segura #${contador}`);\n\n    if (contador < 3) {\n      Promise.resolve().then(microtaskControlada);\n    }\n  }\n\n  microtaskControlada();\n}\n\ntareaSegura();\n\nconsole.log("\ud83d\udcdc Fin de las reglas - Call Stack vac\xedo");\n\n/**\n * \ud83c\udfaf RESUMEN FINAL:\n *\n * MICROTASK QUEUE = COLA DE M\xc1XIMA PRIORIDAD donde:\n * - Van las Promesas (.then, .catch, .finally)\n * - Van las queueMicrotask()\n * - Se ejecuta INMEDIATAMENTE despu\xe9s del Call Stack\n * - Se VAC\xcdA COMPLETAMENTE antes del Callback Queue\n * - \xa1CUIDADO con las microtasks infinitas!\n */\n\nconsole.log("\ud83c\udfaf \xa1Ahora entiendes la Microtask Queue!");\n'})}),"\n",(0,r.jsx)(e.h3,{id:"en-resumen-muy-sencillo-2",children:(0,r.jsx)(e.strong,{children:"En Resumen Muy Sencillo:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfc6 MICROTASK QUEUE = VIP DEL EVENT LOOP\n *\n * \ud83d\udccd Es la COLA DE M\xc1XIMA PRIORIDAD\n * \ud83d\udccd Siempre se ejecuta ANTES que el Callback Queue normal\n * \ud83d\udccd Para: Promesas, queueMicrotask()\n * \ud83d\udccd Se vac\xeda COMPLETAMENTE en cada ciclo\n */\n\nfunction resumenMicrotask() {\n  console.log("\ud83d\udccd Microtask Queue = M\xe1xima prioridad despu\xe9s del Call Stack");\n  console.log("\ud83d\udccd Promesas > setTimeout en prioridad");\n  console.log("\ud83d\udccd \xa1Cuidado con crear microtasks infinitas!");\n}\n\nresumenMicrotask();\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\xa1La Microtask Queue es el carril r\xe1pido del JavaScript as\xedncrono!"})," Las promesas y tareas cr\xedticas van aqu\xed para ejecutarse lo antes posible."]}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-visualizando-el-event-loop",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: Visualizando el Event Loop"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que muestra c\xf3mo funciona:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n<head>\n    <meta charset="UTF-8">\n    <title>Event Loop - Demo Visual</title>\n</head>\n<body>\n    <div class="container">\n        <h1>\ud83d\udd04 Event Loop en JavaScript</h1>\n        <p><strong>Definici\xf3n sencilla:</strong> El "motor" que permite a JavaScript manejar operaciones asincr\xf3nicas con un solo hilo.</p>\n        <div class="explicacion">\n            <h3>\ud83c\udfaf \xbfC\xf3mo funciona?</h3>\n            <div class="paso">1. <strong>Call Stack:</strong> Ejecuta el c\xf3digo s\xedncrono (una cosa a la vez)</div>\n            <div class="paso">2. <strong>Web APIs:</strong> Maneja operaciones asincr\xf3nicas (setTimeout, fetch, etc.)</div>\n            <div class="paso">3. <strong>Queues:</strong> Esperan callbacks listos para ejecutarse</div>\n            <div class="paso">4. <strong>Event Loop:</strong> Mueve callbacks al Call Stack cuando est\xe1 vac\xedo</div>\n        </div>\n        <div class="sistema">\n            <div class="componente call-stack">\n                <h3>\ud83c\udfd7\ufe0f Call Stack</h3>\n                <p><em>Pila de llamadas - Una cosa a la vez</em></p>\n                <div id="stack-content"></div>\n            </div>\n            <div class="componente web-apis">\n                <h3>\ud83c\udf10 Web APIs</h3>\n                <p><em>Operaciones en segundo plano</em></p>\n                <div id="apis-content"></div>\n            </div>\n            <div class="componente task-queue">\n                <h3>\ud83d\udccb Task Queue</h3>\n                <p><em>Callbacks de setTimeout, eventos DOM</em></div>\n                <div id="task-queue-content"></div>\n            </div>\n        </div>\n        <div style="margin-top: 20px;">\n            <div class="componente microtask-queue">\n                <h3>\u26a1 Microtask Queue</h3>\n                <p><em>Callbacks de Promesas - ALTA prioridad</em></p>\n                <div id="microtask-queue-content"></div>\n            </div>\n        </div>\n        <h2>\ud83c\udfaf Demo Interactivo</h2>\n        <button class="btn-ejemplo" onclick="ejecutarEjemploCompleto()">\ud83d\ude80 Ejecutar Ejemplo Completo</button>\n        <button class="btn-ejemplo" onclick="ejecutarEjemploMicrotasks()">\u26a1 Probar Microtasks vs Tasks</button>\n        <button class="btn-limpiar" onclick="limpiarTodo()">\ud83d\uddd1\ufe0f Limpiar Todo</button>\n        <div id="consola" style="margin-top: 20px; font-family: \'Courier New\', monospace; background: #2d2d2d; color: white; padding: 15px; border-radius: 5px;"></div>\n    </div>\n</body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:"body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 1000px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.sistema {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 20px;\n  margin: 20px 0;\n}\n.componente {\n  border: 2px solid;\n  border-radius: 8px;\n  padding: 15px;\n  min-height: 200px;\n}\n.call-stack {\n  border-color: #dc3545;\n  background: #f8d7da;\n}\n.web-apis {\n  border-color: #ffc107;\n  background: #fff3cd;\n}\n.task-queue {\n  border-color: #28a745;\n  background: #d4edda;\n}\n.microtask-queue {\n  border-color: #007bff;\n  background: #cce7ff;\n}\n.tarea {\n  background: white;\n  padding: 8px;\n  margin: 5px 0;\n  border-radius: 4px;\n  border-left: 4px solid;\n  font-size: 14px;\n}\n.sincrona {\n  border-left-color: #dc3545;\n}\n.settimeout {\n  border-left-color: #ffc107;\n}\n.promesa {\n  border-left-color: #007bff;\n}\n.evento {\n  border-left-color: #28a745;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-ejemplo {\n  background: #007bff;\n  color: white;\n}\n.btn-limpiar {\n  background: #6c757d;\n  color: white;\n}\n.explicacion {\n  background: #e9ecef;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n}\n.paso {\n  padding: 10px;\n  margin: 5px 0;\n  background: #f8f9fa;\n  border-left: 4px solid #6f42c1;\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// =============== REFERENCIAS DEL DOM ===============\n// Contenedores donde pintaremos visualmente el estado del sistema\nconst stackContent = document.getElementById("stack-content");\nconst apisContent = document.getElementById("apis-content");\nconst taskQueueContent = document.getElementById("task-queue-content");\nconst microtaskQueueContent = document.getElementById(\n  "microtask-queue-content"\n);\nconst consola = document.getElementById("consola");\n\n// =============== ESTADO (MODELO) ===============\n// Estructuras que representan, de forma DID\xc1CTICA, el entorno de ejecuci\xf3n JS\nlet callStack = []; // Pila de llamadas (lo que se est\xe1 ejecutando ahora)\nlet webAPIs = []; // "Zona" donde las Web APIs esperan/cronometan (setTimeout, fetch...)\nlet taskQueue = []; // Cola de tareas \u201cmacro\u201d (setTimeout, eventos)\nlet microtaskQueue = []; // Cola de microtareas (promesas, queueMicrotask)\n\n// =============== UTILIDADES DE LOG Y RENDER ===============\nfunction log(mensaje) {\n  // A\xf1adimos l\xednea de log con timestamp y hacemos autoscroll\n  consola.innerHTML += `<div>${new Date().toLocaleTimeString()}: ${mensaje}</div>`;\n  consola.scrollTop = consola.scrollHeight;\n}\n\nfunction actualizarVisualizacion() {\n  // Renderizamos Call Stack como bloques apilados\n  stackContent.innerHTML = callStack\n    .map((tarea) => `<div class="tarea ${tarea.tipo}">${tarea.nombre}</div>`)\n    .join("");\n\n  // Renderizamos Web APIs mostrando tiempo restante de cada \u201ctimer\u201d\n  apisContent.innerHTML = webAPIs\n    .map(\n      (api) =>\n        `<div class="tarea ${api.tipo}">${api.nombre} (${api.tiempoRestante}ms)</div>`\n    )\n    .join("");\n\n  // Renderizamos Task Queue (macro-tasks)\n  taskQueueContent.innerHTML = taskQueue\n    .map((tarea) => `<div class="tarea ${tarea.tipo}">${tarea.nombre}</div>`)\n    .join("");\n\n  // Renderizamos Microtask Queue (micro-tasks)\n  microtaskQueueContent.innerHTML = microtaskQueue\n    .map((tarea) => `<div class="tarea ${tarea.tipo}">${tarea.nombre}</div>`)\n    .join("");\n}\n\nfunction limpiarTodo() {\n  // Reseteamos el \u201cmundo simulado\u201d\n  callStack = [];\n  webAPIs = [];\n  taskQueue = [];\n  microtaskQueue = [];\n  consola.innerHTML = "";\n  actualizarVisualizacion();\n}\n\n// =============== OPERACIONES SOBRE LA PILA ===============\nfunction agregarAlStack(nombre, tipo = "sincrona") {\n  // Empujar una \u201ctarea\u201d a la pila (visualizaci\xf3n)\n  callStack.push({ nombre, tipo });\n  log(`\ud83d\udce5 Apilado: ${nombre}`);\n  actualizarVisualizacion();\n}\n\nfunction removerDelStack() {\n  // Quitar el tope de la pila (visualizaci\xf3n)\n  if (callStack.length > 0) {\n    const tarea = callStack.pop();\n    log(`\ud83d\udce4 Desapilado: ${tarea.nombre}`);\n    actualizarVisualizacion();\n    return tarea;\n  }\n}\n\n// =============== SIMULADOR DE WEB APIs ===============\n/**\n * simularWebAPI:\n * - Crea un \u201creloj\u201d que descuenta tiempoRestante cada 100ms.\n * - Al llegar a 0, saca la \u201cAPI\u201d de WebAPIs y mete su callback en:\n *   - microtaskQueue si es tipo \'promesa\'\n *   - taskQueue en caso contrario (setTimeout/eventos)\n */\nfunction simularWebAPI(nombre, tipo, duracion, callback) {\n  const api = { nombre, tipo, tiempoRestante: duracion, callback };\n  webAPIs.push(api);\n  log(`\ud83c\udf10 Web API iniciada: ${nombre} (${duracion}ms)`);\n  actualizarVisualizacion();\n\n  // Bajamos tiempoRestante para \u201csimular\u201d el paso del tiempo\n  const interval = setInterval(() => {\n    api.tiempoRestante -= 100;\n\n    if (api.tiempoRestante <= 0) {\n      clearInterval(interval);\n\n      // Remover de Web APIs (ya \u201ctermin\xf3\u201d)\n      webAPIs = webAPIs.filter((a) => a !== api);\n\n      // Encolar su callback en la cola correcta\n      if (tipo === "promesa") {\n        microtaskQueue.push({ nombre: `Callback: ${nombre}`, tipo });\n        log(`\u26a1 Microtask agregado: ${nombre}`);\n      } else {\n        taskQueue.push({ nombre: `Callback: ${nombre}`, tipo });\n        log(`\ud83d\udccb Task agregado: ${nombre}`);\n      }\n\n      actualizarVisualizacion();\n    } else {\n      // Render parcial intermedio (para ver la cuenta regresiva)\n      actualizarVisualizacion();\n    }\n  }, 100);\n}\n\n// =============== \u201cEVENT LOOP\u201d SIMULADO ===============\n/**\n * procesarEventLoop:\n * 1) Vac\xeda el Call Stack (para simular que el hilo queda libre).\n * 2) Procesa TODAS las microtasks (promesas) primero (alta prioridad).\n * 3) Procesa UNA task macro (setTimeout/evento) por iteraci\xf3n.\n * Esto reproduce la regla real: microtasks -> tasks.\n */\nfunction procesarEventLoop() {\n  // 1. Vaciar la pila actual (simulaci\xf3n del final de un tick)\n  while (callStack.length > 0) {\n    removerDelStack();\n  }\n\n  // 2. Procesar TODAS las microtasks (promesas tienen prioridad)\n  while (microtaskQueue.length > 0) {\n    const microtask = microtaskQueue.shift();\n    agregarAlStack(microtask.nombre, microtask.tipo);\n    // Simulamos que \u201cse ejecuta\u201d y sale de la pila en 100ms\n    setTimeout(() => removerDelStack(), 100);\n    log(`\ud83c\udfaf Microtask procesado: ${microtask.nombre}`);\n  }\n\n  // 3. Procesar UNA sola task macro por ciclo\n  if (taskQueue.length > 0) {\n    const task = taskQueue.shift();\n    agregarAlStack(task.nombre, task.tipo);\n    setTimeout(() => removerDelStack(), 100);\n    log(`\ud83d\udcdd Task procesado: ${task.nombre}`);\n  }\n\n  actualizarVisualizacion();\n}\n\n// =============== EJEMPLO 1: DEMO COMPLETA ===============\nfunction ejecutarEjemploCompleto() {\n  limpiarTodo();\n  log("\ud83d\ude80 INICIANDO DEMO COMPLETO DEL EVENT LOOP");\n\n  // C\xf3digo s\xedncrono: entra directo a la pila\n  agregarAlStack("script principal", "sincrona");\n\n  // Programamos, con peque\xf1os retrasos, la creaci\xf3n de distintas \u201cWeb APIs\u201d\n  // setTimeout \u2192 terminar\xe1 en Task Queue\n  setTimeout(() => {\n    simularWebAPI("setTimeout 100ms", "settimeout", 100, () => {});\n  }, 10);\n\n  // Promesa \u2192 terminar\xe1 en Microtask Queue\n  setTimeout(() => {\n    simularWebAPI("Promise.resolve()", "promesa", 50, () => {});\n  }, 20);\n\n  // M\xe1s \u201cc\xf3digo s\xedncrono\u201d (simulado) que entra a la pila y se desapila\n  setTimeout(() => {\n    agregarAlStack(\'console.log("Hola")\', "sincrona");\n    setTimeout(() => removerDelStack(), 100);\n  }, 30);\n\n  // Otro setTimeout\n  setTimeout(() => {\n    simularWebAPI("setTimeout 200ms", "settimeout", 200, () => {});\n  }, 40);\n\n  // \u201cTick\u201d del event loop: cada 300ms procesamos colas seg\xfan prioridad\n  let procesamientos = 0;\n  const interval = setInterval(() => {\n    procesarEventLoop();\n    procesamientos++;\n    if (procesamientos > 10) {\n      clearInterval(interval);\n      log("\ud83c\udfc1 Demo completado");\n    }\n  }, 300);\n}\n\n// =============== EJEMPLO 2: MICROTASKS vs TASKS ===============\nfunction ejecutarEjemploMicrotasks() {\n  limpiarTodo();\n  log("\u26a1 DEMO: MICROTASKS vs TASKS (PRIORIDAD)");\n\n  agregarAlStack("Inicio del script", "sincrona");\n\n  // setTimeout \u2192 Task Queue (baja prioridad frente a microtasks)\n  setTimeout(() => {\n    simularWebAPI("setTimeout 0ms", "settimeout", 100, () => {});\n    log("\u23f0 setTimeout programado");\n  }, 10);\n\n  // Promesa \u2192 Microtask Queue (ALTA prioridad)\n  setTimeout(() => {\n    simularWebAPI("Promise.then()", "promesa", 50, () => {});\n    log("\ud83e\udd1d Promesa programada");\n  }, 20);\n\n  // Evento (simulado) \u2192 Task Queue\n  setTimeout(() => {\n    simularWebAPI("Evento click", "evento", 80, () => {});\n    log("\ud83d\uddb1\ufe0f Evento click simulado");\n  }, 30);\n\n  // Otra promesa \u2192 Microtask Queue\n  setTimeout(() => {\n    simularWebAPI("Promise.resolve().then()", "promesa", 30, () => {});\n    log("\ud83d\udd01 Otra promesa programada");\n  }, 40);\n\n  // Explicaci\xf3n del orden\n  setTimeout(() => {\n    log("\\\\n\ud83c\udfaf ORDEN DE EJECUCI\xd3N:");\n    log("1. Call Stack vac\xedo");\n    log("2. MICROTASKS (Promesas) - TODAS primero");\n    log("3. TASKS (setTimeout, eventos) - UNA por vez");\n  }, 200);\n\n  // Procesado peri\xf3dico del \u201cevent loop\u201d simulado\n  let procesamientos = 0;\n  const interval = setInterval(() => {\n    procesarEventLoop();\n    procesamientos++;\n    if (procesamientos > 8) {\n      clearInterval(interval);\n      log(\n        "\\\\n\ud83d\udca1 CONCLUSI\xd3N: Las Microtasks tienen M\xc1S prioridad que las Tasks"\n      );\n    }\n  }, 400);\n}\n\n// =============== ARRANQUE ===============\nactualizarVisualizacion(); // Pintamos vac\xedo al iniciar\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-el-orden-de-ejecuci\xf3n-crucial",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"El Orden de Ejecuci\xf3n (\xa1CRUCIAL!)"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'console.log("1. \ud83d\udfe2 Script inicio"); // Call Stack\n\nsetTimeout(() => {\n  console.log("6. \u23f0 setTimeout"); // Task Queue\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log("4. \ud83e\udd1d Microtask 1"); // Microtask Queue\n});\n\nPromise.resolve().then(() => {\n  console.log("5. \ud83e\udd1d Microtask 2"); // Microtask Queue\n});\n\nconsole.log("2. \ud83d\udfe1 Script medio"); // Call Stack\n\nqueueMicrotask(() => {\n  console.log("3. \u26a1 queueMicrotask"); // Microtask Queue\n});\n\nconsole.log("7. \ud83d\udd34 Script fin"); // Call Stack\n\n// RESULTADO:\n// 1. \ud83d\udfe2 Script inicio\n// 2. \ud83d\udfe1 Script medio\n// 7. \ud83d\udd34 Script fin\n// 4. \ud83e\udd1d Microtask 1\n// 5. \ud83e\udd1d Microtask 2\n// 3. \u26a1 queueMicrotask\n// 6. \u23f0 setTimeout\n'})}),"\n",(0,r.jsx)(e.h1,{id:"-aqu\xed-tenemos-ejemplos-pr\xe1cticos-reales-de-la-aplicaci\xf3n-de-estos-mecanismos",children:"\ud83e\udde9 Aqu\xed tenemos ejemplos pr\xe1cticos reales de la aplicaci\xf3n de estos mecanismos"}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-visualizando-el-call-stack-y-la-pila-de-funciones",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: Visualizando el Call Stack y la pila de funciones"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que muestra visualmente c\xf3mo se apilan y desapilan las funciones:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Call Stack - Demo Visual</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83c\udfd7\ufe0f Call Stack (Pila de Llamadas)</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> La "pila de platos" donde\n        JavaScript apila las funciones que est\xe1 ejecutando.\n      </p>\n      <div class="explicacion">\n        <h3>\ud83c\udfaf Reglas del Call Stack:</h3>\n        <p>\n          \u2705 <strong>LIFO:</strong> Last In, First Out (\xdaltimo en entrar,\n          primero en salir)\n        </p>\n        <p>\n          \u2705 <strong>Una a la vez:</strong> Solo se ejecuta la funci\xf3n en el\n          tope de la pila\n        </p>\n        <p>\n          \u2705 <strong>Bloqueante:</strong> Si una funci\xf3n tarda, todo se detiene\n        </p>\n      </div>\n      <h2>\ud83d\udcca Call Stack en Tiempo Real</h2>\n      <div class="call-stack" id="callStack">\n        <div class="funcion principal" style="opacity: 0.7;">\n          [BASE] Contexto Global\n        </div>\n      </div>\n      <div class="controles">\n        <button class="btn-ejecutar" onclick="ejecutarEjemploCompleto()">\n          \ud83d\ude80 Ejecutar Ejemplo Completo\n        </button>\n        <button class="btn-paso" onclick="ejecutarPasoAPaso()">\n          \ud83d\udc63 Ejecutar Paso a Paso\n        </button>\n        <button class="btn-limpiar" onclick="limpiarStack()">\n          \ud83d\uddd1\ufe0f Limpiar Stack\n        </button>\n      </div>\n      <h3>\ud83d\udcdd C\xf3digo que se ejecutar\xe1:</h3>\n      <div class="codigo">\n        function funcionA() {<br />\n        &nbsp;&nbsp;console.log("\ud83d\udd35 Entrando a funci\xf3n A");<br />\n        &nbsp;&nbsp;funcionB(); // Llama a B desde A<br />\n        &nbsp;&nbsp;console.log("\ud83d\udd35 Saliendo de funci\xf3n A");<br />\n        }<br /><br />\n        function funcionB() {<br />\n        &nbsp;&nbsp;console.log("\ud83d\udfe2 Entrando a funci\xf3n B");<br />\n        &nbsp;&nbsp;funcionC(); // Llama a C desde B<br />\n        &nbsp;&nbsp;console.log("\ud83d\udfe2 Saliendo de funci\xf3n B");<br />\n        }<br /><br />\n        function funcionC() {<br />\n        &nbsp;&nbsp;console.log("\ud83d\udfe1 Entrando a funci\xf3n C");<br />\n        &nbsp;&nbsp;console.log("\ud83d\udfe1 Ejecutando c\xf3digo en C");<br />\n        &nbsp;&nbsp;console.log("\ud83d\udfe1 Saliendo de funci\xf3n C");<br />\n        }<br /><br />\n        // Llamada inicial<br />\n        funcionA();\n      </div>\n      <h3>\ud83d\udcdf Consola de Ejecuci\xf3n:</h3>\n      <div class="consola" id="consola"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.call-stack {\n  border: 3px solid #dc3545;\n  border-radius: 10px;\n  padding: 20px;\n  background: #f8d7da;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  margin: 20px 0;\n}\n.funcion {\n  background: white;\n  padding: 15px;\n  margin: 5px 0;\n  border-radius: 8px;\n  border-left: 5px solid;\n  width: 80%;\n  text-align: center;\n  font-weight: bold;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n.funcion.entrando {\n  animation: entrar 0.5s ease;\n}\n.funcion.saliendo {\n  animation: salir 0.5s ease;\n}\n@keyframes entrar {\n  from {\n    transform: translateY(-50px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n@keyframes salir {\n  from {\n    transform: translateY(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateY(-50px);\n    opacity: 0;\n  }\n}\n.principal {\n  border-left-color: #dc3545;\n}\n.secundaria {\n  border-left-color: #007bff;\n}\n.terciaria {\n  border-left-color: #28a745;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-ejecutar {\n  background: #28a745;\n  color: white;\n}\n.btn-paso {\n  background: #007bff;\n  color: white;\n}\n.btn-limpiar {\n  background: #6c757d;\n  color: white;\n}\n.controles {\n  display: flex;\n  gap: 10px;\n  margin: 15px 0;\n  flex-wrap: wrap;\n}\n.explicacion {\n  background: #e9ecef;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n.consola {\n  background: #2d2d2d;\n  color: #00ff00;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n  min-height: 100px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ===================== ELEMENTOS DEL DOM =====================\n// Donde pintamos visualmente la pila y los logs\nconst callStackElement = document.getElementById("callStack");\nconst consolaElement = document.getElementById("consola");\n\n// ===================== ESTADO DEL STACK =====================\n// La pila arranca con el contexto global (como en JS real)\nlet callStack = ["[BASE] Contexto Global"];\n// Flag para evitar que se disparen acciones simult\xe1neas/solapadas\nlet ejecucionEnCurso = false;\n/**\n * \ud83e\uddfe log(mensaje)\n * A\xf1ade una l\xednea a la "consola" visual y hace autoscroll.\n */\nfunction log(mensaje) {\n  consolaElement.innerHTML += `<div>${mensaje}</div>`;\n  consolaElement.scrollTop = consolaElement.scrollHeight;\n}\n\n/**\n * \ud83d\uddbc\ufe0f actualizarStackVisual()\n * Vuelve a pintar toda la pila seg\xfan el estado actual.\n * Aplica clases CSS en funci\xf3n del nombre para colorear (A/B/C).\n */\nfunction actualizarStackVisual() {\n  callStackElement.innerHTML = "";\n\n  callStack.forEach((funcion, index) => {\n    const div = document.createElement("div");\n    // Color/estilo seg\xfan el nombre de la funci\xf3n (did\xe1ctico)\n    div.className = `funcion ${\n      funcion.includes("A")\n        ? "principal"\n        : funcion.includes("B")\n        ? "secundaria"\n        : funcion.includes("C")\n        ? "terciaria"\n        : "principal"\n    }`;\n    div.textContent = funcion;\n\n    // Efecto "entrando" al tope de la pila (si hay m\xe1s de 1 elemento)\n    if (index === callStack.length - 1 && callStack.length > 1) {\n      div.classList.add("entrando");\n    }\n\n    callStackElement.appendChild(div);\n  });\n}\n\n/**\n * \u2b06\ufe0f apilarFuncion(nombreFuncion)\n * Empuja una "funci\xf3n" al tope de la pila y repinta.\n */\nfunction apilarFuncion(nombreFuncion) {\n  callStack.push(nombreFuncion);\n  log(`\ud83d\udce5 APILANDO: ${nombreFuncion}`);\n  actualizarStackVisual();\n}\n\n/**\n * \u2b07\ufe0f desapilarFuncion()\n * Saca del tope de la pila si no estamos en el contexto base.\n */\nfunction desapilarFuncion() {\n  if (callStack.length > 1) {\n    const funcion = callStack.pop();\n    log(`\ud83d\udce4 DESAPILANDO: ${funcion}`);\n    actualizarStackVisual();\n    return funcion;\n  }\n}\n\n/**\n * \ud83e\uddf9 limpiarStack()\n * Resetea pila, consola y marca que no hay ejecuci\xf3n en curso.\n */\nfunction limpiarStack() {\n  callStack = ["[BASE] Contexto Global"];\n  consolaElement.innerHTML = "";\n  actualizarStackVisual();\n  ejecucionEnCurso = false;\n}\n\n// ===================== 1) EJEMPLO COMPLETO AUTOM\xc1TICO =====================\n\n/**\n * \u25b6\ufe0f ejecutarEjemploCompleto()\n * Simula A \u2192 B \u2192 C con esperas (delay) para ver entradas/salidas en la pila.\n * Evita reentradas usando el flag ejecucionEnCurso.\n */\nasync function ejecutarEjemploCompleto() {\n  if (ejecucionEnCurso) return; // evita doble ejecuci\xf3n\n  ejecucionEnCurso = true;\n  limpiarStack();\n\n  log("\ud83d\ude80 INICIANDO EJECUCI\xd3N COMPLETA");\n\n  // \u201cFunciones\u201d simuladas que apilan/desapilan y esperan con delay\n  async function funcionA() {\n    apilarFuncion("funcionA()");\n    await delay(1000);\n    log("\ud83d\udd35 Ejecutando c\xf3digo en A...");\n\n    // A llama a B\n    await funcionB();\n\n    log("\ud83d\udd35 Finalizando c\xf3digo en A...");\n    await delay(500);\n    desapilarFuncion(); // sale A\n  }\n\n  async function funcionB() {\n    apilarFuncion("funcionB()");\n    await delay(1000);\n    log("\ud83d\udfe2 Ejecutando c\xf3digo en B...");\n\n    // B llama a C\n    await funcionC();\n\n    log("\ud83d\udfe2 Finalizando c\xf3digo en B...");\n    await delay(500);\n    desapilarFuncion(); // sale B\n  }\n\n  async function funcionC() {\n    apilarFuncion("funcionC()");\n    await delay(1000);\n    log("\ud83d\udfe1 Ejecutando c\xf3digo en C...");\n    await delay(500);\n    log("\ud83d\udfe1 M\xe1s c\xf3digo en C...");\n    await delay(500);\n    desapilarFuncion(); // sale C\n  }\n\n  // Utilidad para \u201cpausar\u201d (simula trabajo s\xedncrono prolongado)\n  function delay(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  // Secuencia: A (que llama a B, que llama a C)\n  await funcionA();\n  log("\ud83c\udfaf \xa1Ejecuci\xf3n completada!");\n  ejecucionEnCurso = false;\n}\n\n// ===================== 2) EJEMPLO PASO A PASO =====================\n\n/**\n * El array `pasos` define una \u201cmacro grabada\u201d de acciones:\n * - apilar/desapilar funciones\n * - escribir logs\n * - mensaje de inicio/fin\n * `pasoActual` avanza uno a uno en cada click/llamada a ejecutarPasoAPaso()\n */\nlet pasoActual = 0;\nconst pasos = [\n  { accion: "inicio", mensaje: "\ud83d\udc4b Preparado para ejecutar paso a paso" },\n  {\n    accion: "apilar",\n    funcion: "funcionA()",\n    mensaje: "\ud83d\udce5 Llamando a funcionA()",\n  },\n  { accion: "log", mensaje: "\ud83d\udd35 Ejecutando c\xf3digo en A..." },\n  {\n    accion: "apilar",\n    funcion: "funcionB()",\n    mensaje: "\ud83d\udce5 funcionA() llama a funcionB()",\n  },\n  { accion: "log", mensaje: "\ud83d\udfe2 Ejecutando c\xf3digo en B..." },\n  {\n    accion: "apilar",\n    funcion: "funcionC()",\n    mensaje: "\ud83d\udce5 funcionB() llama a funcionC()",\n  },\n  { accion: "log", mensaje: "\ud83d\udfe1 Ejecutando c\xf3digo en C..." },\n  { accion: "log", mensaje: "\ud83d\udfe1 M\xe1s c\xf3digo en C..." },\n  { accion: "desapilar", mensaje: "\ud83d\udce4 funcionC() termina - se desapila" },\n  { accion: "log", mensaje: "\ud83d\udfe2 Volviendo a funcionB()..." },\n  { accion: "desapilar", mensaje: "\ud83d\udce4 funcionB() termina - se desapila" },\n  { accion: "log", mensaje: "\ud83d\udd35 Volviendo a funcionA()..." },\n  { accion: "desapilar", mensaje: "\ud83d\udce4 funcionA() termina - se desapila" },\n  { accion: "fin", mensaje: "\ud83c\udf89 \xa1Todas las funciones completadas!" },\n];\n\n/**\n * \u23ed\ufe0f ejecutarPasoAPaso()\n * Ejecuta el siguiente paso de la secuencia. Al terminar, reinicia estados.\n */\nfunction ejecutarPasoAPaso() {\n  if (ejecucionEnCurso) return;\n\n  // Al primer paso, limpiamos y bloqueamos ejecuci\xf3n concurrente\n  if (pasoActual === 0) {\n    limpiarStack();\n    ejecucionEnCurso = true;\n  }\n\n  // Si ya no quedan pasos, reseteamos\n  if (pasoActual >= pasos.length) {\n    pasoActual = 0;\n    ejecucionEnCurso = false;\n    return;\n  }\n\n  const paso = pasos[pasoActual];\n\n  // Ejecutamos seg\xfan el tipo de acci\xf3n\n  switch (paso.accion) {\n    case "apilar":\n      log(paso.mensaje);\n      apilarFuncion(paso.funcion);\n      break;\n    case "desapilar":\n      log(paso.mensaje);\n      desapilarFuncion();\n      break;\n    case "log":\n      log(paso.mensaje);\n      break;\n    case "inicio":\n    case "fin":\n      log(paso.mensaje);\n      break;\n  }\n\n  pasoActual++;\n}\n\n// ===================== 3) EJEMPLO DE STACK OVERFLOW =====================\n\n/**\n * demostrarStackOverflow()\n * Muestra c\xf3mo una recursi\xf3n profunda provoca desbordamiento de pila (te\xf3rico).\n * Nota: en esta demo NO se invoca realmente la recursi\xf3n infinita (ser\xeda poco amable con la p\xe1gina).\n */\nfunction demostrarStackOverflow() {\n  log("\u26a0\ufe0f DEMOSTRACI\xd3N DE STACK OVERFLOW");\n\n  function funcionRecursiva(contador) {\n    apilarFuncion(`funcionRecursiva(${contador})`);\n\n    if (contador <= 0) {\n      // Caso base: detener recursi\xf3n\n      desapilarFuncion();\n      return;\n    }\n\n    // Recursi\xf3n: en la vida real, una condici\xf3n err\xf3nea (o muy grande) desbordar\xeda la pila\n    funcionRecursiva(contador - 1);\n    desapilarFuncion();\n  }\n\n  // Aqu\xed solo explicamos, no lanzamos una recursi\xf3n enorme para no colgar la UI.\n  log("\ud83d\udca5 Demostraci\xf3n: Llamadas recursivas profundas (no ejecutadas aqu\xed)");\n}\n\n// ===================== INICIO =====================\nactualizarStackVisual(); // Pintado inicial (solo contexto global)\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-ejemplo-real-sencillo-c\xf3mo-se-apilan-las-funciones",children:["\ud83d\udd04 ",(0,r.jsx)(e.strong,{children:"Ejemplo Real Sencillo: C\xf3mo se Apilan las Funciones"})]}),"\n",(0,r.jsx)(e.h2,{id:"-simulador-de-pedidos-de-comida",children:"\ud83c\udf55 Simulador de Pedidos de Comida"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Simulador de Pedidos - Call Stack Visual</title>\n    <link rel="stylesheet" href="styles.css" />\n  </head>\n  <body>\n    <h1>\ud83c\udf55 Simulador de Pedidos - Call Stack Visual</h1>\n\n    <div class="container">\n      <div class="panel">\n        <h3>Call Stack</h3>\n        <div id="callStack" class="call-stack"></div>\n      </div>\n\n      <div class="panel">\n        <h3>Web APIs</h3>\n        <div id="webApis" class="web-apis"></div>\n\n        <h3>Callback Queue</h3>\n        <div id="callbackQueue" class="callback-queue"></div>\n      </div>\n    </div>\n\n    <div class="controls">\n      <button onclick="hacerPedido()">Hacer Pedido de Pizza</button>\n      <button onclick="consultarEstado()">Consultar Estado</button>\n      <button onclick="cancelarPedido()">Cancelar Pedido</button>\n      <button onclick="limpiarLog()">Limpiar Log</button>\n    </div>\n\n    <div class="log-container">\n      <h3>Log de Ejecuci\xf3n</h3>\n      <div id="log" class="log"></div>\n    </div>\n\n    <script src="app.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  margin: 20px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: #333;\n  min-height: 100vh;\n}\n\nh1 {\n  text-align: center;\n  color: white;\n  margin-bottom: 30px;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.container {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 30px;\n  flex-wrap: wrap;\n}\n\n.panel {\n  flex: 1;\n  min-width: 300px;\n  background: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.panel h3 {\n  margin-bottom: 15px;\n  color: #2c3e50;\n  border-bottom: 2px solid #3498db;\n  padding-bottom: 5px;\n}\n\n.call-stack,\n.web-apis,\n.callback-queue {\n  min-height: 200px;\n  border: 2px dashed #bdc3c7;\n  border-radius: 8px;\n  padding: 15px;\n  transition: all 0.3s ease;\n}\n\n.call-stack {\n  background: linear-gradient(145deg, #f8f9fa, #e9ecef);\n}\n\n.web-apis {\n  background: linear-gradient(145deg, #e3f2fd, #bbdefb);\n}\n\n.callback-queue {\n  background: linear-gradient(145deg, #fff3e0, #ffe0b2);\n}\n\n.stack-item {\n  background: linear-gradient(145deg, #27ae60, #2ecc71);\n  color: white;\n  padding: 12px;\n  margin: 8px 0;\n  border-radius: 6px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  font-weight: bold;\n}\n\n.queue-item {\n  background: linear-gradient(145deg, #e67e22, #f39c12);\n  color: white;\n  padding: 12px;\n  margin: 8px 0;\n  border-radius: 6px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  font-weight: bold;\n}\n\n.controls {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\nbutton {\n  background: linear-gradient(145deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  margin: 5px;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: bold;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n}\n\nbutton:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\nbutton:active {\n  transform: translateY(0);\n}\n\n.log-container {\n  background: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.log {\n  background: #1a1a1a;\n  color: #00ff00;\n  padding: 20px;\n  border-radius: 8px;\n  font-family: "Courier New", monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  min-height: 200px;\n  max-height: 400px;\n  overflow-y: auto;\n  border: 2px solid #333;\n}\n\n.log div {\n  margin-bottom: 5px;\n  padding: 5px;\n  border-left: 3px solid #00ff00;\n  padding-left: 10px;\n}\n\n/* Animaciones */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.stack-item,\n.queue-item {\n  animation: fadeIn 0.3s ease;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column;\n  }\n\n  .panel {\n    min-width: auto;\n  }\n\n  button {\n    display: block;\n    width: 100%;\n    margin: 10px 0;\n  }\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Variables para simular el estado\nlet pedidoEnProceso = false;\nlet numeroPedido = 0;\nlet timeoutIds = [];\n\n// Funci\xf3n para actualizar la visualizaci\xf3n\nfunction actualizarVisualizacion(\n  callStack = [],\n  webApis = [],\n  callbackQueue = []\n) {\n  const callStackElement = document.getElementById("callStack");\n  const webApisElement = document.getElementById("webApis");\n  const callbackQueueElement = document.getElementById("callbackQueue");\n\n  callStackElement.innerHTML = callStack\n    .map((item) => `<div class="stack-item">${item}</div>`)\n    .join("");\n\n  webApisElement.innerHTML = webApis\n    .map((item) => `<div class="queue-item">${item}</div>`)\n    .join("");\n\n  callbackQueueElement.innerHTML = callbackQueue\n    .map((item) => `<div class="queue-item">${item}</div>`)\n    .join("");\n}\n\n// Funci\xf3n para agregar logs\nfunction log(mensaje, tipo = "info") {\n  const logDiv = document.getElementById("log");\n  const timestamp = new Date().toLocaleTimeString();\n  const color =\n    {\n      info: "#00ff00",\n      error: "#ff4444",\n      warning: "#ffaa00",\n      success: "#44ff44",\n    }[tipo] || "#00ff00";\n\n  const logEntry = document.createElement("div");\n  logEntry.style.color = color;\n  logEntry.innerHTML = `<strong>[${timestamp}]</strong> ${mensaje}`;\n\n  logDiv.appendChild(logEntry);\n  logDiv.scrollTop = logDiv.scrollHeight;\n}\n\n// Funci\xf3n para limpiar el log\nfunction limpiarLog() {\n  document.getElementById("log").innerHTML = "";\n  log("\ud83d\udd27 Log limpiado - Listo para nuevos pedidos", "info");\n}\n\n// Funci\xf3n principal - HACER PEDIDO\nfunction hacerPedido() {\n  log("\ud83c\udfaf CLICK: Usuario hace clic en \'Hacer Pedido\'", "info");\n\n  // 1. Entra al Call Stack\n  actualizarVisualizacion(["hacerPedido()"], [], []);\n\n  if (pedidoEnProceso) {\n    log("\u274c Ya hay un pedido en proceso - No se puede hacer otro", "error");\n    // Sale del Call Stack\n    actualizarVisualizacion([], [], []);\n    return;\n  }\n\n  pedidoEnProceso = true;\n  numeroPedido++;\n\n  log(`\ud83d\udce6 INICIANDO PEDIDO #${numeroPedido}`, "success");\n  log("1\ufe0f\u20e3 Procesando pago del pedido...", "info");\n\n  // Simular procesamiento s\xedncrono\n  procesarPago();\n\n  log("3\ufe0f\u20e3 Pedido confirmado, cocinando pizza... \ud83c\udf55", "info");\n\n  // 2. setTimeout entra al Call Stack y luego pasa a Web APIs\n  actualizarVisualizacion(["setTimeout()"], [], []);\n\n  const timeoutId = setTimeout(() => {\n    // 5. Callback entra a la Queue cuando termina el tiempo\n    log("\u23f0 TIMEOUT COMPLETADO - Callback de pizza lista en Queue", "warning");\n    actualizarVisualizacion([], [], ["callbackPizzaLista()"]);\n\n    // 6. Event Loop mueve el callback al Call Stack cuando est\xe1 vac\xedo\n    pizzaLista();\n  }, 3000);\n\n  timeoutIds.push(timeoutId);\n\n  // 3. setTimeout sale del Call Stack, callback queda en Web APIs\n  log("4\ufe0f\u20e3 Pizza en el horno (esperando 3 segundos)... \ud83d\udd25", "info");\n  actualizarVisualizacion(\n    [],\n    [`setTimeout(${timeoutId}) - Pizza en horno`],\n    []\n  );\n\n  // 4. Funci\xf3n principal termina, Call Stack se vac\xeda\n  log("\u2705 Funci\xf3n hacerPedido() completada - Call Stack vac\xedo", "success");\n  actualizarVisualizacion(\n    [],\n    [`setTimeout(${timeoutId}) - Pizza en horno`],\n    []\n  );\n}\n\nfunction procesarPago() {\n  log("2\ufe0f\u20e3 EJECUTANDO: procesarPago() - Entra al Call Stack", "info");\n\n  // Simular validaci\xf3n de pago\n  actualizarVisualizacion(\n    ["hacerPedido()", "procesarPago()"],\n    ["setTimeout() - Pizza en horno"],\n    []\n  );\n\n  log("\ud83d\udcb3 Validando tarjeta de cr\xe9dito...", "info");\n\n  // Peque\xf1a pausa s\xedncrona para simular procesamiento\n  const inicio = Date.now();\n  while (Date.now() - inicio < 1000) {\n    // Simular trabajo (no hacer esto en producci\xf3n)\n  }\n\n  log("\u2705 Pago procesado correctamente - \u20ac25.00", "success");\n\n  // procesarPago sale del Call Stack\n  actualizarVisualizacion(\n    ["hacerPedido()"],\n    ["setTimeout() - Pizza en horno"],\n    []\n  );\n}\n\nfunction pizzaLista() {\n  log("\ud83c\udf89 PIZZA LISTA - Callback ejecut\xe1ndose en Call Stack", "success");\n\n  // Callback entra al Call Stack\n  actualizarVisualizacion(["pizzaLista()"], [], []);\n\n  log(`\ud83c\udf55 \xa1Pedido #${numeroPedido} listo para entregar!`, "success");\n\n  // Simular entrega\n  log("\ud83d\ude97 Preparando entrega...", "info");\n\n  const entregaTimeoutId = setTimeout(() => {\n    log("\ud83d\udce6 Callback de entrega listo en Queue", "warning");\n    actualizarVisualizacion([], [], ["callbackEntrega()"]);\n    entregarPizza();\n  }, 2000);\n\n  timeoutIds.push(entregaTimeoutId);\n\n  log("\u23f1\ufe0f Entregando pizza (2 segundos)... \ud83d\ude97", "info");\n  actualizarVisualizacion(\n    [],\n    [`setTimeout(${entregaTimeoutId}) - Entregando pizza`],\n    []\n  );\n\n  // pizzaLista sale del Call Stack\n  actualizarVisualizacion(\n    [],\n    [`setTimeout(${entregaTimeoutId}) - Entregando pizza`],\n    []\n  );\n}\n\nfunction entregarPizza() {\n  log("\ud83c\udfe0 PIZZA ENTREGADA - Segundo callback ejecut\xe1ndose", "success");\n  actualizarVisualizacion(["entregarPizza()"], [], []);\n\n  pedidoEnProceso = false;\n  log("\u2705 \xa1Pedido COMPLETADO exitosamente! \xa1Disfruta tu pizza! \ud83c\udf89", "success");\n\n  // Limpiar timeouts\n  timeoutIds.forEach((id) => clearTimeout(id));\n  timeoutIds = [];\n\n  actualizarVisualizacion([], [], []);\n}\n\nfunction consultarEstado() {\n  log("\ud83d\udd0d Consultando estado del pedido...", "info");\n  actualizarVisualizacion(\n    ["consultarEstado()"],\n    ["setTimeout() - Pizza en horno"],\n    []\n  );\n\n  const estado = pedidoEnProceso\n    ? `Pedido #${numeroPedido} en proceso`\n    : "Sin pedidos activos";\n\n  log(`\ud83d\udcca Estado actual: ${estado}`, "info");\n\n  // Sale inmediatamente del Call Stack\n  actualizarVisualizacion([], ["setTimeout() - Pizza en horno"], []);\n}\n\nfunction cancelarPedido() {\n  log("\u274c Intentando cancelar pedido...", "warning");\n  actualizarVisualizacion(\n    ["cancelarPedido()"],\n    ["setTimeout() - Pizza en horno"],\n    []\n  );\n\n  if (!pedidoEnProceso) {\n    log("\u2139\ufe0f No hay pedidos activos para cancelar", "info");\n  } else {\n    log(\n      "\u26a0\ufe0f Pedido ya en proceso - No se puede cancelar una vez en cocina",\n      "error"\n    );\n    log("\ud83d\udca1 Sugerencia: Espera a que termine y haz uno nuevo", "info");\n  }\n\n  actualizarVisualizacion([], ["setTimeout() - Pizza en horno"], []);\n}\n\n// Estado inicial\ndocument.addEventListener("DOMContentLoaded", function () {\n  actualizarVisualizacion([], [], []);\n  log("\ud83d\ude80 Simulador de Call Stack INICIADO", "success");\n  log("\ud83d\udc49 Haz clic en \'Hacer Pedido de Pizza\' para comenzar", "info");\n  log(\n    "\ud83d\udcca Observa c\xf3mo se mueven las funciones entre Call Stack, Web APIs y Callback Queue",\n    "info"\n  );\n});\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-c\xf3mo-probar-y-ver-el-call-stack-en-acci\xf3n",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"C\xf3mo probar y ver el Call Stack en acci\xf3n:"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Copia todo el c\xf3digo"})," en un archivo ",(0,r.jsx)(e.code,{children:".html"})]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"\xc1brelo en el navegador"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:'Haz clic en "Hacer Pedido de Pizza"'})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Observa el flujo en tiempo real:"})}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-secuencia-que-ver\xe1s",children:["\ud83d\udcc8 ",(0,r.jsx)(e.strong,{children:"Secuencia que ver\xe1s:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"\ud83c\udfaf CLICK: Usuario hace clic en 'Hacer Pedido'\n\ud83d\udce6 Iniciando pedido #1\n1\ufe0f\u20e3 Procesando pago...\n2\ufe0f\u20e3 Dentro de procesarPago()\n\ud83d\udcb3 Pago procesado correctamente\n3\ufe0f\u20e3 Pedido confirmado, cocinando pizza...\n4\ufe0f\u20e3 Pizza en el horno (3 segundos)...\n\u2705 Funci\xf3n hacerPedido() completada - Call Stack vac\xedo\n\n[ESPERA 3 SEGUNDOS...]\n\n\u23f0 TIMEOUT COMPLETADO - Callback listo para ejecutar\n\ud83c\udf89 PIZZA LISTA - Callback ejecut\xe1ndose\n\ud83c\udf55 \xa1Pedido #1 listo para entregar!\n\ud83d\ude97 Entregando pizza (2 segundos)...\n\n[ESPERA 2 SEGUNDOS...]\n\n\ud83d\udce6 Callback de entrega en Queue\n\ud83c\udfe0 PIZZA ENTREGADA - Segundo callback ejecut\xe1ndose\n\u2705 Pedido completado exitosamente!\n\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"-lo-m\xe1s-importante-que-ver\xe1s-visualmente",children:["\ud83d\udd0d ",(0,r.jsx)(e.strong,{children:"Lo m\xe1s importante que ver\xe1s visualmente:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Call Stack"}),": Se llena y vac\xeda constantemente"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Web APIs"}),": Los ",(0,r.jsx)(e.code,{children:"setTimeout"}),' "viven" aqu\xed mientras esperan']}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Callback Queue"}),": Los callbacks esperan aqu\xed su turno"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Event Loop"}),": Mueve callbacks de la Queue al Stack cuando est\xe1 vac\xedo"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:'\xa1La magia est\xe1 en que puedes hacer clic en otros botones mientras la pizza est\xe1 "en el horno"!'})," Eso demuestra que JavaScript ",(0,r.jsx)(e.strong,{children:"no se bloquea"})," durante las operaciones as\xedncronas."]}),"\n",(0,r.jsx)(e.p,{children:"\xbfVes c\xf3mo funciona el baile entre estas tres \xe1reas? \xa1Es como una coreograf\xeda perfecta! \ud83d\udc83\ud83d\udd7a"}),"\n",(0,r.jsxs)(e.h2,{id:"-stack-overflow-desbordamiento-de-pila",children:["\ud83d\udea8 ",(0,r.jsx)(e.strong,{children:"Stack Overflow (Desbordamiento de Pila)"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.h2,{id:"-1-stack-overflowhtml",children:["\ud83d\udcc1 ",(0,r.jsx)(e.strong,{children:"1. stack-overflow.html"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Demo Stack Overflow</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 20px;\n        background: linear-gradient(135deg, #ff6b6b, #4ecdc4);\n        color: #333;\n      }\n\n      .container {\n        background: white;\n        padding: 30px;\n        border-radius: 15px;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n      }\n\n      h1 {\n        color: #2c3e50;\n        text-align: center;\n        margin-bottom: 30px;\n      }\n\n      .stack-visualization {\n        background: #2c3e50;\n        color: white;\n        padding: 20px;\n        border-radius: 10px;\n        margin: 20px 0;\n        max-height: 300px;\n        overflow-y: auto;\n        font-family: "Courier New", monospace;\n      }\n\n      .stack-frame {\n        background: #3498db;\n        margin: 5px 0;\n        padding: 10px;\n        border-radius: 5px;\n        border-left: 4px solid #e74c3c;\n      }\n\n      .stack-warning {\n        background: #e74c3c;\n        color: white;\n        padding: 10px;\n        border-radius: 5px;\n        margin: 10px 0;\n        text-align: center;\n        font-weight: bold;\n      }\n\n      .controls {\n        text-align: center;\n        margin: 20px 0;\n      }\n\n      button {\n        background: #3498db;\n        color: white;\n        border: none;\n        padding: 12px 24px;\n        margin: 5px;\n        border-radius: 25px;\n        cursor: pointer;\n        font-size: 16px;\n        transition: all 0.3s ease;\n      }\n\n      button:hover {\n        background: #2980b9;\n        transform: translateY(-2px);\n      }\n\n      button.danger {\n        background: #e74c3c;\n      }\n\n      button.danger:hover {\n        background: #c0392b;\n      }\n\n      .explanation {\n        background: #f8f9fa;\n        padding: 15px;\n        border-radius: 8px;\n        margin: 15px 0;\n        border-left: 4px solid #3498db;\n      }\n\n      .log {\n        background: #1a1a1a;\n        color: #00ff00;\n        padding: 15px;\n        border-radius: 8px;\n        font-family: "Courier New", monospace;\n        max-height: 200px;\n        overflow-y: auto;\n        margin: 15px 0;\n      }\n    </style>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83d\udea8 Demo de Stack Overflow</h1>\n\n      <div class="explanation">\n        <h3>\xbfQu\xe9 es un Stack Overflow?</h3>\n        <p>\n          Ocurre cuando una funci\xf3n se llama a s\xed misma\n          <strong>infinitamente</strong> sin condici\xf3n de salida, llenando el\n          Call Stack hasta que el navegador no puede manejar m\xe1s llamadas.\n        </p>\n      </div>\n\n      <div class="controls">\n        <button onclick="iniciarRecursionNormal()">\n          \ud83d\udd01 Recursi\xf3n Normal (Segura)\n        </button>\n        <button onclick="iniciarStackOverflow()" class="danger">\n          \ud83d\udca5 Provocar Stack Overflow\n        </button>\n        <button onclick="limpiarTodo()">\ud83d\udd04 Limpiar Todo</button>\n      </div>\n\n      <div class="stack-visualization">\n        <h3>Call Stack Visualizer</h3>\n        <div id="stackContainer"></div>\n      </div>\n\n      <div class="log">\n        <h3>Log de Ejecuci\xf3n</h3>\n        <div id="log"></div>\n      </div>\n\n      <div class="explanation">\n        <h3>\xbfPor qu\xe9 pasa esto?</h3>\n        <p>\n          El Call Stack tiene un <strong>l\xedmite m\xe1ximo</strong> de llamadas\n          anidadas (normalmente ~10,000-50,000 dependiendo del navegador).\n          Cuando una funci\xf3n recursiva no tiene caso base o el caso base nunca\n          se alcanza, el stack se llena hasta explotar. \ud83d\udca5\n        </p>\n      </div>\n    </div>\n\n    <script src="stack-overflow-demo.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-2-stack-overflow-demojs",children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"2. stack-overflow-demo.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Variables para controlar la visualizaci\xf3n\nlet stackFrames = [];\nlet recursionCount = 0;\nlet maxSafeRecursion = 50; // L\xedmite seguro para la demo\nlet isRunning = false;\n\n// Funci\xf3n para actualizar la visualizaci\xf3n del stack\nfunction actualizarStackVisualization() {\n  const stackContainer = document.getElementById("stackContainer");\n  const framesHTML = stackFrames\n    .map((frame, index) => {\n      const depth = stackFrames.length - index;\n      const backgroundColor =\n        index === stackFrames.length - 1\n          ? "linear-gradient(135deg, #e74c3c, #c0392b)"\n          : "linear-gradient(135deg, #3498db, #2980b9)";\n\n      return `\n            <div class="stack-frame" style="\n                background: ${backgroundColor};\n                margin-left: ${depth * 10}px;\n                transform: scale(${1 - index * 0.02});\n            ">\n                <strong>${frame.functionName}</strong>\n                (nivel: ${frame.level})<br>\n                <small>Recursi\xf3n #${frame.iteration}</small>\n            </div>\n        `;\n    })\n    .join("");\n\n  stackContainer.innerHTML = framesHTML;\n\n  // Mostrar advertencia si el stack est\xe1 creciendo mucho\n  if (stackFrames.length > maxSafeRecursion * 0.7) {\n    const warning = document.createElement("div");\n    warning.className = "stack-warning";\n    warning.innerHTML = `\u26a0\ufe0f STACK CRECIENDO PELIGROSAMENTE: ${stackFrames.length} frames`;\n    stackContainer.prepend(warning);\n  }\n}\n\n// Funci\xf3n para agregar logs\nfunction log(mensaje, tipo = "info") {\n  const logDiv = document.getElementById("log");\n  const timestamp = new Date().toLocaleTimeString();\n  const color =\n    {\n      info: "#3498db",\n      error: "#e74c3c",\n      success: "#2ecc71",\n      warning: "#f39c12",\n    }[tipo] || "#3498db";\n\n  const logEntry = document.createElement("div");\n  logEntry.style.color = color;\n  logEntry.innerHTML = `[${timestamp}] ${mensaje}`;\n\n  logDiv.appendChild(logEntry);\n  logDiv.scrollTop = logDiv.scrollHeight;\n}\n\n// Funci\xf3n para limpiar todo\nfunction limpiarTodo() {\n  stackFrames = [];\n  recursionCount = 0;\n  isRunning = false;\n  actualizarStackVisualization();\n  document.getElementById("log").innerHTML = "";\n  log("\u2705 Todo limpiado - Listo para nueva demo", "success");\n}\n\n// ========== DEMO 1: RECURSI\xd3N NORMAL (SEGURA) ==========\n\nfunction recursionSegura(nivel = 0) {\n  if (!isRunning) return;\n\n  // CASO BASE: Detenerse cuando llegamos al l\xedmite seguro\n  if (nivel >= maxSafeRecursion) {\n    log(`\u2705 RECURSI\xd3N SEGURA COMPLETADA: Alcanzado nivel ${nivel}`, "success");\n    isRunning = false;\n    return;\n  }\n\n  recursionCount++;\n\n  // Agregar frame al stack\n  stackFrames.push({\n    functionName: "recursionSegura()",\n    level: nivel,\n    iteration: recursionCount,\n  });\n\n  actualizarStackVisualization();\n  log(\n    `\ud83d\udd01 Recursi\xf3n segura - Nivel: ${nivel}, Stack size: ${stackFrames.length}`\n  );\n\n  // Simular alg\xfan trabajo\n  const inicio = Date.now();\n  while (Date.now() - inicio < 20) {\n    // Peque\xf1a pausa para visualizaci\xf3n\n  }\n\n  // Llamada recursiva\n  recursionSegura(nivel + 1);\n\n  // Remover frame del stack (esto muestra c\xf3mo se desapila)\n  stackFrames.pop();\n  actualizarStackVisualization();\n}\n\nfunction iniciarRecursionNormal() {\n  if (isRunning) {\n    log("\u26a0\ufe0f Ya hay una ejecuci\xf3n en curso", "warning");\n    return;\n  }\n\n  limpiarTodo();\n  isRunning = true;\n  log("\ud83d\ude80 INICIANDO RECURSI\xd3N SEGURA", "success");\n  log(`\ud83d\udccf L\xedmite seguro: ${maxSafeRecursion} niveles`, "info");\n\n  setTimeout(() => {\n    recursionSegura(0);\n  }, 100);\n}\n\n// ========== DEMO 2: STACK OVERFLOW ==========\n\nfunction funcionInfinita(nivel = 0) {\n  // \xa1NO HAY CASO BASE! Esto causar\xe1 stack overflow\n  recursionCount++;\n\n  // Agregar frame al stack\n  stackFrames.push({\n    functionName: "funcionInfinita()",\n    level: nivel,\n    iteration: recursionCount,\n  });\n\n  // Actualizar visualizaci\xf3n cada ciertos niveles para no saturar\n  if (recursionCount % 100 === 0) {\n    actualizarStackVisualization();\n    log(\n      `\ud83d\udcc8 Stack creciendo - Nivel: ${nivel}, Frames: ${stackFrames.length}`,\n      "warning"\n    );\n  }\n\n  // Llamada recursiva INFINITA\n  funcionInfinita(nivel + 1);\n\n  // Esta l\xednea NUNCA se ejecutar\xe1\n  stackFrames.pop();\n}\n\nfunction funcionConCondicionRota(nivel = 0) {\n  recursionCount++;\n\n  stackFrames.push({\n    functionName: "funcionConCondicionRota()",\n    level: nivel,\n    iteration: recursionCount,\n  });\n\n  // \xa1CONDICI\xd3N QUE NUNCA SE CUMPLE!\n  // El stack overflow ocurrir\xe1 antes de que nivel alcance 100,000\n  if (nivel > 100000) {\n    log("\ud83c\udfaf \xa1Caso base alcanzado! (esto nunca pasar\xe1)", "success");\n    stackFrames.pop();\n    return;\n  }\n\n  if (recursionCount % 200 === 0) {\n    actualizarStackVisualization();\n    log(`\u26a0\ufe0f Condici\xf3n rota - Nivel: ${nivel}, Meta: 100,000`, "warning");\n  }\n\n  // Llamada recursiva\n  funcionConCondicionRota(nivel + 1);\n\n  stackFrames.pop();\n}\n\nfunction iniciarStackOverflow() {\n  if (isRunning) {\n    log("\u26a0\ufe0f Ya hay una ejecuci\xf3n en curso", "warning");\n    return;\n  }\n\n  limpiarTodo();\n  isRunning = true;\n  recursionCount = 0;\n\n  log("\ud83d\udca5 INICIANDO STACK OVERFLOW DEMO", "error");\n  log("\u274c Esto crashear\xe1 el navegador - \xa1Ten cuidado!", "error");\n  log("\ud83d\uded1 El stack se llenar\xe1 hasta el l\xedmite m\xe1ximo...", "warning");\n\n  // Usar setTimeout para dar tiempo a que se muestren los mensajes\n  setTimeout(() => {\n    try {\n      // Elegir una de las dos funciones para demostrar\n      if (Math.random() > 0.5) {\n        log("\ud83d\udd28 Usando funci\xf3n infinita sin caso base...", "error");\n        funcionInfinita(0);\n      } else {\n        log("\ud83d\udd28 Usando funci\xf3n con condici\xf3n inalcanzable...", "error");\n        funcionConCondicionRota(0);\n      }\n    } catch (error) {\n      log(`\ud83d\udca5 STACK OVERFLOW CAPTURADO: ${error.message}`, "error");\n      isRunning = false;\n    }\n  }, 500);\n}\n\n// ========== DEMO 3: RECURSI\xd3N MUTUA (STACK OVERFLOW) ==========\n\nfunction funcionA(nivel) {\n  recursionCount++;\n\n  stackFrames.push({\n    functionName: "funcionA()",\n    level: nivel,\n    iteration: recursionCount,\n  });\n\n  if (recursionCount % 150 === 0) {\n    actualizarStackVisualization();\n    log(`\ud83d\udd04 Recursi\xf3n mutua A\u2192B - Nivel: ${nivel}`, "warning");\n  }\n\n  // Llamar a B\n  funcionB(nivel + 1);\n\n  stackFrames.pop();\n}\n\nfunction funcionB(nivel) {\n  recursionCount++;\n\n  stackFrames.push({\n    functionName: "funcionB()",\n    level: nivel,\n    iteration: recursionCount,\n  });\n\n  if (recursionCount % 150 === 0) {\n    actualizarStackVisualization();\n    log(`\ud83d\udd04 Recursi\xf3n mutua B\u2192A - Nivel: ${nivel}`, "warning");\n  }\n\n  // Llamar de vuelta a A - \xa1CICLO INFINITO!\n  funcionA(nivel + 1);\n\n  stackFrames.pop();\n}\n\nfunction iniciarRecursionMutua() {\n  if (isRunning) {\n    log("\u26a0\ufe0f Ya hay una ejecuci\xf3n en curso", "warning");\n    return;\n  }\n\n  limpiarTodo();\n  isRunning = true;\n  recursionCount = 0;\n\n  log("\ud83d\udd04 INICIANDO RECURSI\xd3N MUTUA INFINITA", "error");\n  log("\ud83d\udd01 A llama a B, B llama a A... infinitamente", "warning");\n\n  setTimeout(() => {\n    try {\n      funcionA(0);\n    } catch (error) {\n      log(`\ud83d\udca5 STACK OVERFLOW EN RECURSI\xd3N MUTUA: ${error.message}`, "error");\n      isRunning = false;\n    }\n  }, 500);\n}\n\n// Inicializaci\xf3n\ndocument.addEventListener("DOMContentLoaded", function () {\n  log("\ud83d\ude80 Demo de Stack Overflow cargado", "success");\n  log("\ud83d\udc49 Usa \'Recursi\xf3n Normal\' para ver c\xf3mo deber\xeda funcionar", "info");\n  log(\n    "\u26a0\ufe0f \'Provocar Stack Overflow\' crashear\xe1 esta pesta\xf1a - \xa1Cuidado!",\n    "error"\n  );\n});\n\n// Agregar el bot\xf3n de recursi\xf3n mutua din\xe1micamente\ndocument.addEventListener("DOMContentLoaded", function () {\n  const controls = document.querySelector(".controls");\n  const mutuaButton = document.createElement("button");\n  mutuaButton.className = "danger";\n  mutuaButton.textContent = "\ud83d\udd04 Recursi\xf3n Mutua Infinita";\n  mutuaButton.onclick = iniciarRecursionMutua;\n  controls.appendChild(mutuaButton);\n});\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-c\xf3mo-usar-la-demo",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"C\xf3mo usar la demo:"})]}),"\n",(0,r.jsx)(e.h3,{id:"prueba-segura-no-crashea",children:(0,r.jsx)(e.strong,{children:"Prueba Segura (No crashea):"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:'Haz clic en "Recursi\xf3n Normal"'})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Observa"})," c\xf3mo el stack crece y luego se vac\xeda ordenadamente"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Ve"})," c\xf3mo cada funci\xf3n sale del stack cuando termina"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"stack-overflow-cuidado",children:(0,r.jsx)(e.strong,{children:"Stack Overflow (\xa1Cuidado!):"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:'Haz clic en "Provocar Stack Overflow"'})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Observa"})," c\xf3mo el stack crece sin control"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Finalmente"})," el navegador mostrar\xe1 un error y se detendr\xe1"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"recursi\xf3n-mutua",children:(0,r.jsx)(e.strong,{children:"Recursi\xf3n Mutua:"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:'Haz clic en "Recursi\xf3n Mutua Infinita"'})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Ve"})," c\xf3mo dos funciones se llaman mutuamente forever"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Observa"})," el stack overflow por ciclo infinito"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-observar",children:["\ud83d\udd0d ",(0,r.jsx)(e.strong,{children:"Qu\xe9 observar:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Stack creciendo"}),": Cada llamada agrega un frame"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"L\xedmite m\xe1ximo"}),": El navegador tiene un tope (~10-50k frames)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error resultante"}),': "Maximum call stack size exceeded"']}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Diferencia"}),": Recursi\xf3n segura vs. infinita"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"\ufe0f-advertencia-importante",children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Advertencia importante:"})]}),"\n",(0,r.jsxs)(e.p,{children:["La demo de Stack Overflow ",(0,r.jsx)(e.strong,{children:"puede crashear la pesta\xf1a"})," del navegador. \xa1Usa con cuidado y guarda tu trabajo antes de probar!"]}),"\n",(0,r.jsx)(e.p,{children:"\xbfQuieres que modifique algo espec\xedfico de la demo?"}),"\n",(0,r.jsxs)(e.h2,{id:"-las-dos-colas-task-queue-vs-microtask-queue",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"Las Dos Colas: Task Queue vs Microtask Queue"})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.h2,{id:"-task-queue-cola-de-tareas",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Task Queue (Cola de Tareas)"})]}),"\n",(0,r.jsx)(e.h2,{id:"sistema-de-notificaciones-con-prioridades",children:"Sistema de Notificaciones con Prioridades"}),"\n",(0,r.jsxs)(e.h2,{id:"-1-indexhtml",children:["\ud83d\udcc1 ",(0,r.jsx)(e.strong,{children:"1. index.html"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Sistema de Gesti\xf3n de Notificaciones</title>\n    <link rel="stylesheet" href="styles.css" />\n  </head>\n  <body>\n    <div class="container">\n      <header class="header">\n        <h1>\ud83d\ude80 Sistema de Gesti\xf3n de Notificaciones</h1>\n        <p class="subtitle">Visualizaci\xf3n del Event Loop en tiempo real</p>\n      </header>\n\n      <div class="dashboard">\n        \x3c!-- Panel de Control --\x3e\n        <div class="control-panel">\n          <h2>\ud83c\udfae Panel de Control</h2>\n          <div class="buttons">\n            <button onclick="iniciarSimulacion()" class="btn btn-primary">\n              \u25b6\ufe0f Iniciar Simulaci\xf3n\n            </button>\n            <button\n              onclick="agregarNotificacionManual()"\n              class="btn btn-secondary"\n            >\n              \u2795 Notificaci\xf3n Manual\n            </button>\n            <button onclick="limpiarTodo()" class="btn btn-danger">\n              \ud83d\uddd1\ufe0f Limpiar Todo\n            </button>\n          </div>\n\n          <div class="stats">\n            <div class="stat-card">\n              <span class="stat-number" id="totalNotificaciones">0</span>\n              <span class="stat-label">Total Notificaciones</span>\n            </div>\n            <div class="stat-card">\n              <span class="stat-number" id="urgentesCount">0</span>\n              <span class="stat-label">Urgentes</span>\n            </div>\n            <div class="stat-card">\n              <span class="stat-number" id="normalesCount">0</span>\n              <span class="stat-label">Normales</span>\n            </div>\n            <div class="stat-card">\n              <span class="stat-number" id="backgroundCount">0</span>\n              <span class="stat-label">Background</span>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Visualizaci\xf3n del Event Loop --\x3e\n        <div class="event-loop-viz">\n          <h2>\ud83d\udd04 Event Loop - Colas de Prioridad</h2>\n          <div class="queues-container">\n            <div class="queue microtask-queue">\n              <h3>\ud83d\udea8 Microtask Queue (Alta Prioridad)</h3>\n              <div class="queue-items" id="microtaskQueue">\n                <div class="queue-empty">Vac\xeda</div>\n              </div>\n            </div>\n\n            <div class="queue task-queue">\n              <h3>\ud83d\udfe1 Task Queue (Prioridad Normal)</h3>\n              <div class="queue-items" id="taskQueue">\n                <div class="queue-empty">Vac\xeda</div>\n              </div>\n            </div>\n\n            <div class="queue background-queue">\n              <h3>\ud83d\udd35 Background Queue (Baja Prioridad)</h3>\n              <div class="queue-items" id="backgroundQueue">\n                <div class="queue-empty">Vac\xeda</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Call Stack --\x3e\n        <div class="call-stack-viz">\n          <h2>\ud83d\udcda Call Stack</h2>\n          <div class="stack-container">\n            <div class="stack-items" id="callStack">\n              <div class="stack-empty">Ejecuci\xf3n principal</div>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Log de Ejecuci\xf3n --\x3e\n        <div class="execution-log">\n          <h2>\ud83d\udccb Log de Ejecuci\xf3n</h2>\n          <div class="log-container">\n            <div class="log-header">\n              <span>Tiempo</span>\n              <span>Tipo</span>\n              <span>Mensaje</span>\n              <span>Estado</span>\n            </div>\n            <div class="log-entries" id="logEntries"></div>\n          </div>\n        </div>\n\n        \x3c!-- Notificaciones Procesadas --\x3e\n        <div class="notifications-panel">\n          <h2>\ud83d\udce8 Notificaciones Procesadas</h2>\n          <div class="notifications-list" id="notificationsList">\n            <div class="empty-state">\n              Las notificaciones aparecer\xe1n aqu\xed cuando se procesen\n            </div>\n          </div>\n        </div>\n      </div>\n\n      \x3c!-- Explicaci\xf3n --\x3e\n      <div class="explanation">\n        <h3>\ud83d\udca1 \xbfC\xf3mo funciona el sistema de prioridades?</h3>\n        <div class="priority-examples">\n          <div class="priority-item urgent">\n            <h4>\ud83d\udea8 URGENTE (Microtask Queue)</h4>\n            <p>\n              Se ejecuta inmediatamente despu\xe9s del c\xf3digo actual. Usado para\n              errores cr\xedticos, validaciones de seguridad y respuestas\n              inmediatas de API.\n            </p>\n          </div>\n          <div class="priority-item normal">\n            <h4>\ud83d\udfe1 NORMAL (Task Queue)</h4>\n            <p>\n              Se ejecuta despu\xe9s de las microtasks. Usado para interacciones de\n              usuario, actualizaciones de UI y mensajes normales.\n            </p>\n          </div>\n          <div class="priority-item background">\n            <h4>\ud83d\udd35 BACKGROUND (Task Queue con delay)</h4>\n            <p>\n              Se ejecuta despu\xe9s de un tiempo espec\xedfico. Usado para analytics,\n              logs y tareas de mantenimiento.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script src="notificaciones.js"><\/script>\n    <script src="visualizacion.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-2-stylescss",children:["\ud83c\udfa8 ",(0,r.jsx)(e.strong,{children:"2. styles.css"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: #333;\n  min-height: 100vh;\n  line-height: 1.6;\n}\n\n.container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 30px;\n  color: white;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 10px;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.subtitle {\n  font-size: 1.2rem;\n  opacity: 0.9;\n}\n\n.dashboard {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto auto;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.control-panel {\n  grid-column: 1 / 2;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.control-panel h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.buttons {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 25px;\n  flex-wrap: wrap;\n}\n\n.btn {\n  padding: 12px 20px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n}\n\n.btn-secondary {\n  background: linear-gradient(135deg, #95a5a6, #7f8c8d);\n  color: white;\n}\n\n.btn-danger {\n  background: linear-gradient(135deg, #e74c3c, #c0392b);\n  color: white;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n}\n\n.stats {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 15px;\n}\n\n.stat-card {\n  background: linear-gradient(135deg, #f8f9fa, #e9ecef);\n  padding: 15px;\n  border-radius: 10px;\n  text-align: center;\n  border-left: 4px solid #3498db;\n}\n\n.stat-number {\n  display: block;\n  font-size: 2rem;\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n.stat-label {\n  font-size: 0.9rem;\n  color: #7f8c8d;\n}\n\n.event-loop-viz {\n  grid-column: 2 / 3;\n  grid-row: 1 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.event-loop-viz h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.queues-container {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  height: 100%;\n}\n\n.queue {\n  flex: 1;\n  border-radius: 10px;\n  padding: 15px;\n  transition: all 0.3s ease;\n}\n\n.queue h3 {\n  margin-bottom: 15px;\n  font-size: 1.1rem;\n}\n\n.microtask-queue {\n  background: linear-gradient(135deg, #ffeaa7, #fab1a0);\n  border: 2px solid #e17055;\n}\n\n.task-queue {\n  background: linear-gradient(135deg, #81ecec, #74b9ff);\n  border: 2px solid #0984e3;\n}\n\n.background-queue {\n  background: linear-gradient(135deg, #a29bfe, #dfe6e9);\n  border: 2px solid #6c5ce7;\n}\n\n.queue-items {\n  min-height: 120px;\n  max-height: 150px;\n  overflow-y: auto;\n}\n\n.queue-empty {\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  padding: 20px;\n}\n\n.queue-item {\n  background: white;\n  padding: 10px;\n  margin: 8px 0;\n  border-radius: 6px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  border-left: 4px solid;\n  animation: slideIn 0.3s ease;\n}\n\n.queue-item.urgent {\n  border-left-color: #e74c3c;\n}\n\n.queue-item.normal {\n  border-left-color: #f39c12;\n}\n\n.queue-item.background {\n  border-left-color: #3498db;\n}\n\n.call-stack-viz {\n  grid-column: 1 / 2;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.call-stack-viz h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.stack-container {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 10px;\n  padding: 20px;\n  min-height: 150px;\n}\n\n.stack-items {\n  display: flex;\n  flex-direction: column-reverse;\n  gap: 10px;\n}\n\n.stack-empty {\n  text-align: center;\n  color: #bdc3c7;\n  font-style: italic;\n  padding: 20px;\n}\n\n.stack-item {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  padding: 12px;\n  border-radius: 6px;\n  text-align: center;\n  animation: stackPush 0.3s ease;\n}\n\n.execution-log {\n  grid-column: 1 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.execution-log h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.log-container {\n  border: 2px solid #ecf0f1;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.log-header {\n  display: grid;\n  grid-template-columns: 100px 120px 1fr 100px;\n  gap: 15px;\n  padding: 15px;\n  background: #34495e;\n  color: white;\n  font-weight: 600;\n}\n\n.log-entries {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.log-entry {\n  display: grid;\n  grid-template-columns: 100px 120px 1fr 100px;\n  gap: 15px;\n  padding: 12px 15px;\n  border-bottom: 1px solid #ecf0f1;\n  animation: fadeIn 0.5s ease;\n}\n\n.log-entry:last-child {\n  border-bottom: none;\n}\n\n.log-entry.urgent {\n  background: #ffeaa7;\n}\n\n.log-entry.normal {\n  background: #dfe6e9;\n}\n\n.log-entry.background {\n  background: #a29bfe;\n  color: white;\n}\n\n.notifications-panel {\n  grid-column: 1 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.notifications-panel h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.notifications-list {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.empty-state {\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  padding: 40px;\n  background: #f8f9fa;\n  border-radius: 8px;\n}\n\n.notification-item {\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 8px;\n  border-left: 4px solid;\n  animation: slideIn 0.3s ease;\n}\n\n.notification-item.urgent {\n  background: #ffeaa7;\n  border-left-color: #e74c3c;\n}\n\n.notification-item.normal {\n  background: #dfe6e9;\n  border-left-color: #f39c12;\n}\n\n.notification-item.background {\n  background: #a29bfe;\n  border-left-color: #3498db;\n  color: white;\n}\n\n.explanation {\n  background: white;\n  padding: 30px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n\n.explanation h3 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.priority-examples {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 20px;\n}\n\n.priority-item {\n  padding: 20px;\n  border-radius: 10px;\n  border-left: 4px solid;\n}\n\n.priority-item.urgent {\n  background: #ffeaa7;\n  border-left-color: #e74c3c;\n}\n\n.priority-item.normal {\n  background: #dfe6e9;\n  border-left-color: #f39c12;\n}\n\n.priority-item.background {\n  background: #a29bfe;\n  border-left-color: #3498db;\n  color: white;\n}\n\n.priority-item h4 {\n  margin-bottom: 10px;\n  font-size: 1.1rem;\n}\n\n/* Animaciones */\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes stackPush {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Responsive */\n@media (max-width: 1024px) {\n  .dashboard {\n    grid-template-columns: 1fr;\n  }\n\n  .event-loop-viz {\n    grid-column: 1;\n    grid-row: 2;\n  }\n\n  .execution-log,\n  .notifications-panel {\n    grid-column: 1;\n  }\n\n  .priority-examples {\n    grid-template-columns: 1fr;\n  }\n}\n\n@media (max-width: 768px) {\n  .stats {\n    grid-template-columns: 1fr;\n  }\n\n  .buttons {\n    flex-direction: column;\n  }\n\n  .log-header,\n  .log-entry {\n    grid-template-columns: 80px 100px 1fr 80px;\n    font-size: 0.9rem;\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-3-visualizacionjs",children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"3. visualizacion.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ===========================================================\n// \ud83d\udcca SISTEMA DE VISUALIZACI\xd3N PARA EL GESTOR DE NOTIFICACIONES\n// ===========================================================\n// Esta clase gestiona toda la l\xf3gica de interfaz visual:\n// - Colas de tareas (urgentes, normales y background)\n// - Pila de llamadas (Call Stack)\n// - Historial de eventos (Log)\n// - Lista de notificaciones procesadas\n// - Contadores de estad\xedsticas\nclass VisualizadorEventLoop {\n  constructor() {\n    // \ud83e\uddee Inicializamos contadores de notificaciones por tipo\n    this.contadores = {\n      total: 0, // Total de notificaciones procesadas\n      urgentes: 0, // Microtasks (alta prioridad)\n      normales: 0, // Tasks normales (prioridad est\xe1ndar)\n      background: 0, // Tareas en background (baja prioridad)\n    };\n  }\n\n  /**\n   * \ud83d\udcc8 actualizarEstadisticas()\n   * Actualiza los contadores visibles en el DOM\n   * seg\xfan el estado actual del objeto `this.contadores`.\n   */\n  actualizarEstadisticas() {\n    document.getElementById("totalNotificaciones").textContent =\n      this.contadores.total;\n    document.getElementById("urgentesCount").textContent =\n      this.contadores.urgentes;\n    document.getElementById("normalesCount").textContent =\n      this.contadores.normales;\n    document.getElementById("backgroundCount").textContent =\n      this.contadores.background;\n  }\n\n  /**\n   * \ud83e\uddfe agregarALog(timestamp, tipo, mensaje, estado)\n   * Registra un nuevo evento en el panel de LOG visual.\n   * Cada entrada muestra:\n   * - Hora\n   * - Tipo (urgente / normal / background)\n   * - Mensaje descriptivo\n   * - Estado (ej: "Encolado", "Procesado")\n   */\n  agregarALog(timestamp, tipo, mensaje, estado) {\n    const logEntries = document.getElementById("logEntries");\n    const logEntry = document.createElement("div");\n    logEntry.className = `log-entry ${tipo}`;\n\n    logEntry.innerHTML = `\n            <span>${timestamp}</span>\n            <span>\n                ${\n                  tipo === "urgent"\n                    ? "\ud83d\udea8 URGENTE"\n                    : tipo === "normal"\n                    ? "\ud83d\udfe1 NORMAL"\n                    : "\ud83d\udd35 BACKGROUND"\n                }\n            </span>\n            <span>${mensaje}</span>\n            <span>${estado}</span>\n        `;\n\n    logEntries.appendChild(logEntry);\n    logEntries.scrollTop = logEntries.scrollHeight; // auto-scroll al final\n  }\n\n  /**\n   * \ud83d\udce5 agregarACola(tipo, mensaje, id)\n   * A\xf1ade un item visual a la cola correspondiente seg\xfan el tipo.\n   * - \'urgent\' \u2192 microtaskQueue\n   * - \'normal\' \u2192 taskQueue\n   * - \'background\' \u2192 backgroundQueue\n   * Tambi\xe9n elimina el mensaje "Vac\xeda" si la cola estaba vac\xeda.\n   */\n  agregarACola(tipo, mensaje, id) {\n    const queueId =\n      tipo === "urgent"\n        ? "microtaskQueue"\n        : tipo === "normal"\n        ? "taskQueue"\n        : "backgroundQueue";\n\n    const queue = document.getElementById(queueId);\n    const queueItem = document.createElement("div");\n    queueItem.className = `queue-item ${tipo}`;\n    queueItem.id = `queue-${id}`;\n    queueItem.innerHTML = `\n            <strong>${mensaje.substring(0, 30)}...</strong>\n            <div class="queue-time">${new Date().toLocaleTimeString()}</div>\n        `;\n\n    // Si hay mensaje "Vac\xeda", lo quitamos porque ahora hay elementos\n    const emptyMsg = queue.querySelector(".queue-empty");\n    if (emptyMsg) {\n      emptyMsg.remove();\n    }\n\n    queue.appendChild(queueItem);\n    queue.scrollTop = queue.scrollHeight;\n  }\n\n  /**\n   * \ud83d\uddd1\ufe0f removerDeCola(tipo, id)\n   * Quita un item visual de la cola seg\xfan su id.\n   * Si la cola queda vac\xeda, vuelve a mostrar el mensaje "Vac\xeda".\n   */\n  removerDeCola(tipo, id) {\n    const queueId =\n      tipo === "urgent"\n        ? "microtaskQueue"\n        : tipo === "normal"\n        ? "taskQueue"\n        : "backgroundQueue";\n\n    const queueItem = document.getElementById(`queue-${id}`);\n    if (queueItem) {\n      queueItem.remove();\n    }\n\n    const queue = document.getElementById(queueId);\n    if (queue.children.length === 0) {\n      const emptyMsg = document.createElement("div");\n      emptyMsg.className = "queue-empty";\n      emptyMsg.textContent = "Vac\xeda";\n      queue.appendChild(emptyMsg);\n    }\n  }\n\n  /**\n   * \ud83e\uddf1 agregarAlStack(funcion)\n   * Simula la entrada de una funci\xf3n en el Call Stack.\n   * Si el stack estaba vac\xedo (solo ten\xeda el mensaje base),\n   * se elimina ese mensaje antes de agregar la nueva funci\xf3n.\n   */\n  agregarAlStack(funcion) {\n    const stack = document.getElementById("callStack");\n    const stackItem = document.createElement("div");\n    stackItem.className = "stack-item";\n    stackItem.textContent = funcion;\n\n    const emptyMsg = stack.querySelector(".stack-empty");\n    if (emptyMsg) {\n      emptyMsg.remove();\n    }\n\n    stack.appendChild(stackItem);\n  }\n\n  /**\n   * \u2b07\ufe0f removerDelStack()\n   * Simula la salida de la funci\xf3n m\xe1s reciente del Call Stack.\n   * Si la pila queda vac\xeda, vuelve a mostrar el mensaje base\n   * "Ejecuci\xf3n principal".\n   */\n  removerDelStack() {\n    const stack = document.getElementById("callStack");\n    if (stack.children.length > 0) {\n      stack.removeChild(stack.lastChild);\n    }\n\n    if (stack.children.length === 0) {\n      const emptyMsg = document.createElement("div");\n      emptyMsg.className = "stack-empty";\n      emptyMsg.textContent = "Ejecuci\xf3n principal";\n      stack.appendChild(emptyMsg);\n    }\n  }\n\n  /**\n   * \ud83d\udcec agregarNotificacionProcesada(tipo, mensaje, datos)\n   * Muestra una notificaci\xf3n procesada en el panel lateral.\n   * Incluye:\n   * - Tipo (con icono)\n   * - Hora de procesamiento\n   * - Mensaje original\n   * - Datos en JSON\n   */\n  agregarNotificacionProcesada(tipo, mensaje, datos) {\n    const notificationsList = document.getElementById("notificationsList");\n    const notificationItem = document.createElement("div");\n    notificationItem.className = `notification-item ${tipo}`;\n\n    notificationItem.innerHTML = `\n            <div class="notification-header">\n                <strong>${\n                  tipo === "urgent"\n                    ? "\ud83d\udea8 URGENTE"\n                    : tipo === "normal"\n                    ? "\ud83d\udfe1 NORMAL"\n                    : "\ud83d\udd35 BACKGROUND"\n                }</strong>\n                <span class="notification-time">${new Date().toLocaleTimeString()}</span>\n            </div>\n            <div class="notification-message">${mensaje}</div>\n            <div class="notification-data">${JSON.stringify(datos)}</div>\n        `;\n\n    // Quitar mensaje de estado vac\xedo si existe\n    const emptyState = notificationsList.querySelector(".empty-state");\n    if (emptyState) {\n      emptyState.remove();\n    }\n\n    notificationsList.appendChild(notificationItem);\n    notificationsList.scrollTop = notificationsList.scrollHeight;\n  }\n\n  /**\n   * \ud83d\udd22 incrementarContador(tipo)\n   * Incrementa el contador total y el del tipo espec\xedfico\n   * y actualiza la interfaz.\n   */\n  incrementarContador(tipo) {\n    this.contadores.total++;\n    this.contadores[tipo + "s"]++;\n    this.actualizarEstadisticas();\n  }\n}\n\n// ============================================\n// \ud83d\udccc INSTANCIA GLOBAL DEL VISUALIZADOR\n// ============================================\nconst visualizador = new VisualizadorEventLoop();\n\n/**\n * \ud83e\uddfc limpiarTodo()\n * Restablece toda la interfaz a su estado inicial:\n * - Colas vac\xedas\n * - Stack con mensaje base\n * - Log limpio\n * - Lista de notificaciones con mensaje por defecto\n * - Contadores en cero\n */\nfunction limpiarTodo() {\n  document.getElementById("microtaskQueue").innerHTML =\n    \'<div class="queue-empty">Vac\xeda</div>\';\n  document.getElementById("taskQueue").innerHTML =\n    \'<div class="queue-empty">Vac\xeda</div>\';\n  document.getElementById("backgroundQueue").innerHTML =\n    \'<div class="queue-empty">Vac\xeda</div>\';\n  document.getElementById("callStack").innerHTML =\n    \'<div class="stack-empty">Ejecuci\xf3n principal</div>\';\n  document.getElementById("logEntries").innerHTML = "";\n  document.getElementById("notificationsList").innerHTML =\n    \'<div class="empty-state">Las notificaciones aparecer\xe1n aqu\xed cuando se procesen</div>\';\n\n  visualizador.contadores = {\n    total: 0,\n    urgentes: 0,\n    normales: 0,\n    background: 0,\n  };\n  visualizador.actualizarEstadisticas();\n}\n\n/**\n * \u2709\ufe0f agregarNotificacionManual()\n * Simula la llegada de una notificaci\xf3n aleatoria con tipo y mensaje predefinidos:\n * - urgent \u2192 Microtask Queue\n * - normal \u2192 Task Queue\n * - background \u2192 Background Queue\n *\n * Tambi\xe9n:\n * - La agrega al log\n * - La mete en la cola visual\n * - Incrementa contadores\n * - Programa su \u201cprocesamiento\u201d con un setTimeout seg\xfan prioridad\n */\nfunction agregarNotificacionManual() {\n  // Seleccionamos tipo aleatorio\n  const tipos = ["urgent", "normal", "background"];\n  const tipo = tipos[Math.floor(Math.random() * tipos.length)];\n\n  // Mensajes predeterminados seg\xfan el tipo\n  const mensajes = {\n    urgent: ["Error de conexi\xf3n", "Validaci\xf3n fallida", "Alerta de seguridad"],\n    normal: ["Mensaje recibido", "Actualizaci\xf3n de UI", "Evento de usuario"],\n    background: ["Enviar analytics", "Limpiar cache", "Sincronizar datos"],\n  };\n\n  // Seleccionamos mensaje aleatorio del tipo\n  const mensaje =\n    mensajes[tipo][Math.floor(Math.random() * mensajes[tipo].length)];\n  const id = Date.now(); // id \xfanico basado en timestamp\n\n  // Log de encolado\n  visualizador.agregarALog(\n    new Date().toLocaleTimeString(),\n    tipo,\n    mensaje,\n    "Encolado"\n  );\n\n  // Agregar a la cola visual\n  visualizador.agregarACola(tipo, mensaje, id);\n  visualizador.incrementarContador(tipo);\n\n  // Simular procesamiento autom\xe1tico tras un tiempo distinto por prioridad\n  setTimeout(\n    () => {\n      visualizador.removerDeCola(tipo, id);\n      visualizador.agregarALog(\n        new Date().toLocaleTimeString(),\n        tipo,\n        mensaje,\n        "Procesado"\n      );\n      visualizador.agregarNotificacionProcesada(tipo, mensaje, { id: id });\n    },\n    tipo === "urgent" ? 100 : tipo === "normal" ? 500 : 2000\n  );\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-3-notificacionesjs",children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"3. notificaciones.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\ude80 SISTEMA REAL: Gestor de Notificaciones con Diferentes Prioridades\n *\n * Escenario: Una aplicaci\xf3n que recibe notificaciones de diferentes fuentes\n * y necesita manejarlas con prioridades inteligentes usando el Event Loop\n */\n\nclass GestorNotificaciones {\n  constructor() {\n    this.notificaciones = [];\n    this.isProcesando = false;\n  }\n\n  /**\n   * \ud83d\udd34 NOTIFICACI\xd3N DE ALTA PRIORIDAD (Microtask Queue)\n   * Uso: Errores cr\xedticos, respuestas inmediatas de API, validaciones\n   * Comportamiento: Se ejecuta INMEDIATAMENTE despu\xe9s del c\xf3digo actual\n   */\n  agregarNotificacionUrgente(mensaje, datos) {\n    console.log(`\ud83d\udea8 [URGENTE] Encolando: ${mensaje}`);\n\n    // Usamos Promise para m\xe1xima prioridad (Microtask Queue)\n    Promise.resolve().then(() => {\n      this._procesarNotificacionUrgente(mensaje, datos);\n    });\n  }\n\n  /**\n   * \ud83d\udfe1 NOTIFICACI\xd3N DE MEDIA PRIORIDAD (Task Queue con delay 0)\n   * Uso: Actualizaciones de UI, notificaciones de usuario, procesos normales\n   * Comportamiento: Se ejecuta despu\xe9s de todas las microtasks\n   */\n  agregarNotificacionNormal(mensaje, datos) {\n    console.log(`\ud83d\udfe1 [NORMAL] Encolando: ${mensaje}`);\n\n    // Usamos setTimeout para prioridad normal (Task Queue)\n    setTimeout(() => {\n      this._procesarNotificacionNormal(mensaje, datos);\n    }, 0);\n  }\n\n  /**\n   * \ud83d\udd35 NOTIFICACI\xd3N DE BAJA PRIORIDAD (Task Queue con delay)\n   * Uso: Logs, analytics, tareas de mantenimiento, procesos en segundo plano\n   * Comportamiento: Se ejecuta despu\xe9s de un tiempo espec\xedfico\n   */\n  agregarNotificacionBackground(mensaje, datos, delay = 1000) {\n    console.log(`\ud83d\udd35 [BACKGROUND] Encolando: ${mensaje} (delay: ${delay}ms)`);\n\n    // Usamos setTimeout con delay para baja prioridad\n    setTimeout(() => {\n      this._procesarNotificacionBackground(mensaje, datos);\n    }, delay);\n  }\n\n  /**\n   * \ud83c\udfaf PROCESAMIENTO DE NOTIFICACIONES URGENTES\n   * Estas se ejecutan en la Microtask Queue (m\xe1xima prioridad)\n   */\n  _procesarNotificacionUrgente(mensaje, datos) {\n    console.log(`\u2705 [URGENTE] Procesada: ${mensaje}`);\n    console.log("   \u21b3 Datos:", datos);\n\n    // Las urgentes pueden generar m\xe1s microtasks\n    if (mensaje.includes("error")) {\n      Promise.resolve().then(() => {\n        console.log("   \u21b3 \ud83d\udd14 [MICROTASK] Notificando administrador del error");\n      });\n    }\n  }\n\n  /**\n   * \ud83d\udcdd PROCESAMIENTO DE NOTIFICACIONES NORMALES\n   * Estas se ejecutan en la Task Queue (prioridad normal)\n   */\n  _procesarNotificacionNormal(mensaje, datos) {\n    console.log(`\u2705 [NORMAL] Procesada: ${mensaje}`);\n    console.log("   \u21b3 Datos:", datos);\n\n    // Las normales pueden contener microtasks internas\n    if (mensaje.includes("actualizar")) {\n      Promise.resolve().then(() => {\n        console.log("   \u21b3 \ud83c\udfa8 [MICROTASK] Actualizando cache de UI");\n      });\n    }\n  }\n\n  /**\n   * \ud83d\udcca PROCESAMIENTO DE NOTIFICACIONES BACKGROUND\n   * Estas son las de m\xe1s baja prioridad\n   */\n  _procesarNotificacionBackground(mensaje, datos) {\n    console.log(`\u2705 [BACKGROUND] Procesada: ${mensaje}`);\n    console.log("   \u21b3 Datos:", datos);\n\n    // Simulamos procesamiento pesado (pero no bloqueante gracias al delay)\n    const inicio = Date.now();\n    while (Date.now() - inicio < 50) {\n      // Simulamos trabajo de procesamiento\n    }\n    console.log("   \u21b3 \u23f1\ufe0f  Procesamiento background completado");\n  }\n}\n\n/**\n * \ud83c\udf0d SIMULACI\xd3N DE ESCENARIO REAL: Aplicaci\xf3n de mensajer\xeda\n *\n * Vamos a simular una aplicaci\xf3n que recibe notificaciones de diferentes fuentes\n * y ver c\xf3mo el Event Loop maneja las prioridades autom\xe1ticamente\n */\n\nfunction simularAplicacionMensajeria() {\n  console.log("\ud83d\udcf1 INICIANDO SIMULACI\xd3N: App de Mensajer\xeda");\n  console.log("=".repeat(50));\n\n  const gestor = new GestorNotificaciones();\n\n  // \ud83d\udccd 1. C\xd3DIGO SINCR\xd3NICO INICIAL (Call Stack)\n  console.log("\ud83d\udccd [CALL STACK] Configurando aplicaci\xf3n...");\n  const config = { usuario: "john_doe", tema: "oscuro" };\n  console.log("\ud83d\udccd [CALL STACK] Configuraci\xf3n cargada:", config);\n\n  // \ud83d\udea8 2. NOTIFICACI\xd3N URGENTE: Error de conexi\xf3n (Microtask Queue)\n  gestor.agregarNotificacionUrgente(\n    "Error de conexi\xf3n con servidor principal",\n    { codigo: 503, servidor: "api.principal.com" }\n  );\n\n  // \ud83d\udfe1 3. NOTIFICACI\xd3N NORMAL: Mensaje recibido (Task Queue)\n  gestor.agregarNotificacionNormal("Nuevo mensaje de Ana", {\n    de: "ana",\n    mensaje: "\xbfQuedamos esta tarde?",\n    timestamp: Date.now(),\n  });\n\n  // \ud83d\udd35 4. NOTIFICACI\xd3N BACKGROUND: Analytics (Task Queue con delay)\n  gestor.agregarNotificacionBackground(\n    "Enviar datos de analytics",\n    { eventos: ["login", "navegacion"], usuario: "john_doe" },\n    2000\n  );\n\n  // \ud83d\udea8 5. OTRA NOTIFICACI\xd3N URGENTE: Validaci\xf3n fallida (Microtask Queue)\n  gestor.agregarNotificacionUrgente("Validaci\xf3n de seguridad fallida", {\n    intento: 3,\n    ip: "192.168.1.100",\n  });\n\n  // \ud83d\udfe1 6. NOTIFICACI\xd3N NORMAL: Actualizaci\xf3n de estado (Task Queue)\n  gestor.agregarNotificacionNormal("Actualizar estado de conexi\xf3n", {\n    estado: "conectado",\n    ultimaConexion: Date.now(),\n  });\n\n  // \ud83d\udccd 7. M\xc1S C\xd3DIGO SINCR\xd3NICO (Call Stack)\n  console.log("\ud83d\udccd [CALL STACK] Todas las notificaciones encoladas");\n  console.log("\ud83d\udccd [CALL STACK] Aplicaci\xf3n lista para interactuar");\n\n  // \ud83d\udfe1 8. NOTIFICACI\xd3N POR EVENTO DE USUARIO (Task Queue)\n  setTimeout(() => {\n    console.log(\'\ud83d\udc64 [USUARIO] Usuario hace click en "Enviar mensaje"\');\n    gestor.agregarNotificacionNormal("Mensaje enviado por usuario", {\n      para: "ana",\n      mensaje: "\xa1S\xed, perfecto!",\n      timestamp: Date.now(),\n    });\n\n    // \ud83d\udea8 Respuesta inmediata del servidor (Microtask Queue)\n    gestor.agregarNotificacionUrgente("Mensaje entregado al servidor", {\n      id: "msg_12345",\n      estado: "entregado",\n    });\n  }, 100);\n\n  console.log(\n    "\ud83d\udccd [CALL STACK] Simulaci\xf3n configurada - Observa el orden de ejecuci\xf3n:"\n  );\n  console.log("=".repeat(50));\n}\n\n/**\n * \ud83c\udfaf EJECUCI\xd3N Y AN\xc1LISIS DEL COMPORTAMIENTO\n *\n * Al ejecutar esta simulaci\xf3n, veremos exactamente c\xf3mo JavaScript\n * prioriza las tareas usando el Event Loop:\n *\n * 1. PRIMERO: Todo el c\xf3digo sincr\xf3nico (Call Stack)\n * 2. SEGUNDO: Notificaciones URGENTES (Microtask Queue)\n * 3. TERCERO: Notificaciones NORMALES (Task Queue)\n * 4. CUARTO: Notificaciones BACKGROUND (Task Queue con delay)\n *\n * Esto sucede AUTOM\xc1TICAMENTE gracias al dise\xf1o del Event Loop\n */\n\n// \ud83d\ude80 Ejecutamos la simulaci\xf3n\nsimularAplicacionMensajeria();\n\n/**\n * \ud83d\udca1 POR QU\xc9 ESTE EJEMPLO ES IMPORTANTE EN APLICACIONES REALES:\n *\n * 1. \ud83d\udea8 URGENTE (Microtask):\n *    - Errores cr\xedticos deben manejarse inmediatamente\n *    - Validaciones de seguridad no pueden esperar\n *    - Respuestas de API que bloquean la UI\n *\n * 2. \ud83d\udfe1 NORMAL (Task Queue):\n *    - Interacciones de usuario (clicks, teclas)\n *    - Actualizaciones de UI\n *    - Mensajes entre componentes\n *\n * 3. \ud83d\udd35 BACKGROUND (Task Queue con delay):\n *    - Analytics y m\xe9tricas\n *    - Logs de depuraci\xf3n\n *    - Sincronizaci\xf3n en segundo plano\n *    - Limpieza de cache\n *\n * \ud83c\udfaf EL RESULTADO: Una aplicaci\xf3n responsive que prioriza\n * lo importante y no se bloquea con tareas pesadas\n */\n\n// \ud83d\udd04 Ejemplo adicional: C\xf3mo manejar peticiones HTTP reales\nfunction ejemploPeticionHTTP() {\n  console.log("\\\\n\ud83c\udf10 EJEMPLO ADICIONAL: Petici\xf3n HTTP real");\n\n  // Simulaci\xf3n de petici\xf3n HTTP con diferentes fases\n  setTimeout(() => {\n    console.log("1. \ud83d\udce1 [TASK] Iniciando petici\xf3n HTTP...");\n\n    // Simulamos respuesta exitosa (Microtask para procesamiento inmediato)\n    Promise.resolve().then(() => {\n      console.log("2. \u2705 [MICROTASK] Procesando respuesta HTTP inmediatamente");\n\n      // Dentro del microtask, m\xe1s trabajo que necesita alta prioridad\n      Promise.resolve().then(() => {\n        console.log("3. \ud83d\udd04 [MICROTASK] Actualizando estado de loading");\n      });\n    });\n\n    // Task normal para actualizar UI despu\xe9s del procesamiento\n    setTimeout(() => {\n      console.log("4. \ud83c\udfa8 [TASK] Actualizando interfaz de usuario");\n    }, 0);\n  }, 500);\n}\n\n// Ejecutamos el ejemplo adicional\nejemploPeticionHTTP();\n\n/**\n * \ud83c\udfc6 CONCLUSI\xd3N PR\xc1CTICA:\n *\n * En aplicaciones reales, entender el Event Loop te permite:\n *\n * \u2705 Priorizar autom\xe1ticamente tareas cr\xedticas\n * \u2705 Evitar bloqueos en la interfaz de usuario\n * \u2705 Gestionar eficientemente recursos del navegador\n * \u2705 Crear aplicaciones m\xe1s fluidas y responsivas\n * \u2705 Debuggear problemas de rendimiento m\xe1s f\xe1cilmente\n *\n * Este conocimiento es FUNDAMENTAL para desarrollo frontend moderno\n * y aplicaciones Node.js de alto rendimiento.\n */\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-instrucciones-de-uso",children:["\ud83d\udccb ",(0,r.jsx)(e.strong,{children:"Instrucciones de uso:"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Crea una carpeta"})," para el proyecto"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Guarda los 4 archivos"})," con estos nombres:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"index.html"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"styles.css"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"notificaciones.js"})," (tu c\xf3digo original)"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"visualizacion.js"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsxs)(e.strong,{children:["Abre ",(0,r.jsx)(e.code,{children:"index.html"})]})," en tu navegador"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'Haz clic en "Iniciar Simulaci\xf3n"'})," para ver el sistema en acci\xf3n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-podr\xe1s-visualizar",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Qu\xe9 podr\xe1s visualizar:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Colas de prioridad"})," en tiempo real"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Call Stack"})," con las funciones ejecut\xe1ndose"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Log de ejecuci\xf3n"})," detallado"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Estad\xedsticas"})," de notificaciones procesadas"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Notificaciones"})," con diferentes niveles de prioridad"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\xa1El sistema mostrar\xe1 exactamente c\xf3mo JavaScript maneja las diferentes prioridades usando el Event Loop! \ud83d\ude80"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Este ejemplo muestra exactamente c\xf3mo una aplicaci\xf3n real utiliza las diferentes colas del Event Loop para manejar prioridades de forma autom\xe1tica y eficiente."})," \ud83d\ude80"]}),"\n",(0,r.jsxs)(e.h2,{id:"-microtask-queue",children:["\ud83d\udd27 Microtask ",(0,r.jsx)(e.strong,{children:"Queue"})]}),"\n",(0,r.jsx)(e.h2,{id:"sistema-de-cach\xe9-con-actualizaci\xf3n-inteligente",children:"Sistema de Cach\xe9 con Actualizaci\xf3n Inteligente"}),"\n",(0,r.jsxs)(e.h2,{id:"-1-indexhtml-1",children:["\ud83d\udcc1 ",(0,r.jsx)(e.strong,{children:"1. index.html"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Sistema de Cach\xe9 Inteligente</title>\n    <link rel="stylesheet" href="styles.css" />\n  </head>\n  <body>\n    <div class="container">\n      <header class="header">\n        <h1>\ud83d\ude80 Sistema de Cach\xe9 Inteligente</h1>\n        <p class="subtitle">\n          Actualizaciones en Tiempo Real con Microtask Queue\n        </p>\n      </header>\n\n      <div class="dashboard">\n        \x3c!-- Panel de Control --\x3e\n        <div class="control-panel">\n          <h2>\ud83c\udfae Panel de Control</h2>\n          <div class="buttons">\n            <button onclick="iniciarSimulacion()" class="btn btn-primary">\n              \u25b6\ufe0f Iniciar Dashboard Financiero\n            </button>\n            <button\n              onclick="simularConsultaUsuario()"\n              class="btn btn-secondary"\n            >\n              \ud83d\udc64 Simular Consulta Usuario\n            </button>\n            <button\n              onclick="ejecutarActualizacionMasiva()"\n              class="btn btn-warning"\n            >\n              \ud83d\udd04 Actualizaci\xf3n Masiva\n            </button>\n            <button onclick="limpiarTodo()" class="btn btn-danger">\n              \ud83d\uddd1\ufe0f Limpiar Todo\n            </button>\n          </div>\n\n          <div class="stats">\n            <div class="stat-card">\n              <span class="stat-number" id="lecturasCount">0</span>\n              <span class="stat-label">Lecturas</span>\n            </div>\n            <div class="stat-card">\n              <span class="stat-number" id="escriturasCount">0</span>\n              <span class="stat-label">Escrituras</span>\n            </div>\n            <div class="stat-card">\n              <span class="stat-number" id="actualizacionesCount">0</span>\n              <span class="stat-label">Actualizaciones</span>\n            </div>\n            <div class="stat-card">\n              <span class="stat-number" id="cacheSize">0</span>\n              <span class="stat-label">Tama\xf1o Cach\xe9</span>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Visualizaci\xf3n del Cach\xe9 --\x3e\n        <div class="cache-viz">\n          <h2>\ud83d\udcbe Cach\xe9 en Memoria</h2>\n          <div class="cache-container">\n            <div class="cache-header">\n              <span>Clave</span>\n              <span>Valor</span>\n              <span>Estado</span>\n              <span>\xdaltima Actualizaci\xf3n</span>\n            </div>\n            <div class="cache-items" id="cacheItems">\n              <div class="cache-empty">El cach\xe9 est\xe1 vac\xedo</div>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Colas de Procesamiento --\x3e\n        <div class="queues-viz">\n          <h2>\ud83d\udd04 Colas de Procesamiento</h2>\n          <div class="queues-container">\n            <div class="queue microtask-queue">\n              <h3>\ud83d\udea8 Microtask Queue (Alta Prioridad)</h3>\n              <div class="queue-stats">\n                <span id="microtaskCount">0</span> tareas pendientes\n              </div>\n              <div class="queue-items" id="microtaskQueue">\n                <div class="queue-empty">Sin tareas pendientes</div>\n              </div>\n            </div>\n\n            <div class="queue task-queue">\n              <h3>\u23f0 Task Queue (Operaciones Programadas)</h3>\n              <div class="queue-stats">\n                <span id="taskCount">0</span> tareas pendientes\n              </div>\n              <div class="queue-items" id="taskQueue">\n                <div class="queue-empty">Sin tareas programadas</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Call Stack --\x3e\n        <div class="call-stack-viz">\n          <h2>\ud83d\udcda Call Stack</h2>\n          <div class="stack-container">\n            <div class="stack-items" id="callStack">\n              <div class="stack-empty">Ejecuci\xf3n principal</div>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Log de Ejecuci\xf3n --\x3e\n        <div class="execution-log">\n          <h2>\ud83d\udccb Log de Operaciones</h2>\n          <div class="log-container">\n            <div class="log-header">\n              <span>Tiempo</span>\n              <span>Tipo</span>\n              <span>Operaci\xf3n</span>\n              <span>Detalles</span>\n            </div>\n            <div class="log-entries" id="logEntries"></div>\n          </div>\n        </div>\n\n        \x3c!-- Suscriptores Activos --\x3e\n        <div class="subscribers-panel">\n          <h2>\ud83d\udc65 Suscriptores Activos</h2>\n          <div class="subscribers-list" id="subscribersList">\n            <div class="empty-state">No hay suscriptores activos</div>\n          </div>\n        </div>\n      </div>\n\n      \x3c!-- Explicaci\xf3n del Sistema --\x3e\n      <div class="explanation">\n        <h3>\ud83d\udca1 \xbfC\xf3mo funciona el sistema de cach\xe9 inteligente?</h3>\n        <div class="features-grid">\n          <div class="feature-card">\n            <div class="feature-icon">\ud83d\udea8</div>\n            <h4>Microtask Queue</h4>\n            <p>\n              Operaciones cr\xedticas se ejecutan inmediatamente despu\xe9s del c\xf3digo\n              actual, con m\xe1xima prioridad y sin bloquear la UI.\n            </p>\n          </div>\n          <div class="feature-card">\n            <div class="feature-icon">\ud83d\udcbe</div>\n            <h4>Actualizaciones en Background</h4>\n            <p>\n              Los datos se devuelven inmediatamente y se actualizan en segundo\n              plano, manteniendo la aplicaci\xf3n responsive.\n            </p>\n          </div>\n          <div class="feature-card">\n            <div class="feature-icon">\ud83d\udd0d</div>\n            <h4>Validaciones No Bloqueantes</h4>\n            <p>\n              Las validaciones se ejecutan en microtasks, permitiendo que las\n              operaciones principales contin\xfaen sin esperar.\n            </p>\n          </div>\n          <div class="feature-card">\n            <div class="feature-icon">\ud83d\udce2</div>\n            <h4>Notificaciones Inmediatas</h4>\n            <p>\n              Los suscriptores reciben notificaciones instant\xe1neas de cambios\n              mediante microtasks.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script src="cache-system.js"><\/script>\n    <script src="visualizacion.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-2-stylescss-1",children:["\ud83c\udfa8 ",(0,r.jsx)(e.strong,{children:"2. styles.css"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);\n  color: #333;\n  min-height: 100vh;\n  line-height: 1.6;\n}\n\n.container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 30px;\n  color: white;\n}\n\n.header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 10px;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.subtitle {\n  font-size: 1.2rem;\n  opacity: 0.9;\n}\n\n.dashboard {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto auto auto;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.control-panel {\n  grid-column: 1 / 2;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.control-panel h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.buttons {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n  margin-bottom: 25px;\n}\n\n.btn {\n  padding: 12px 15px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  text-align: center;\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n}\n\n.btn-secondary {\n  background: linear-gradient(135deg, #95a5a6, #7f8c8d);\n  color: white;\n}\n\n.btn-warning {\n  background: linear-gradient(135deg, #f39c12, #e67e22);\n  color: white;\n}\n\n.btn-danger {\n  background: linear-gradient(135deg, #e74c3c, #c0392b);\n  color: white;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n}\n\n.stats {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 15px;\n}\n\n.stat-card {\n  background: linear-gradient(135deg, #f8f9fa, #e9ecef);\n  padding: 15px;\n  border-radius: 10px;\n  text-align: center;\n  border-left: 4px solid #3498db;\n}\n\n.stat-number {\n  display: block;\n  font-size: 1.8rem;\n  font-weight: bold;\n  color: #2c3e50;\n}\n\n.stat-label {\n  font-size: 0.9rem;\n  color: #7f8c8d;\n}\n\n.cache-viz {\n  grid-column: 2 / 3;\n  grid-row: 1 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.cache-viz h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.cache-container {\n  border: 2px solid #ecf0f1;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.cache-header {\n  display: grid;\n  grid-template-columns: 1fr 1fr 0.8fr 1.2fr;\n  gap: 15px;\n  padding: 15px;\n  background: #34495e;\n  color: white;\n  font-weight: 600;\n}\n\n.cache-items {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.cache-empty {\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  padding: 40px;\n}\n\n.cache-item {\n  display: grid;\n  grid-template-columns: 1fr 1fr 0.8fr 1.2fr;\n  gap: 15px;\n  padding: 12px 15px;\n  border-bottom: 1px solid #ecf0f1;\n  animation: slideIn 0.3s ease;\n}\n\n.cache-item:last-child {\n  border-bottom: none;\n}\n\n.cache-item.updated {\n  background: #d4edda;\n  animation: highlight 1s ease;\n}\n\n.cache-item.pending {\n  background: #fff3cd;\n}\n\n.cache-key {\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.cache-value {\n  font-family: "Courier New", monospace;\n  background: #f8f9fa;\n  padding: 4px 8px;\n  border-radius: 4px;\n  border: 1px solid #e9ecef;\n}\n\n.cache-status {\n  font-size: 0.8rem;\n  padding: 4px 8px;\n  border-radius: 12px;\n  text-align: center;\n  font-weight: 600;\n}\n\n.status-actual {\n  background: #d4edda;\n  color: #155724;\n}\n\n.status-pending {\n  background: #fff3cd;\n  color: #856404;\n}\n\n.status-updating {\n  background: #cce7ff;\n  color: #004085;\n}\n\n.queues-viz {\n  grid-column: 1 / 2;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.queues-viz h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.queues-container {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.queue {\n  border-radius: 10px;\n  padding: 20px;\n  transition: all 0.3s ease;\n}\n\n.queue h3 {\n  margin-bottom: 15px;\n  font-size: 1.1rem;\n}\n\n.queue-stats {\n  text-align: center;\n  margin-bottom: 15px;\n  font-weight: 600;\n  padding: 8px;\n  border-radius: 6px;\n}\n\n.microtask-queue {\n  background: linear-gradient(135deg, #ffeaa7, #fab1a0);\n  border: 2px solid #e17055;\n}\n\n.microtask-queue .queue-stats {\n  background: rgba(225, 112, 85, 0.2);\n  color: #c44569;\n}\n\n.task-queue {\n  background: linear-gradient(135deg, #81ecec, #74b9ff);\n  border: 2px solid #0984e3;\n}\n\n.task-queue .queue-stats {\n  background: rgba(9, 132, 227, 0.2);\n  color: #0984e3;\n}\n\n.queue-items {\n  min-height: 120px;\n  max-height: 150px;\n  overflow-y: auto;\n}\n\n.queue-empty {\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  padding: 20px;\n}\n\n.queue-item {\n  background: white;\n  padding: 12px;\n  margin: 8px 0;\n  border-radius: 6px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  border-left: 4px solid;\n  animation: slideIn 0.3s ease;\n}\n\n.queue-item.microtask {\n  border-left-color: #e74c3c;\n}\n\n.queue-item.task {\n  border-left-color: #3498db;\n}\n\n.queue-item .operation-type {\n  font-size: 0.8rem;\n  font-weight: 600;\n  margin-bottom: 5px;\n}\n\n.queue-item .operation-details {\n  font-size: 0.9rem;\n  color: #666;\n}\n\n.call-stack-viz {\n  grid-column: 2 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.call-stack-viz h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.stack-container {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 10px;\n  padding: 20px;\n  min-height: 150px;\n}\n\n.stack-items {\n  display: flex;\n  flex-direction: column-reverse;\n  gap: 10px;\n}\n\n.stack-empty {\n  text-align: center;\n  color: #bdc3c7;\n  font-style: italic;\n  padding: 20px;\n}\n\n.stack-item {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  padding: 12px;\n  border-radius: 6px;\n  text-align: center;\n  animation: stackPush 0.3s ease;\n}\n\n.execution-log {\n  grid-column: 1 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.execution-log h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.log-container {\n  border: 2px solid #ecf0f1;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.log-header {\n  display: grid;\n  grid-template-columns: 100px 120px 1fr 2fr;\n  gap: 15px;\n  padding: 15px;\n  background: #34495e;\n  color: white;\n  font-weight: 600;\n}\n\n.log-entries {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.log-entry {\n  display: grid;\n  grid-template-columns: 100px 120px 1fr 2fr;\n  gap: 15px;\n  padding: 12px 15px;\n  border-bottom: 1px solid #ecf0f1;\n  animation: fadeIn 0.5s ease;\n}\n\n.log-entry:last-child {\n  border-bottom: none;\n}\n\n.log-entry.microtask {\n  background: #ffeaa7;\n}\n\n.log-entry.task {\n  background: #dfe6e9;\n}\n\n.log-entry.critical {\n  background: #ff6b6b;\n  color: white;\n}\n\n.log-entry .log-time {\n  font-family: "Courier New", monospace;\n  font-size: 0.9rem;\n}\n\n.log-entry .log-type {\n  font-weight: 600;\n}\n\n.subscribers-panel {\n  grid-column: 1 / 3;\n  background: white;\n  padding: 25px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.subscribers-panel h2 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.subscribers-list {\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.empty-state {\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  padding: 40px;\n  background: #f8f9fa;\n  border-radius: 8px;\n}\n\n.subscriber-item {\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 8px;\n  background: linear-gradient(135deg, #a29bfe, #74b9ff);\n  color: white;\n  animation: slideIn 0.3s ease;\n}\n\n.explanation {\n  background: white;\n  padding: 30px;\n  border-radius: 15px;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n\n.explanation h3 {\n  margin-bottom: 20px;\n  color: #2c3e50;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n\n.feature-card {\n  background: linear-gradient(135deg, #f8f9fa, #e9ecef);\n  padding: 20px;\n  border-radius: 10px;\n  border-left: 4px solid #3498db;\n}\n\n.feature-icon {\n  font-size: 2rem;\n  margin-bottom: 10px;\n}\n\n.feature-card h4 {\n  margin-bottom: 10px;\n  color: #2c3e50;\n}\n\n.feature-card p {\n  color: #666;\n  line-height: 1.5;\n}\n\n/* Animaciones */\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes stackPush {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes highlight {\n  0% {\n    background: #d4edda;\n  }\n  50% {\n    background: #c3e6cb;\n  }\n  100% {\n    background: #d4edda;\n  }\n}\n\n/* Responsive */\n@media (max-width: 1024px) {\n  .dashboard {\n    grid-template-columns: 1fr;\n  }\n\n  .cache-viz {\n    grid-column: 1;\n    grid-row: 2;\n  }\n\n  .call-stack-viz {\n    grid-column: 1;\n  }\n\n  .execution-log,\n  .subscribers-panel {\n    grid-column: 1;\n  }\n\n  .features-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n@media (max-width: 768px) {\n  .stats {\n    grid-template-columns: 1fr;\n  }\n\n  .buttons {\n    grid-template-columns: 1fr;\n  }\n\n  .log-header,\n  .log-entry {\n    grid-template-columns: 80px 100px 1fr 1fr;\n    font-size: 0.9rem;\n  }\n\n  .cache-header,\n  .cache-item {\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-3-visualizacionjs-1",children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"3. visualizacion.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Sistema de visualizaci\xf3n para el gestor de cach\xe9 inteligente\nclass VisualizadorCache {\n  constructor() {\n    this.estadisticas = {\n      lecturas: 0,\n      escrituras: 0,\n      actualizaciones: 0,\n      cacheSize: 0,\n    };\n    this.microtaskCount = 0;\n    this.taskCount = 0;\n    this.suscriptores = new Set();\n  }\n\n  actualizarEstadisticas() {\n    document.getElementById("lecturasCount").textContent =\n      this.estadisticas.lecturas;\n    document.getElementById("escriturasCount").textContent =\n      this.estadisticas.escrituras;\n    document.getElementById("actualizacionesCount").textContent =\n      this.estadisticas.actualizaciones;\n    document.getElementById("cacheSize").textContent =\n      this.estadisticas.cacheSize;\n    document.getElementById("microtaskCount").textContent = this.microtaskCount;\n    document.getElementById("taskCount").textContent = this.taskCount;\n  }\n\n  agregarALog(timestamp, tipo, operacion, detalles) {\n    const logEntries = document.getElementById("logEntries");\n    const logEntry = document.createElement("div");\n    logEntry.className = `log-entry ${tipo}`;\n\n    const icon =\n      tipo === "microtask" ? "\ud83d\udea8" : tipo === "critical" ? "\ud83d\udcbe" : "\u23f0";\n\n    logEntry.innerHTML = `\n            <span class="log-time">${timestamp}</span>\n            <span class="log-type">${icon} ${tipo.toUpperCase()}</span>\n            <span>${operacion}</span>\n            <span>${detalles}</span>\n        `;\n\n    logEntries.appendChild(logEntry);\n    logEntries.scrollTop = logEntries.scrollHeight;\n  }\n\n  actualizarCacheItem(clave, valor, estado = "actual") {\n    const cacheItems = document.getElementById("cacheItems");\n\n    // Buscar si ya existe el item\n    let cacheItem = document.getElementById(`cache-${clave}`);\n\n    if (!cacheItem) {\n      cacheItem = document.createElement("div");\n      cacheItem.className = "cache-item";\n      cacheItem.id = `cache-${clave}`;\n\n      cacheItem.innerHTML = `\n                <span class="cache-key">${clave}</span>\n                <span class="cache-value">${valor}</span>\n                <span class="cache-status status-${estado}">${estado.toUpperCase()}</span>\n                <span class="cache-time">${new Date().toLocaleTimeString()}</span>\n            `;\n\n      // Remover mensaje de vac\xedo si existe\n      const emptyMsg = cacheItems.querySelector(".cache-empty");\n      if (emptyMsg) {\n        emptyMsg.remove();\n      }\n\n      cacheItems.appendChild(cacheItem);\n      this.estadisticas.cacheSize++;\n    } else {\n      cacheItem.querySelector(".cache-value").textContent = valor;\n      cacheItem.querySelector(\n        ".cache-status"\n      ).className = `cache-status status-${estado}`;\n      cacheItem.querySelector(".cache-status").textContent =\n        estado.toUpperCase();\n      cacheItem.querySelector(".cache-time").textContent =\n        new Date().toLocaleTimeString();\n\n      // Animaci\xf3n de actualizaci\xf3n\n      cacheItem.classList.add("updated");\n      setTimeout(() => cacheItem.classList.remove("updated"), 1000);\n    }\n\n    this.actualizarEstadisticas();\n  }\n\n  agregarACola(tipo, operacion, detalles, id) {\n    const queueId = tipo === "microtask" ? "microtaskQueue" : "taskQueue";\n    const queue = document.getElementById(queueId);\n\n    const queueItem = document.createElement("div");\n    queueItem.className = `queue-item ${tipo}`;\n    queueItem.id = `queue-${id}`;\n\n    queueItem.innerHTML = `\n            <div class="operation-type">${operacion}</div>\n            <div class="operation-details">${detalles}</div>\n            <div class="queue-time">${new Date().toLocaleTimeString()}</div>\n        `;\n\n    // Remover mensaje de "Vac\xeda" si existe\n    const emptyMsg = queue.querySelector(".queue-empty");\n    if (emptyMsg) {\n      emptyMsg.remove();\n    }\n\n    queue.appendChild(queueItem);\n    queue.scrollTop = queue.scrollHeight;\n\n    // Actualizar contador\n    if (tipo === "microtask") {\n      this.microtaskCount++;\n    } else {\n      this.taskCount++;\n    }\n    this.actualizarEstadisticas();\n  }\n\n  removerDeCola(tipo, id) {\n    const queueId = tipo === "microtask" ? "microtaskQueue" : "taskQueue";\n    const queueItem = document.getElementById(`queue-${id}`);\n\n    if (queueItem) {\n      queueItem.remove();\n\n      // Actualizar contador\n      if (tipo === "microtask") {\n        this.microtaskCount--;\n      } else {\n        this.taskCount--;\n      }\n      this.actualizarEstadisticas();\n    }\n\n    // Si la cola queda vac\xeda, mostrar mensaje\n    const queue = document.getElementById(queueId);\n    if (queue.children.length === 0) {\n      const emptyMsg = document.createElement("div");\n      emptyMsg.className = "queue-empty";\n      emptyMsg.textContent =\n        tipo === "microtask"\n          ? "Sin tareas pendientes"\n          : "Sin tareas programadas";\n      queue.appendChild(emptyMsg);\n    }\n  }\n\n  agregarAlStack(funcion) {\n    const stack = document.getElementById("callStack");\n    const stackItem = document.createElement("div");\n    stackItem.className = "stack-item";\n    stackItem.textContent = funcion;\n\n    // Remover mensaje de "Ejecuci\xf3n principal" si existe\n    const emptyMsg = stack.querySelector(".stack-empty");\n    if (emptyMsg) {\n      emptyMsg.remove();\n    }\n\n    stack.appendChild(stackItem);\n  }\n\n  removerDelStack() {\n    const stack = document.getElementById("callStack");\n    if (stack.children.length > 0) {\n      stack.removeChild(stack.lastChild);\n    }\n\n    // Si el stack queda vac\xedo, mostrar mensaje\n    if (stack.children.length === 0) {\n      const emptyMsg = document.createElement("div");\n      emptyMsg.className = "stack-empty";\n      emptyMsg.textContent = "Ejecuci\xf3n principal";\n      stack.appendChild(emptyMsg);\n    }\n  }\n\n  agregarSuscriptor(id) {\n    this.suscriptores.add(id);\n    this.actualizarListaSuscriptores();\n  }\n\n  removerSuscriptor(id) {\n    this.suscriptores.delete(id);\n    this.actualizarListaSuscriptores();\n  }\n\n  actualizarListaSuscriptores() {\n    const subscribersList = document.getElementById("subscribersList");\n    subscribersList.innerHTML = "";\n\n    if (this.suscriptores.size === 0) {\n      const emptyState = document.createElement("div");\n      emptyState.className = "empty-state";\n      emptyState.textContent = "No hay suscriptores activos";\n      subscribersList.appendChild(emptyState);\n      return;\n    }\n\n    this.suscriptores.forEach((id) => {\n      const subscriberItem = document.createElement("div");\n      subscriberItem.className = "subscriber-item";\n      subscriberItem.innerHTML = `\n                <strong>Suscriptor #${id}</strong>\n                <div>Recibiendo actualizaciones en tiempo real</div>\n            `;\n      subscribersList.appendChild(subscriberItem);\n    });\n  }\n\n  incrementarContador(tipo) {\n    this.estadisticas[tipo]++;\n    this.actualizarEstadisticas();\n  }\n}\n\n// Instancia global del visualizador\nconst visualizador = new VisualizadorCache();\n\n// Funci\xf3n para limpiar todo\nfunction limpiarTodo() {\n  document.getElementById("microtaskQueue").innerHTML =\n    \'<div class="queue-empty">Sin tareas pendientes</div>\';\n  document.getElementById("taskQueue").innerHTML =\n    \'<div class="queue-empty">Sin tareas programadas</div>\';\n  document.getElementById("callStack").innerHTML =\n    \'<div class="stack-empty">Ejecuci\xf3n principal</div>\';\n  document.getElementById("logEntries").innerHTML = "";\n  document.getElementById("cacheItems").innerHTML =\n    \'<div class="cache-empty">El cach\xe9 est\xe1 vac\xedo</div>\';\n  document.getElementById("subscribersList").innerHTML =\n    \'<div class="empty-state">No hay suscriptores activos</div>\';\n\n  visualizador.estadisticas = {\n    lecturas: 0,\n    escrituras: 0,\n    actualizaciones: 0,\n    cacheSize: 0,\n  };\n  visualizador.microtaskCount = 0;\n  visualizador.taskCount = 0;\n  visualizador.suscriptores.clear();\n  visualizador.actualizarEstadisticas();\n}\n\n// Funciones de simulaci\xf3n\nfunction iniciarSimulacion() {\n  limpiarTodo();\n  simularDashboardFinanciero();\n}\n\nfunction simularConsultaUsuario() {\n  const claves = ["precio_BTC", "precio_ETH", "portfolio_total"];\n  const clave = claves[Math.floor(Math.random() * claves.length)];\n\n  visualizador.agregarALog(\n    new Date().toLocaleTimeString(),\n    "critical",\n    "Consulta de usuario",\n    `Solicitando: ${clave}`\n  );\n\n  visualizador.agregarACola(\n    "microtask",\n    "Actualizaci\xf3n en background",\n    `Clave: ${clave}`,\n    Date.now()\n  );\n\n  visualizador.incrementarContador("lecturas");\n}\n\nfunction ejecutarActualizacionMasiva() {\n  visualizador.agregarALog(\n    new Date().toLocaleTimeString(),\n    "task",\n    "Actualizaci\xf3n masiva",\n    "Procesando lote de 3 actualizaciones"\n  );\n\n  ["precio_BTC", "precio_ETH", "portfolio_total"].forEach((clave, index) => {\n    visualizador.agregarACola(\n      "microtask",\n      `Actualizaci\xf3n ${index + 1}`,\n      `Clave: ${clave}`,\n      Date.now() + index\n    );\n  });\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-3-cache-systemjs",children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"3. cache-system.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'class GestorCach\xe9Inteligente {\n  constructor() {\n    this.cach\xe9 = new Map();\n    this.estad\xedsticas = {\n      lecturas: 0,\n      escrituras: 0,\n      actualizaciones: 0,\n    };\n    this.suscriptores = new Set();\n  }\n\n  async obtenerDatoConActualizaci\xf3n(clave, actualizarDato) {\n    console.log(`\ud83d\udcd6 [LECTURA] Solicitando: ${clave}`);\n\n    const datoActual = this.cach\xe9.get(clave);\n\n    Promise.resolve().then(async () => {\n      try {\n        console.log(\n          `\ud83d\udd04 [MICROTASK] Actualizando cach\xe9 en background: ${clave}`\n        );\n\n        const datoNuevo = await actualizarDato();\n        this.cach\xe9.set(clave, datoNuevo);\n        this.estad\xedsticas.actualizaciones++;\n\n        console.log(`\u2705 [MICROTASK] Cach\xe9 actualizado: ${clave}`, datoNuevo);\n\n        this._notificarSuscriptores(clave, datoNuevo);\n      } catch (error) {\n        console.error(`\u274c [MICROTASK] Error actualizando ${clave}:`, error);\n        this._manejarError(clave, error);\n      }\n    });\n\n    this.estad\xedsticas.lecturas++;\n    return datoActual;\n  }\n\n  establecerDatoCr\xedtico(clave, valor, validar = null) {\n    console.log(`\ud83d\udcbe [ESCRITURA] Guardando dato cr\xedtico: ${clave}`);\n\n    this.cach\xe9.set(clave, valor);\n    this.estad\xedsticas.escrituras++;\n\n    if (validar) {\n      Promise.resolve().then(() => {\n        console.log(`\ud83d\udd0d [MICROTASK] Validando dato cr\xedtico: ${clave}`);\n        const esV\xe1lido = validar(valor);\n\n        if (!esV\xe1lido) {\n          console.warn(`\u26a0\ufe0f [MICROTASK] Dato inv\xe1lido detectado: ${clave}`);\n          this._corregirDatoInv\xe1lido(clave);\n        }\n      });\n    }\n\n    return valor;\n  }\n\n  suscribir(callback) {\n    console.log("\ud83d\udc65 [SUSCRIPCI\xd3N] Nuevo suscriptor agregado");\n    this.suscriptores.add(callback);\n\n    return () => {\n      Promise.resolve().then(() => {\n        this.suscriptores.delete(callback);\n        console.log("\ud83d\udc4b [MICROTASK] Suscriptor removido limpiamente");\n      });\n    };\n  }\n\n  async actualizarM\xfaltiplesDatos(actualizaciones) {\n    console.log(\n      `\ud83d\udd04 [ACTUALIZACI\xd3N] Iniciando lote de ${actualizaciones.length} actualizaciones`\n    );\n\n    const promesas = actualizaciones.map(({ clave, actualizador }, \xedndice) => {\n      return Promise.resolve().then(async () => {\n        console.log(`\ud83d\udce6 [MICROTASK ${\xedndice + 1}] Procesando: ${clave}`);\n\n        try {\n          const nuevoValor = await actualizador();\n          this.cach\xe9.set(clave, nuevoValor);\n\n          console.log(`\u2705 [MICROTASK ${\xedndice + 1}] Completado: ${clave}`);\n          return { clave, \xe9xito: true, valor: nuevoValor };\n        } catch (error) {\n          console.error(`\u274c [MICROTASK ${\xedndice + 1}] Error: ${clave}`, error);\n          return { clave, \xe9xito: false, error };\n        }\n      });\n    });\n\n    const resultados = await Promise.allSettled(promesas);\n\n    Promise.resolve().then(() => {\n      console.log("\ud83c\udf89 [MICROTASK] Lote de actualizaciones completado");\n      this._notificarActualizaci\xf3nMasiva(resultados);\n    });\n\n    return resultados;\n  }\n\n  eliminarDatoSeguro(clave) {\n    console.log(`\ud83d\uddd1\ufe0f [ELIMINACI\xd3N] Solicitando eliminar: ${clave}`);\n\n    const dato = this.cach\xe9.get(clave);\n\n    Promise.resolve().then(() => {\n      if (this._puedeEliminar(clave)) {\n        this.cach\xe9.delete(clave);\n        console.log(`\u2705 [MICROTASK] Dato eliminado seguro: ${clave}`);\n      } else {\n        console.warn(`\u26a0\ufe0f [MICROTASK] No se puede eliminar: ${clave} - en uso`);\n      }\n    });\n\n    return dato;\n  }\n\n  _notificarSuscriptores(clave, valor) {\n    Promise.resolve().then(() => {\n      console.log(\n        `\ud83d\udce2 [MICROTASK] Notificando a ${this.suscriptores.size} suscriptores`\n      );\n      this.suscriptores.forEach((callback) => {\n        try {\n          callback(clave, valor);\n        } catch (error) {\n          console.error("\u274c Error en suscriptor:", error);\n        }\n      });\n    });\n  }\n\n  _notificarActualizaci\xf3nMasiva(resultados) {\n    const \xe9xitos = resultados.filter(\n      (r) => r.status === "fulfilled" && r.value.\xe9xito\n    ).length;\n    const fallos = resultados.length - \xe9xitos;\n\n    console.log(\n      `\ud83d\udcca [MICROTASK] Resumen lote: ${\xe9xitos} \xe9xitos, ${fallos} fallos`\n    );\n  }\n\n  _manejarError(clave, error) {\n    Promise.resolve().then(() => {\n      console.error(`\ud83d\udee1\ufe0f [MICROTASK] Manejando error para: ${clave}`);\n    });\n  }\n\n  _corregirDatoInv\xe1lido(clave) {\n    Promise.resolve().then(() => {\n      console.log(`\ud83d\udd27 [MICROTASK] Corrigiendo dato inv\xe1lido: ${clave}`);\n    });\n  }\n\n  _puedeEliminar(clave) {\n    return true;\n  }\n}\n\nasync function simularDashboardFinanciero() {\n  console.log("\ud83d\udcb9 INICIANDO SIMULACI\xd3N: Dashboard Financiero en Tiempo Real");\n  console.log("=".repeat(60));\n\n  const gestorCach\xe9 = new GestorCach\xe9Inteligente();\n\n  console.log("\ud83d\udccd [CALL STACK] Configurando dashboard financiero...");\n\n  gestorCach\xe9.establecerDatoCr\xedtico("precio_BTC", 45000, (v) => v > 0);\n  gestorCach\xe9.establecerDatoCr\xedtico("precio_ETH", 3000, (v) => v > 0);\n  gestorCach\xe9.establecerDatoCr\xedtico("tipo_cambio", 1.08, (v) => v > 0);\n\n  const desuscribir = gestorCach\xe9.suscribir((clave, valor) => {\n    console.log(`\ud83d\udcc8 [SUSCRIPTOR] Cambio detectado: ${clave} = ${valor}`);\n  });\n\n  console.log("\\\\n\ud83d\udc64 [USUARIO] Usuario consultando datos...");\n\n  const precioBTC = await gestorCach\xe9.obtenerDatoConActualizaci\xf3n(\n    "precio_BTC",\n    async () => {\n      await new Promise((resolve) => setTimeout(resolve, 100));\n      return 45150 + Math.random() * 100;\n    }\n  );\n\n  const precioETH = await gestorCach\xe9.obtenerDatoConActualizaci\xf3n(\n    "precio_ETH",\n    async () => {\n      await new Promise((resolve) => setTimeout(resolve, 50));\n      return 3020 + Math.random() * 50;\n    }\n  );\n\n  console.log("\ud83d\udccd [CALL STACK] Datos mostrados al usuario inmediatamente:");\n  console.log("   \u21b3 BTC:", precioBTC);\n  console.log("   \u21b3 ETH:", precioETH);\n\n  console.log("\\\\n\ud83d\udd04 [SISTEMA] Programando actualizaci\xf3n masiva...");\n\n  setTimeout(async () => {\n    const actualizaciones = [\n      {\n        clave: "precio_BTC",\n        actualizador: async () => {\n          await new Promise((resolve) => setTimeout(resolve, 80));\n          return 45200 + Math.random() * 200;\n        },\n      },\n      {\n        clave: "precio_ETH",\n        actualizador: async () => {\n          await new Promise((resolve) => setTimeout(resolve, 60));\n          return 3050 + Math.random() * 100;\n        },\n      },\n      {\n        clave: "portfolio_total",\n        actualizador: async () => {\n          await new Promise((resolve) => setTimeout(resolve, 120));\n          return 100000 + Math.random() * 5000;\n        },\n      },\n    ];\n\n    await gestorCach\xe9.actualizarM\xfaltiplesDatos(actualizaciones);\n  }, 500);\n\n  console.log("\\\\n\ud83d\udee1\ufe0f [MANTENIMIENTO] Programando limpieza autom\xe1tica...");\n\n  setTimeout(() => {\n    console.log("\ud83e\uddf9 [SISTEMA] Iniciando limpieza de cach\xe9...");\n    gestorCach\xe9.eliminarDatoSeguro("datos_temporales");\n  }, 1000);\n\n  setTimeout(() => {\n    console.log("\\\\n\ud83d\udc64 [USUARIO] Usuario realiza nueva consulta...");\n\n    gestorCach\xe9.obtenerDatoConActualizaci\xf3n("portfolio_total", async () => {\n      await new Promise((resolve) => setTimeout(resolve, 70));\n      return 102000 + Math.random() * 3000;\n    });\n\n    gestorCach\xe9.establecerDatoCr\xedtico("meta_inversi\xf3n", 150000, (v) => v > 0);\n  }, 800);\n\n  setTimeout(() => {\n    Promise.resolve().then(() => {\n      console.log("\\\\n\ud83d\udcca [MICROTASK] === ESTAD\xcdSTICAS FINALES ===");\n      console.log("   \u21b3 Lecturas:", gestorCach\xe9.estad\xedsticas.lecturas);\n      console.log("   \u21b3 Escrituras:", gestorCach\xe9.estad\xedsticas.escrituras);\n      console.log(\n        "   \u21b3 Actualizaciones:",\n        gestorCach\xe9.estad\xedsticas.actualizaciones\n      );\n      console.log("   \u21b3 Tama\xf1o cach\xe9:", gestorCach\xe9.cach\xe9.size);\n      console.log("   \u21b3 Suscriptores activos:", gestorCach\xe9.suscriptores.size);\n\n      desuscribir();\n    });\n  }, 2000);\n\n  console.log(\n    "\\\\n\ud83d\udccd [CALL STACK] Dashboard configurado - Observa el orden de microtasks:"\n  );\n  console.log("=".repeat(60));\n}\n\nsimularDashboardFinanciero();\n\nfunction ejemploRetryInteligente() {\n  console.log("\\\\n\ud83d\udd04 EJEMPLO ADICIONAL: Patr\xf3n de Retry Inteligente");\n\n  async function operaci\xf3nCr\xedticaConRetry(operaci\xf3n, m\xe1ximoReintentos = 3) {\n    let reintentos = 0;\n\n    function ejecutarConRetry() {\n      return Promise.resolve().then(async () => {\n        try {\n          console.log(\n            `\ud83d\udd04 [MICROTASK] Intentando operaci\xf3n (reintento ${reintentos + 1})`\n          );\n          const resultado = await operaci\xf3n();\n          console.log("\u2705 [MICROTASK] Operaci\xf3n exitosa");\n          return resultado;\n        } catch (error) {\n          reintentos++;\n\n          if (reintentos < m\xe1ximoReintentos) {\n            console.log(`\u23f3 [MICROTASK] Reintentando en microtask...`);\n            return ejecutarConRetry();\n          } else {\n            throw new Error(\n              `\u274c [MICROTASK] Fallo despu\xe9s de ${reintentos} reintentos`\n            );\n          }\n        }\n      });\n    }\n\n    return ejecutarConRetry();\n  }\n\n  setTimeout(() => {\n    operaci\xf3nCr\xedticaConRetry(async () => {\n      if (Math.random() > 0.5) {\n        throw new Error("Error simulado");\n      }\n      return "\xe9xito";\n    })\n      .then((resultado) => console.log("\ud83c\udf89 Resultado final:", resultado))\n      .catch((error) => console.error("\ud83d\udca5 Error final:", error.message));\n  }, 100);\n}\n\nejemploRetryInteligente();\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-instrucciones-de-uso-1",children:["\ud83d\udccb ",(0,r.jsx)(e.strong,{children:"Instrucciones de uso:"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Crea una carpeta"})," para el proyecto"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Guarda los 4 archivos"})," con estos nombres:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"index.html"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"styles.css"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"cache-system.js"})," (tu c\xf3digo original)"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"visualizacion.js"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsxs)(e.strong,{children:["Abre ",(0,r.jsx)(e.code,{children:"index.html"})]})," en tu navegador"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:'Haz clic en "Iniciar Dashboard Financiero"'})," para ver el sistema en acci\xf3n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-podr\xe1s-visualizar-1",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Qu\xe9 podr\xe1s visualizar:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Cach\xe9 en memoria"})," con datos en tiempo real"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Microtask Queue"})," con operaciones de alta prioridad"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Task Queue"})," con operaciones programadas"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Call Stack"})," con las funciones ejecut\xe1ndose"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Log detallado"})," de todas las operaciones"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Suscriptores activos"})," recibiendo notificaciones"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Estad\xedsticas"})," en tiempo real del sistema"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\xa1El sistema mostrar\xe1 exactamente c\xf3mo las microtasks permiten actualizaciones inmediatas sin bloquear la interfaz! \ud83d\ude80"}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-todas-las-colas-en-acci\xf3n",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: Todas las Colas en Acci\xf3n"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que muestra visualmente c\xf3mo interact\xfaan todas las partes:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Colas y Orden de Ejecuci\xf3n - Demo Completo</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83c\udfaf Colas y Orden de Ejecuci\xf3n en JavaScript</h1>\n      <div class="prioridad">\n        <div class="nivel alta">\n          <h3>\ud83e\udd47 ALTA PRIORIDAD</h3>\n          <p>Call Stack (C\xf3digo s\xedncrono)</p>\n        </div>\n        <div class="nivel media">\n          <h3>\ud83e\udd48 MEDIA PRIORIDAD</h3>\n          <p>Microtask Queue (Promesas)</p>\n        </div>\n        <div class="nivel baja">\n          <h3>\ud83e\udd49 BAJA PRIORIDAD</h3>\n          <p>Task Queue (setTimeout, Eventos)</p>\n        </div>\n      </div>\n      <div class="sistema">\n        <div class="componente call-stack">\n          <h3>\ud83c\udfd7\ufe0f Call Stack</h3>\n          <p><em>C\xf3digo s\xedncrono - Se ejecuta inmediatamente</em></p>\n          <div id="stack-content"></div>\n        </div>\n        <div class="componente web-apis">\n          <h3>\ud83c\udf10 Web APIs</h3>\n          <p><em>Operaciones en segundo plano</em></p>\n          <div id="apis-content"></div>\n        </div>\n        <div class="componente microtask-queue">\n          <h3>\u26a1 Microtask Queue</h3>\n          <p><em>Promesas - ALTA prioridad</em></p>\n          <div id="microtask-content"></div>\n        </div>\n        <div class="componente task-queue">\n          <h3>\ud83d\udccb Task Queue</h3>\n          <p><em>setTimeout, Eventos - BAJA prioridad</em></p>\n          <div id="task-content"></div>\n        </div>\n      </div>\n      <div class="explicacion">\n        <h3>\ud83c\udfaf ORDEN DE EJECUCI\xd3N (\xa1IMPORTANTE!):</h3>\n        <p>1. <strong>Call Stack:</strong> Todo el c\xf3digo s\xedncrono primero</p>\n        <p>\n          2. <strong>Microtask Queue:</strong> TODAS las promesas (alta\n          prioridad)\n        </p>\n        <p>3. <strong>Task Queue:</strong> SOLO UNA tarea (baja prioridad)</p>\n        <p>4. <strong>Repetir</strong> desde el paso 1</p>\n      </div>\n      <button class="btn-ejemplo" onclick="ejecutarEjemploCompleto()">\n        \ud83d\ude80 Ejecutar Ejemplo Completo\n      </button>\n      <button class="btn-orden" onclick="demostrarOrdenEjecucion()">\n        \ud83d\udd04 Demostrar Orden de Ejecuci\xf3n\n      </button>\n      <button class="btn-limpiar" onclick="limpiarTodo()">\n        \ud83d\uddd1\ufe0f Limpiar Todo\n      </button>\n\n      <h3>\ud83d\udcdd C\xf3digo de Ejemplo:</h3>\n      <div class="orden-ejecucion">\n        console.log(\'1. Script inicio\');<br />\n        <br />\n        setTimeout(() => {<br />\n        &nbsp;&nbsp;console.log(\'6. Timeout\');<br />\n        }, 0);<br />\n        <br />\n        Promise.resolve().then(() => {<br />\n        &nbsp;&nbsp;console.log(\'4. Promesa 1\');<br />\n        });<br />\n        <br />\n        console.log(\'2. Script medio\');<br />\n        <br />\n        queueMicrotask(() => {<br />\n        &nbsp;&nbsp;console.log(\'5. queueMicrotask\');<br />\n        });<br />\n        <br />\n        Promise.resolve().then(() => {<br />\n        &nbsp;&nbsp;console.log(\'3. Promesa 2\');<br />\n        });<br />\n        <br />\n        console.log(\'7. Script fin\');\n      </div>\n      <h3>\ud83d\udcdf Consola de Ejecuci\xf3n:</h3>\n      <div class="consola" id="consola"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.sistema {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 15px;\n  margin: 20px 0;\n}\n.componente {\n  border: 3px solid;\n  border-radius: 8px;\n  padding: 15px;\n  min-height: 300px;\n}\n.call-stack {\n  border-color: #dc3545;\n  background: #f8d7da;\n}\n.web-apis {\n  border-color: #ffc107;\n  background: #fff3cd;\n}\n.microtask-queue {\n  border-color: #007bff;\n  background: #cce7ff;\n}\n.task-queue {\n  border-color: #28a745;\n  background: #d4edda;\n}\n.tarea {\n  background: white;\n  padding: 10px;\n  margin: 8px 0;\n  border-radius: 5px;\n  border-left: 4px solid;\n  font-size: 13px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n.sincrona {\n  border-left-color: #dc3545;\n}\n.promesa {\n  border-left-color: #007bff;\n}\n.settimeout {\n  border-left-color: #ffc107;\n}\n.evento {\n  border-left-color: #28a745;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-ejemplo {\n  background: #007bff;\n  color: white;\n}\n.btn-orden {\n  background: #6f42c1;\n  color: white;\n}\n.btn-limpiar {\n  background: #6c757d;\n  color: white;\n}\n.explicacion {\n  background: #e9ecef;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n}\n.orden-ejecucion {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n  font-family: "Courier New", monospace;\n}\n.consola {\n  background: #2d2d2d;\n  color: #00ff00;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n  min-height: 150px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n.prioridad {\n  display: flex;\n  justify-content: space-between;\n  margin: 20px 0;\n  text-align: center;\n}\n.nivel {\n  flex: 1;\n  padding: 15px;\n  border-radius: 8px;\n  margin: 0 5px;\n}\n.alta {\n  background: #007bff;\n  color: white;\n}\n.media {\n  background: #28a745;\n  color: white;\n}\n.baja {\n  background: #ffc107;\n  color: #212529;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Elementos del DOM\nconst stackContent = document.getElementById("stack-content");\nconst apisContent = document.getElementById("apis-content");\nconst microtaskContent = document.getElementById("microtask-content");\nconst taskContent = document.getElementById("task-content");\nconst consola = document.getElementById("consola");\n\n// Estado del sistema\nlet callStack = [];\nlet webAPIs = [];\nlet microtaskQueue = [];\nlet taskQueue = [];\nlet contadorTareas = 0;\n\nfunction log(mensaje) {\n  consola.innerHTML += `<div>${mensaje}</div>`;\n  consola.scrollTop = consola.scrollHeight;\n}\n\nfunction limpiarTodo() {\n  callStack = [];\n  webAPIs = [];\n  microtaskQueue = [];\n  taskQueue = [];\n  contadorTareas = 0;\n  consola.innerHTML = "";\n  actualizarVisualizacion();\n}\n\nfunction actualizarVisualizacion() {\n  stackContent.innerHTML = callStack\n    .map((t) => `<div class="tarea ${t.tipo}">${t.nombre}</div>`)\n    .join("");\n\n  apisContent.innerHTML = webAPIs\n    .map((api) => `<div class="tarea ${api.tipo}">${api.nombre}</div>`)\n    .join("");\n\n  microtaskContent.innerHTML = microtaskQueue\n    .map((t) => `<div class="tarea ${t.tipo}">${t.nombre}</div>`)\n    .join("");\n\n  taskContent.innerHTML = taskQueue\n    .map((t) => `<div class="tarea ${t.tipo}">${t.nombre}</div>`)\n    .join("");\n}\n\n// 1\ufe0f\u20e3 EJEMPLO COMPLETO DEL SISTEMA\nasync function ejecutarEjemploCompleto() {\n  limpiarTodo();\n  log("\ud83d\ude80 INICIANDO SISTEMA COMPLETO DE COLAS");\n\n  // Funci\xf3n para simular operaciones asincr\xf3nicas\n  function simularOperacion(nombre, tipo, destino, duracion = 1000) {\n    const id = contadorTareas++;\n    const tarea = { id, nombre: `${nombre} #${id}`, tipo };\n\n    // Agregar a Web APIs\n    webAPIs.push(tarea);\n    log(`\ud83c\udf10 Web API iniciada: ${tarea.nombre}`);\n    actualizarVisualizacion();\n\n    // Simular que termina despu\xe9s del tiempo\n    setTimeout(() => {\n      // Remover de Web APIs\n      webAPIs = webAPIs.filter((api) => api.id !== id);\n\n      // Agregar a la cola correspondiente\n      if (destino === "microtask") {\n        microtaskQueue.push(tarea);\n        log(`\u26a1 Microtask agregada: ${tarea.nombre}`);\n      } else {\n        taskQueue.push(tarea);\n        log(`\ud83d\udccb Task agregada: ${tarea.nombre}`);\n      }\n\n      actualizarVisualizacion();\n    }, duracion);\n  }\n\n  // Simular diferentes tipos de operaciones\n\n  // setTimeout (Task Queue)\n  simularOperacion("setTimeout", "settimeout", "task", 800);\n  simularOperacion("setTimeout", "settimeout", "task", 1200);\n\n  // Promesas (Microtask Queue)\n  simularOperacion("Promise.then()", "promesa", "microtask", 600);\n  simularOperacion("Promise.then()", "promesa", "microtask", 400);\n\n  // Eventos (Task Queue)\n  simularOperacion("Evento click", "evento", "task", 1000);\n\n  // queueMicrotask (Microtask Queue)\n  simularOperacion("queueMicrotask", "promesa", "microtask", 300);\n\n  // Procesar el event loop\n  let ciclos = 0;\n  const interval = setInterval(() => {\n    procesarEventLoop();\n    ciclos++;\n\n    if (ciclos > 15) {\n      clearInterval(interval);\n      log("\ud83c\udfc1 Sistema completado");\n    }\n  }, 500);\n}\n\nfunction procesarEventLoop() {\n  log("\\\\n--- CICLO DEL EVENT LOOP ---");\n\n  // 1. Procesar Call Stack (c\xf3digo s\xedncrono)\n  if (callStack.length > 0) {\n    const tarea = callStack.pop();\n    log(`\ud83c\udfaf Call Stack: ${tarea.nombre}`);\n  }\n\n  // 2. Procesar TODAS las Microtasks (alta prioridad)\n  while (microtaskQueue.length > 0) {\n    const microtask = microtaskQueue.shift();\n    log(`\u26a1 Microtask EJECUTADA: ${microtask.nombre}`);\n  }\n\n  // 3. Procesar UNA Task (baja prioridad)\n  if (taskQueue.length > 0) {\n    const task = taskQueue.shift();\n    log(`\ud83d\udccb Task EJECUTADA: ${task.nombre}`);\n  }\n\n  actualizarVisualizacion();\n}\n\n// 2\ufe0f\u20e3 DEMOSTRACI\xd3N DEL ORDEN DE EJECUCI\xd3N\nfunction demostrarOrdenEjecucion() {\n  limpiarTodo();\n  log("\ud83c\udfaf DEMOSTRANDO EL ORDEN DE EJECUCI\xd3N");\n  log("=====================================");\n\n  // Este c\xf3digo se ejecutar\xe1 en el orden REAL\n  setTimeout(() => {\n    log("6. \u23f0 setTimeout (Task Queue)");\n  }, 0);\n\n  Promise.resolve().then(() => {\n    log("3. \ud83e\udd1d Promesa 1 (Microtask Queue)");\n  });\n\n  queueMicrotask(() => {\n    log("4. \u26a1 queueMicrotask (Microtask Queue)");\n  });\n\n  Promise.resolve().then(() => {\n    log("5. \ud83e\udd1d Promesa 2 (Microtask Queue)");\n  });\n\n  log("1. \ud83d\udfe2 Script inicio (Call Stack)");\n  log("2. \ud83d\udd34 Script medio (Call Stack)");\n  log("7. \ud83d\udfe1 Script fin (Call Stack)");\n\n  log(\n    "\\\\n\ud83d\udca1 NOTA: Observa c\xf3mo se ejecutan primero todas las Microtasks antes que el setTimeout"\n  );\n}\n\n// 3\ufe0f\u20e3 EJEMPLO PR\xc1CTICO: \xbfQU\xc9 PASA CUANDO...?\nfunction ejemploPractico() {\n  log("\\\\n\ud83d\udd0d EJEMPLO PR\xc1CTICO: Microtasks dentro de Tasks");\n\n  setTimeout(() => {\n    log("A. \u23f0 Timeout (Task) iniciado");\n\n    Promise.resolve().then(() => {\n      log("B. \ud83e\udd1d Promesa DENTRO de timeout (Microtask)");\n    });\n\n    log("C. \u23f0 Timeout (Task) terminado");\n  }, 0);\n\n  Promise.resolve().then(() => {\n    log("D. \ud83e\udd1d Promesa FUERA de timeout (Microtask)");\n  });\n\n  log("E. \ud83d\udfe2 C\xf3digo s\xedncrono (Call Stack)");\n\n  // Orden esperado: E, D, A, C, B\n}\n\n// Inicializar\nactualizarVisualizacion();\n\n// Ejecutar ejemplo pr\xe1ctico autom\xe1ticamente\nsetTimeout(ejemploPractico, 2000);\n'})}),"\n",(0,r.jsx)(e.h1,{id:"mecanismos-avanzados-de-la-asincron\xeda-en-javascript",children:"Mecanismos avanzados de la asincron\xeda en JavaScript"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.h2,{id:"-qu\xe9-es-promiseall",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es Promise.all()?"})]}),"\n",(0,r.jsx)(e.p,{children:"Imagina que est\xe1s organizando una fiesta y necesitas:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-4",children:["\ud83c\udf89 ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sin Promise.all():"})," Llamas a un amigo, esperas a que llegue, luego llamas a otro, esperas..."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con Promise.all():"})," Llamas a TODOS tus amigos a la vez, y esperas a que TODOS lleguen"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-6",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Promise.all()"})," te permite ejecutar ",(0,r.jsx)(e.strong,{children:"m\xfaltiples promesas al mismo tiempo"})," y esperar a que ",(0,r.jsx)(e.strong,{children:"TODAS"})," se resuelvan."]}),"\n",(0,r.jsxs)(e.h2,{id:"-sintaxis-b\xe1sica-de-promiseall",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Sintaxis B\xe1sica de Promise.all()"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Promise.all() recibe un ARRAY de promesas\nPromise.all([promesa1, promesa2, promesa3])\n  .then((resultados) => {\n    // resultados es un array con TODOS los resultados\n    console.log("Todos terminaron:", resultados);\n  })\n  .catch((error) => {\n    // Si CUALQUIERA falla, se captura aqu\xed\n    console.error("Alguna fall\xf3:", error);\n  });\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-promiseall-en-acci\xf3n",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: Promise.all() en Acci\xf3n"})]}),"\n",(0,r.jsx)(e.h2,{id:"-estructura-de-archivos",children:"\ud83d\udcc1 Estructura de Archivos"}),"\n",(0,r.jsxs)(e.h3,{id:"1-indexhtml",children:["1. ",(0,r.jsx)(e.strong,{children:"index.html"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Promise.all() - Ejecutar Promesas en Paralelo</title>\n    <link rel="stylesheet" href="styles.css" />\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83d\ude80 Promise.all() - Ejecutar Promesas en Paralelo</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> Ejecuta m\xfaltiples promesas\n        <strong>al mismo tiempo</strong> y espera a que\n        <strong>TODAS</strong> terminen.\n      </p>\n\n      <div class="estadisticas">\n        <div class="estadistica">\n          <h3>\u23f1\ufe0f Tiempo Secuencial</h3>\n          <div class="tiempo" id="tiempoSecuencial">0ms</div>\n          <p>(Una despu\xe9s de otra)</p>\n        </div>\n        <div class="estadistica">\n          <h3>\u26a1 Tiempo Paralelo</h3>\n          <div class="tiempo" id="tiempoParalelo">0ms</div>\n          <p>(Todas al mismo tiempo)</p>\n        </div>\n        <div class="estadistica">\n          <h3>\ud83c\udfaf Mejora</h3>\n          <div class="tiempo" id="mejora">0%</div>\n          <p>(M\xe1s r\xe1pido)</p>\n        </div>\n      </div>\n\n      <div class="comparacion">\n        <div class="metodo secuencial">\n          <h3>\ud83d\udc0c Secuencial (Sin Promise.all)</h3>\n          <p><em>Una tarea despu\xe9s de otra</em></p>\n          <div id="tareas-secuenciales">\n            <div class="tarea pendiente" id="secuencial-1">\n              <span>\ud83d\udce5 Descargar imagen 1</span>\n              <span>\u23f3 Esperando...</span>\n            </div>\n            <div class="tarea pendiente" id="secuencial-2">\n              <span>\ud83d\udce5 Descargar imagen 2</span>\n              <span>\u23f3 Esperando...</span>\n            </div>\n            <div class="tarea pendiente" id="secuencial-3">\n              <span>\ud83d\udce5 Descargar imagen 3</span>\n              <span>\u23f3 Esperando...</span>\n            </div>\n          </div>\n          <button class="btn-secuencial" onclick="ejecutarSecuencial()">\n            \ud83d\udc0c Ejecutar Secuencial\n          </button>\n        </div>\n\n        <div class="metodo paralelo">\n          <h3>\u26a1 Paralelo (Con Promise.all)</h3>\n          <p><em>Todas las tareas al mismo tiempo</em></p>\n          <div id="tareas-paralelas">\n            <div class="tarea pendiente" id="paralelo-1">\n              <span>\ud83d\udce5 Descargar imagen 1</span>\n              <span>\u23f3 Esperando...</span>\n            </div>\n            <div class="tarea pendiente" id="paralelo-2">\n              <span>\ud83d\udce5 Descargar imagen 2</span>\n              <span>\u23f3 Esperando...</span>\n            </div>\n            <div class="tarea pendiente" id="paralelo-3">\n              <span>\ud83d\udce5 Descargar imagen 3</span>\n              <span>\u23f3 Esperando...</span>\n            </div>\n          </div>\n          <button class="btn-paralelo" onclick="ejecutarParalelo()">\n            \u26a1 Ejecutar Paralelo\n          </button>\n        </div>\n      </div>\n\n      <h3>\ud83d\udcdd C\xf3digo de Comparaci\xf3n:</h3>\n      <div class="comparacion">\n        <div class="codigo">\n          // \ud83d\udc0c SECUENCIAL (lento)<br />\n          async function secuencial() {<br />\n          &nbsp;&nbsp;const resultado1 = await tarea(1000);<br />\n          &nbsp;&nbsp;const resultado2 = await tarea(1000);<br />\n          &nbsp;&nbsp;const resultado3 = await tarea(1000);<br />\n          &nbsp;&nbsp;// Tiempo total: ~3000ms<br />\n          }\n        </div>\n        <div class="codigo">\n          // \u26a1 PARALELO (r\xe1pido)<br />\n          async function paralelo() {<br />\n          &nbsp;&nbsp;const resultados = await Promise.all([<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;tarea(1000),<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;tarea(1000),<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;tarea(1000)<br />\n          &nbsp;&nbsp;]);<br />\n          &nbsp;&nbsp;// Tiempo total: ~1000ms<br />\n          }\n        </div>\n      </div>\n\n      <button class="btn-api" onclick="ejemploAPIsReales()">\n        \ud83c\udf10 Ejemplo con APIs Reales\n      </button>\n      <button class="btn-limpiar" onclick="limpiarTodo()">\n        \ud83d\uddd1\ufe0f Limpiar Todo\n      </button>\n\n      <h3>\ud83d\udcdf Consola de Ejecuci\xf3n:</h3>\n      <div class="consola" id="consola"></div>\n    </div>\n\n    <script src="app.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"2-stylescss",children:["2. ",(0,r.jsx)(e.strong,{children:"styles.css"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 1000px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.comparacion {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin: 20px 0;\n}\n.metodo {\n  border: 2px solid;\n  border-radius: 8px;\n  padding: 15px;\n}\n.secuencial {\n  border-color: #dc3545;\n  background: #f8d7da;\n}\n.paralelo {\n  border-color: #28a745;\n  background: #d4edda;\n}\n.tarea {\n  background: white;\n  padding: 10px;\n  margin: 8px 0;\n  border-radius: 5px;\n  border-left: 4px solid;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.pendiente {\n  border-left-color: #ffc107;\n}\n.procesando {\n  border-left-color: #007bff;\n}\n.completada {\n  border-left-color: #28a745;\n}\n.fallada {\n  border-left-color: #dc3545;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-paralelo {\n  background: #28a745;\n  color: white;\n}\n.btn-secuencial {\n  background: #dc3545;\n  color: white;\n}\n.btn-api {\n  background: #007bff;\n  color: white;\n}\n.btn-limpiar {\n  background: #6c757d;\n  color: white;\n}\n.estadisticas {\n  display: flex;\n  justify-content: space-around;\n  margin: 20px 0;\n  text-align: center;\n}\n.estadistica {\n  padding: 15px;\n  border-radius: 8px;\n  background: #e9ecef;\n  flex: 1;\n  margin: 0 10px;\n}\n.tiempo {\n  font-size: 24px;\n  font-weight: bold;\n  color: #007bff;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n.consola {\n  background: #2d2d2d;\n  color: #00ff00;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n  min-height: 200px;\n  max-height: 400px;\n  overflow-y: auto;\n}\n.progreso {\n  height: 20px;\n  background: #e9ecef;\n  border-radius: 10px;\n  margin: 5px 0;\n  overflow: hidden;\n}\n.barra-progreso {\n  height: 100%;\n  background: #007bff;\n  transition: width 0.3s ease;\n  width: 0%;\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"3-appjs",children:["3. ",(0,r.jsx)(e.strong,{children:"app.js"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\ude80 PROMISE.ALL() - DEMOSTRACI\xd3N PR\xc1CTICA\n *\n * Este archivo demuestra la diferencia entre ejecutar promesas de forma\n * secuencial vs paralela usando Promise.all()\n */\n\n// ============================================================================\n// \ud83d\udccb VARIABLES GLOBALES Y CONFIGURACI\xd3N\n// ============================================================================\n\n/**\n * Elementos del DOM que vamos a manipular\n * Se obtienen una vez al cargar la p\xe1gina para mejor performance\n */\nconst consola = document.getElementById("consola");\nconst tiempoSecuencial = document.getElementById("tiempoSecuencial");\nconst tiempoParalelo = document.getElementById("tiempoParalelo");\nconst mejora = document.getElementById("mejora");\n\n// ============================================================================\n// \ud83d\udee0\ufe0f FUNCIONES DE UTILIDAD PARA LA INTERFAZ\n// ============================================================================\n\n/**\n * \ud83d\udcdd Funci\xf3n para mostrar mensajes en la consola\n * @param {string} mensaje - El mensaje a mostrar en la consola\n *\n * Esta funci\xf3n agrega un nuevo mensaje a la consola y autom\xe1ticamente\n * hace scroll hacia abajo para mostrar el mensaje m\xe1s reciente\n */\nfunction log(mensaje) {\n  consola.innerHTML += `<div>${mensaje}</div>`;\n  consola.scrollTop = consola.scrollHeight;\n}\n\n/**\n * \ud83d\uddd1\ufe0f Funci\xf3n para limpiar toda la interfaz\n *\n * Restablece todos los contadores, mensajes y estados visuales\n * a su estado inicial. Es \xfatil para realizar nuevas pruebas\n */\nfunction limpiarTodo() {\n  // Limpiar consola\n  consola.innerHTML = "";\n\n  // Resetear contadores de tiempo\n  tiempoSecuencial.textContent = "0ms";\n  tiempoParalelo.textContent = "0ms";\n  mejora.textContent = "0%";\n\n  // Resetear estados visuales de todas las tareas\n  for (let i = 1; i <= 3; i++) {\n    resetearTarea(`secuencial-${i}`);\n    resetearTarea(`paralelo-${i}`);\n  }\n}\n\n/**\n * \ud83d\udd04 Actualiza el estado visual de una tarea espec\xedfica\n * @param {string} id - El ID del elemento DOM de la tarea\n * @param {string} estado - Estado: \'pendiente\', \'procesando\', \'completada\', \'fallada\'\n * @param {string} mensaje - Mensaje descriptivo del estado actual\n *\n * Cambia la clase CSS y el texto para reflejar el estado actual de la tarea\n */\nfunction actualizarTarea(id, estado, mensaje) {\n  const elemento = document.getElementById(id);\n  elemento.className = `tarea ${estado}`;\n  elemento.querySelector("span:last-child").textContent = mensaje;\n}\n\n/**\n * \ud83d\udd04 Restablece una tarea a su estado inicial\n * @param {string} id - El ID del elemento DOM de la tarea\n */\nfunction resetearTarea(id) {\n  actualizarTarea(id, "pendiente", "\u23f3 Esperando...");\n}\n\n// ============================================================================\n// \u26a1 FUNCI\xd3N PRINCIPAL: SIMULADOR DE TAREAS ASINCR\xd3NICAS\n// ============================================================================\n\n/**\n * \ud83c\udfaf Simula una tarea asincr\xf3nica (como descargar un archivo o hacer una petici\xf3n HTTP)\n * @param {string} nombre - Nombre descriptivo de la tarea\n * @param {number} duracion - Duraci\xf3n en milisegundos que debe tardar la tarea\n * @param {number} probabilidadExito - Probabilidad de \xe9xito (0.0 a 1.0), por defecto 90%\n * @returns {Promise} Promesa que se resuelve o rechaza despu\xe9s del tiempo especificado\n *\n * Esta funci\xf3n es el coraz\xf3n de la demostraci\xf3n. Simula:\n * - Tiempo de espera (como una descarga real)\n * - Posibilidad de fallo (como errores de red)\n * - Informaci\xf3n detallada del resultado\n */\nfunction simularTarea(nombre, duracion, probabilidadExito = 0.9) {\n  return new Promise((resolve, reject) => {\n    const inicio = Date.now();\n\n    // setTimeout simula el tiempo que tomar\xeda una operaci\xf3n real\n    setTimeout(() => {\n      const exito = Math.random() < probabilidadExito;\n      const tiempoTranscurrido = Date.now() - inicio;\n\n      if (exito) {\n        // \u2705 La tarea fue exitosa\n        resolve({\n          nombre,\n          duracion,\n          tiempoReal: tiempoTranscurrido,\n          estado: "\u2705 Completado",\n        });\n      } else {\n        // \u274c La tarea fall\xf3\n        reject({\n          nombre,\n          duracion,\n          tiempoReal: tiempoTranscurrido,\n          estado: "\u274c Fall\xf3",\n        });\n      }\n    }, duracion);\n  });\n}\n\n// ============================================================================\n// \ud83d\udc0c EJECUCI\xd3N SECUENCIAL (M\xc9TODO LENTO)\n// ============================================================================\n\n/**\n * \ud83d\udc0c Ejecuta tareas de forma SECUENCIAL (una despu\xe9s de otra)\n *\n * CARACTER\xcdSTICAS:\n * - Cada tarea espera a que la anterior termine\n * - Tiempo total = suma de todos los tiempos individuales\n * - M\xe1s simple de entender y debuggear\n * - Menos eficiente en t\xe9rminos de tiempo\n *\n * TIEMPO ESTIMADO: ~3000ms (1000ms \xd7 3 tareas)\n */\nasync function ejecutarSecuencial() {\n  limpiarTodo();\n  log("\ud83d\udc0c INICIANDO EJECUCI\xd3N SECUENCIAL");\n  const inicioTotal = Date.now();\n\n  try {\n    // \ud83d\udce5 TAREA 1 - Primera descarga\n    actualizarTarea("secuencial-1", "procesando", "\u23ec Descargando...");\n    const resultado1 = await simularTarea("Imagen 1", 1000);\n    actualizarTarea(\n      "secuencial-1",\n      "completada",\n      `\u2705 ${resultado1.tiempoReal}ms`\n    );\n    log(`\ud83d\udce5 ${resultado1.nombre} completado en ${resultado1.tiempoReal}ms`);\n\n    // \ud83d\udce5 TAREA 2 - Espera a que termine la 1\n    actualizarTarea("secuencial-2", "procesando", "\u23ec Descargando...");\n    const resultado2 = await simularTarea("Imagen 2", 1000);\n    actualizarTarea(\n      "secuencial-2",\n      "completada",\n      `\u2705 ${resultado2.tiempoReal}ms`\n    );\n    log(`\ud83d\udce5 ${resultado2.nombre} completado en ${resultado2.tiempoReal}ms`);\n\n    // \ud83d\udce5 TAREA 3 - Espera a que terminen la 1 y 2\n    actualizarTarea("secuencial-3", "procesando", "\u23ec Descargando...");\n    const resultado3 = await simularTarea("Imagen 3", 1000);\n    actualizarTarea(\n      "secuencial-3",\n      "completada",\n      `\u2705 ${resultado3.tiempoReal}ms`\n    );\n    log(`\ud83d\udce5 ${resultado3.nombre} completado en ${resultado3.tiempoReal}ms`);\n\n    // \ud83d\udcca CALCULAR TIEMPO TOTAL\n    const tiempoTotal = Date.now() - inicioTotal;\n    tiempoSecuencial.textContent = `${tiempoTotal}ms`;\n    log(`\ud83d\udc0c TIEMPO TOTAL SECUENCIAL: ${tiempoTotal}ms`);\n  } catch (error) {\n    // \ud83d\udea8 MANEJO DE ERRORES\n    log(`\u274c Error en ejecuci\xf3n secuencial: ${error.nombre}`);\n  }\n}\n\n// ============================================================================\n// \u26a1 EJECUCI\xd3N PARALELA CON PROMISE.ALL() (M\xc9TODO R\xc1PIDO)\n// ============================================================================\n\n/**\n * \u26a1 Ejecuta tareas en PARALELO usando Promise.all()\n *\n * CARACTER\xcdSTICAS:\n * - Todas las tareas comienzan AL MISMO TIEMPO\n * - Tiempo total = tiempo de la tarea m\xe1s lenta\n * - M\xe1s eficiente pero m\xe1s complejo\n * - Si UNA promesa falla, TODAS son rechazadas\n *\n * TIEMPO ESTIMADO: ~1000ms (el tiempo de la tarea m\xe1s lenta)\n */\nasync function ejecutarParalelo() {\n  limpiarTodo();\n  log("\u26a1 INICIANDO EJECUCI\xd3N PARALELA CON PROMISE.ALL()");\n  const inicioTotal = Date.now();\n\n  try {\n    // \ud83c\udfaf INICIAR TODAS LAS TAREAS SIMULT\xc1NEAMENTE\n    actualizarTarea("paralelo-1", "procesando", "\u23ec Descargando...");\n    actualizarTarea("paralelo-2", "procesando", "\u23ec Descargando...");\n    actualizarTarea("paralelo-3", "procesando", "\u23ec Descargando...");\n\n    /**\n     * \ud83d\ude80 PROMISE.ALL() - EL CORAZ\xd3N DE LA EJECUCI\xd3N PARALELA\n     *\n     * Promise.all() recibe un array de promesas y:\n     * 1. Ejecuta TODAS las promesas inmediatamente\n     * 2. Espera a que TODAS se resuelvan\n     * 3. Retorna un array con los resultados en el MISMO ORDEN\n     * 4. Si UNA promesa es rechazada, Promise.all() se rechaza inmediatamente\n     */\n    const resultados = await Promise.all([\n      simularTarea("Imagen 1", 1000),\n      simularTarea("Imagen 2", 1000),\n      simularTarea("Imagen 3", 1000),\n    ]);\n\n    // \ud83d\udcca ACTUALIZAR INTERFAZ CON RESULTADOS\n    resultados.forEach((resultado, index) => {\n      actualizarTarea(\n        `paralelo-${index + 1}`,\n        "completada",\n        `\u2705 ${resultado.tiempoReal}ms`\n      );\n      log(`\ud83d\udce5 ${resultado.nombre} completado en ${resultado.tiempoReal}ms`);\n    });\n\n    // \u23f1\ufe0f CALCULAR TIEMPO TOTAL Y MEJORA\n    const tiempoTotal = Date.now() - inicioTotal;\n    tiempoParalelo.textContent = `${tiempoTotal}ms`;\n    log(`\u26a1 TIEMPO TOTAL PARALELO: ${tiempoTotal}ms`);\n\n    // \ud83d\udcc8 CALCULAR PORCENTAJE DE MEJORA\n    const tiempoSec = parseInt(tiempoSecuencial.textContent) || 3000;\n    const mejoraPorcentaje = Math.round((1 - tiempoTotal / tiempoSec) * 100);\n    mejora.textContent = `${mejoraPorcentaje}% m\xe1s r\xe1pido`;\n  } catch (error) {\n    // \ud83d\udea8 MANEJO DE ERRORES EN PROMISE.ALL()\n    log(`\u274c Error en ejecuci\xf3n paralela: ${error.nombre}`);\n    log(\'\ud83d\udca1 Promise.all() es "todo o nada": si UNA falla, TODAS fallan\');\n  }\n}\n\n// ============================================================================\n// \ud83c\udf10 EJEMPLO CON APIS REALES (CASO DE USO PR\xc1CTICO)\n// ============================================================================\n\n/**\n * \ud83c\udf10 Demuestra Promise.all() con peticiones HTTP reales\n *\n * CASO DE USO COM\xdaN:\n * - Cargar m\xfaltiples recursos de API simult\xe1neamente\n * - Combinar datos de diferentes endpoints\n * - Reducir tiempo de carga de aplicaciones\n */\nasync function ejemploAPIsReales() {\n  limpiarTodo();\n  log("\ud83c\udf10 EJEMPLO CON APIS REALES - Cargando datos de usuarios...");\n\n  try {\n    /**\n     * \ud83d\ude80 CARGAR M\xdaLTIPLES RECURSOS EN PARALELO\n     *\n     * En lugar de esperar a que cada fetch termine antes de empezar el siguiente,\n     * Promise.all() permite hacer todas las peticiones simult\xe1neamente\n     */\n    const [usuarios, posts, comentarios] = await Promise.all([\n      // \ud83d\udce5 Fetch 1: Lista de usuarios\n      fetch("<https://jsonplaceholder.typicode.com/users>").then((r) =>\n        r.json()\n      ),\n\n      // \ud83d\udce5 Fetch 2: Lista de posts (comienza AL MISMO TIEMPO que el fetch 1)\n      fetch("<https://jsonplaceholder.typicode.com/posts>").then((r) =>\n        r.json()\n      ),\n\n      // \ud83d\udce5 Fetch 3: Lista de comentarios (comienza AL MISMO TIEMPO que los otros)\n      fetch("<https://jsonplaceholder.typicode.com/comments>").then((r) =>\n        r.json()\n      ),\n    ]);\n\n    // \ud83d\udcca MOSTRAR RESULTADOS\n    log(`\u2705 Usuarios cargados: ${usuarios.length}`);\n    log(`\u2705 Posts cargados: ${posts.length}`);\n    log(`\u2705 Comentarios cargados: ${comentarios.length}`);\n    log("\ud83c\udf89 \xa1Todos los datos cargados en paralelo!");\n  } catch (error) {\n    log(`\u274c Error cargando datos: ${error.message}`);\n  }\n}\n\n// ============================================================================\n// \u26a0\ufe0f EJEMPLO: MANEJO DE ERRORES EN PROMISE.ALL()\n// ============================================================================\n\n/**\n * \u26a0\ufe0f Demuestra el comportamiento de Promise.all() cuando hay errores\n *\n * COMPORTAMIENTO CR\xcdTICO:\n * - Promise.all() es "TODO O NADA"\n * - Si UNA promesa falla, Promise.all() RECHAZA INMEDIATAMENTE\n * - Las otras promesas siguen ejecut\xe1ndose, pero sus resultados se ignoran\n */\nasync function ejemploConErrores() {\n  log("\\\\n\u26a0\ufe0f EJEMPLO: Promise.all() con errores");\n\n  try {\n    const resultados = await Promise.all([\n      simularTarea("Tarea 1", 500, 0.9), // 90% probabilidad de \xe9xito\n      simularTarea("Tarea 2", 800, 0.3), // 30% probabilidad de \xe9xito (probable falle)\n      simularTarea("Tarea 3", 600, 0.9), // 90% probabilidad de \xe9xito\n    ]);\n\n    log("\u2705 Todas las tareas completadas");\n  } catch (error) {\n    log(`\u274c Promise.all() fall\xf3 porque una tarea fall\xf3: ${error.nombre}`);\n    log(\'\ud83d\udca1 Promise.all() es "todo o nada": si UNA falla, TODAS fallan\');\n  }\n}\n\n// ============================================================================\n// \ud83d\udee1\ufe0f EJEMPLO: PROMISE.ALLSETTLED() (ALTERNATIVA M\xc1S TOLERANTE)\n// ============================================================================\n\n/**\n * \ud83d\udee1\ufe0f Demuestra Promise.allSettled() - alternativa cuando quieres todos los resultados\n *\n * DIFERENCIAS CON Promise.all():\n * - NO se rechaza si alguna promesa falla\n * - Espera a que TODAS las promesas terminen (\xe9xito o error)\n * - Retorna array de objetos con estado y valor/raz\xf3n\n * - \xdatil cuando quieres procesar resultados parciales\n */\nasync function ejemploAllSettled() {\n  log("\\\\n\ud83d\udee1\ufe0f EJEMPLO: Promise.allSettled() (no se detiene por errores)");\n\n  const resultados = await Promise.allSettled([\n    simularTarea("Tarea A", 400, 0.9),\n    simularTarea("Tarea B", 600, 0.2), // Esta probablemente falle\n    simularTarea("Tarea C", 500, 0.9),\n  ]);\n\n  // \ud83d\udcca PROCESAR TODOS LOS RESULTADOS (\xe9xitos y fallos)\n  resultados.forEach((resultado, index) => {\n    if (resultado.status === "fulfilled") {\n      // \u2705 Tarea completada exitosamente\n      log(`\u2705 Tarea ${index + 1}: ${resultado.value.estado}`);\n    } else {\n      // \u274c Tarea fall\xf3\n      log(`\u274c Tarea ${index + 1}: ${resultado.reason.estado}`);\n    }\n  });\n\n  log("\ud83c\udfaf Promise.allSettled() espera a TODAS, sin importar errores");\n}\n\n// ============================================================================\n// \ud83c\udfaf EJECUCI\xd3N AUTOM\xc1TICA DE EJEMPLOS ADICIONALES\n// ============================================================================\n\n/**\n * Programa la ejecuci\xf3n de ejemplos adicionales despu\xe9s de un tiempo\n * Esto permite ver diferentes comportamientos sin interacci\xf3n del usuario\n */\nsetTimeout(() => {\n  ejemploConErrores();\n  setTimeout(ejemploAllSettled, 2000);\n}, 5000);\n'})}),"\n",(0,r.jsx)(e.h2,{id:"-instrucciones-de-uso-2",children:"\ud83d\udccb Instrucciones de Uso"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Crea una carpeta"})," para el proyecto"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Guarda los 3 archivos"})," con estos nombres:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"index.html"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"styles.css"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"app.js"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsxs)(e.strong,{children:["Abre ",(0,r.jsx)(e.code,{children:"index.html"})]})," en tu navegador"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Prueba los diferentes m\xe9todos"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\ud83d\udc0c ",(0,r.jsx)(e.strong,{children:"Secuencial"}),": Tareas una despu\xe9s de otra (~3000ms)"]}),"\n",(0,r.jsxs)(e.li,{children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"Paralelo"}),": Todas las tareas al mismo tiempo (~1000ms)"]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83c\udf10 ",(0,r.jsx)(e.strong,{children:"APIs Reales"}),": Ejemplo pr\xe1ctico con fetch"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"-conceptos-explicados",children:"\ud83c\udfaf Conceptos Explicados"}),"\n",(0,r.jsx)(e.h3,{id:"promiseall---comportamiento-clave",children:(0,r.jsx)(e.strong,{children:"Promise.all() - Comportamiento Clave:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"Ejecuci\xf3n paralela"}),": Todas las promesas comienzan inmediatamente"]}),"\n",(0,r.jsxs)(e.li,{children:["\u23f1\ufe0f ",(0,r.jsx)(e.strong,{children:"Tiempo \xf3ptimo"}),": Termina cuando la promesa m\xe1s lenta termina"]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udea8 ",(0,r.jsx)(e.strong,{children:"Todo o nada"}),": Si una falla, todas fallan"]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udcca ",(0,r.jsx)(e.strong,{children:"Orden preservado"}),": Los resultados mantienen el orden del array"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"casos-de-uso-comunes",children:(0,r.jsx)(e.strong,{children:"Casos de Uso Comunes:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\ud83d\udce5 ",(0,r.jsx)(e.strong,{children:"Descargas m\xfaltiples"}),": Im\xe1genes, archivos, recursos"]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83c\udf10 ",(0,r.jsx)(e.strong,{children:"APIs m\xfaltiples"}),": Datos de diferentes endpoints"]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\uddc3\ufe0f ",(0,r.jsx)(e.strong,{children:"Operaciones de BD"}),": M\xfaltiples consultas independientes"]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Procesamiento"}),": Transformaciones paralelas de datos"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\xa1Este c\xf3digo te ayudar\xe1 a entender visualmente la potencia de ",(0,r.jsx)(e.code,{children:"Promise.all()"})," y cu\xe1ndo usarlo en tus proyectos! \ud83d\ude80"]}),"\n",(0,r.jsxs)(e.h2,{id:"-caracter\xedsticas-clave-de-promiseall",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Caracter\xedsticas Clave de Promise.all()"})]}),"\n",(0,r.jsx)(e.h3,{id:"ventajas",children:(0,r.jsx)(e.strong,{children:"Ventajas:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"M\xe1xima velocidad:"})," Ejecuta en paralelo"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sincronizaci\xf3n:"})," Espera a que TODAS terminen"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Orden preservado:"})," Los resultados mantienen el orden del array"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"cuando-usar-promiseall",children:"Cuando usar Promise.all()"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Cuando necesitas m\xfaltiples recursos que no dependen entre s\xed."}),"\n",(0,r.jsx)(e.li,{children:"Para mejorar performance ejecutando operaciones en paralelo."}),"\n",(0,r.jsx)(e.li,{children:"Cuando todas las operaciones son esenciales (todo o nada)"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"cuando-no-usar-prmise-all",children:"Cuando no usar Prmise All()"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Cuando las operaciones dependen unas de otras."}),"\n",(0,r.jsx)(e.li,{children:"Cuando quieres manejar errores de forma individual."}),"\n",(0,r.jsx)(e.li,{children:"Cuando algunas operaciones son opcionales."}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"alternativas",children:"Alternativas"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Promise.allSettled() - Cuando quieres todos los resultados"}),"\n",(0,r.jsx)(e.li,{children:"Promise.race() - Cuando solo necesitas el primer resultado"}),"\n",(0,r.jsx)(e.li,{children:"Ejecuci\xf3n secuencial - Cuando hay dependencias entre operacion"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"-alternativas-a-promiseall",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Alternativas a Promise.all()"})]}),"\n",(0,r.jsxs)(e.h3,{id:"promiseallsettled---no-se-detiene-por-errores-sintaxis-b\xe1sica",children:[(0,r.jsx)(e.strong,{children:"Promise.allSettled()"})," - No se detiene por errores. Sintaxis b\xe1sica."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'Promise.allSettled([promesa1, promesa2, promesa3, ...])\n  .then((resultados) => {\n    console.log(\'\u2705 Todas las promesas finalizaron:\', resultados);\n  });\n/*\ud83d\udc49 A diferencia de Promise.all():\n\nPromise.allSettled() NO rechaza si alguna promesa falla.\n\nEspera a que todas las promesas se resuelvan o se rechacen.\n\nDevuelve un array con objetos de estado por cada promesa:\n\n{ status: "fulfilled", value: ... } si se cumpli\xf3\n\n{ status: "rejected", reason: ... } si fall\xf3*/\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"promiserace---la-primera-que-termine-sintaxis-b\xe1sica",children:[(0,r.jsx)(e.strong,{children:"Promise.race()"})," - La primera que termine. Sintaxis b\xe1sica."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"Promise.race([promesa1, promesa2, promesa3, ...])\n  .then((valorGanador) => {\n    console.log('\u2705 Promesa que se resolvi\xf3/rechaz\xf3 primero:', valorGanador);\n  })\n  .catch((error) => {\n    console.error('\u274c La primera promesa en fallar fue:', error);\n  });\n/*\ud83d\udc49 Qu\xe9 hace Promise.race():\n\nRecibe como argumento un array (o iterable) de promesas.\n\nDevuelve una nueva promesa que se resuelve o se rechaza con el resultado de la primera promesa que termine (no necesariamente la que se resuelva primero, tambi\xe9n puede ser la que falle primero).\n\nEl resto de las promesas siguen ejecut\xe1ndose en segundo plano, pero su resultado ya no afecta al race.*/\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-usar-promiseall",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo usar Promise.all()?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Cuando necesitas ",(0,r.jsx)(e.strong,{children:"m\xfaltiples datos independientes"})]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando las tareas ",(0,r.jsx)(e.strong,{children:"no dependen"})," entre s\xed"]}),"\n",(0,r.jsxs)(e.li,{children:["Para ",(0,r.jsx)(e.strong,{children:"optimizar velocidad"})," (ejecuci\xf3n paralela)"]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando quieres ",(0,r.jsx)(e.strong,{children:"esperar a que todas terminen"})]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-no-usar-promiseall",children:["\u274c ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo NO usar Promise.all()?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Cuando las tareas ",(0,r.jsx)(e.strong,{children:"dependen"})," entre s\xed"]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando manejas ",(0,r.jsx)(e.strong,{children:"much\xedsimas"})," promesas (puede saturar)"]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando quieres ",(0,r.jsx)(e.strong,{children:"resultados parciales"})," aunque algunas fallen"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-casos-de-uso-reales",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Casos de Uso Reales:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Cargar ",(0,r.jsx)(e.strong,{children:"m\xfaltiples im\xe1genes"})," para una galer\xeda"]}),"\n",(0,r.jsxs)(e.li,{children:["Obtener ",(0,r.jsx)(e.strong,{children:"datos de varias APIs"})," al mismo tiempo"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Procesar archivos"})," en paralelo"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Validaciones m\xfaltiples"})," independientes"]}),"\n"]}),"\n",(0,r.jsxs)(e.h1,{id:"\ufe0f-qu\xe9-es-promiserace",children:["\ud83c\udfce\ufe0f ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es Promise.race()"})]}),"\n",(0,r.jsx)(e.h2,{id:"-qu\xe9-es-promiserace",children:"\ud83d\udcda \xbfQu\xe9 es Promise.race()?"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Promise.race()"})," es como una ",(0,r.jsx)(e.strong,{children:"carrera de promesas"}),": toma varias promesas y ",(0,r.jsx)(e.strong,{children:"gana la que termine primero"})," (ya sea con \xe9xito o con error)."]}),"\n",(0,r.jsx)(e.h3,{id:"-analog\xeda-simple",children:"\ud83d\udd0d Analog\xeda Simple:"}),"\n",(0,r.jsx)(e.p,{children:"Imagina que tienes 3 amigos buscando la respuesta a una pregunta:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Amigo 1"})," va a la biblioteca (tarda 5 minutos)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Amigo 2"})," busca en Google (tarda 2 minutos)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Amigo 3"})," pregunta a un experto (tarda 1 minuto)"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Promise.race()"})," te da la respuesta del ",(0,r.jsx)(e.strong,{children:"amigo 3"})," (el m\xe1s r\xe1pido) y ",(0,r.jsx)(e.strong,{children:"ignora a los dem\xe1s"}),"."]}),"\n",(0,r.jsx)(e.h3,{id:"-c\xf3digo-ejemplo-sencillo",children:"\ud83d\udcbb C\xd3DIGO EJEMPLO SENCILLO"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83c\udfce\ufe0f PROMISE.RACE() - EJEMPLO SUPER SENCILLO\n *\n * Promise.race() recibe un array de promesas y:\n * \u2705 GANA la primera promesa que termine (\xe9xito o error)\n * \u274c IGNORA todas las dem\xe1s promesas\n */\n\n// \ud83d\udd52 Funci\xf3n que simula una tarea con un tiempo espec\xedfico\nfunction tarea(nombre, tiempo) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(`\u2705 ${nombre} termin\xf3 en ${tiempo}ms`);\n    }, tiempo);\n  });\n}\n\n// \ud83d\udea8 Funci\xf3n que simula una tarea que FALLA\nfunction tareaQueFalla(nombre, tiempo) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(`\u274c ${nombre} FALL\xd3 en ${tiempo}ms`);\n    }, tiempo);\n  });\n}\n\n// \ud83c\udfaf EJEMPLO 1: CARRERA NORMAL (TODAS EXITOSAS)\nasync function carreraNormal() {\n  console.log("\ud83c\udfc1 INICIANDO CARRERA NORMAL...");\n\n  try {\n    const ganador = await Promise.race([\n      tarea("Descarga A", 3000), // Tarda 3 segundos\n      tarea("Descarga B", 1500), // Tarda 1.5 segundos  \u2190 \xa1ESTA GANA!\n      tarea("Descarga C", 2000), // Tarda 2 segundos\n    ]);\n\n    console.log("\ud83c\udfc6 GANADOR:", ganador);\n    console.log(\n      "\ud83d\udca1 Nota: Las otras descargas siguen ejecut\xe1ndose en segundo plano"\n    );\n  } catch (error) {\n    console.log("\u274c Error:", error);\n  }\n}\n\n// \ud83d\udea8 EJEMPLO 2: CARRERA CON ERROR (LA M\xc1S R\xc1PIDA FALLA)\nasync function carreraConError() {\n  console.log("\\\\n\ud83c\udfc1 INICIANDO CARRERA CON ERROR...");\n\n  try {\n    const ganador = await Promise.race([\n      tarea("Tarea Segura", 2000), // Tarda 2 segundos\n      tareaQueFalla("Tarea R\xe1pida", 500), // Falla en 0.5 segundos \u2190 \xa1ESTA GANA!\n      tarea("Tarea Lenta", 3000), // Tarda 3 segundos\n    ]);\n\n    console.log("\ud83c\udfc6 GANADOR:", ganador);\n  } catch (error) {\n    console.log("\ud83c\udfaf PRIMERA EN TERMINAR (pero con error):", error);\n    console.log(\n      "\ud83d\udca1 Promise.race() NO espera a las exitosas si una falla primero"\n    );\n  }\n}\n\n// \u23f1\ufe0f EJEMPLO 3: TIMEOUT AUTOM\xc1TICO (Caso de uso REAL)\nasync function conTimeout() {\n  console.log("\\\\n\u23f0 EJEMPLO REAL: TIMEOUT AUTOM\xc1TICO");\n\n  // Simulamos una descarga que podr\xeda tardar mucho\n  const descargaLenta = tarea("Descarga de archivo grande", 5000);\n\n  // Creamos un timeout de seguridad (3 segundos)\n  const timeout = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject("\u23f0 TIMEOUT: La descarga tard\xf3 demasiado");\n    }, 3000);\n  });\n\n  try {\n    const resultado = await Promise.race([\n      descargaLenta, // La descarga real\n      timeout, // El timeout de seguridad\n    ]);\n\n    console.log("\u2705 Descarga completada:", resultado);\n  } catch (error) {\n    console.log("\u274c", error);\n    console.log("\ud83d\udca1 El timeout \'gan\xf3 la carrera\' y cancel\xf3 la descarga lenta");\n  }\n}\n\n// \ud83c\udfae EJEMPLO 4: MULTIPLES FUENTES DE DATOS\nasync function multiplesFuentes() {\n  console.log("\\\\n\ud83c\udf10 EJEMPLO REAL: M\xdaLTIPLES FUENTES DE DATOS");\n\n  // Simulamos buscar el mismo dato en diferentes servidores\n  const servidorA = tarea("Servidor Principal", 800);\n  const servidorB = tarea("Servidor Secundario", 400); // \u2190 Este responde m\xe1s r\xe1pido\n  const servidorC = tarea("Servidor de Respaldo", 600);\n\n  try {\n    const dato = await Promise.race([servidorA, servidorB, servidorC]);\n\n    console.log("\ud83d\udce1 Dato obtenido del:", dato);\n    console.log("\ud83d\udca1 Usamos el servidor m\xe1s r\xe1pido, ignoramos los dem\xe1s");\n  } catch (error) {\n    console.log("\u274c Todos los servidores fallaron");\n  }\n}\n\n// \ud83d\ude80 EJECUTAR TODOS LOS EJEMPLOS\nasync function ejecutarEjemplos() {\n  console.log("\ud83c\udfaf ====================================");\n  console.log("\ud83c\udfce\ufe0f  DEMOSTRACI\xd3N DE PROMISE.RACE()");\n  console.log("\ud83c\udfaf ====================================\\\\n");\n\n  await carreraNormal();\n  await carreraConError();\n  await conTimeout();\n  await multiplesFuentes();\n\n  console.log("\\\\n\ud83c\udfaf ====================================");\n  console.log("\ud83d\udcda RESUMEN: CU\xc1NDO USAR PROMISE.RACE()");\n  console.log("\ud83c\udfaf ====================================");\n  console.log("1\ufe0f\u20e3 \u23f0 Timeouts autom\xe1ticos");\n  console.log("2\ufe0f\u20e3 \ud83c\udf10 M\xfaltiples fuentes de datos (usar la m\xe1s r\xe1pida)");\n  console.log("3\ufe0f\u20e3 \ud83d\udea8 Detecci\xf3n r\xe1pida de errores");\n  console.log("4\ufe0f\u20e3 \ud83c\udfaf Cualquier caso donde solo necesites el primer resultado");\n}\n\n// Ejecutar la demostraci\xf3n\nejecutarEjemplos();\n'})}),"\n",(0,r.jsx)(e.h3,{id:"-salida-esperada-del-c\xf3digo",children:"\ud83c\udfaf SALIDA ESPERADA DEL C\xd3DIGO:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"\ud83c\udfaf ====================================\n\ud83c\udfce\ufe0f  DEMOSTRACI\xd3N DE PROMISE.RACE()\n\ud83c\udfaf ====================================\n\n\ud83c\udfc1 INICIANDO CARRERA NORMAL...\n\ud83c\udfc6 GANADOR: \u2705 Descarga B termin\xf3 en 1500ms\n\ud83d\udca1 Nota: Las otras descargas siguen ejecut\xe1ndose en segundo plano\n\n\ud83c\udfc1 INICIANDO CARRERA CON ERROR...\n\ud83c\udfaf PRIMERA EN TERMINAR (pero con error): \u274c Tarea R\xe1pida FALL\xd3 en 500ms\n\ud83d\udca1 Promise.race() NO espera a las exitosas si una falla primero\n\n\u23f0 EJEMPLO REAL: TIMEOUT AUTOM\xc1TICO\n\u274c \u23f0 TIMEOUT: La descarga tard\xf3 demasiado\n\ud83d\udca1 El timeout 'gan\xf3 la carrera' y cancel\xf3 la descarga lenta\n\n\ud83c\udf10 EJEMPLO REAL: M\xdaLTIPLES FUENTES DE DATOS\n\ud83d\udce1 Dato obtenido del: \u2705 Servidor Secundario termin\xf3 en 400ms\n\ud83d\udca1 Usamos el servidor m\xe1s r\xe1pido, ignoramos los dem\xe1s\n\n\ud83c\udfaf ====================================\n\ud83d\udcda RESUMEN: CU\xc1NDO USAR PROMISE.RACE()\n\ud83c\udfaf ====================================\n1\ufe0f\u20e3 \u23f0 Timeouts autom\xe1ticos\n2\ufe0f\u20e3 \ud83c\udf10 M\xfaltiples fuentes de datos (usar la m\xe1s r\xe1pida)\n3\ufe0f\u20e3 \ud83d\udea8 Detecci\xf3n r\xe1pida de errores\n4\ufe0f\u20e3 \ud83c\udfaf Cualquier caso donde solo necesites el primer resultado\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"-explicaci\xf3n-visual",children:"\ud83d\udcd6 EXPLICACI\xd3N VISUAL"}),"\n",(0,r.jsx)(e.p,{children:"Imagina estas promesas corriendo:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"PROMESA A: \ud83d\udc22 ---[3 segundos]---\x3e \u2705\nPROMESA B: \ud83d\udc07 -[1.5 segundos]-> \u2705  \u2190 \xa1GANADORA!\nPROMESA C: \ud83d\udc15 --[2 segundos]---\x3e \u2705\n\nRESULTADO: Promise.race() = \ud83d\udc07 (la m\xe1s r\xe1pida)\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"-comparaci\xf3n-r\xe1pida",children:"\ud83c\udd9a COMPARACI\xd3N R\xc1PIDA"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"M\xe9todo"}),(0,r.jsx)(e.th,{children:"Comportamiento"}),(0,r.jsx)(e.th,{children:"Cuando usar"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"Promise.all()"})}),(0,r.jsxs)(e.td,{children:["Espera a ",(0,r.jsx)(e.strong,{children:"TODAS"})]}),(0,r.jsx)(e.td,{children:"Necesitas todos los resultados"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"Promise.race()"})}),(0,r.jsxs)(e.td,{children:["Toma al ",(0,r.jsx)(e.strong,{children:"PRIMERO"})]}),(0,r.jsx)(e.td,{children:"Solo necesitas el m\xe1s r\xe1pido"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"Promise.any()"})}),(0,r.jsxs)(e.td,{children:["Toma al ",(0,r.jsx)(e.strong,{children:"PRIMERO EXITOSO"})]}),(0,r.jsx)(e.td,{children:"Quieres el primer \xe9xito"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"Promise.allSettled()"})}),(0,r.jsxs)(e.td,{children:["Espera a ",(0,r.jsx)(e.strong,{children:"TODAS"})," (\xe9xito/error)"]}),(0,r.jsx)(e.td,{children:"Necesitas saber de todas"})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"-casos-de-uso-reales-1",children:"\ud83d\udca1 CASOS DE USO REALES"}),"\n",(0,r.jsxs)(e.h3,{id:"1-timeout-autom\xe1tico",children:["1. ",(0,r.jsx)(e.strong,{children:"Timeout Autom\xe1tico:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Si la API no responde en 5 segundos, muestra error\nconst respuesta = await Promise.race([\n  fetch("/api/datos"),\n  timeout(5000), // Timeout de 5 segundos\n]);\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"2-m\xfaltiples-servidores",children:["2. ",(0,r.jsx)(e.strong,{children:"M\xfaltiples Servidores:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Usar el servidor que responda m\xe1s r\xe1pido\nconst dato = await Promise.race([\n  servidorEuropeo.getDatos(),\n  servidorAmericano.getDatos(),\n  servidorAsiatico.getDatos(),\n]);\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"3-carga-con-fallback",children:["3. ",(0,r.jsx)(e.strong,{children:"Carga con Fallback:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Intentar cargar de cache primero, si no de red\nconst imagen = await Promise.race([\n  cargarDeCache(),\n  cargarDeRed().then(guardarEnCache),\n]);\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\xa1Promise.race() es tu aliado cuando la velocidad importa m\xe1s que tener todos los resultados!"})," \ud83c\udfce\ufe0f\ud83d\udca8"]}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-promiserace-en-acci\xf3n",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: Promise.race() en Acci\xf3n"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Promise.race() - La Carrera de Promesas</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83c\udfc1 Promise.race() - La Carrera de Promesas</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> Ejecuta m\xfaltiples promesas y\n        devuelve la <strong>PRIMERA</strong> que termine (\xe9xito o error).\n      </p>\n      <div class="explicacion">\n        <h3>\ud83c\udfaf \xbfEn qu\xe9 se diferencia de Promise.all()?</h3>\n        <p>\n          \u2705 <strong>Promise.all():</strong> Espera a que\n          <strong>TODAS</strong> terminen\n        </p>\n        <p>\n          \u2705 <strong>Promise.race():</strong> Solo espera a la\n          <strong>PRIMERA</strong> que termine\n        </p>\n      </div>\n      <h2>\ud83c\udfc3\u200d\u2642\ufe0f Pista de Carrera</h2>\n      <div class="pista">\n        <div class="participante rapido" id="corredor-rapido">\ud83d\ude80 R\xe1pido</div>\n        <div class="participante medio" id="corredor-medio">\ud83d\udc22 Medio</div>\n        <div class="participante lento" id="corredor-lento">\ud83d\udc0c Lento</div>\n        <div class="meta"></div>\n        <div class="meta-texto">META</div>\n      </div>\n      <div class="estadisticas">\n        <div class="estadistica">\n          <h3>\ud83d\ude80 Corredor R\xe1pido</h3>\n          <div class="tiempo" id="tiempo-rapido">-</div>\n          <p>500-800ms</p>\n        </div>\n        <div class="estadistica">\n          <h3>\ud83d\udc22 Corredor Medio</h3>\n          <div class="tiempo" id="tiempo-medio">-</div>\n          <p>1000-1500ms</p>\n        </div>\n        <div class="estadistica">\n          <h3>\ud83d\udc0c Corredor Lento</h3>\n          <div class="tiempo" id="tiempo-lento">-</div>\n          <p>2000-3000ms</p>\n        </div>\n      </div>\n      <div class="carrera">\n        <h3>\ud83c\udfaf Participantes de la Carrera</h3>\n        <div class="corredor esperando" id="participante-rapido">\n          <span>\ud83d\ude80 <strong>Promesa R\xe1pida</strong> (500-800ms)</span>\n          <span>\u23f3 Esperando inicio...</span>\n        </div>\n        <div class="corredor esperando" id="participante-medio">\n          <span>\ud83d\udc22 <strong>Promesa Media</strong> (1000-1500ms)</span>\n          <span>\u23f3 Esperando inicio...</span>\n        </div>\n        <div class="corredor esperando" id="participante-lento">\n          <span>\ud83d\udc0c <strong>Promesa Lenta</strong> (2000-3000ms)</span>\n          <span>\u23f3 Esperando inicio...</span>\n        </div>\n        <button class="btn-carrera" onclick="iniciarCarrera()">\n          \ud83c\udfc1 Iniciar Carrera\n        </button>\n        <button class="btn-timeout" onclick="ejemploTimeout()">\n          \u23f0 Ejemplo con Timeout\n        </button>\n        <button class="btn-carga" onclick="ejemploCargaImagenes()">\n          \ud83d\uddbc\ufe0f Carrera de Carga\n        </button>\n        <button class="btn-limpiar" onclick="limpiarTodo()">\n          \ud83d\uddd1\ufe0f Limpiar Todo\n        </button>\n      </div>\n      <h3>\ud83d\udcdd C\xf3digo de Ejemplo:</h3>\n      <div class="codigo">\n        // \ud83c\udfc1 Promise.race() - Solo importa el primero<br />\n        const ganadora = await Promise.race([<br />\n        &nbsp;&nbsp;promesaRapida(500), // \ud83d\ude80 Este probablemente gane<br />\n        &nbsp;&nbsp;promesaMedia(1000), // \ud83d\udc22 Este llega segundo<br />\n        &nbsp;&nbsp;promesaLenta(2000) // \ud83d\udc0c Este llega \xfaltimo<br />\n        ]);<br /><br />\n        console.log(\'\xa1Gan\xf3:\', ganadora);<br />\n        // Solo se ejecuta con el resultado del M\xc1S R\xc1PIDO\n      </div>\n      <h3>\ud83d\udcdf Consola de Ejecuci\xf3n:</h3>\n      <div class="consola" id="consola"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 1000px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.carrera {\n  border: 3px solid #007bff;\n  border-radius: 10px;\n  padding: 20px;\n  background: #f0f8ff;\n  margin: 20px 0;\n}\n.corredor {\n  background: white;\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 8px;\n  border-left: 5px solid;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n.esperando {\n  border-left-color: #6c757d;\n  background: #f8f9fa;\n}\n.corriendo {\n  border-left-color: #007bff;\n  background: #e7f3ff;\n}\n.ganador {\n  border-left-color: #28a745;\n  background: #d4edda;\n  transform: scale(1.02);\n}\n.perdedor {\n  border-left-color: #dc3545;\n  background: #f8d7da;\n  opacity: 0.7;\n}\n.fallo {\n  border-left-color: #ffc107;\n  background: #fff3cd;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n}\n.btn-carrera {\n  background: #007bff;\n  color: white;\n}\n.btn-timeout {\n  background: #28a745;\n  color: white;\n}\n.btn-carga {\n  background: #6f42c1;\n  color: white;\n}\n.btn-limpiar {\n  background: #6c757d;\n  color: white;\n}\n.pista {\n  height: 100px;\n  background: linear-gradient(90deg, #e9ecef 0%, #dee2e6 100%);\n  border-radius: 8px;\n  margin: 20px 0;\n  position: relative;\n  overflow: hidden;\n}\n.participante {\n  position: absolute;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  color: white;\n  transition: left 0.5s ease;\n  left: 10px;\n}\n.rapido {\n  background: #dc3545;\n  top: 10px;\n}\n.medio {\n  background: #007bff;\n  top: 50px;\n}\n.lento {\n  background: #28a745;\n  top: 90px;\n}\n.meta {\n  position: absolute;\n  right: 10px;\n  top: 0;\n  bottom: 0;\n  width: 3px;\n  background: #000;\n}\n.meta-texto {\n  position: absolute;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  writing-mode: vertical-rl;\n  font-weight: bold;\n}\n.estadisticas {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 15px;\n  margin: 20px 0;\n}\n.estadistica {\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n  background: #e9ecef;\n}\n.ganador-estadistica {\n  background: #d4edda;\n  border: 2px solid #28a745;\n}\n.tiempo {\n  font-size: 24px;\n  font-weight: bold;\n  color: #007bff;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n.consola {\n  background: #2d2d2d;\n  color: #00ff00;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n  min-height: 200px;\n  max-height: 400px;\n  overflow-y: auto;\n}\n.explicacion {\n  background: #fff3cd;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n  border-left: 4px solid #ffc107;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Elementos del DOM\nconst consola = document.getElementById("consola");\nconst corredorRapido = document.getElementById("corredor-rapido");\nconst corredorMedio = document.getElementById("corredor-medio");\nconst corredorLento = document.getElementById("corredor-lento");\n\nfunction log(mensaje) {\n  consola.innerHTML += `<div>${mensaje}</div>`;\n  consola.scrollTop = consola.scrollHeight;\n}\n\nfunction limpiarTodo() {\n  consola.innerHTML = "";\n  resetearParticipantes();\n  resetearPista();\n  resetearEstadisticas();\n}\n\nfunction resetearParticipantes() {\n  for (const id of ["rapido", "medio", "lento"]) {\n    const elemento = document.getElementById(`participante-${id}`);\n    elemento.className = "corredor esperando";\n    elemento.querySelector("span:last-child").textContent =\n      "\u23f3 Esperando inicio...";\n  }\n}\n\nfunction resetearPista() {\n  corredorRapido.style.left = "10px";\n  corredorMedio.style.left = "10px";\n  corredorLento.style.left = "10px";\n}\n\nfunction resetearEstadisticas() {\n  for (const id of ["rapido", "medio", "lento"]) {\n    document.getElementById(`tiempo-${id}`).textContent = "-";\n  }\n}\n\nfunction actualizarParticipante(id, estado, mensaje) {\n  const elemento = document.getElementById(`participante-${id}`);\n  elemento.className = `corredor ${estado}`;\n  elemento.querySelector("span:last-child").textContent = mensaje;\n}\n\nfunction actualizarPista(id, progreso) {\n  const elemento = document.getElementById(`corredor-${id}`);\n  const pistaWidth = document.querySelector(".pista").offsetWidth - 80;\n  elemento.style.left = `${10 + (progreso * pistaWidth) / 100}px`;\n}\n\nfunction actualizarTiempo(id, tiempo) {\n  document.getElementById(`tiempo-${id}`).textContent = `${tiempo}ms`;\n}\n\n// Funci\xf3n que simula una promesa con tiempo variable\nfunction crearPromesa(nombre, minTiempo, maxTiempo, probabilidadExito = 0.9) {\n  return new Promise((resolve, reject) => {\n    const tiempo = Math.random() * (maxTiempo - minTiempo) + minTiempo;\n    const inicio = Date.now();\n    let progreso = 0;\n\n    // Animaci\xf3n de progreso\n    const intervalo = setInterval(() => {\n      progreso += 100 / (tiempo / 100);\n      if (progreso >= 100) {\n        clearInterval(intervalo);\n        progreso = 100;\n      }\n      actualizarPista(nombre.toLowerCase(), progreso);\n    }, 100);\n\n    setTimeout(() => {\n      clearInterval(intervalo);\n      const tiempoReal = Date.now() - inicio;\n      actualizarTiempo(nombre.toLowerCase(), tiempoReal);\n\n      const exito = Math.random() < probabilidadExito;\n\n      if (exito) {\n        resolve({\n          nombre,\n          tiempo: tiempoReal,\n          mensaje: `\u2705 ${nombre} completado en ${tiempoReal}ms`,\n        });\n      } else {\n        reject({\n          nombre,\n          tiempo: tiempoReal,\n          mensaje: `\u274c ${nombre} fall\xf3 despu\xe9s de ${tiempoReal}ms`,\n        });\n      }\n    }, tiempo);\n  });\n}\n\n// 1\ufe0f\u20e3 CARRERA B\xc1SICA CON PROMISE.RACE()\nasync function iniciarCarrera() {\n  limpiarTodo();\n  log("\ud83c\udfc1 INICIANDO CARRERA CON PROMISE.RACE()");\n\n  // Preparar participantes\n  actualizarParticipante("rapido", "corriendo", "\ud83c\udfc3\u200d\u2642\ufe0f Corriendo...");\n  actualizarParticipante("medio", "corriendo", "\ud83c\udfc3\u200d\u2642\ufe0f Corriendo...");\n  actualizarParticipante("lento", "corriendo", "\ud83c\udfc3\u200d\u2642\ufe0f Corriendo...");\n\n  try {\n    // Promise.race() - Solo espera al M\xc1S R\xc1PIDO\n    const ganadora = await Promise.race([\n      crearPromesa("Rapido", 500, 800),\n      crearPromesa("Medio", 1000, 1500),\n      crearPromesa("Lento", 2000, 3000),\n    ]);\n\n    // Solo esto se ejecuta (con el ganador)\n    log(`\ud83c\udf89 \xa1GAN\xd3 ${ganadora.nombre.toUpperCase()}!`);\n    log(ganadora.mensaje);\n    actualizarParticipante(\n      ganadora.nombre.toLowerCase(),\n      "ganador",\n      `\ud83c\udfc6 \xa1GANADOR! ${ganadora.tiempo}ms`\n    );\n\n    // Marcar los dem\xe1s como perdedores\n    ["rapido", "medio", "lento"].forEach((id) => {\n      if (id !== ganadora.nombre.toLowerCase()) {\n        actualizarParticipante(\n          id,\n          "perdedor",\n          `\ud83d\ude1e Perdi\xf3 - ${document.getElementById(`tiempo-${id}`).textContent}`\n        );\n      }\n    });\n\n    log("\ud83d\udca1 Promise.race() solo devuelve el PRIMERO en terminar");\n  } catch (error) {\n    // Si el PRIMERO en terminar fue un error\n    log(`\ud83d\udca5 El primero en terminar fue un ERROR: ${error.nombre}`);\n    log(error.mensaje);\n    actualizarParticipante(\n      error.nombre.toLowerCase(),\n      "fallo",\n      `\ud83d\udca5 Fall\xf3 - ${error.tiempo}ms`\n    );\n  }\n}\n\n// 2\ufe0f\u20e3 EJEMPLO PR\xc1CTICO: TIMEOUT CON PROMISE.RACE()\nasync function ejemploTimeout() {\n  limpiarTodo();\n  log("\u23f0 EJEMPLO: TIMEOUT CON PROMISE.RACE()");\n\n  function conTimeout(promesa, tiempoLimite) {\n    const timeout = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`\u23f0 Timeout despu\xe9s de ${tiempoLimite}ms`));\n      }, tiempoLimite);\n    });\n\n    return Promise.race([promesa, timeout]);\n  }\n\n  // Simular una operaci\xf3n que puede tardar mucho\n  const operacionLenta = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve("\u2705 Operaci\xf3n lenta completada");\n    }, 3000); // Tarda 3 segundos\n  });\n\n  try {\n    // Timeout de 2 segundos\n    const resultado = await conTimeout(operacionLenta, 2000);\n    log(resultado);\n  } catch (error) {\n    log(`\u274c ${error.message}`);\n    log("\ud83d\udca1 El timeout gan\xf3 la carrera contra la operaci\xf3n lenta");\n  }\n}\n\n// 3\ufe0f\u20e3 EJEMPLO PR\xc1CTICO: CARRERA DE CARGA DE IM\xc1GENES\nasync function ejemploCargaImagenes() {\n  limpiarTodo();\n  log("\ud83d\uddbc\ufe0f EJEMPLO: CARRERA DE CARGA DE IM\xc1GENES");\n\n  // Simular carga de im\xe1genes desde diferentes servidores\n  function cargarImagen(servidor, tiempo) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(`\u2705 Imagen cargada desde ${servidor} en ${tiempo}ms`);\n      }, tiempo);\n    });\n  }\n\n  try {\n    // Intentar cargar desde m\xfaltiples servidores\n    const imagen = await Promise.race([\n      cargarImagen("Servidor Principal", 1500),\n      cargarImagen("Servidor Secundario", 800),\n      cargarImagen("CDN R\xe1pido", 400),\n      cargarImagen("Cache Local", 200),\n    ]);\n\n    log(imagen);\n    log("\ud83c\udfaf Usamos la imagen del servidor m\xe1s r\xe1pido");\n  } catch (error) {\n    log(`\u274c Error cargando imagen: ${error.message}`);\n  }\n}\n\n// 4\ufe0f\u20e3 EJEMPLO: PROMISE.RACE() CON ERRORES\nasync function ejemploConErrores() {\n  log("\\\\n\u26a0\ufe0f EJEMPLO: Promise.race() con posibles errores");\n\n  function tareaInestable(nombre, tiempo, probabilidadFallo) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (Math.random() < probabilidadFallo) {\n          reject(new Error(`\u274c ${nombre} fall\xf3`));\n        } else {\n          resolve(`\u2705 ${nombre} exitosa`);\n        }\n      }, tiempo);\n    });\n  }\n\n  try {\n    const resultado = await Promise.race([\n      tareaInestable("Servidor A", 500, 0.8), // Alto riesgo\n      tareaInestable("Servidor B", 800, 0.2), // Bajo riesgo\n      tareaInestable("Servidor C", 1000, 0.5), // Riesgo medio\n    ]);\n\n    log(resultado);\n  } catch (error) {\n    log(`\ud83d\udca5 El primero en terminar fue un error: ${error.message}`);\n    log(\n      "\u26a0\ufe0f Promise.race() no distingue entre \xe9xito y error - solo toma el primero"\n    );\n  }\n}\n\n// 5\ufe0f\u20e3 EJEMPLO: CANCELACI\xd3N CON PROMISE.RACE()\nasync function ejemploCancelacion() {\n  log("\\\\n\ud83d\udeab EJEMPLO: PATR\xd3N DE CANCELACI\xd3N");\n\n  let cancelar = false;\n\n  function operacionCancelable() {\n    return new Promise((resolve, reject) => {\n      const intervalo = setInterval(() => {\n        if (cancelar) {\n          clearInterval(intervalo);\n          reject(new Error("\ud83d\udeab Operaci\xf3n cancelada por el usuario"));\n        }\n      }, 100);\n\n      // Simular trabajo\n      setTimeout(() => {\n        clearInterval(intervalo);\n        resolve("\u2705 Operaci\xf3n completada");\n      }, 3000);\n    });\n  }\n\n  function crearBotonCancelacion() {\n    return new Promise((_, reject) => {\n      // Simular bot\xf3n de cancelaci\xf3n\n      setTimeout(() => {\n        if (Math.random() < 0.3) {\n          // 30% de probabilidad de cancelar\n          reject(new Error("\ud83d\uded1 Usuario cancel\xf3 la operaci\xf3n"));\n        }\n      }, 1500);\n    });\n  }\n\n  try {\n    const resultado = await Promise.race([\n      operacionCancelable(),\n      crearBotonCancelacion(),\n    ]);\n\n    log(resultado);\n  } catch (error) {\n    log(error.message);\n  }\n}\n\n// Ejecutar ejemplos adicionales\nsetTimeout(() => {\n  ejemploConErrores();\n  setTimeout(ejemploCancelacion, 3000);\n}, 8000);\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-caracter\xedsticas-clave-de-promiserace",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Caracter\xedsticas Clave de Promise.race()"})]}),"\n",(0,r.jsxs)(e.h3,{id:"-comportamiento",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Comportamiento:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Primero en terminar gana:"})," No importa si es \xe9xito o error"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Ignora las dem\xe1s:"})," Las otras promesas siguen ejecut\xe1ndose en segundo plano"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"No espera:"})," Devuelve inmediatamente cuando una termina"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"\ufe0f-casos-especiales",children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Casos Especiales:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Si el PRIMERO es un error, Promise.race() falla\nPromise.race([\n  Promise.reject("\u274c Error inmediato"),\n  Promise.resolve("\u2705 \xc9xito r\xe1pido"),\n]).catch((error) => {\n  console.log(error); // "\u274c Error inmediato"\n});\n\n// Si el PRIMERO es \xe9xito, Promise.race() tiene \xe9xito\nPromise.race([\n  Promise.resolve("\u2705 \xc9xito inmediato"),\n  Promise.reject("\u274c Error lento"),\n]).then((resultado) => {\n  console.log(resultado); // "\u2705 \xc9xito inmediato"\n});\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-usar-promiserace",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo usar Promise.race()?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Para implementar ",(0,r.jsx)(e.strong,{children:"timeouts"})]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando tienes ",(0,r.jsx)(e.strong,{children:"m\xfaltiples fuentes"})," y quieres la m\xe1s r\xe1pida"]}),"\n",(0,r.jsxs)(e.li,{children:["Para ",(0,r.jsx)(e.strong,{children:"cancelar operaciones"})," por acci\xf3n del usuario"]}),"\n",(0,r.jsxs)(e.li,{children:["En ",(0,r.jsx)(e.strong,{children:"carreras de servicios"})," (\xbfqu\xe9 servidor responde primero?)"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-no-usar-promiserace",children:["\u274c ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo NO usar Promise.race()?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Cuando necesitas ",(0,r.jsx)(e.strong,{children:"todos los resultados"})]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando las operaciones ",(0,r.jsx)(e.strong,{children:"dependen"})," entre s\xed"]}),"\n",(0,r.jsxs)(e.li,{children:["Cuando quieres ",(0,r.jsx)(e.strong,{children:"procesar"})," todos los datos"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-diferencias-con-promiseall",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Diferencias con Promise.all():"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Promise.all():"})," Espera a TODAS (como un equipo)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Promise.race():"})," Solo la PRIMERA (como una carrera)"]}),"\n"]}),"\n",(0,r.jsxs)(e.h1,{id:"-qu\xe9-es-abortcontroller",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es AbortController?"})]}),"\n",(0,r.jsx)(e.p,{children:"Imagina que est\xe1s descargando un archivo grande:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-5",children:["\ud83d\udce5 ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sin AbortController:"})," Una vez que empiezas la descarga, no puedes cancelarla"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con AbortController:"})," Tienes un ",(0,r.jsx)(e.strong,{children:"bot\xf3n de cancelar"})," que puedes presionar en cualquier momento"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-7",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"AbortController"})," es un objeto que permite ",(0,r.jsx)(e.strong,{children:"cancelar"})," operaciones asincr\xf3nicas como ",(0,r.jsx)(e.code,{children:"fetch"}),", ",(0,r.jsx)(e.code,{children:"Promise"}),", y otras cuando ya no las necesitas."]}),"\n",(0,r.jsxs)(e.h2,{id:"-sintaxis-b\xe1sica-de-abortcontroller",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Sintaxis B\xe1sica de AbortController"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ======================================================\n// \ud83d\uded1 1. Crear un AbortController\n// ======================================================\n\n// Creamos una nueva instancia de AbortController.\n// Este objeto nos dar\xe1 un "control remoto" para cancelar operaciones.\nconst controller = new AbortController();\n\n// Obtenemos la se\xf1al (signal) asociada al controller.\n// Esta signal es la que pasaremos a las operaciones que queremos poder abortar.\nconst signal = controller.signal;\n\n// ======================================================\n// \ud83d\udce1 2. Pasar la signal a operaciones que la soporten (como fetch)\n// ======================================================\n\n// Aqu\xed hacemos una petici\xf3n fetch, pero le pasamos la opci\xf3n { signal }.\n// Esto permite que esta petici\xf3n pueda ser cancelada m\xe1s adelante.\nfetch("/api/datos", { signal })\n  .then((response) => {\n    // Si no se cancel\xf3, procesamos la respuesta normalmente.\n    return response.json();\n  })\n  .then((datos) => {\n    console.log("Datos recibidos:", datos);\n  })\n  .catch((error) => {\n    // Si la operaci\xf3n fue abortada, fetch lanza un error con name === \'AbortError\'\n    if (error.name === "AbortError") {\n      console.log("\u2705 Fetch cancelado por el usuario");\n    } else {\n      // Si no fue cancelada, mostramos el error real.\n      console.error("\u274c Otro error:", error);\n    }\n  });\n\n// ======================================================\n// \ud83e\udded 3. Cancelar cuando quieras (por ejemplo, al hacer clic en un bot\xf3n)\n// ======================================================\n\n// Escuchamos un click en un bot\xf3n con id="cancelar"\ndocument.getElementById("cancelar").addEventListener("click", () => {\n  // Al llamar a abort(), todas las operaciones asociadas a esta signal\n  // lanzar\xe1n un AbortError y dejar\xe1n de ejecutarse inmediatamente.\n  controller.abort();\n  // \u26a0\ufe0f Nota: Esto no "revierte" lo que ya se haya hecho, pero s\xed corta la espera de fetch.\n});\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-abortcontroller-en-acci\xf3n",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: AbortController en Acci\xf3n"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>AbortController - Cancelar Operaciones Asincr\xf3nicas</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83d\udeab AbortController - Cancelar Operaciones Asincr\xf3nicas</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> Un "bot\xf3n de cancelar" para\n        operaciones que tardan mucho tiempo.\n      </p>\n      <div class="explicacion">\n        <h3>\ud83c\udfaf \xbfPor qu\xe9 necesitamos AbortController?</h3>\n        <p>\n          \u2705 <strong>Mejora la experiencia de usuario:</strong> Los usuarios\n          pueden cancelar operaciones lentas\n        </p>\n        <p>\n          \u2705 <strong>Ahorra recursos:</strong> Detiene peticiones innecesarias\n          al servidor\n        </p>\n        <p>\n          \u2705 <strong>Control preciso:</strong> Cancela exactamente lo que\n          quieres, cuando quieres\n        </p>\n      </div>\n      \x3c!-- DEMO 1: FETCH CON ABORT CONTROLLER --\x3e\n      <div class="demo-section fetch-demo">\n        <h2>\ud83c\udf10 Demo 1: Cancelar Petici\xf3n Fetch</h2>\n        <p>Simula una petici\xf3n HTTP lenta que puedes cancelar</p>\n        <div class="estado esperando" id="estado-fetch">\n          \u23f3 Esperando para iniciar fetch...\n        </div>\n        <div class="progreso">\n          <div class="barra-progreso" id="progreso-fetch"></div>\n        </div>\n        <div class="controles">\n          <button class="btn-iniciar" onclick="iniciarFetch()">\n            \ud83c\udf10 Iniciar Fetch Lento\n          </button>\n          <button\n            class="btn-cancelar"\n            id="btn-cancelar-fetch"\n            disabled\n            onclick="cancelarFetch()"\n          >\n            \ud83d\udeab Cancelar Fetch\n          </button>\n        </div>\n        <div class="codigo">\n          // 1. Crear AbortController<br />\n          const controller = new AbortController();<br />\n          const signal = controller.signal;<br /><br />\n          // 2. Usar en fetch<br />\n          fetch(url, { signal })<br />\n          &nbsp;&nbsp;.then(response => response.json())<br />\n          &nbsp;&nbsp;.then(data => console.log(data))<br />\n          &nbsp;&nbsp;.catch(error => {<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;if (error.name === \'AbortError\') {<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\'Fetch cancelado\');<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;}<br />\n          &nbsp;&nbsp;});<br /><br />\n          // 3. Cancelar cuando quieras<br />\n          controller.abort();\n        </div>\n      </div>\n      \x3c!-- DEMO 2: TIMEOUT PERSONALIZADO CON ABORT --\x3e\n      <div class="demo-section timeout-demo">\n        <h2>\u23f0 Demo 2: Timeout con Cancelaci\xf3n</h2>\n        <p>Crea un timeout que puedes cancelar antes de que termine</p>\n        <div class="estado esperando" id="estado-timeout">\n          \u23f3 Esperando para iniciar timeout...\n        </div>\n        <div class="progreso">\n          <div class="barra-progreso" id="progreso-timeout"></div>\n        </div>\n        <div class="controles">\n          <button class="btn-iniciar" onclick="iniciarTimeout()">\n            \u23f0 Iniciar Timeout (5s)\n          </button>\n          <button\n            class="btn-cancelar"\n            id="btn-cancelar-timeout"\n            disabled\n            onclick="cancelarTimeout()"\n          >\n            \ud83d\udeab Cancelar Timeout\n          </button>\n        </div>\n      </div>\n      \x3c!-- DEMO 3: M\xdaLTIPLES DESCARGAS --\x3e\n      <div class="demo-section custom-demo">\n        <h2>\ud83d\udce5 Demo 3: M\xfaltiples Descargas con Cancelaci\xf3n Individual</h2>\n        <p>Gestiona varias operaciones y cancela las que quieras</p>\n        <div class="controles">\n          <button class="btn-iniciar" onclick="agregarDescarga()">\n            \ud83d\udce5 Agregar Nueva Descarga\n          </button>\n          <button class="btn-cancelar" onclick="cancelarTodasDescargas()">\n            \ud83d\uddd1\ufe0f Cancelar Todas\n          </button>\n        </div>\n        <div class="lista-descargas" id="lista-descargas">\n          \x3c!-- Las descargas se agregar\xe1n aqu\xed din\xe1micamente --\x3e\n        </div>\n      </div>\n      <button class="btn-ejemplo" onclick="ejemploAvanzado()">\n        \ud83d\ude80 Ejemplo Avanzado: B\xfasqueda en Tiempo Real\n      </button>\n      <button class="btn-ejemplo" onclick="limpiarTodo()">\n        \ud83d\uddd1\ufe0f Limpiar Todo\n      </button>\n      <h3>\ud83d\udcdf Consola de Ejecuci\xf3n:</h3>\n      <div class="consola" id="consola"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 1000px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.demo-section {\n  border: 3px solid;\n  border-radius: 10px;\n  padding: 20px;\n  margin: 20px 0;\n}\n.fetch-demo {\n  border-color: #007bff;\n  background: #f0f8ff;\n}\n.timeout-demo {\n  border-color: #28a745;\n  background: #f0fff4;\n}\n.custom-demo {\n  border-color: #6f42c1;\n  background: #f8f0ff;\n}\n.estado {\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 8px;\n  text-align: center;\n  font-weight: bold;\n  transition: all 0.3s ease;\n}\n.esperando {\n  background: #fff3cd;\n  color: #856404;\n  border: 2px dashed #ffc107;\n}\n.procesando {\n  background: #d1ecf1;\n  color: #0c5460;\n  border: 2px solid #17a2b8;\n}\n.completado {\n  background: #d4edda;\n  color: #155724;\n  border: 2px solid #28a745;\n}\n.cancelado {\n  background: #f8d7da;\n  color: #721c24;\n  border: 2px solid #dc3545;\n}\n.error {\n  background: #fff3cd;\n  color: #856404;\n  border: 2px solid #ffc107;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  transition: all 0.3s ease;\n}\n.btn-iniciar {\n  background: #28a745;\n  color: white;\n}\n.btn-iniciar:hover {\n  background: #218838;\n}\n.btn-cancelar {\n  background: #dc3545;\n  color: white;\n}\n.btn-cancelar:hover {\n  background: #c82333;\n}\n.btn-cancelar:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n.btn-ejemplo {\n  background: #007bff;\n  color: white;\n}\n.progreso {\n  height: 20px;\n  background: #e9ecef;\n  border-radius: 10px;\n  margin: 15px 0;\n  overflow: hidden;\n}\n.barra-progreso {\n  height: 100%;\n  background: linear-gradient(90deg, #007bff, #00ff88);\n  transition: width 0.3s ease;\n  width: 0%;\n}\n.controles {\n  display: flex;\n  gap: 10px;\n  margin: 15px 0;\n  flex-wrap: wrap;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n.consola {\n  background: #2d2d2d;\n  color: #00ff00;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n  min-height: 200px;\n  max-height: 400px;\n  overflow-y: auto;\n}\n.explicacion {\n  background: #e9ecef;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n}\n.lista-descargas {\n  margin: 15px 0;\n}\n.descarga-item {\n  background: white;\n  padding: 10px;\n  margin: 8px 0;\n  border-radius: 5px;\n  border-left: 4px solid;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.descarga-pendiente {\n  border-left-color: #ffc107;\n}\n.descarga-activa {\n  border-left-color: #007bff;\n}\n.descarga-completada {\n  border-left-color: #28a745;\n}\n.descarga-cancelada {\n  border-left-color: #dc3545;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Elementos del DOM\nconst consola = document.getElementById("consola");\n\n// Estado global\nlet fetchController = null;\nlet timeoutController = null;\nlet descargasActivas = new Map(); // Map para gestionar m\xfaltiples descargas\n\nfunction log(mensaje) {\n  consola.innerHTML += `<div>${mensaje}</div>`;\n  consola.scrollTop = consola.scrollHeight;\n}\n\nfunction limpiarTodo() {\n  consola.innerHTML = "";\n  resetearFetch();\n  resetearTimeout();\n  cancelarTodasDescargas();\n}\n\n// ==================== DEMO 1: FETCH ====================\nfunction resetearFetch() {\n  document.getElementById("estado-fetch").className = "estado esperando";\n  document.getElementById("estado-fetch").textContent =\n    "\u23f3 Esperando para iniciar fetch...";\n  document.getElementById("progreso-fetch").style.width = "0%";\n  document.getElementById("btn-cancelar-fetch").disabled = true;\n\n  if (fetchController) {\n    fetchController.abort();\n    fetchController = null;\n  }\n}\n\nasync function iniciarFetch() {\n  resetearFetch();\n\n  // Crear nuevo AbortController\n  fetchController = new AbortController();\n  const signal = fetchController.signal;\n\n  // Actualizar UI\n  document.getElementById("estado-fetch").className = "estado procesando";\n  document.getElementById("estado-fetch").textContent =\n    "\ud83d\udd04 Haciendo petici\xf3n fetch...";\n  document.getElementById("btn-cancelar-fetch").disabled = false;\n\n  log("\ud83c\udf10 Iniciando petici\xf3n fetch lenta...");\n\n  try {\n    // Simular una petici\xf3n fetch lenta con progreso\n    let progreso = 0;\n    const intervalo = setInterval(() => {\n      if (signal.aborted) {\n        clearInterval(intervalo);\n        return;\n      }\n\n      progreso += 10;\n      document.getElementById("progreso-fetch").style.width = `${progreso}%`;\n\n      if (progreso >= 100) {\n        clearInterval(intervalo);\n      }\n    }, 200);\n\n    // Simular fetch con AbortController\n    await new Promise((resolve, reject) => {\n      // Verificar si ya fue abortado\n      if (signal.aborted) {\n        reject(new DOMException("Abortado", "AbortError"));\n        return;\n      }\n\n      // Escuchar el evento abort\n      signal.addEventListener("abort", () => {\n        reject(new DOMException("Abortado", "AbortError"));\n      });\n\n      // Simular trabajo que toma tiempo\n      setTimeout(() => {\n        if (signal.aborted) {\n          reject(new DOMException("Abortado", "AbortError"));\n        } else {\n          resolve("\u2705 Datos recibidos correctamente");\n        }\n      }, 2000);\n    });\n\n    // \xc9xito\n    document.getElementById("estado-fetch").className = "estado completado";\n    document.getElementById("estado-fetch").textContent =\n      "\u2705 Fetch completado exitosamente";\n    document.getElementById("progreso-fetch").style.width = "100%";\n    document.getElementById("btn-cancelar-fetch").disabled = true;\n\n    log("\u2705 Fetch completado: Datos recibidos");\n  } catch (error) {\n    if (error.name === "AbortError") {\n      document.getElementById("estado-fetch").className = "estado cancelado";\n      document.getElementById("estado-fetch").textContent =\n        "\ud83d\udeab Fetch cancelado por el usuario";\n      log("\ud83d\udeab Fetch cancelado por el usuario");\n    } else {\n      document.getElementById("estado-fetch").className = "estado error";\n      document.getElementById(\n        "estado-fetch"\n      ).textContent = `\u274c Error: ${error.message}`;\n      log(`\u274c Error en fetch: ${error.message}`);\n    }\n    document.getElementById("btn-cancelar-fetch").disabled = true;\n  }\n}\n\nfunction cancelarFetch() {\n  if (fetchController) {\n    fetchController.abort();\n    fetchController = null;\n  }\n}\n\n// ==================== DEMO 2: TIMEOUT ====================\nfunction resetearTimeout() {\n  document.getElementById("estado-timeout").className = "estado esperando";\n  document.getElementById("estado-timeout").textContent =\n    "\u23f3 Esperando para iniciar timeout...";\n  document.getElementById("progreso-timeout").style.width = "0%";\n  document.getElementById("btn-cancelar-timeout").disabled = true;\n\n  if (timeoutController) {\n    timeoutController.abort();\n    timeoutController = null;\n  }\n}\n\nasync function iniciarTimeout() {\n  resetearTimeout();\n\n  // Crear nuevo AbortController\n  timeoutController = new AbortController();\n  const signal = timeoutController.signal;\n\n  // Actualizar UI\n  document.getElementById("estado-timeout").className = "estado procesando";\n  document.getElementById("estado-timeout").textContent =\n    "\u23f0 Timeout en progreso (5 segundos)...";\n  document.getElementById("btn-cancelar-timeout").disabled = false;\n\n  log("\u23f0 Iniciando timeout de 5 segundos...");\n\n  try {\n    // Timeout con AbortController\n    await new Promise((resolve, reject) => {\n      if (signal.aborted) {\n        reject(new DOMException("Abortado", "AbortError"));\n        return;\n      }\n\n      const timeoutId = setTimeout(() => {\n        resolve("\u2705 Timeout completado");\n      }, 5000);\n\n      // Animaci\xf3n de progreso\n      let progreso = 0;\n      const intervalo = setInterval(() => {\n        if (signal.aborted) {\n          clearInterval(intervalo);\n          clearTimeout(timeoutId);\n          return;\n        }\n\n        progreso += 1;\n        document.getElementById(\n          "progreso-timeout"\n        ).style.width = `${progreso}%`;\n\n        if (progreso >= 100) {\n          clearInterval(intervalo);\n        }\n      }, 50);\n\n      // Escuchar cancelaci\xf3n\n      signal.addEventListener("abort", () => {\n        clearInterval(intervalo);\n        clearTimeout(timeoutId);\n        reject(new DOMException("Abortado", "AbortError"));\n      });\n    });\n\n    // \xc9xito\n    document.getElementById("estado-timeout").className = "estado completado";\n    document.getElementById("estado-timeout").textContent =\n      "\u2705 Timeout completado";\n    document.getElementById("btn-cancelar-timeout").disabled = true;\n\n    log("\u2705 Timeout completado despu\xe9s de 5 segundos");\n  } catch (error) {\n    if (error.name === "AbortError") {\n      document.getElementById("estado-timeout").className = "estado cancelado";\n      document.getElementById("estado-timeout").textContent =\n        "\ud83d\udeab Timeout cancelado";\n      log("\ud83d\udeab Timeout cancelado por el usuario");\n    } else {\n      document.getElementById("estado-timeout").className = "estado error";\n      document.getElementById(\n        "estado-timeout"\n      ).textContent = `\u274c Error: ${error.message}`;\n      log(`\u274c Error en timeout: ${error.message}`);\n    }\n    document.getElementById("btn-cancelar-timeout").disabled = true;\n  }\n}\n\nfunction cancelarTimeout() {\n  if (timeoutController) {\n    timeoutController.abort();\n    timeoutController = null;\n  }\n}\n\n// ==================== DEMO 3: M\xdaLTIPLES DESCARGAS ====================\nfunction agregarDescarga() {\n  const id = Date.now().toString();\n  const nombre = `Descarga ${Object.keys(descargasActivas).length + 1}`;\n\n  // Crear elemento UI\n  const descargaItem = document.createElement("div");\n  descargaItem.className = "descarga-item descarga-pendiente";\n  descargaItem.id = `descarga-${id}`;\n  descargaItem.innerHTML = `\n                <span>${nombre}</span>\n                <div>\n                    <span id="estado-${id}">\u23f3 Pendiente</span>\n                    <button onclick="iniciarDescarga(\'${id}\', \'${nombre}\')" style="margin-left: 10px;">\u25b6\ufe0f Iniciar</button>\n                    <button onclick="cancelarDescarga(\'${id}\')" style="margin-left: 5px;">\ud83d\udeab Cancelar</button>\n                </div>\n            `;\n\n  document.getElementById("lista-descargas").appendChild(descargaItem);\n\n  // Inicializar en el mapa\n  descargasActivas.set(id, {\n    controller: null,\n    nombre: nombre,\n    estado: "pendiente",\n  });\n\n  log(`\ud83d\udce5 Nueva descarga agregada: ${nombre}`);\n}\n\nasync function iniciarDescarga(id, nombre) {\n  const datos = descargasActivas.get(id);\n  if (!datos || datos.estado === "activa") return;\n\n  // Crear controller\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  // Actualizar estado\n  datos.controller = controller;\n  datos.estado = "activa";\n  descargasActivas.set(id, datos);\n\n  // Actualizar UI\n  const elemento = document.getElementById(`descarga-${id}`);\n  elemento.className = "descarga-item descarga-activa";\n  document.getElementById(`estado-${id}`).textContent = "\ud83d\udd04 Descargando...";\n\n  log(`\ud83d\udd04 Iniciando descarga: ${nombre}`);\n\n  try {\n    // Simular descarga\n    await new Promise((resolve, reject) => {\n      if (signal.aborted) {\n        reject(new DOMException("Abortado", "AbortError"));\n        return;\n      }\n\n      const tiempo = 3000 + Math.random() * 4000; // 3-7 segundos\n      const inicio = Date.now();\n\n      const intervalo = setInterval(() => {\n        if (signal.aborted) {\n          clearInterval(intervalo);\n          return;\n        }\n\n        const transcurrido = Date.now() - inicio;\n        const progreso = Math.min(100, (transcurrido / tiempo) * 100);\n\n        if (progreso >= 100) {\n          clearInterval(intervalo);\n          resolve();\n        }\n      }, 100);\n\n      signal.addEventListener("abort", () => {\n        clearInterval(intervalo);\n        reject(new DOMException("Abortado", "AbortError"));\n      });\n\n      setTimeout(() => {\n        if (!signal.aborted) {\n          clearInterval(intervalo);\n          resolve();\n        }\n      }, tiempo);\n    });\n\n    // \xc9xito\n    elemento.className = "descarga-item descarga-completada";\n    document.getElementById(`estado-${id}`).textContent = "\u2705 Completada";\n    datos.estado = "completada";\n    descargasActivas.set(id, datos);\n\n    log(`\u2705 Descarga completada: ${nombre}`);\n  } catch (error) {\n    if (error.name === "AbortError") {\n      elemento.className = "descarga-item descarga-cancelada";\n      document.getElementById(`estado-${id}`).textContent = "\ud83d\udeab Cancelada";\n      datos.estado = "cancelada";\n      descargasActivas.set(id, datos);\n\n      log(`\ud83d\udeab Descarga cancelada: ${nombre}`);\n    }\n  }\n}\n\nfunction cancelarDescarga(id) {\n  const datos = descargasActivas.get(id);\n  if (datos && datos.controller) {\n    datos.controller.abort();\n    log(`\ud83d\uddd1\ufe0f Descarga cancelada manualmente: ${datos.nombre}`);\n  }\n}\n\nfunction cancelarTodasDescargas() {\n  let canceladas = 0;\n\n  descargasActivas.forEach((datos, id) => {\n    if (datos.controller && datos.estado === "activa") {\n      datos.controller.abort();\n      canceladas++;\n    }\n  });\n\n  log(`\ud83d\uddd1\ufe0f Canceladas ${canceladas} descargas activas`);\n}\n\n// ==================== EJEMPLO AVANZADO ====================\nasync function ejemploAvanzado() {\n  log("\\\\n\ud83d\ude80 EJEMPLO AVANZADO: B\xfasqueda en Tiempo Real con Cancelaci\xf3n");\n\n  let busquedaController = null;\n\n  async function buscar(termino) {\n    // Cancelar b\xfasqueda anterior si existe\n    if (busquedaController) {\n      busquedaController.abort();\n      log(`\ud83d\udeab Cancelando b\xfasqueda anterior: "${terminoAnterior}"`);\n    }\n\n    // Nueva b\xfasqueda\n    busquedaController = new AbortController();\n    const signal = busquedaController.signal;\n\n    log(`\ud83d\udd0d Buscando: "${termino}"...`);\n\n    try {\n      // Simular b\xfasqueda en API\n      await new Promise((resolve, reject) => {\n        if (signal.aborted) {\n          reject(new DOMException("Abortado", "AbortError"));\n          return;\n        }\n\n        const tiempo = 800 + Math.random() * 1200;\n\n        signal.addEventListener("abort", () => {\n          reject(new DOMException("Abortado", "AbortError"));\n        });\n\n        setTimeout(() => {\n          if (!signal.aborted) {\n            resolve();\n          }\n        }, tiempo);\n      });\n\n      // Simular resultados\n      const resultados = [\n        `Resultado 1 para "${termino}"`,\n        `Resultado 2 para "${termino}"`,\n        `Resultado 3 para "${termino}"`,\n      ];\n\n      log(\n        `\u2705 B\xfasqueda completada para "${termino}": ${resultados.length} resultados`\n      );\n      return resultados;\n    } catch (error) {\n      if (error.name === "AbortError") {\n        log(`\ud83d\udeab B\xfasqueda cancelada para: "${termino}"`);\n      }\n      throw error;\n    }\n  }\n\n  // Simular usuario escribiendo r\xe1pido\n  const terminos = ["jav", "javas", "javasc", "javascript"];\n  let terminoAnterior = "";\n\n  for (const termino of terminos) {\n    terminoAnterior = termino;\n    await new Promise((resolve) => setTimeout(resolve, 300)); // Simular delay entre tecleo\n    await buscar(termino).catch(() => {}); // Ignorar errores de cancelaci\xf3n\n  }\n\n  log("\ud83d\udca1 AbortController evita que se muestren resultados obsoletos");\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-caracter\xedsticas-clave-de-abortcontroller",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Caracter\xedsticas Clave de AbortController"})]}),"\n",(0,r.jsxs)(e.h3,{id:"-ventajas-1",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ventajas:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Cancelaci\xf3n precisa:"})," Cancela exactamente lo que quieres"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"M\xfaltiples operaciones:"})," Un controller puede cancelar muchas operaciones"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Reutilizable:"})," Puedes crear nuevos controllers despu\xe9s de abortar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Est\xe1ndar moderno:"})," Soporte nativo en navegadores modernos"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"\ufe0f-operaciones-que-soportan-abortcontroller",children:["\ud83d\udee0\ufe0f ",(0,r.jsx)(e.strong,{children:"Operaciones que Soportan AbortController"})]}),"\n",(0,r.jsx)(e.h3,{id:"1-fetch-api",children:(0,r.jsx)(e.strong,{children:"1. Fetch API"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// =========================================================\n// \ud83d\uded1 1. Crear un AbortController\n// =========================================================\n\n// Creamos una instancia de AbortController.\n// Este objeto nos permitir\xe1 "controlar" la petici\xf3n y cancelarla cuando queramos.\nconst controller = new AbortController();\n\n// =========================================================\n// \ud83d\udce1 2. Realizar la petici\xf3n fetch con signal de cancelaci\xf3n\n// =========================================================\n\n// Realizamos una petici\xf3n fetch al endpoint /api/data.\n// Importante: pasamos la opci\xf3n { signal: controller.signal }.\n// Esta "signal" es como un canal de comunicaci\xf3n entre el fetch y el controller,\n// que permite interrumpir la operaci\xf3n de red desde fuera.\nfetch("/api/data", { signal: controller.signal })\n// Si la petici\xf3n NO fue cancelada, y el servidor responde correctamente,\n// convertimos la respuesta en JSON normalmente.\n.then((response) => response.json())\n\n// =========================================================\n// \ud83e\uddef 3. Capturar errores, incluido AbortError\n// =========================================================\n.catch((error) => {\n// Cuando abortamos la petici\xf3n, fetch lanza un error de tipo AbortError.\nif ([error.name](http://error.name/) === "AbortError") {\n// Detectamos espec\xedficamente ese tipo de error\n// para no tratarlo como un "fallo real" del servidor o la red.\nconsole.log("Fetch cancelado");\n} else {\n// Otros errores (de red, servidor, etc.) se pueden manejar aqu\xed tambi\xe9n.\nconsole.error("Otro error:", error);\n}\n});\n\n// =========================================================\n// \ud83e\udde8 4. Cancelar la petici\xf3n manualmente\n// =========================================================\n\n// Al llamar a controller.abort(),\n// inmediatamente se:\n//   - interrumpe la petici\xf3n en curso,\n//   - se lanza un AbortError en el fetch,\n//   - se ejecuta el bloque .catch() de arriba.\ncontroller.abort();\n\n/*Lo que realmente est\xe1 pasando aqu\xed:\n\nAbortController crea un controlador.\n\ncontroller.signal se pasa al fetch, vinculando esa petici\xf3n a este controlador.\n\nCuando llamas a controller.abort(), la se\xf1al emite un \u201cevento de aborto\u201d.\n\nfetch detecta ese evento y rechaza la promesa inmediatamente con un AbortError.\n\nEl .catch() intercepta ese error y te permite manejarlo de forma controlada.*/\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2-promesas-personalizadas",children:(0,r.jsx)(e.strong,{children:"2. Promesas Personalizadas"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83e\udded operacionCancelable(signal)\n * Esta funci\xf3n devuelve una promesa que representa una operaci\xf3n as\xedncrona\n * que **puede ser cancelada externamente** mediante una se\xf1al AbortSignal.\n *\n * @param {AbortSignal} signal - La se\xf1al de cancelaci\xf3n asociada a un AbortController\n * @returns {Promise<string>} - Promesa que se resuelve o rechaza seg\xfan lo que ocurra\n */\nfunction operacionCancelable(signal) {\n  return new Promise((resolve, reject) => {\n    // =========================================================\n    // \ud83d\uded1 1. Verificar si ya estaba cancelado antes de empezar\n    // =========================================================\n    // Si alguien llam\xf3 a controller.abort() antes de que esta funci\xf3n empezara,\n    // signal.aborted ser\xe1 true, por lo que rechazamos inmediatamente.\n    if (signal.aborted) {\n      // DOMException es el tipo de error que fetch usa internamente\n      // cuando se aborta. Usarlo aqu\xed mantiene consistencia.\n      reject(new DOMException("Abortado", "AbortError"));\n      return; // Importante: detenemos la ejecuci\xf3n para no continuar.\n    }\n\n    // =========================================================\n    // \u23f3 2. Simular una operaci\xf3n as\xedncrona\n    // =========================================================\n    // Aqu\xed usamos setTimeout como ejemplo.\n    // Supongamos que nuestra operaci\xf3n tarda 5 segundos en completarse.\n    const timeoutId = setTimeout(() => {\n      // Si no se cancela, resolvemos la promesa con \xe9xito.\n      resolve("Operaci\xf3n completada");\n    }, 5000);\n\n    // =========================================================\n    // \ud83e\udde8 3. Escuchar si la operaci\xf3n es cancelada\n    // =========================================================\n    // Asociamos un listener a la signal.\n    // Si alguien llama a controller.abort() en cualquier momento,\n    // se ejecutar\xe1 esta funci\xf3n.\n    signal.addEventListener("abort", () => {\n      // Cancelamos el timeout, ya que la operaci\xf3n fue abortada.\n      clearTimeout(timeoutId);\n\n      // Rechazamos la promesa con un DOMException AbortError,\n      // igual que hace fetch al ser cancelado.\n      reject(new DOMException("Abortado", "AbortError"));\n    });\n  });\n}\n\n/*Qu\xe9 est\xe1 pasando aqu\xed paso a paso:\n\nsignal.aborted \u2014 Si la se\xf1al ya est\xe1 en estado \u201cabortado\u201d antes de empezar,\nrechazamos la promesa al instante para no ejecutar nada innecesario.\n\nSimulamos una operaci\xf3n as\xedncrona con setTimeout de 5 segundos.\nEsto representa cualquier tarea: consulta a base de datos, c\xe1lculo costoso, etc.\n\nEscuchamos el evento abort en la se\xf1al.\nSi alguien llama a controller.abort(), cancelamos el timeout y rechazamos la promesa.\nAl igual que en fetch, usamos:\n--- reject(new DOMException("Abortado", "AbortError")) ---\n\nEsto nos permite manejar la cancelaci\xf3n de forma consistente en toda la app.*/\n'})}),"\n",(0,r.jsx)(e.h3,{id:"3-event-listeners",children:(0,r.jsx)(e.strong,{children:"3. Event Listeners"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// =======================================================\n// \ud83d\uded1 1. Crear un AbortController\n// =======================================================\n\n// Creamos una instancia del AbortController.\n// Esta instancia nos permitir\xe1 cancelar o "abortar" operaciones asociadas a su se\xf1al.\nconst controller = new AbortController();\n\n// =======================================================\n// \ud83d\uddb1\ufe0f 2. Agregar un event listener con signal\n// =======================================================\n// En lugar de a\xf1adir un listener tradicional que tendr\xedamos que eliminar manualmente,\n// podemos asociarle la signal de nuestro controller.\n//\n// \ud83d\udc49 Nota importante:\n// Desde ECMAScript 2023, addEventListener soporta la opci\xf3n { signal },\n// lo que permite vincular el listener a un AbortController.\nelement.addEventListener(\n  "click",\n  () => {\n    console.log("Click!");\n  },\n  { signal: controller.signal } // \ud83d\udc48 Aqu\xed est\xe1 la clave\n);\n\n// =======================================================\n// \ud83e\udde8 3. Remover autom\xe1ticamente el listener\n// =======================================================\n// Cuando llamamos a controller.abort(), cualquier listener que\n// haya sido agregado con esa signal se eliminar\xe1 autom\xe1ticamente,\n// igual que si hubi\xe9semos hecho element.removeEventListener(...).\ncontroller.abort();\n\n/*Qu\xe9 est\xe1 pasando aqu\xed realmente:\n\nAbortController crea una se\xf1al (controller.signal) que podemos vincular a diferentes operaciones.\n\nAl pasar { signal: controller.signal } como tercera opci\xf3n de addEventListener, estamos diciendo:\n\n\u201cEste event listener debe desaparecer si la signal se aborta\u201d.\n\nCuando ejecutamos controller.abort():\n\nSe dispara el evento abort en la signal.\n\nTodos los listeners vinculados con esa signal se eliminan autom\xe1ticamente.\n\nNo se ejecuta m\xe1s el callback asociado a ese evento.\n\n\ud83d\udc49 Esto es equivalente a:\n\nelement.removeEventListener("click", handler);\n\n\u2026pero m\xe1s limpio, especialmente cuando tienes m\xfaltiples listeners que quieres limpiar de golpe.*/\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-casos-de-uso-pr\xe1cticos",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Casos de Uso Pr\xe1cticos"})]}),"\n",(0,r.jsx)(e.h3,{id:"1-b\xfasqueda-en-tiempo-real",children:(0,r.jsx)(e.strong,{children:"1. B\xfasqueda en Tiempo Real"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// =============================================================\n// \ud83e\udded B\xdaSQUEDA EN TIEMPO REAL con AbortController\n// =============================================================\n\n// Referencia al input de b\xfasqueda y a un contenedor de resultados\nconst inputBusqueda = document.getElementById("buscador");\nconst contenedorResultados = document.getElementById("resultados");\n\n// Variable para almacenar el controlador actual\n// De esta manera podremos abortar la petici\xf3n anterior si el usuario escribe de nuevo\nlet controllerActual = null;\n\n/**\n * \ud83e\uddf0 funci\xf3n buscarEnAPI(query)\n * Lanza una petici\xf3n fetch para buscar datos seg\xfan el texto ingresado.\n * Usa AbortController para cancelar la petici\xf3n anterior si existe.\n */\nasync function buscarEnAPI(query) {\n  // Si ya existe un controlador anterior, lo abortamos\n  // Esto cancela la petici\xf3n que a\xfan no haya terminado\n  if (controllerActual) {\n    controllerActual.abort();\n  }\n\n  // Creamos un nuevo controlador para esta b\xfasqueda\n  controllerActual = new AbortController();\n  const signal = controllerActual.signal;\n\n  try {\n    // Simulamos una llamada a un endpoint de b\xfasqueda\n    // \u26a0\ufe0f Nota: Aqu\xed podr\xedas poner tu URL real, por ejemplo:\n    // `https://miapi.com/search?q=${encodeURIComponent(query)}`\n    const response = await fetch(`/api/buscar?q=${encodeURIComponent(query)}`, {\n      signal,\n    });\n\n    // Si la petici\xf3n fue abortada, esta l\xednea no se ejecuta\n    const datos = await response.json();\n\n    // Mostramos resultados\n    mostrarResultados(datos);\n  } catch (error) {\n    // Si la petici\xf3n fue abortada, capturamos el AbortError\n    if (error.name === "AbortError") {\n      console.log(\n        "\u23f3 Petici\xf3n anterior cancelada (usuario sigui\xf3 escribiendo)"\n      );\n    } else {\n      console.error("\u274c Error en la b\xfasqueda:", error);\n    }\n  }\n}\n\n/**\n * \ud83e\udded mostrarResultados(datos)\n * Limpia el contenedor y pinta la lista de resultados.\n */\nfunction mostrarResultados(datos) {\n  contenedorResultados.innerHTML = "";\n\n  if (!datos || datos.length === 0) {\n    contenedorResultados.innerHTML = "<p>No hay resultados</p>";\n    return;\n  }\n\n  const ul = document.createElement("ul");\n  datos.forEach((item) => {\n    const li = document.createElement("li");\n    li.textContent = item.nombre;\n    ul.appendChild(li);\n  });\n  contenedorResultados.appendChild(ul);\n}\n\n/**\n * \u2328\ufe0f Evento de input\n * Cada vez que el usuario escribe, lanzamos una nueva b\xfasqueda\n * (y cancelamos la anterior si no ha terminado).\n */\ninputBusqueda.addEventListener("input", (e) => {\n  const query = e.target.value.trim();\n\n  // Si no hay texto, limpiamos resultados y abortamos b\xfasqueda\n  if (query === "") {\n    contenedorResultados.innerHTML = "";\n    if (controllerActual) controllerActual.abort();\n    return;\n  }\n\n  buscarEnAPI(query);\n});\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-explicaci\xf3n-del-flujo",children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"Explicaci\xf3n del flujo"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["El usuario escribe en el ",(0,r.jsx)(e.code,{children:"input"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Se dispara el evento ",(0,r.jsx)(e.code,{children:"input"})," y se llama a ",(0,r.jsx)(e.code,{children:"buscarEnAPI(query)"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Antes de lanzar la nueva b\xfasqueda:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["si hab\xeda una anterior en curso \u2192 ",(0,r.jsx)(e.strong,{children:"se cancela"})," con ",(0,r.jsx)(e.code,{children:"controller.abort()"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Se crea un nuevo ",(0,r.jsx)(e.code,{children:"AbortController"})," para la nueva b\xfasqueda."]}),"\n",(0,r.jsxs)(e.li,{children:["Si la b\xfasqueda anterior termina despu\xe9s de la nueva\u2026 ",(0,r.jsx)(e.strong,{children:"no pasa nada"}),", porque ya fue cancelada."]}),"\n",(0,r.jsxs)(e.li,{children:["La UI siempre muestra solo el resultado de ",(0,r.jsx)(e.strong,{children:"la \xfaltima b\xfasqueda"}),"."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"-simulaci\xf3n-de-api-opcional",children:"\ud83e\uddea Simulaci\xf3n de API (opcional)"}),"\n",(0,r.jsxs)(e.p,{children:["Si quieres probar este c\xf3digo sin un backend real, puedes simular ",(0,r.jsx)(e.code,{children:"/api/buscar"})," con algo as\xed en tu servidor local o incluso en el mismo front:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Este bloque NO va en producci\xf3n, solo sirve para simular la respuesta\nif (!window.fetchInterceptado) {\n  const originalFetch = window.fetch;\n  window.fetch = (url, options) => {\n    if (url.startsWith("/api/buscar")) {\n      const params = new URLSearchParams(url.split("?")[1]);\n      const q = params.get("q").toLowerCase();\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const fakeResults = [\n            "Manzana",\n            "Mango",\n            "Mandarina",\n            "Mel\xf3n",\n            "Melocot\xf3n",\n            "Pera",\n            "Pi\xf1a",\n          ]\n            .filter((fruta) => fruta.toLowerCase().includes(q))\n            .map((nombre) => ({ nombre }));\n          resolve(new Response(JSON.stringify(fakeResults), { status: 200 }));\n        }, 1000); // simulamos 1 segundo de latencia\n      });\n    }\n    return originalFetch(url, options);\n  };\n  window.fetchInterceptado = true;\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"-ventajas-de-este-patr\xf3n",children:"\ud83d\udccc Ventajas de este patr\xf3n"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u26a1 ",(0,r.jsx)(e.strong,{children:"Evita resultados desactualizados"}),": solo la \xfaltima b\xfasqueda cuenta."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83e\uddfc ",(0,r.jsx)(e.strong,{children:"Limpio y eficiente"}),": no necesitas manejar IDs de peticiones ni flags manualmente."]}),"\n",(0,r.jsx)(e.li,{children:"\ud83c\udf10 Ideal para autocompletados, buscadores y filtros din\xe1micos."}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Resumen de la l\xf3gica clave:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"if (controllerActual) controllerActual.abort(); // Cancela la b\xfasqueda anterior\ncontrollerActual = new AbortController(); // Nuevo controlador para la nueva b\xfasqueda\nfetch(url, { signal: controllerActual.signal });\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-usar-abortcontroller",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo usar AbortController?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"B\xfasquedas en tiempo real:"})," Cancelar b\xfasquedas anteriores"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Descargas largas:"})," Permitir al usuario cancelar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Timeouts personalizados:"})," Que se puedan cancelar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"M\xfaltiples peticiones:"})," Cancelar todas de una vez"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-limitaciones",children:["\u274c ",(0,r.jsx)(e.strong,{children:"Limitaciones:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"No retrocompatible:"})," Navegadores antiguos no lo soportan"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Solo operaciones compatibles:"})," No funciona con todo"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Una vez usado:"})," Un controller no se puede reutilizar despu\xe9s de abort()"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-mejores-pr\xe1cticas-1",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Mejores Pr\xe1cticas:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsxs)(e.strong,{children:["Verificar ",(0,r.jsx)(e.code,{children:"signal.aborted"})]})," antes de empezar operaciones costosas"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Siempre limpiar recursos"})," (timeouts, intervals) en el evento abort"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Usar nuevos controllers"})," para nuevas operaciones despu\xe9s de cancelar"]}),"\n"]}),"\n",(0,r.jsxs)(e.h1,{id:"-qu\xe9-es-el-retry-autom\xe1tico",children:["\ud83e\udde9 ",(0,r.jsx)(e.strong,{children:"\xbfQu\xe9 es el Retry Autom\xe1tico?"})]}),"\n",(0,r.jsx)(e.p,{children:"Imagina que intentas llamar por tel\xe9fono:"}),"\n",(0,r.jsxs)(e.h3,{id:"-ejemplo-del-mundo-real-6",children:["\ud83d\udcde ",(0,r.jsx)(e.strong,{children:"Ejemplo del mundo real:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sin retry:"})," Llamas una vez, si no contestan, te rindes"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con retry:"})," Llamas, si no contestan, esperas 5 segundos y vuelves a llamar... hasta 3 veces"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-traducci\xf3n-a-javascript-8",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Traducci\xf3n a JavaScript:"})]}),"\n",(0,r.jsxs)(e.p,{children:["El ",(0,r.jsx)(e.strong,{children:"retry autom\xe1tico"})," es un patr\xf3n que reintenta una operaci\xf3n fallida autom\xe1ticamente, usualmente con un delay entre intentos."]}),"\n",(0,r.jsxs)(e.h2,{id:"-patr\xf3n-b\xe1sico-de-retry",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Patr\xf3n B\xe1sico de Retry"})]}),"\n",(0,r.jsxs)(e.p,{children:["Este patr\xf3n es ",(0,r.jsx)(e.strong,{children:"muy com\xfan y poderoso en entornos reales"}),", sobre todo cuando trabajas con APIs inestables o servicios externos que pueden fallar de forma intermitente."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udd01 conReintentos(operacion, maxReintentos)\n *\n * Ejecuta una operaci\xf3n as\xedncrona con reintentos autom\xe1ticos si falla.\n *\n * @param {Function} operacion - Funci\xf3n as\xedncrona que se ejecutar\xe1 en cada intento.\n * @param {number} maxReintentos - N\xfamero m\xe1ximo de veces que se intentar\xe1 (por defecto: 3).\n * @returns {*} El resultado de la operaci\xf3n si finalmente tiene \xe9xito.\n * @throws {Error} Si todos los intentos fallan, lanza un error final.\n */\nasync function conReintentos(operacion, maxReintentos = 3) {\n  // \ud83d\udd01 Repetimos la operaci\xf3n hasta alcanzar el m\xe1ximo de reintentos\n  for (let intento = 1; intento <= maxReintentos; intento++) {\n    try {\n      // =============================================================\n      // \ud83e\udded 1. Mostrar en consola el n\xfamero de intento actual\n      // =============================================================\n      // Esto es muy \xfatil para depurar o monitorear cu\xe1ntos intentos se realizan.\n      console.log(`\ud83d\udd04 Intento ${intento} de ${maxReintentos}`);\n\n      // =============================================================\n      // \ud83e\udded 2. Ejecutar la operaci\xf3n as\xedncrona\n      // =============================================================\n      // `operacion` es una funci\xf3n que devuelve una promesa (por ejemplo, un fetch).\n      // Si se resuelve correctamente, guardamos el resultado.\n      const resultado = await operacion();\n\n      // =============================================================\n      // \u2705 3. Si llega aqu\xed, la operaci\xf3n fue exitosa\n      // =============================================================\n      // Salimos del bucle inmediatamente devolviendo el resultado.\n      return resultado;\n    } catch (error) {\n      // =============================================================\n      // \u274c 4. Si ocurre un error, capturamos la excepci\xf3n\n      // =============================================================\n      console.log(`\u274c Intento ${intento} fall\xf3: ${error.message}`);\n\n      // =============================================================\n      // \ud83e\udde8 5. Si es el \xfaltimo intento, relanzamos el error\n      // =============================================================\n      // Esto asegura que si no hay m\xe1s reintentos, la funci\xf3n falle de forma controlada.\n      if (intento === maxReintentos) {\n        throw new Error(`Todos los intentos fallaron: ${error.message}`);\n      }\n\n      // =============================================================\n      // \u23f3 6. Si a\xfan quedan intentos, esperamos un poco antes de volver a intentar\n      // =============================================================\n      // Esto evita saturar el servidor con reintentos inmediatos.\n      // Aqu\xed aplicamos una espera proporcional al n\xfamero de intento (backoff lineal).\n      const tiempoEspera = 1000 * intento; // ej. 1s, 2s, 3s...\n      console.log(\n        `\u23f3 Esperando ${tiempoEspera}ms antes del siguiente intento...`\n      );\n\n      // Usamos una peque\xf1a promesa con setTimeout para "pausar" el bucle\n      await new Promise((resolve) => setTimeout(resolve, tiempoEspera));\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-qu\xe9-hace-este-patr\xf3n-paso-a-paso",children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"Qu\xe9 hace este patr\xf3n paso a paso"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Ejecuta la operaci\xf3n"})," as\xedncrona dentro de un bucle ",(0,r.jsx)(e.code,{children:"for"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Si ",(0,r.jsx)(e.strong,{children:"tiene \xe9xito"})," \u2192 sale del bucle y devuelve el resultado."]}),"\n",(0,r.jsxs)(e.li,{children:["Si ",(0,r.jsx)(e.strong,{children:"falla"}),", captura el error y:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["si es el ",(0,r.jsx)(e.strong,{children:"\xfaltimo intento"}),", lanza el error final;"]}),"\n",(0,r.jsxs)(e.li,{children:["si ",(0,r.jsx)(e.strong,{children:"quedan intentos"}),", espera un tiempo y vuelve a intentarlo."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["El tiempo de espera ",(0,r.jsx)(e.strong,{children:"crece con cada intento"})," (1s, 2s, 3s, \u2026) para no saturar al servidor."]}),"\n",(0,r.jsx)(e.li,{children:"Si todos los intentos fallan \u2192 la funci\xf3n lanza un error."}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ejemplo pr\xe1ctico: uso con fetch"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'async function fetchDatos() {\n  const respuesta = await fetch("/api/datos");\n  if (!respuesta.ok) {\n    throw new Error(`Error HTTP ${respuesta.status}`);\n  }\n  return await respuesta.json();\n}\n\n// Llamamos a la funci\xf3n con reintentos\nconReintentos(fetchDatos, 3)\n  .then((datos) => console.log("\u2705 Datos recibidos:", datos))\n  .catch((err) =>\n    console.error("\u274c No se pudo completar la operaci\xf3n:", err.message)\n  );\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udccc Si ",(0,r.jsx)(e.code,{children:"/api/datos"})," falla la primera vez pero responde bien en el segundo intento, se completar\xe1 con \xe9xito."]}),"\n",(0,r.jsx)(e.p,{children:"Si falla las 3 veces, se lanza un error final con un mensaje claro."}),"\n",(0,r.jsxs)(e.p,{children:["\ud83e\udded ",(0,r.jsx)(e.strong,{children:"Variantes comunes que se usan en producci\xf3n:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backoff exponencial:"})," tiempo de espera = ",(0,r.jsx)(e.code,{children:"2^(intento - 1) * 1000"})," ms."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Jitter:"})," agregar una peque\xf1a variaci\xf3n aleatoria para evitar picos de carga simult\xe1neos."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AbortController:"})," para cancelar reintentos si el usuario cierra la vista o se agota un timeout general."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"L\xedmites din\xe1micos:"})," ajustar maxReintentos seg\xfan la criticidad de la operaci\xf3n."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Resumen final del patr\xf3n de retry"}),":"]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Paso"}),(0,r.jsx)(e.th,{children:"Qu\xe9 hace"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"try/catch"})," en un bucle ",(0,r.jsx)(e.code,{children:"for"})]}),(0,r.jsx)(e.td,{children:"Reintenta varias veces de forma controlada"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"await operacion()"})}),(0,r.jsx)(e.td,{children:"Ejecuta la tarea as\xedncrona"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"if (\xfaltimo intento)"})}),(0,r.jsx)(e.td,{children:"Lanza error final si no hay \xe9xito"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"await setTimeout(...)"})}),(0,r.jsx)(e.td,{children:"Espera entre intentos (backoff)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Devuelve resultado"}),(0,r.jsx)(e.td,{children:"Si al menos un intento es exitoso"})]})]})]}),"\n",(0,r.jsxs)(e.h2,{id:"-demo-interactivo-retry-autom\xe1tico-en-acci\xf3n",children:["\ud83d\udcbb ",(0,r.jsx)(e.strong,{children:"Demo Interactivo: Retry Autom\xe1tico en Acci\xf3n"})]}),"\n",(0,r.jsx)(e.p,{children:"Aqu\xed tienes un ejemplo completo que puedes probar:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Retry Autom\xe1tico - Reintentos Inteligentes</title>\n  </head>\n  <body>\n    <div class="container">\n      <h1>\ud83d\udd04 Retry Autom\xe1tico - Reintentos Inteligentes</h1>\n      <p>\n        <strong>Definici\xf3n sencilla:</strong> Reintentar autom\xe1ticamente una\n        operaci\xf3n fallida, usualmente con delays entre intentos.\n      </p>\n      <div class="configuracion">\n        <h3>\u2699\ufe0f Configuraci\xf3n de Reintentos</h3>\n        <div class="config-item">\n          <label for="maxReintentos">M\xe1x. Reintentos:</label>\n          <input type="number" id="maxReintentos" value="3" min="1" max="10" />\n        </div>\n        <div class="config-item">\n          <label for="delayBase">Delay Base (ms):</label>\n          <input\n            type="number"\n            id="delayBase"\n            value="1000"\n            min="100"\n            max="10000"\n          />\n        </div>\n        <div class="config-item">\n          <label>Estrategia de Backoff:</label>\n          <select id="estrategiaBackoff">\n            <option value="lineal">Lineal (constante)</option>\n            <option value="exponencial">Exponencial (creciente)</option>\n            <option value="fibonacci">Fibonacci (progresivo)</option>\n          </select>\n        </div>\n      </div>\n      \x3c!-- DEMO 1: RETRY B\xc1SICO --\x3e\n      <div class="demo-section basico-demo">\n        <h2>\ud83d\udd04 Demo 1: Retry B\xe1sico</h2>\n        <p>\n          Reintenta una operaci\xf3n inestable hasta que tenga \xe9xito o se agoten\n          los intentos\n        </p>\n        <div class="progreso">\n          <div class="barra-progreso" id="progreso-basico"></div>\n        </div>\n        <div id="intentos-basico">\n          \x3c!-- Los intentos se agregar\xe1n aqu\xed din\xe1micamente --\x3e\n        </div>\n        <div class="controles">\n          <button class="btn-iniciar" onclick="iniciarRetryBasico()">\n            \ud83d\udd04 Iniciar Retry B\xe1sico\n          </button>\n          <button class="btn-iniciar" onclick="iniciarRetryConFallos()">\n            \ud83d\udca5 Probar con M\xe1s Fallos\n          </button>\n        </div>\n        <div class="codigo">\n          // PATR\xd3N B\xc1SICO DE RETRY<br />\n          async function conReintentos(operacion, maxReintentos) {<br />\n          &nbsp;&nbsp;for (let intento = 1; intento <= maxReintentos; intento++)\n          {<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;try {<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return await operacion();<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;} catch (error) {<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (intento === maxReintentos)\n          throw error;<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await delay(1000 * intento); //\n          Backoff lineal<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;}<br />\n          &nbsp;&nbsp;}<br />\n          }\n        </div>\n      </div>\n      \x3c!-- DEMO 2: RETRY AVANZADO CON ESTRATEGIAS --\x3e\n      <div class="demo-section avanzado-demo">\n        <h2>\ud83c\udfaf Demo 2: Retry Avanzado con Estrategias</h2>\n        <p>Diferentes estrategias de backoff para optimizar los reintentos</p>\n\n        <div class="estadisticas">\n          <div class="estadistica">\n            <h3>\ud83d\udcca Total de Intentos</h3>\n            <div class="tiempo" id="total-intentos">0</div>\n          </div>\n          <div class="estadistica">\n            <h3>\u23f1\ufe0f Tiempo Total</h3>\n            <div class="tiempo" id="tiempo-total">0ms</div>\n          </div>\n          <div class="estadistica">\n            <h3>\ud83c\udfaf Resultado</h3>\n            <div class="tiempo" id="resultado-final">-</div>\n          </div>\n        </div>\n        <div id="intentos-avanzado">\n          \x3c!-- Los intentos avanzados se agregar\xe1n aqu\xed --\x3e\n        </div>\n        <div class="controles">\n          <button class="btn-estrategia" onclick="probarTodasEstrategias()">\n            \ud83e\uddea Probar Todas las Estrategias\n          </button>\n          <button class="btn-api" onclick="ejemploAPIReal()">\n            \ud83c\udf10 Ejemplo con API Real\n          </button>\n        </div>\n      </div>\n      \x3c!-- DEMO 3: ESTRATEGIAS DE BACKOFF --\x3e\n      <div class="demo-section estrategias-demo">\n        <h2>\ud83d\udcc8 Demo 3: Estrategias de Backoff</h2>\n        <p>Compara diferentes estrategias de espera entre reintentos</p>\n        <div id="comparacion-estrategias">\n          \x3c!-- Comparaci\xf3n de estrategias --\x3e\n        </div>\n        <div class="controles">\n          <button class="btn-estrategia" onclick="compararEstrategias()">\n            \ud83d\udcca Comparar Estrategias\n          </button>\n        </div>\n      </div>\n      <button class="btn-limpiar" onclick="limpiarTodo()">\n        \ud83d\uddd1\ufe0f Limpiar Todo\n      </button>\n      <h3>\ud83d\udcdf Consola de Ejecuci\xf3n:</h3>\n      <div class="consola" id="consola"></div>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:'body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background: #f5f5f5;\n}\n.container {\n  max-width: 1000px;\n  margin: 0 auto;\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n.demo-section {\n  border: 3px solid;\n  border-radius: 10px;\n  padding: 20px;\n  margin: 20px 0;\n}\n.basico-demo {\n  border-color: #007bff;\n  background: #f0f8ff;\n}\n.avanzado-demo {\n  border-color: #28a745;\n  background: #f0fff4;\n}\n.estrategias-demo {\n  border-color: #6f42c1;\n  background: #f8f0ff;\n}\n.intento {\n  padding: 15px;\n  margin: 10px 0;\n  border-radius: 8px;\n  border-left: 5px solid;\n  transition: all 0.3s ease;\n}\n.pendiente {\n  border-left-color: #6c757d;\n  background: #f8f9fa;\n}\n.procesando {\n  border-left-color: #007bff;\n  background: #e7f3ff;\n}\n.exito {\n  border-left-color: #28a745;\n  background: #d4edda;\n}\n.fallo {\n  border-left-color: #dc3545;\n  background: #f8d7da;\n}\n.reintento {\n  border-left-color: #ffc107;\n  background: #fff3cd;\n}\nbutton {\n  padding: 12px 20px;\n  margin: 10px 5px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  transition: all 0.3s ease;\n}\n.btn-iniciar {\n  background: #28a745;\n  color: white;\n}\n.btn-iniciar:hover {\n  background: #218838;\n}\n.btn-iniciar:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n.btn-api {\n  background: #007bff;\n  color: white;\n}\n.btn-estrategia {\n  background: #6f42c1;\n  color: white;\n}\n.btn-limpiar {\n  background: #6c757d;\n  color: white;\n}\n.estadisticas {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 15px;\n  margin: 20px 0;\n}\n.estadistica {\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n  background: #e9ecef;\n}\n.exito-estadistica {\n  background: #d4edda;\n  border: 2px solid #28a745;\n}\n.fallo-estadistica {\n  background: #f8d7da;\n  border: 2px solid #dc3545;\n}\n.progreso {\n  height: 20px;\n  background: #e9ecef;\n  border-radius: 10px;\n  margin: 15px 0;\n  overflow: hidden;\n}\n.barra-progreso {\n  height: 100%;\n  background: linear-gradient(90deg, #007bff, #00ff88);\n  transition: width 0.3s ease;\n  width: 0%;\n}\n.controles {\n  display: flex;\n  gap: 10px;\n  margin: 15px 0;\n  flex-wrap: wrap;\n}\n.configuracion {\n  background: #fff3cd;\n  padding: 15px;\n  border-radius: 5px;\n  margin: 15px 0;\n}\n.config-item {\n  margin: 10px 0;\n}\nlabel {\n  display: inline-block;\n  width: 150px;\n  font-weight: bold;\n}\ninput[type="number"] {\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  width: 80px;\n}\n.codigo {\n  background: #2d2d2d;\n  color: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n}\n.consola {\n  background: #2d2d2d;\n  color: #00ff00;\n  padding: 15px;\n  border-radius: 5px;\n  font-family: "Courier New", monospace;\n  margin: 15px 0;\n  min-height: 200px;\n  max-height: 400px;\n  overflow-y: auto;\n}\n.estrategia-badge {\n  display: inline-block;\n  padding: 3px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n  font-weight: bold;\n  margin-left: 10px;\n}\n.backoff-lineal {\n  background: #007bff;\n  color: white;\n}\n.backoff-exponencial {\n  background: #28a745;\n  color: white;\n}\n.backoff-fibonacci {\n  background: #6f42c1;\n  color: white;\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Elementos del DOM\nconst consola = document.getElementById("consola");\n\n// Estado global\nlet ejecucionEnCurso = false;\n\nfunction log(mensaje) {\n  consola.innerHTML += `<div>${mensaje}</div>`;\n  consola.scrollTop = consola.scrollHeight;\n}\n\nfunction limpiarTodo() {\n  consola.innerHTML = "";\n  document.getElementById("intentos-basico").innerHTML = "";\n  document.getElementById("intentos-avanzado").innerHTML = "";\n  document.getElementById("comparacion-estrategias").innerHTML = "";\n  document.getElementById("progreso-basico").style.width = "0%";\n  resetearEstadisticas();\n  ejecucionEnCurso = false;\n}\n\nfunction resetearEstadisticas() {\n  document.getElementById("total-intentos").textContent = "0";\n  document.getElementById("tiempo-total").textContent = "0ms";\n  document.getElementById("resultado-final").textContent = "-";\n}\n\nfunction delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n// ==================== DEMO 1: RETRY B\xc1SICO ====================\nfunction crearOperacionInestable(\n  probabilidadExito = 0.3,\n  nombre = "Operaci\xf3n"\n) {\n  return async function () {\n    await delay(500 + Math.random() * 500); // Simular trabajo\n\n    if (Math.random() < probabilidadExito) {\n      return `\u2705 ${nombre} exitosa`;\n    } else {\n      throw new Error(`\u274c ${nombre} fall\xf3 temporalmente`);\n    }\n  };\n}\n\nfunction agregarIntentoBasico(intento, estado, mensaje) {\n  const div = document.createElement("div");\n  div.className = `intento ${estado}`;\n  div.innerHTML = `\n                <strong>Intento ${intento}:</strong> ${mensaje}\n            `;\n  document.getElementById("intentos-basico").appendChild(div);\n}\n\nasync function iniciarRetryBasico() {\n  if (ejecucionEnCurso) return;\n  ejecucionEnCurso = true;\n\n  document.getElementById("intentos-basico").innerHTML = "";\n  document.getElementById("progreso-basico").style.width = "0%";\n\n  const maxReintentos = parseInt(\n    document.getElementById("maxReintentos").value\n  );\n  const delayBase = parseInt(document.getElementById("delayBase").value);\n  const estrategia = document.getElementById("estrategiaBackoff").value;\n\n  log(`\ud83d\udd04 INICIANDO RETRY B\xc1SICO (${maxReintentos} intentos m\xe1x)`);\n\n  const operacion = crearOperacionInestable(0.3, "Tarea b\xe1sica");\n\n  try {\n    const resultado = await conReintentos(\n      operacion,\n      maxReintentos,\n      delayBase,\n      estrategia,\n      (intento, estado, mensaje) => {\n        agregarIntentoBasico(intento, estado, mensaje);\n        document.getElementById("progreso-basico").style.width = `${\n          (intento / maxReintentos) * 100\n        }%`;\n      }\n    );\n\n    log(`\ud83c\udf89 ${resultado} despu\xe9s de varios intentos`);\n  } catch (error) {\n    log(`\ud83d\udca5 ${error.message}`);\n  }\n\n  ejecucionEnCurso = false;\n}\n\nasync function iniciarRetryConFallos() {\n  if (ejecucionEnCurso) return;\n\n  document.getElementById("intentos-basico").innerHTML = "";\n  document.getElementById("progreso-basico").style.width = "0%";\n\n  const maxReintentos = 3;\n  const operacion = crearOperacionInestable(0.1, "Tarea muy inestable"); // Solo 10% de \xe9xito\n\n  log(`\ud83d\udca5 PROBANDO CON OPERACI\xd3N MUY INESTABLE (10% \xe9xito)`);\n\n  try {\n    const resultado = await conReintentos(\n      operacion,\n      maxReintentos,\n      1000,\n      "lineal",\n      (intento, estado, mensaje) => {\n        agregarIntentoBasico(intento, estado, mensaje);\n        document.getElementById("progreso-basico").style.width = `${\n          (intento / maxReintentos) * 100\n        }%`;\n      }\n    );\n\n    log(`\ud83c\udf89 \xa1Milagro! ${resultado}`);\n  } catch (error) {\n    log(`\ud83d\udca5 Como esper\xe1bamos: ${error.message}`);\n  }\n}\n\n// ==================== FUNCI\xd3N PRINCIPAL DE RETRY ====================\nasync function conReintentos(\n  operacion,\n  maxReintentos,\n  delayBase = 1000,\n  estrategia = "lineal",\n  callbackProgreso = null\n) {\n  let ultimoError = null;\n  const inicioTotal = Date.now();\n  let totalIntentos = 0;\n\n  for (let intento = 1; intento <= maxReintentos; intento++) {\n    totalIntentos++;\n\n    if (callbackProgreso) {\n      callbackProgreso(intento, "procesando", "\ud83d\udd04 Ejecutando...");\n    }\n\n    log(`\ud83d\udcdd Intento ${intento}/${maxReintentos}...`);\n\n    try {\n      const resultado = await operacion();\n\n      if (callbackProgreso) {\n        callbackProgreso(intento, "exito", resultado);\n      }\n\n      const tiempoTotal = Date.now() - inicioTotal;\n      log(`\u2705 \xa1\xc9xito en el intento ${intento}! Tiempo total: ${tiempoTotal}ms`);\n\n      return resultado;\n    } catch (error) {\n      ultimoError = error;\n\n      if (callbackProgreso) {\n        callbackProgreso(intento, "fallo", error.message);\n      }\n\n      log(`\u274c Intento ${intento} fall\xf3: ${error.message}`);\n\n      // Si es el \xfaltimo intento, salimos\n      if (intento === maxReintentos) {\n        const tiempoTotal = Date.now() - inicioTotal;\n        log(\n          `\ud83d\udca5 Todos los ${maxReintentos} intentos fallaron. Tiempo total: ${tiempoTotal}ms`\n        );\n        throw new Error(\n          `Todos los ${maxReintentos} intentos fallaron. \xdaltimo error: ${error.message}`\n        );\n      }\n\n      // Calcular delay seg\xfan estrategia\n      const delayMs = calcularDelay(estrategia, intento, delayBase);\n      log(\n        `\u23f3 Esperando ${delayMs}ms antes del siguiente intento (${estrategia})...`\n      );\n\n      if (callbackProgreso) {\n        callbackProgreso(intento, "reintento", `\u23f3 Esperando ${delayMs}ms...`);\n      }\n\n      await delay(delayMs);\n    }\n  }\n\n  throw ultimoError;\n}\n\nfunction calcularDelay(estrategia, intento, delayBase) {\n  switch (estrategia) {\n    case "lineal":\n      return delayBase * intento; // 1000, 2000, 3000...\n\n    case "exponencial":\n      return delayBase * Math.pow(2, intento - 1); // 1000, 2000, 4000, 8000...\n\n    case "fibonacci":\n      const fib = [1, 1, 2, 3, 5, 8, 13, 21];\n      return delayBase * (fib[intento - 1] || 21); // 1000, 1000, 2000, 3000, 5000...\n\n    default:\n      return delayBase;\n  }\n}\n\n// ==================== DEMO 2: RETRY AVANZADO ====================\nfunction agregarIntentoAvanzado(\n  intento,\n  estrategia,\n  estado,\n  mensaje,\n  tiempo = ""\n) {\n  const div = document.createElement("div");\n  div.className = `intento ${estado}`;\n  div.innerHTML = `\n                <strong>Intento ${intento}</strong>\n                <span class="estrategia-badge backoff-${estrategia}">${estrategia}</span>\n                <span style="float: right;">${tiempo}</span>\n                <br>${mensaje}\n            `;\n  document.getElementById("intentos-avanzado").appendChild(div);\n}\n\nasync function probarTodasEstrategias() {\n  if (ejecucionEnCurso) return;\n  ejecucionEnCurso = true;\n\n  document.getElementById("intentos-avanzado").innerHTML = "";\n  resetearEstadisticas();\n\n  const estrategias = ["lineal", "exponencial", "fibonacci"];\n  const operacion = crearOperacionInestable(0.4, "Tarea avanzada");\n\n  log("\ud83e\uddea PROBANDO TODAS LAS ESTRATEGIAS DE BACKOFF");\n\n  for (const estrategia of estrategias) {\n    log(`\\\\n\ud83d\udcca Probando estrategia: ${estrategia.toUpperCase()}`);\n\n    try {\n      const inicio = Date.now();\n      const resultado = await conReintentos(\n        operacion,\n        4,\n        1000,\n        estrategia,\n        (intento, estado, mensaje) => {\n          const tiempoTranscurrido = Date.now() - inicio;\n          agregarIntentoAvanzado(\n            intento,\n            estrategia,\n            estado,\n            mensaje,\n            `${tiempoTranscurrido}ms`\n          );\n        }\n      );\n\n      const tiempoTotal = Date.now() - inicio;\n      log(`\u2705 ${estrategia}: ${resultado} en ${tiempoTotal}ms`);\n    } catch (error) {\n      log(`\u274c ${estrategia}: ${error.message}`);\n    }\n\n    await delay(1000); // Pausa entre estrategias\n  }\n\n  ejecucionEnCurso = false;\n}\n\n// ==================== DEMO 3: COMPARACI\xd3N DE ESTRATEGIAS ====================\nasync function compararEstrategias() {\n  document.getElementById("comparacion-estrategias").innerHTML = "";\n\n  const estrategias = [\n    { nombre: "lineal", desc: "Lineal (constante)" },\n    { nombre: "exponencial", desc: "Exponencial (creciente)" },\n    { nombre: "fibonacci", desc: "Fibonacci (progresivo)" },\n  ];\n\n  log("\\\\n\ud83d\udcc8 COMPARANDO ESTRATEGIAS DE BACKOFF");\n\n  for (const estrategia of estrategias) {\n    const div = document.createElement("div");\n    div.className = "intento pendiente";\n    div.innerHTML = `\n                    <h4>${estrategia.desc}</h4>\n                    <div id="detalles-${estrategia.nombre}">Calculando...</div>\n                `;\n    document.getElementById("comparacion-estrategias").appendChild(div);\n\n    // Simular delays para esta estrategia\n    let detalles = "";\n    let tiempoAcumulado = 0;\n\n    for (let intento = 1; intento <= 5; intento++) {\n      const delayMs = calcularDelay(estrategia.nombre, intento, 1000);\n      tiempoAcumulado += delayMs;\n      detalles += `Intento ${intento}: ${delayMs}ms (Total: ${tiempoAcumulado}ms)<br>`;\n    }\n\n    document.getElementById(`detalles-${estrategia.nombre}`).innerHTML =\n      detalles;\n    log(`\ud83d\udcca ${estrategia.desc}: ${detalles.replace(/<br>/g, " | ")}`);\n  }\n}\n\n// ==================== EJEMPLO CON API REAL ====================\nasync function ejemploAPIReal() {\n  log("\\\\n\ud83c\udf10 EJEMPLO CON API REAL (simulado)");\n\n  // Simular una API que a veces falla\n  async function llamarAPI(endpoint) {\n    await delay(300 + Math.random() * 700); // Simular latencia de red\n\n    // Simular diferentes tasas de error seg\xfan el endpoint\n    const tasasError = {\n      "/api/usuarios": 0.2, // 20% de error\n      "/api/posts": 0.4, // 40% de error\n      "/api/comentarios": 0.6, // 60% de error\n    };\n\n    const tasaError = tasasError[endpoint] || 0.3;\n\n    if (Math.random() < tasaError) {\n      throw new Error(\n        `API ${endpoint} no disponible (${\n          Math.random() < 0.5 ? "Timeout" : "Error 500"\n        })`\n      );\n    }\n\n    return `\u2705 Datos de ${endpoint} recibidos`;\n  }\n\n  const endpoints = ["/api/usuarios", "/api/posts", "/api/comentarios"];\n\n  for (const endpoint of endpoints) {\n    log(`\\\\n\ud83d\udd17 Llamando a ${endpoint}...`);\n\n    try {\n      const resultado = await conReintentos(\n        () => llamarAPI(endpoint),\n        3,\n        1000,\n        "exponencial"\n      );\n\n      log(resultado);\n    } catch (error) {\n      log(`\ud83d\udca5 No se pudo conectar a ${endpoint}: ${error.message}`);\n    }\n  }\n\n  log(\n    "\\\\n\ud83d\udca1 En una app real, esto evita que errores temporales afecten al usuario"\n  );\n}\n\n// ==================== EJEMPLO AVANZADO: RETRY CON CIRCUIT BREAKER ====================\nfunction crearRetryAvanzado() {\n  log("\\\\n\ud83d\udee1\ufe0f EJEMPLO AVANZADO: Retry con Circuit Breaker");\n\n  class RetryAvanzado {\n    constructor(maxReintentos = 3, delayBase = 1000) {\n      this.maxReintentos = maxReintentos;\n      this.delayBase = delayBase;\n      this.estadisticas = {\n        exitos: 0,\n        fallos: 0,\n        reintentos: 0,\n      };\n    }\n\n    async ejecutar(operacion, contexto = "Operaci\xf3n") {\n      for (let intento = 1; intento <= this.maxReintentos; intento++) {\n        try {\n          log(`\ud83d\udd27 ${contexto} - Intento ${intento}/${this.maxReintentos}`);\n          const resultado = await operacion();\n\n          this.estadisticas.exitos++;\n          log(`\u2705 ${contexto} exitosa en intento ${intento}`);\n\n          return resultado;\n        } catch (error) {\n          this.estadisticas.fallos++;\n          this.estadisticas.reintentos++;\n\n          log(`\u274c ${contexto} fall\xf3 en intento ${intento}: ${error.message}`);\n\n          if (intento === this.maxReintentos) {\n            log(`\ud83d\udca5 ${contexto}: Todos los intentos fallaron`);\n            throw error;\n          }\n\n          // Backoff exponencial con jitter (aleatoriedad)\n          const delay = this.calcularDelayConJitter(intento);\n          log(`\u23f3 ${contexto}: Esperando ${delay}ms antes del reintento...`);\n\n          await delay(delay);\n        }\n      }\n    }\n\n    calcularDelayConJitter(intento) {\n      const baseDelay = this.delayBase * Math.pow(2, intento - 1);\n      const jitter = baseDelay * 0.2 * Math.random(); // \xb120% de aleatoriedad\n      return baseDelay + jitter;\n    }\n\n    obtenerEstadisticas() {\n      return this.estadisticas;\n    }\n  }\n\n  // Ejemplo de uso\n  const retryAvanzado = new RetryAvanzado(4, 800);\n  const operacionCritica = crearOperacionInestable(0.25, "Operaci\xf3n cr\xedtica");\n\n  retryAvanzado\n    .ejecutar(operacionCritica, "Tarea importante")\n    .then((resultado) => {\n      log(`\ud83c\udf89 ${resultado}`);\n      const stats = retryAvanzado.obtenerEstadisticas();\n      log(`\ud83d\udcca Estad\xedsticas: ${JSON.stringify(stats)}`);\n    })\n    .catch((error) => {\n      log(`\ud83d\udca5 Error final: ${error.message}`);\n    });\n}\n\n// Ejecutar ejemplo avanzado despu\xe9s de un tiempo\nsetTimeout(crearRetryAvanzado, 3000);\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-estrategias-de-backoff-espera-entre-reintentos",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Estrategias de Backoff (Espera entre Reintentos)"})]}),"\n",(0,r.jsx)(e.h3,{id:"1-backoff-lineal",children:(0,r.jsx)(e.strong,{children:"1. Backoff Lineal"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Tiempo de espera constante: 1s, 2s, 3s...\nfunction calcularDelayLineal(intento, delayBase) {\n  return delayBase * intento;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-backoff-exponencial",children:(0,r.jsx)(e.strong,{children:"2. Backoff Exponencial"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Tiempo se duplica: 1s, 2s, 4s, 8s...\nfunction calcularDelayExponencial(intento, delayBase) {\n  return delayBase * Math.pow(2, intento - 1);\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-backoff-fibonacci",children:(0,r.jsx)(e.strong,{children:"3. Backoff Fibonacci"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Secuencia Fibonacci: 1s, 1s, 2s, 3s, 5s...\nfunction calcularDelayFibonacci(intento, delayBase) {\n  const fib = [1, 1, 2, 3, 5, 8, 13, 21];\n  return delayBase * (fib[intento - 1] || 21);\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"4-backoff-con-jitter-aleatoriedad",children:(0,r.jsx)(e.strong,{children:"4. Backoff con Jitter (Aleatoriedad)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Agrega aleatoriedad para evitar sincronizaci\xf3n\nfunction calcularDelayConJitter(intento, delayBase) {\n  const baseDelay = delayBase * Math.pow(2, intento - 1);\n  const jitter = baseDelay * 0.2 * Math.random(); // \xb120%\n  return baseDelay + jitter;\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"-patr\xf3n-avanzado-retry-con-circuit-breaker",children:["\ud83d\udd27 ",(0,r.jsx)(e.strong,{children:"Patr\xf3n Avanzado: Retry con Circuit Breaker"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \u26a1 RetryAvanzado\n * Clase que implementa un sistema de:\n *   - \ud83d\udd01 Reintentos autom\xe1ticos de operaciones as\xedncronas.\n *   - \ud83e\udde0 Circuit Breaker (disyuntor) para evitar sobrecargar servicios que fallan.\n *\n * Estados posibles del circuito:\n *   - CLOSED: Todo funciona normalmente.\n *   - OPEN: No se permiten nuevas operaciones por un tiempo.\n *   - HALF_OPEN: Despu\xe9s de un periodo de espera, se permite un intento de prueba.\n */\nclass RetryAvanzado {\n  constructor(maxReintentos = 3, delayBase = 1000) {\n    // N\xfamero m\xe1ximo de intentos antes de rendirse\n    this.maxReintentos = maxReintentos;\n\n    // Tiempo base de espera entre reintentos (en milisegundos)\n    // Este delay puede escalar con cada intento.\n    this.delayBase = delayBase;\n\n    // Estado del circuito:\n    // CLOSED = normal, OPEN = bloqueado, HALF_OPEN = en prueba\n    this.circuitState = "CLOSED"; // OPEN, HALF_OPEN, CLOSED\n  }\n\n  /**\n   * \ud83d\ude80 ejecutar(operacion)\n   * Ejecuta una operaci\xf3n as\xedncrona con:\n   * - Reintentos autom\xe1ticos en caso de fallo\n   * - Protecci\xf3n con circuit breaker\n   */\n  async ejecutar(operacion) {\n    // ===========================================================\n    // \ud83e\uddf1 1. Comprobar si el circuito est\xe1 "abierto"\n    // ===========================================================\n    // Si el circuito est\xe1 abierto, significa que recientemente fallaron muchas operaciones\n    // y no queremos seguir golpeando el servicio.\n    if (this.circuitState === "OPEN") {\n      throw new Error("Circuit breaker abierto - no se permiten operaciones");\n    }\n\n    // ===========================================================\n    // \ud83d\udd01 2. Intentar ejecutar la operaci\xf3n varias veces\n    // ===========================================================\n    for (let intento = 1; intento <= this.maxReintentos; intento++) {\n      try {\n        // Ejecutamos la operaci\xf3n as\xedncrona (por ejemplo, un fetch a una API externa)\n        const resultado = await operacion();\n\n        // Si tiene \xe9xito, registramos ese \xe9xito en el circuito\n        this.registrarExito();\n\n        // Y devolvemos el resultado al llamador\n        return resultado;\n      } catch (error) {\n        // ===========================================================\n        // \ud83e\udde8 3. Si ocurre un error, evaluamos si debemos abrir el circuito\n        // ===========================================================\n        if (this.debeAbirCircuitBreaker(error)) {\n          // Cambiamos el estado a OPEN (no se aceptar\xe1n m\xe1s operaciones temporalmente)\n          this.circuitState = "OPEN";\n\n          // \u26a0\ufe0f Muy importante:\n          // Programamos un temporizador para cambiar el estado a HALF_OPEN\n          // despu\xe9s de 30 segundos. Esto permite reintentar m\xe1s adelante.\n          setTimeout(() => (this.circuitState = "HALF_OPEN"), 30000);\n        }\n\n        // ===========================================================\n        // \u26d4 4. Si ya es el \xfaltimo intento, relanzamos el error\n        // ===========================================================\n        if (intento === this.maxReintentos) throw error;\n\n        // ===========================================================\n        // \u23f3 5. Si no es el \xfaltimo intento, esperamos un tiempo antes de reintentar\n        // ===========================================================\n        await this.calcularDelay(intento);\n      }\n    }\n  }\n\n  /**\n   * \ud83e\udde0 debeAbirCircuitBreaker(error)\n   * Determina si un error es lo suficientemente cr\xedtico para abrir el circuito.\n   * Por ejemplo: errores 500 del servidor o timeouts.\n   */\n  debeAbirCircuitBreaker(error) {\n    // Podr\xedas usar aqu\xed cualquier l\xf3gica m\xe1s compleja (contador de errores, m\xe9tricas, etc.)\n    return error.message.includes("500") || error.message.includes("Timeout");\n  }\n\n  /**\n   * \ud83d\udfe2 registrarExito()\n   * Si el circuito estaba en estado HALF_OPEN (modo prueba) y una operaci\xf3n tiene \xe9xito,\n   * significa que el servicio volvi\xf3 a funcionar correctamente.\n   * Por lo tanto, cerramos el circuito y retomamos el flujo normal.\n   */\n  registrarExito() {\n    if (this.circuitState === "HALF_OPEN") {\n      this.circuitState = "CLOSED";\n    }\n  }\n\n  /**\n   * \ud83d\udd52 calcularDelay(intento)\n   * Calcula un tiempo de espera antes del pr\xf3ximo intento.\n   * Aqu\xed podr\xedas aplicar un \u201cbackoff exponencial\u201d si lo deseas.\n   */\n  async calcularDelay(intento) {\n    const delay = this.delayBase * intento; // ej. 1000ms, 2000ms, 3000ms\u2026\n    console.log(`\u23f3 Reintentando en ${delay}ms...`);\n    return new Promise((resolve) => setTimeout(resolve, delay));\n  }\n}\n\n/*C\xf3mo funciona este patr\xf3n en la pr\xe1ctica\n\n\ud83d\udd01 Reintentos:\nSi la operaci\xf3n falla, el sistema la vuelve a intentar hasta maxReintentos.\n\n\ud83e\uddf1 Circuit breaker:\n\nSi los errores indican un problema cr\xedtico (p. ej. HTTP 500 o timeout),\nse \u201cabre el circuito\u201d \u2192 no se aceptan nuevas peticiones por un tiempo.\n\nTras un tiempo de enfriamiento (30 segundos en este ejemplo), el estado cambia a HALF_OPEN.\nEn ese estado, se permite una petici\xf3n de prueba.\n\nSi la prueba sale bien \u2192 se cierra el circuito (CLOSED) y todo vuelve a la normalidad.\n\n\u23f3 Backoff progresivo:\nCada intento espera m\xe1s tiempo que el anterior antes de reintentar.*/\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"-casos-de-uso-pr\xe1cticos-1",children:["\ud83c\udfaf ",(0,r.jsx)(e.strong,{children:"Casos de Uso Pr\xe1cticos"})]}),"\n",(0,r.jsx)(e.h3,{id:"1-peticiones-http-con-fetch",children:(0,r.jsx)(e.strong,{children:"1. Peticiones HTTP con Fetch"})}),"\n",(0,r.jsxs)(e.p,{children:["Este c\xf3digo es un patr\xf3n muy usado en producci\xf3n para ",(0,r.jsxs)(e.strong,{children:["hacer peticiones ",(0,r.jsx)(e.code,{children:"fetch"})," con reintentos autom\xe1ticos"]}),", especialmente \xfatil cuando una API externa puede fallar moment\xe1neamente."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"/**\n * \ud83c\udf10 fetchConReintentos(url, options, maxReintentos)\n *\n * Realiza una petici\xf3n fetch y, si falla, la vuelve a intentar varias veces\n * con un tiempo de espera creciente entre cada intento.\n *\n * @param {string} url - URL de la API o recurso a obtener.\n * @param {object} options - Opciones para fetch (headers, method, body, etc.).\n * @param {number} maxReintentos - N\xfamero m\xe1ximo de reintentos permitidos (por defecto: 3).\n * @returns {Promise<any>} - Devuelve la respuesta parseada como JSON si tiene \xe9xito.\n * @throws {Error} - Si todos los intentos fallan, lanza el \xfaltimo error capturado.\n */\nasync function fetchConReintentos(url, options = {}, maxReintentos = 3) {\n  // =========================================================\n  // \ud83d\udd01 Bucle de reintentos\n  // =========================================================\n  // Intentamos la operaci\xf3n hasta que:\n  // - tenga \xe9xito, o\n  // - se alcancen los maxReintentos.\n  for (let intento = 1; intento <= maxReintentos; intento++) {\n    try {\n      // =========================================================\n      // \ud83d\udce1 1. Realizamos la petici\xf3n fetch\n      // =========================================================\n      const response = await fetch(url, options);\n\n      // =========================================================\n      // \ud83e\uddfe 2. Verificamos si la respuesta fue exitosa\n      // =========================================================\n      // Si el c\xf3digo HTTP no est\xe1 en el rango 200\u2013299 (por ejemplo, 500 o 404),\n      // generamos un error manual para forzar el retry.\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // =========================================================\n      // \u2705 3. Si todo sali\xf3 bien, parseamos la respuesta como JSON\n      // =========================================================\n      // Y devolvemos el resultado al llamador (rompiendo el bucle).\n      return await response.json();\n    } catch (error) {\n      // =========================================================\n      // \u274c 4. Si ocurre un error (de red o HTTP no OK), lo manejamos aqu\xed\n      // =========================================================\n      console.error(`\u274c Error en intento ${intento}:`, error.message);\n\n      // =========================================================\n      // \u26d4 5. Si fue el \xfaltimo intento permitido, relanzamos el error\n      // =========================================================\n      // Esto permite que el llamador maneje el fallo final.\n      if (intento === maxReintentos) throw error;\n\n      // =========================================================\n      // \u23f3 6. Si no es el \xfaltimo intento, esperamos antes de reintentar\n      // =========================================================\n      // La espera aumenta proporcionalmente al n\xfamero de intento\n      // (backoff lineal): 1s, 2s, 3s...\n      const tiempoEspera = 1000 * intento;\n      console.log(`\u23f3 Reintentando en ${tiempoEspera / 1000}s...`);\n\n      await new Promise((resolve) => setTimeout(resolve, tiempoEspera));\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"-qu\xe9-hace-este-patr\xf3n-paso-a-paso-1",children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"Qu\xe9 hace este patr\xf3n paso a paso"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Intenta hacer un ",(0,r.jsx)(e.code,{children:"fetch"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Si la respuesta es exitosa (",(0,r.jsx)(e.code,{children:"response.ok === true"}),"), devuelve los datos y termina."]}),"\n",(0,r.jsx)(e.li,{children:"Si la respuesta es un error HTTP (por ejemplo, 500 o 404) o hay un error de red, lanza una excepci\xf3n."}),"\n",(0,r.jsxs)(e.li,{children:["Si ",(0,r.jsx)(e.strong,{children:"no es el \xfaltimo intento"}),", espera un tiempo antes de reintentar (1s, luego 2s, luego 3s\u2026)."]}),"\n",(0,r.jsxs)(e.li,{children:["Si ",(0,r.jsx)(e.strong,{children:"se alcanza el m\xe1ximo de reintentos"}),", lanza el \xfaltimo error para que sea manejado por quien llama a la funci\xf3n."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ejemplo de uso real:"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'fetchConReintentos("https://api.ejemplo.com/datos", {}, 3)\n  .then((data) => {\n    console.log("\u2705 Datos recibidos:", data);\n  })\n  .catch((error) => {\n    console.error("\u274c No se pudo completar la operaci\xf3n:", error.message);\n  });\n'})}),"\n",(0,r.jsx)(e.h3,{id:"-mejores-pr\xe1cticas-comunes-que-podr\xedas-agregar",children:"\ud83e\uddf0 Mejores pr\xe1cticas comunes que podr\xedas agregar:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backoff exponencial"}),": en vez de ",(0,r.jsx)(e.code,{children:"1000 * intento"}),", usar ",(0,r.jsx)(e.code,{children:"1000 * (2 ** (intento - 1))"})," para esperar m\xe1s en cada fallo."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AbortController"}),": para poder cancelar todos los reintentos si el usuario sale de la p\xe1gina o cancela la operaci\xf3n."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Tipos de error"}),": diferenciar entre errores recuperables (ej. timeout) y no recuperables (ej. 404), y reintentar solo en los primeros."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Resumen del patr\xf3n:"})]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Paso"}),(0,r.jsx)(e.th,{children:"Acci\xf3n"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Intentar fetch"}),(0,r.jsx)(e.td,{children:"Hace la llamada a la API"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsxs)(e.td,{children:["Verificar ",(0,r.jsx)(e.code,{children:"response.ok"})]}),(0,r.jsx)(e.td,{children:"Lanza error si la respuesta no es exitosa"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Manejar error"}),(0,r.jsx)(e.td,{children:"Muestra el error y decide si reintenta"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Espera progresiva"}),(0,r.jsx)(e.td,{children:"Aumenta el tiempo entre cada reintento"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Error final si todo falla"}),(0,r.jsx)(e.td,{children:"Permite al c\xf3digo que llama decidir c\xf3mo manejar el fallo definitivo"})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"2-conexiones-de-base-de-datos",children:(0,r.jsx)(e.strong,{children:"2. Conexiones de Base de Datos"})}),"\n",(0,r.jsxs)(e.p,{children:["Este patr\xf3n es ",(0,r.jsx)(e.strong,{children:"muy utilizado en entornos backend reales"})," cuando necesitas asegurar que tu app pueda ",(0,r.jsx)(e.strong,{children:"recuperarse autom\xe1ticamente de errores temporales de conexi\xf3n"})," a la base de datos (por ejemplo, cuando el servidor de BD tarda en levantar, hay problemas de red, etc.)."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"/**\n * \ud83e\udde0 conectarBDConReintentos(config, maxReintentos)\n *\n * Intenta establecer una conexi\xf3n a la base de datos varias veces.\n * Si falla, espera un tiempo creciente entre cada intento.\n * Si todos los intentos fallan, lanza un error final.\n *\n * @param {object} config - Configuraci\xf3n de conexi\xf3n (host, puerto, usuario, etc.)\n * @param {number} maxReintentos - N\xfamero m\xe1ximo de intentos (por defecto: 5)\n * @returns {Promise<object>} - Objeto de conexi\xf3n si tiene \xe9xito\n * @throws {Error} - Si no logra conectarse tras todos los intentos\n */\nasync function conectarBDConReintentos(config, maxReintentos = 5) {\n  // ============================================================\n  // \ud83d\udd01 Bucle de reintentos\n  // ============================================================\n  // Se repetir\xe1 la operaci\xf3n de conexi\xf3n hasta que:\n  //  1. Sea exitosa (devuelve la conexi\xf3n)\n  //  2. Se alcancen los maxReintentos \u2192 lanza un error\n  for (let intento = 1; intento <= maxReintentos; intento++) {\n    try {\n      // ============================================================\n      // \ud83d\udef0\ufe0f 1. Intentar conectar a la base de datos\n      // ============================================================\n      // `database.connect()` es una funci\xf3n as\xedncrona que intenta\n      // establecer la conexi\xf3n usando la configuraci\xf3n pasada.\n      const conexion = await database.connect(config);\n\n      // ============================================================\n      // \u2705 2. Si llegamos aqu\xed, la conexi\xf3n fue exitosa\n      // ============================================================\n      console.log(`\u2705 Conexi\xf3n a BD exitosa en intento ${intento}`);\n      return conexion; // Terminamos la funci\xf3n aqu\xed.\n    } catch (error) {\n      // ============================================================\n      // \u274c 3. Si ocurre un error, lo informamos\n      // ============================================================\n      console.log(`\u274c Intento ${intento} fall\xf3: ${error.message}`);\n\n      // ============================================================\n      // \u26d4 4. Si fue el \xfaltimo intento, lanzamos un error definitivo\n      // ============================================================\n      if (intento === maxReintentos) {\n        throw new Error(\n          `No se pudo conectar a la BD despu\xe9s de ${maxReintentos} intentos`\n        );\n      }\n\n      // ============================================================\n      // \u23f3 5. Si a\xfan quedan intentos, esperamos antes de reintentar\n      // ============================================================\n      // La espera se incrementa con cada intento:\n      // intento 1 \u2192 2s, intento 2 \u2192 4s, intento 3 \u2192 6s, ...\n      const tiempoEspera = 2000 * intento;\n      console.log(`\u23f3 Reintentando en ${tiempoEspera / 1000}s...`);\n      await new Promise((resolve) => setTimeout(resolve, tiempoEspera));\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"-c\xf3mo-funciona-este-patr\xf3n",children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"C\xf3mo funciona este patr\xf3n"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Intenta ",(0,r.jsx)(e.strong,{children:"conectarse a la base de datos"}),"."]}),"\n",(0,r.jsx)(e.li,{children:"Si la conexi\xf3n falla, imprime el error y espera un tiempo antes de volver a intentar."}),"\n",(0,r.jsxs)(e.li,{children:["Cada intento ",(0,r.jsx)(e.strong,{children:"aumenta el tiempo de espera"})," (en este ejemplo: 2s, 4s, 6s...)."]}),"\n",(0,r.jsx)(e.li,{children:"Si logra conectarse, devuelve el objeto de conexi\xf3n inmediatamente."}),"\n",(0,r.jsxs)(e.li,{children:["Si no logra conectarse tras ",(0,r.jsx)(e.code,{children:"maxReintentos"}),", lanza un error final para que la app lo maneje (por ejemplo, mostrando un mensaje de error cr\xedtico o reiniciando el servicio)."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ejemplo de uso t\xedpico en un servidor Node.js"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const configBD = {\n  host: "localhost",\n  user: "root",\n  password: "1234",\n  database: "miapp",\n};\n\n(async () => {\n  try {\n    const conexion = await conectarBDConReintentos(configBD, 5);\n    console.log("\ud83d\ude80 Servidor listo con conexi\xf3n a BD");\n    // Aqu\xed podr\xedas iniciar tu app Express, por ejemplo\n  } catch (error) {\n    console.error("\u274c No se pudo iniciar la app:", error.message);\n    process.exit(1); // Salir del proceso si la conexi\xf3n es cr\xedtica\n  }\n})();\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ventajas-pr\xe1cticas-de-este-patr\xf3n",children:["\ud83d\udccc ",(0,r.jsx)(e.strong,{children:"Ventajas pr\xe1cticas de este patr\xf3n"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\ud83e\uddf1 ",(0,r.jsx)(e.strong,{children:"Evita fallos inmediatos"})," si la BD tarda en iniciar (por ejemplo, en despliegues con Docker o Kubernetes)."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udd01 ",(0,r.jsx)(e.strong,{children:"Permite recuperaci\xf3n autom\xe1tica"})," sin reiniciar manualmente la app."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83e\udded ",(0,r.jsx)(e.strong,{children:"Reduce errores falsos negativos"})," por cortes temporales de red."]}),"\n",(0,r.jsx)(e.li,{children:"\ud83d\udcca Facilita logging y monitoreo de fallos intermitentes."}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Variaciones comunes que podr\xedas implementar"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u23f3 ",(0,r.jsx)(e.strong,{children:"Backoff exponencial"})," (ej. ",(0,r.jsx)(e.code,{children:"2 ** intento * 1000"})," en lugar de lineal)."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"Circuit breaker"}),": si la BD falla demasiado, suspender intentos por un tiempo."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\uded1 ",(0,r.jsx)(e.strong,{children:"AbortController"}),": cancelar reintentos si se recibe una se\xf1al externa."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udd75\ufe0f ",(0,r.jsx)(e.strong,{children:"Logging estructurado"}),": para enviar estos eventos a herramientas de observabilidad (Prometheus, Grafana, etc.)."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udccc ",(0,r.jsxs)(e.strong,{children:["Resumen del patr\xf3n ",(0,r.jsx)(e.code,{children:"conectarBDConReintentos"}),":"]})]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Paso"}),(0,r.jsx)(e.th,{children:"Acci\xf3n"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"database.connect()"})}),(0,r.jsx)(e.td,{children:"Intenta conectarse a la base de datos"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"try/catch"})," con bucle ",(0,r.jsx)(e.code,{children:"for"})]}),(0,r.jsx)(e.td,{children:"Controla los intentos y captura errores"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Delay entre intentos"}),(0,r.jsx)(e.td,{children:"Evita reintentar demasiado r\xe1pido"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Lanza error final"}),(0,r.jsx)(e.td,{children:"Si no logra conectarse despu\xe9s del m\xe1ximo de intentos"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Mejora la resiliencia"}),(0,r.jsx)(e.td,{children:"La app no cae por peque\xf1os fallos temporales"})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"3-procesamiento-de-archivos",children:(0,r.jsx)(e.strong,{children:"3. Procesamiento de Archivos"})}),"\n",(0,r.jsxs)(e.p,{children:["Este patr\xf3n es \xfatil cuando un archivo ",(0,r.jsx)(e.strong,{children:"puede no estar disponible inmediatamente"}),", por ejemplo:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Cuando otro proceso lo est\xe1 creando,"}),"\n",(0,r.jsx)(e.li,{children:"Cuando se genera de forma as\xedncrona (logs, exportaciones, backups),"}),"\n",(0,r.jsx)(e.li,{children:"O cuando trabajas con sistemas de archivos distribuidos."}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * \ud83d\udcc2 procesarArchivoConReintentos(rutaArchivo, maxReintentos)\n *\n * Intenta leer un archivo varias veces, esperando entre intentos si no existe a\xfan.\n * Ideal para casos en que el archivo se genera as\xedncronamente y puede tardar un poco en aparecer.\n *\n * @param {string} rutaArchivo - Ruta completa al archivo que se quiere leer.\n * @param {number} maxReintentos - N\xfamero m\xe1ximo de intentos de lectura (por defecto: 3).\n * @returns {Promise<object>} - El contenido del archivo parseado como JSON.\n * @throws {Error} - Si el archivo no existe despu\xe9s de todos los reintentos o hay otro error.\n */\nasync function procesarArchivoConReintentos(rutaArchivo, maxReintentos = 3) {\n  // ============================================================\n  // \ud83d\udd01 1. Bucle de reintentos\n  // ============================================================\n  // Intentamos leer el archivo varias veces.\n  for (let intento = 1; intento <= maxReintentos; intento++) {\n    try {\n      // ============================================================\n      // \ud83d\udcd6 2. Intentar leer el archivo\n      // ============================================================\n      // Usamos fs.promises.readFile (versi\xf3n as\xedncrona basada en Promesas)\n      // para leer el contenido en formato UTF-8.\n      const contenido = await fs.promises.readFile(rutaArchivo, "utf8");\n\n      // ============================================================\n      // \ud83e\uddfe 3. Parsear el contenido como JSON\n      // ============================================================\n      // Si la lectura fue exitosa, intentamos convertir el contenido\n      // en un objeto JavaScript (por ejemplo, si es un archivo de configuraci\xf3n).\n      return JSON.parse(contenido);\n    } catch (error) {\n      // ============================================================\n      // \u274c 4. Si ocurre un error, lo analizamos\n      // ============================================================\n\n      // Caso especial: el archivo no existe todav\xeda (ENOENT)\n      // \ud83d\udc49 Esto puede pasar si otro proceso est\xe1 escribiendo el archivo.\n      if (error.code === "ENOENT" && intento < maxReintentos) {\n        console.log(\n          `\u26a0\ufe0f Archivo no encontrado. Intento ${intento} de ${maxReintentos}. ` +\n            `Esperando 500ms antes de reintentar...`\n        );\n\n        // Esperamos medio segundo antes de volver a intentar\n        await new Promise((resolve) => setTimeout(resolve, 500));\n\n        // Usamos `continue` para pasar al siguiente intento\n        continue;\n      }\n\n      // Si no es un error ENOENT o es el \xfaltimo intento \u2192 lanzar error final\n      if (intento === maxReintentos) {\n        console.error("\u274c No se pudo procesar el archivo:", error.message);\n        throw error;\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-qu\xe9-hace-esta-funci\xf3n-paso-a-paso",children:["\ud83e\udde0 ",(0,r.jsx)(e.strong,{children:"Qu\xe9 hace esta funci\xf3n paso a paso"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Usa un bucle ",(0,r.jsx)(e.code,{children:"for"})," para controlar la cantidad de reintentos."]}),"\n",(0,r.jsxs)(e.li,{children:["Intenta leer el archivo con ",(0,r.jsx)(e.code,{children:"fs.promises.readFile"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Si la lectura tiene \xe9xito, ",(0,r.jsx)(e.strong,{children:"devuelve el contenido parseado como JSON"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["Si falla con c\xf3digo ",(0,r.jsx)(e.code,{children:"ENOENT"})," (archivo no encontrado):","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Espera 500 ms."}),"\n",(0,r.jsx)(e.li,{children:"Vuelve a intentar."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Si se agotan los intentos o el error es de otro tipo, ",(0,r.jsx)(e.strong,{children:"lanza el error"})," para que lo maneje el llamador."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Ejemplo de uso t\xedpico"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'import fs from "fs";\n\n(async () => {\n  try {\n    const datos = await procesarArchivoConReintentos("./tmp/salida.json", 5);\n    console.log("\u2705 Archivo le\xeddo correctamente:", datos);\n  } catch (error) {\n    console.error("\u274c No se pudo leer el archivo:", error.message);\n  }\n})();\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"-ventajas-pr\xe1cticas-de-este-patr\xf3n-1",children:["\ud83d\udccc ",(0,r.jsx)(e.strong,{children:"Ventajas pr\xe1cticas de este patr\xf3n"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u23f3 Permite ",(0,r.jsx)(e.strong,{children:"esperar archivos que a\xfan est\xe1n en proceso de escritura"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udd01 Mejora la ",(0,r.jsx)(e.strong,{children:"resiliencia"})," de scripts autom\xe1ticos y pipelines."]}),"\n",(0,r.jsx)(e.li,{children:"\ud83e\udde0 Evita errores falsos negativos por peque\xf1os retrasos de disco/red."}),"\n",(0,r.jsx)(e.li,{children:"\ud83e\uddfe Es perfecto para logs, reportes o exportaciones en sistemas as\xedncronos."}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,r.jsx)(e.strong,{children:"Posibles mejoras reales"})," que podr\xedas a\xf1adir:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Tiempo de espera configurable"})," (en vez de fijo en 500 ms)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backoff exponencial"})," (por ejemplo, 500 ms, luego 1 s, luego 2 s\u2026)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"L\xedmites por tipo de error"})," (por ejemplo, no reintentar si el error es de permisos ",(0,r.jsx)(e.code,{children:"EACCES"}),")."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Logging estructurado"})," para observabilidad en producci\xf3n."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udcca ",(0,r.jsx)(e.strong,{children:"Resumen del patr\xf3n de lectura con reintentos"})]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Paso"}),(0,r.jsx)(e.th,{children:"Acci\xf3n"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"readFile"})}),(0,r.jsx)(e.td,{children:"Intenta leer el archivo"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.code,{children:"catch"})," con c\xf3digo ENOENT"]}),(0,r.jsx)(e.td,{children:"Detecta si no existe \u2192 espera y vuelve a intentar"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"maxReintentos"})}),(0,r.jsx)(e.td,{children:"Lanza error si falla despu\xe9s de varios intentos"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"JSON.parse()"}),(0,r.jsx)(e.td,{children:"Devuelve el contenido como objeto si fue exitoso"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Mejora la resiliencia"}),(0,r.jsx)(e.td,{children:"Evita errores por archivos que tardan en generarse"})]})]})]}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-usar-retry-autom\xe1tico",children:["\u2705 ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo usar Retry Autom\xe1tico?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Errores temporales:"})," Network timeouts, servidores ocupados"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Recursos no disponibles:"})," Archivos bloqueados, conexiones saturadas"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Inicializaci\xf3n:"})," Servicios que necesitan tiempo para arrancar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Operaciones idempotentes:"})," Que se pueden repetir sin efectos secundarios"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-cu\xe1ndo-no-usar-retry",children:["\u274c ",(0,r.jsx)(e.strong,{children:"\xbfCu\xe1ndo NO usar Retry?"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Errores permanentes:"})," 404 Not Found, permisos denegados"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Operaciones no idempotentes:"})," Que causan efectos secundarios al repetirse"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Errores de validaci\xf3n:"})," Datos incorrectos del usuario"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"L\xedmites de tasa:"})," Podr\xeda empeorar la situaci\xf3n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"-mejores-pr\xe1cticas-2",children:["\ud83d\udca1 ",(0,r.jsx)(e.strong,{children:"Mejores Pr\xe1cticas:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Usar backoff exponencial"})," para no saturar el servidor"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Limitar el n\xfamero m\xe1ximo"})," de reintentos"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Considerar el contexto:"})," \xbfVale la pena reintentar?"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Loggear los reintentos"})," para debugging"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Agregar jitter"}),' para evitar el "herd effect"']}),"\n"]}),"\n",(0,r.jsxs)(e.h1,{id:"-conceptos-que-faltan-pero-son-importantes",children:["\ud83d\udd0d ",(0,r.jsx)(e.strong,{children:"CONCEPTOS QUE FALTAN (Pero son importantes)"})]}),"\n",(0,r.jsx)(e.h3,{id:"1--error-handling-avanzado",children:(0,r.jsx)(e.strong,{children:"1. \ud83d\udea8 ERROR HANDLING AVANZADO"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Error boundaries, global error handlers, graceful degradation\nwindow.addEventListener("unhandledrejection", (event) => {\n  console.log("Promesa rechazada no manejada:", event.reason);\n  event.preventDefault();\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2--patrones-de-concurrencia",children:(0,r.jsx)(e.strong,{children:"2. \ud83d\udd04 PATRONES DE CONCURRENCIA"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Limitaci\xf3n de concurrencia, sem\xe1foros\nasync function conLimiteConcurrencia(tareas, limite = 3) {\n  // Ejecutar m\xe1ximo 3 tareas a la vez\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3--streams-y-data-flow",children:(0,r.jsx)(e.strong,{children:"3. \ud83d\udce1 STREAMS Y DATA FLOW"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Para manejar datos en tiempo real, grandes vol\xfamenes\nfetch("/api/datos-grandes").then((response) => {\n  const reader = response.body.getReader();\n  // Procesar datos en chunks\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"4-\ufe0f-circuit-breaker-pattern",children:(0,r.jsx)(e.strong,{children:"4. \ud83d\udee1\ufe0f CIRCUIT BREAKER PATTERN"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// M\xe1s avanzado que retry - evita colapsar servicios ca\xeddos\nclass CircuitBreaker {\n  // Estado: OPEN, HALF_OPEN, CLOSED\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"5--performance-y-optimizaci\xf3n",children:(0,r.jsx)(e.strong,{children:"5. \u26a1 PERFORMANCE Y OPTIMIZACI\xd3N"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Debouncing, throttling para eventos\nfunction debounce(func, wait) {\n  // Agrupar m\xfaltiples llamadas\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"6--composici\xf3n-de-promesas-avanzada",children:(0,r.jsx)(e.strong,{children:"6. \ud83d\udd17 COMPOSICI\xd3N DE PROMESAS AVANZADA"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Promise.allSettled(), Promise.any(), encadenamiento complejo\n"})}),"\n",(0,r.jsx)(e.h3,{id:"7--asincron\xeda-en-nodejs",children:(0,r.jsx)(e.strong,{children:"7. \ud83c\udf10 ASINCRON\xcdA EN NODE.JS"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// nextTick, setImmediate, streams de Node.js\nprocess.nextTick(() => {\n  // Ejecutar despu\xe9s del event loop actual\n});\n"})}),"\n",(0,r.jsx)(e.h1,{id:"manejo-de-errores-avanzado-en-la-asincron\xeda",children:"Manejo de errores avanzado en la asincron\xeda"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h1,{id:"manejo-de-errores-en-javascript-as\xedncrono",children:"Manejo de Errores en JavaScript As\xedncrono"}),"\n",(0,r.jsx)(e.p,{children:"Ya se ha comnetado c\xf3mo manejar errores cuando trabajamos con c\xf3digo as\xedncrono en JavaScript. Hagamos un breve repaso."}),"\n",(0,r.jsx)(e.h2,{id:"por-qu\xe9-es-importante-manejar-errores",children:"\xbfPor qu\xe9 es importante manejar errores?"}),"\n",(0,r.jsx)(e.p,{children:'Imaginen que est\xe1n pidiendo comida por una app. Si el restaurante est\xe1 cerrado, la app no deber\xeda quedarse "colgada" esperando para siempre. Deber\xeda decirles "Lo sentimos, este restaurante est\xe1 cerrado" y dejarles pedir en otro lugar.'}),"\n",(0,r.jsxs)(e.p,{children:["Eso es exactamente lo que hace el manejo de errores: ",(0,r.jsx)(e.strong,{children:"anticipar lo que puede salir mal y tener un plan B"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"1-callbacks---la-forma-antigua",children:"1. Callbacks - La forma antigua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Simulamos pedir datos de un usuario\nfunction obtenerUsuario(id, callback) {\n  console.log(`Buscando usuario con ID: ${id}...`);\n\n  // Simulamos que a veces falla (usuario no existe)\n  if (id > 100) {\n    // \xa1ERROR! El callback recibe el error como primer par\xe1metro\n    callback(new Error("Usuario no encontrado"), null);\n  } else {\n    // \xa1\xc9XITO! No hay error (null) y tenemos datos\n    callback(null, { id: id, nombre: "Ana Garc\xeda", email: "ana@ejemplo.com" });\n  }\n}\n\n// USO - Siempre verificamos si hay error primero\nobtenerUsuario(150, function (error, usuario) {\n  if (error) {\n    // PLAN B: Si hay error, lo manejamos\n    console.log("\u274c Ocurri\xf3 un error:", error.message);\n    console.log("Mostrando usuario gen\xe9rico en su lugar...");\n    return; // \xa1Importante: salimos de la funci\xf3n!\n  }\n\n  // Si no hay error, usamos los datos\n  console.log("\u2705 Usuario encontrado:", usuario);\n});\n\nobtenerUsuario(50, function (error, usuario) {\n  if (error) {\n    console.log("\u274c Ocurri\xf3 un error:", error.message);\n    return;\n  }\n\n  console.log("\u2705 Usuario encontrado:", usuario);\n});\n'})}),"\n",(0,r.jsx)(e.h2,{id:"2-promesas---la-forma-moderna",children:"2. Promesas - La forma moderna"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// La misma funci\xf3n pero con Promesas\nfunction obtenerUsuarioPromesa(id) {\n  return new Promise(function (resolve, reject) {\n    console.log(`Buscando usuario con ID: ${id}...`);\n\n    // Simulamos tiempo de espera (como una API real)\n    setTimeout(function () {\n      if (id > 100) {\n        // REJECT = Algo sali\xf3 mal\n        reject(new Error("Usuario no encontrado en la base de datos"));\n      } else {\n        // RESOLVE = Todo sali\xf3 bien\n        resolve({\n          id: id,\n          nombre: "Carlos L\xf3pez",\n          email: "carlos@ejemplo.com",\n          premium: id < 50,\n        });\n      }\n    }, 1000);\n  });\n}\n\n// USO con .then() y .catch()\nobtenerUsuarioPromesa(200)\n  .then(function (usuario) {\n    // Esto solo se ejecuta si TODO SALE BIEN\n    console.log("\u2705 Usuario premium:", usuario);\n  })\n  .catch(function (error) {\n    // Esto se ejecuta si ALGO SALE MAL\n    console.log("\u274c Error al buscar usuario:", error.message);\n    console.log("Podemos ofrecer crear una nueva cuenta...");\n  });\n\n// Tambi\xe9n podemos encadenar operaciones\nobtenerUsuarioPromesa(25)\n  .then(function (usuario) {\n    console.log("\u2705 Usuario encontrado:", usuario.nombre);\n\n    // Podemos seguir encadenando m\xe1s operaciones\n    if (usuario.premium) {\n      console.log("\ud83c\udf89 \xa1Es usuario premium! Mostrando beneficios...");\n    }\n\n    return usuario; // Pasamos el usuario al siguiente .then()\n  })\n  .then(function (usuario) {\n    console.log(`Enviando email de bienvenida a: ${usuario.email}`);\n  })\n  .catch(function (error) {\n    // \xa1IMPORTANTE! Un solo .catch() maneja TODOS los errores\n    // de la cadena completa\n    console.log("\u274c Algo fall\xf3 en el proceso:", error.message);\n  });\n'})}),"\n",(0,r.jsx)(e.h2,{id:"3-asyncawait---la-forma-m\xe1s-legible",children:"3. Async/Await - La forma m\xe1s legible"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// Async/Await hace que el c\xf3digo as\xedncrono se vea como s\xedncrono\nasync function procesarUsuario(id) {\n  try {\n    console.log(`\ud83d\udd0d Iniciando b\xfasqueda del usuario ${id}...`);\n\n    // "await" significa: "espera a que esta promesa termine"\n    const usuario = await obtenerUsuarioPromesa(id);\n\n    // Esta l\xednea solo se ejecuta si la promesa anterior tuvo \xe9xito\n    console.log("\u2705 Usuario cargado correctamente:", usuario.nombre);\n\n    // Podemos seguir haciendo m\xe1s operaciones\n    if (usuario.premium) {\n      console.log("\ud83c\udf1f Cargando contenido exclusivo para premium...");\n    }\n\n    return usuario;\n  } catch (error) {\n    // catch captura CUALQUIER error que ocurra en el try\n    console.log("\u274c Error cr\xedtico:", error.message);\n\n    // Plan B: Podemos devolver un valor por defecto\n    console.log("Mostrando perfil de invitado...");\n    return { nombre: "Invitado", email: "", premium: false };\n  }\n}\n\n// USO - Parece c\xf3digo normal, pero es as\xedncrono\nasync function main() {\n  console.log("=== PROCESANDO USUARIO V\xc1LIDO ===");\n  const usuario1 = await procesarUsuario(30);\n  console.log("Usuario final:", usuario1);\n\n  console.log("\\\\n=== PROCESANDO USUARIO INV\xc1LIDO ===");\n  const usuario2 = await procesarUsuario(150);\n  console.log("Usuario final:", usuario2);\n}\n\n// Ejecutamos todo\nmain();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"4-ejemplo-del-mundo-real-cargar-datos-de-una-api",children:"4. Ejemplo del Mundo Real: Cargar Datos de una API"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'async function cargarDatosDeClima(ciudad) {\n  try {\n    console.log(`\ud83c\udf24\ufe0f Consultando clima para: ${ciudad}`);\n\n    // Simulamos una API real que puede fallar\n    const respuesta = await fetch(`https://api.clima-ejemplo.com/${ciudad}`);\n\n    // Verificamos si la respuesta HTTP es exitosa\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status} - Ciudad no encontrada`);\n    }\n\n    const datosClima = await respuesta.json();\n\n    console.log(`\u2705 Clima en ${ciudad}: ${datosClima.temperatura}\xb0C`);\n    return datosClima;\n  } catch (error) {\n    console.log("\u274c No pudimos obtener el clima:", error.message);\n\n    // Diferentes planes B seg\xfan el tipo de error\n    if (error.message.includes("Ciudad no encontrada")) {\n      console.log("\ud83d\udca1 Sugerencia: Verifica el nombre de la ciudad");\n    } else if (error.message.includes("network")) {\n      console.log("\ud83d\udd0c Problema de conexi\xf3n - Verifica tu internet");\n    } else {\n      console.log("\u26a0\ufe0f Error desconocido - Intenta m\xe1s tarde");\n    }\n\n    // Devolvemos datos por defecto\n    return { temperatura: "N/A", ciudad: ciudad, error: true };\n  }\n}\n\n// Probemos nuestra funci\xf3n\nasync function mostrarClima() {\n  const climas = await Promise.all([\n    cargarDatosDeClima("Madrid"),\n    cargarDatosDeClima("CiudadInexistente"),\n    cargarDatosDeClima("Barcelona"),\n  ]);\n\n  console.log("Resumen de climas:", climas);\n}\n\nmostrarClima();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"resumen-de-reglas-de-oro",children:"Resumen de Reglas de Oro:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Siempre ten un .catch() o try/catch"})," - Nunca dejes promesas sin manejar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Verifica primero si hay error"})," - En callbacks, siempre check ",(0,r.jsx)(e.code,{children:"if (error)"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Usa throw new Error()"})," - Para crear errores descriptivos"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Ten un plan B"})," - \xbfQu\xe9 mostrar si falla la carga de datos?"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Async/await es tu amigo"})," - Hace el c\xf3digo m\xe1s f\xe1cil de leer y mantener"]}),"\n"]}),"\n",(0,r.jsx)(e.h1,{id:"clase-avanzada-metodolog\xedas-profesionales-para-manejo-de-errores",children:"Clase Avanzada: Metodolog\xedas Profesionales para Manejo de Errores"}),"\n",(0,r.jsxs)(e.p,{children:["Existen metodolog\xedas mucho m\xe1s avanzadas que el simple ",(0,r.jsx)(e.code,{children:"try/catch"}),". Vamos a explorar t\xe9cnicas que usan los desarrolladores profesionales."]}),"\n",(0,r.jsx)(e.h2,{id:"1-patr\xf3n-result-object---alternativa-a-trycatch",children:'1. Patr\xf3n "Result Object" - Alternativa a Try/Catch'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ===============================================\n// Clase Result\n// ===============================================\n// Esta clase representa el resultado de una operaci\xf3n que puede\n// salir bien (\xe9xito) o mal (error). En lugar de lanzar excepciones,\n// encapsulamos la informaci\xf3n en un objeto estructurado.\n// Esto permite tener un flujo de control m\xe1s predecible y limpio,\n// sobre todo cuando tenemos m\xfaltiples pasos que validar o ejecutar.\nclass Result {\n  constructor(success, data, error) {\n    // success \u2192 indica si la operaci\xf3n fue exitosa (true) o fall\xf3 (false)\n    // data \u2192 si fue exitosa, aqu\xed se guarda el resultado de la operaci\xf3n\n    // error \u2192 si fall\xf3, aqu\xed se guarda la informaci\xf3n del error\n    this.success = success;\n    this.data = data;\n    this.error = error;\n  }\n\n  // M\xe9todo est\xe1tico para crear un resultado exitoso.\n  // As\xed evitamos usar `new Result(...)` en todo el c\xf3digo.\n  static success(data) {\n    return new Result(true, data, null);\n  }\n\n  // M\xe9todo est\xe1tico para crear un resultado fallido con informaci\xf3n del error.\n  static failure(error) {\n    return new Result(false, null, error);\n  }\n\n  // M\xe9todos de conveniencia para trabajar con los resultados.\n  // Nos permiten saber f\xe1cilmente si la operaci\xf3n tuvo \xe9xito.\n  isSuccess() {\n    return this.success;\n  }\n\n  // Devuelve los datos si la operaci\xf3n fue exitosa.\n  // Si no fue exitosa, lanza un error para evitar usar datos inexistentes.\n  getData() {\n    if (!this.success) {\n      throw new Error("Cannot get data from failed result");\n    }\n    return this.data;\n  }\n\n  // Devuelve el objeto de error (en caso de fallo).\n  getError() {\n    return this.error;\n  }\n}\n\n// ===============================================\n// Ejemplo pr\xe1ctico: Sistema de validaci\xf3n de usuarios\n// ===============================================\n// Esta funci\xf3n orquesta varias validaciones antes de crear un usuario.\n// Lo importante es que cada validaci\xf3n devuelve un `Result` (\xe9xito o error),\n// as\xed podemos cortar el flujo en cuanto algo falla, sin try/catch innecesarios.\nasync function validarYCrearUsuario(datosUsuario) {\n  // Paso 1: Validar el email.\n  // Llamamos a la funci\xf3n de validaci\xf3n y obtenemos un Result.\n  const resultadoEmail = validarEmail(datosUsuario.email);\n  if (!resultadoEmail.isSuccess()) {\n    // Si falla, devolvemos directamente ese resultado de error\n    // sin continuar con el resto de validaciones.\n    return resultadoEmail;\n  }\n\n  // Paso 2: Verificar que el username no exista en la base de datos.\n  const resultadoUnicidad = await verificarUsuarioUnico(datosUsuario.username);\n  if (!resultadoUnicidad.isSuccess()) {\n    return resultadoUnicidad;\n  }\n\n  // Paso 3: Validar edad m\xednima requerida.\n  const resultadoEdad = validarEdad(datosUsuario.edad);\n  if (!resultadoEdad.isSuccess()) {\n    return resultadoEdad;\n  }\n\n  // Paso 4: Si todo lo anterior sale bien, creamos el usuario en la BD.\n  const usuarioCreado = await crearUsuarioEnBD(datosUsuario);\n\n  // Devolvemos un resultado exitoso con los datos del nuevo usuario.\n  return Result.success(usuarioCreado);\n}\n\n// ===============================================\n// Funciones de validaci\xf3n\n// ===============================================\n// Cada validaci\xf3n devuelve un Result, no lanza excepciones.\n// Esto permite componerlas f\xe1cilmente.\n\nfunction validarEmail(email) {\n  // Expresi\xf3n regular simple para validar formato de email.\n  const regex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\n  if (!regex.test(email)) {\n    // Si el email no es v\xe1lido, devolvemos un Result de error\n    // con detalles \xfatiles: tipo de error, mensaje, campo y valor.\n    return Result.failure({\n      type: "VALIDATION_ERROR",\n      message: "Email inv\xe1lido",\n      field: "email",\n      value: email,\n    });\n  }\n  // Si pasa la validaci\xf3n, devolvemos \xe9xito con el email limpio.\n  return Result.success(email);\n}\n\nasync function verificarUsuarioUnico(username) {\n  // Simulamos una consulta a la base de datos para ver si el usuario ya existe.\n  const usuariosExistentes = await buscarUsuariosPorUsername(username);\n\n  if (usuariosExistentes.length > 0) {\n    // Si ya existe, devolvemos un error con una sugerencia autom\xe1tica.\n    // Esto es \xfatil para UX (p. ej., \u201cprueba con ana123\u201d).\n    return Result.failure({\n      type: "BUSINESS_ERROR",\n      message: "El nombre de usuario ya existe",\n      field: "username",\n      value: username,\n      suggestion: `Prueba con ${username}${Math.floor(Math.random() * 1000)}`,\n    });\n  }\n\n  // Si no existe, devolvemos \xe9xito.\n  return Result.success(username);\n}\n\n// ===============================================\n// USO DEL SISTEMA\n// ===============================================\n// En lugar de tener m\xfaltiples try/catch, manejamos todo con un \xfanico flujo.\n// Esto hace que el c\xf3digo sea m\xe1s predecible y m\xe1s f\xe1cil de mantener.\n\nasync function procesarRegistro() {\n  // Este objeto representa los datos que recibir\xedamos, por ejemplo,\n  // desde un formulario de registro en el frontend.\n  const usuario = {\n    email: "email-invalido", // <- Forzamos un error de email para probar.\n    username: "ana",\n    edad: 15,\n  };\n\n  // Ejecutamos todas las validaciones y creaci\xf3n.\n  const resultado = await validarYCrearUsuario(usuario);\n\n  if (resultado.isSuccess()) {\n    // Si todo sali\xf3 bien, obtenemos el usuario creado.\n    console.log("\ud83c\udf89 Usuario creado:", resultado.getData());\n  } else {\n    // Si hubo error, recuperamos la informaci\xf3n y mostramos un mensaje claro.\n    const error = resultado.getError();\n    console.log(`\u274c Error en ${error.field}: ${error.message}`);\n\n    // Si la validaci\xf3n ofrece sugerencias (por ejemplo, username),\n    // tambi\xe9n podemos mostrarlas para mejorar la experiencia del usuario.\n    if (error.suggestion) {\n      console.log(`\ud83d\udca1 Sugerencia: ${error.suggestion}`);\n    }\n  }\n}\n\n// ===============================================\n// NOTA IMPORTANTE:\n// ===============================================\n// Las funciones `validarEdad`, `crearUsuarioEnBD` y `buscarUsuariosPorUsername`\n// no est\xe1n definidas aqu\xed, pero en un proyecto real deber\xedan:\n// - `validarEdad`: verificar si la edad es >= 18 (o el m\xednimo que se establezca).\n// - `crearUsuarioEnBD`: insertar el usuario en la base de datos.\n// - `buscarUsuariosPorUsername`: consultar la BD para ver si ya existe el nombre.\n//\n// Este patr\xf3n de dise\xf1o es muy \xfatil porque:\n// \u2714 Evita m\xfaltiples bloques try/catch encadenados\n// \u2714 Centraliza la l\xf3gica de control de errores\n// \u2714 Devuelve mensajes estructurados y reutilizables\n// \u2714 Hace que el c\xf3digo sea m\xe1s f\xe1cil de probar y mantener\n'})}),"\n",(0,r.jsx)(e.h2,{id:"2-error-boundaries-con-funci\xf3n-wrapper",children:"2. Error Boundaries con Funci\xf3n Wrapper"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ======================================================\n// \ud83d\udd38 withErrorBoundary: una funci\xf3n envoltorio ("wrapper")\n// ======================================================\n// Su objetivo es:\n//  1. Ejecutar funciones as\xedncronas con un nombre identificable.\n//  2. Capturar cualquier error que ocurra dentro de esa funci\xf3n.\n//  3. Transformar ese error gen\xe9rico en un objeto estructurado y controlado.\n//  4. Devolver un `Result` en lugar de lanzar excepciones.\n//\n// Esto permite tener flujos de control mucho m\xe1s predecibles\n// sin llenar la aplicaci\xf3n de try/catch en todos lados.\nfunction withErrorBoundary(operationName, asyncFn) {\n  // Retornamos una nueva funci\xf3n as\xedncrona que envuelve a la original.\n  // Esta nueva funci\xf3n acepta cualquier n\xfamero de argumentos (...args)\n  // y es la que finalmente usaremos en lugar de la original.\n  return async function (...args) {\n    try {\n      // Log opcional: \xfatil para depuraci\xf3n y trazabilidad.\n      console.log(`\ud83d\ude80 Ejecutando: ${operationName}`);\n\n      // Ejecutamos la funci\xf3n original (`asyncFn`) pasando los mismos argumentos.\n      const result = await asyncFn(...args);\n\n      // Si no hay error, mostramos mensaje de \xe9xito.\n      console.log(`\u2705 ${operationName} completado exitosamente`);\n\n      // Devolvemos un objeto Result de \xe9xito con el resultado de la operaci\xf3n.\n      return Result.success(result);\n    } catch (error) {\n      // Si ocurre un error en la funci\xf3n original, lo capturamos aqu\xed.\n      console.error(`\ud83d\udca5 Error en ${operationName}:`, error);\n\n      // Aqu\xed viene lo importante:\n      // En lugar de devolver el error original (que puede ser inconsistente),\n      // creamos un objeto de error estructurado con toda la info \xfatil.\n      const enhancedError = {\n        operation: operationName, // Nombre de la operaci\xf3n que fall\xf3\n        timestamp: new Date().toISOString(), // Cu\xe1ndo ocurri\xf3 el error\n        originalError: error.message, // Mensaje original del error\n        context: args[0], // Podemos guardar el primer argumento como contexto (\xfatil para debug)\n      };\n\n      // Devolvemos un Result de fallo con la informaci\xf3n enriquecida.\n      return Result.failure(enhancedError);\n    }\n  };\n}\n\n// ======================================================\n// \ud83e\ude99 EJEMPLO PR\xc1CTICO: Procesamiento de pagos\n// ======================================================\n// Usamos `withErrorBoundary` para envolver una funci\xf3n que puede fallar.\n// As\xed cualquier error que ocurra dentro de `procesarPago` ser\xe1 capturado\n// autom\xe1ticamente, sin necesidad de escribir try/catch en cada llamada.\nconst procesarPagoSeguro = withErrorBoundary(\n  "procesarPago", // nombre que identificar\xe1 esta operaci\xf3n en los logs\n  async function (datosPago) {\n    // Simulamos validaciones que podr\xedan fallar.\n\n    // Primera validaci\xf3n: tarjeta v\xe1lida\n    if (!datosPago.tarjetaValida) {\n      // Si la tarjeta no es v\xe1lida, lanzamos un error que ser\xe1 capturado por el boundary.\n      throw new Error("Tarjeta inv\xe1lida o expirada");\n    }\n\n    // Segunda validaci\xf3n: fondos disponibles\n    if (datosPago.monto > datosPago.limite) {\n      throw new Error("Fondos insuficientes");\n    }\n\n    // Simulamos un procesamiento as\xedncrono (por ejemplo, llamado a un gateway de pago)\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // Si todo va bien, devolvemos un objeto con la informaci\xf3n de la transacci\xf3n.\n    return {\n      idTransaccion: `TX-${Date.now()}`, // ID generado con la marca de tiempo actual\n      monto: datosPago.monto,\n      estado: "COMPLETADO",\n      fecha: new Date(),\n    };\n  }\n);\n\n// ======================================================\n// \ud83e\udded USO REAL EN UN FLUJO DE PAGO\n// ======================================================\n// Esta funci\xf3n representa c\xf3mo un sistema de pago podr\xeda usar\n// la funci\xf3n protegida con el Error Boundary.\nasync function flujoDePago() {\n  // Datos simulados de un pago (por ejemplo, enviados desde el frontend).\n  const pago = {\n    tarjetaValida: false, // \u274c Forzamos un error para ver c\xf3mo se captura.\n    monto: 150,\n    limite: 100,\n  };\n\n  // Llamamos a la funci\xf3n envuelta.\n  // N\xf3tese que no hay try/catch aqu\xed: toda la gesti\xf3n de errores ya\n  // est\xe1 manejada dentro de `withErrorBoundary`.\n  const resultado = await procesarPagoSeguro(pago);\n\n  // Si la operaci\xf3n tuvo \xe9xito...\n  if (resultado.isSuccess()) {\n    const transaccion = resultado.getData();\n    console.log("\ud83d\udcb0 Pago exitoso:", transaccion.idTransaccion);\n  } else {\n    // Si fall\xf3, recuperamos el error estructurado.\n    const error = resultado.getError();\n    console.log("\u274c Transacci\xf3n fallida:");\n    console.log("   Operaci\xf3n:", error.operation);\n    console.log("   Error:", error.originalError);\n    console.log("   Contexto:", error.context);\n    console.log("   Timestamp:", error.timestamp);\n\n    // Podemos decidir c\xf3mo manejarlo en funci\xf3n del tipo de error.\n    manejarErrorDePago(error);\n  }\n}\n\n// ======================================================\n// \ud83e\udded MANEJADOR DE ERRORES DE PAGO\n// ======================================================\n// Esta funci\xf3n recibe el error enriquecido y toma decisiones concretas\n// seg\xfan el tipo de error original. Esto separa la l\xf3gica de negocio\n// de la l\xf3gica de control de errores.\nfunction manejarErrorDePago(error) {\n  if (error.originalError.includes("Tarjeta inv\xe1lida")) {\n    console.log("\ud83d\udd04 Redirigiendo a actualizaci\xf3n de tarjeta...");\n  } else if (error.originalError.includes("Fondos insuficientes")) {\n    console.log("\ud83d\udcb3 Ofreciendo m\xe9todo de pago alternativo...");\n  }\n}\n\n// ======================================================\n// \ud83d\udcdd RESUMEN CLAVE DE ESTE PATR\xd3N\n// ======================================================\n// \u2714 `withErrorBoundary` permite envolver funciones y capturar errores\n//   sin ensuciar el c\xf3digo con try/catch repetidos.\n// \u2714 Centraliza el manejo de errores, mejorando la trazabilidad.\n// \u2714 Devuelve `Result` \u2192 un est\xe1ndar para propagar estado (\xe9xito/fallo).\n// \u2714 En aplicaciones reales, este patr\xf3n se usa para envolver:\n//    - llamadas a APIs externas\n//    - operaciones con bases de datos\n//    - integraciones con pasarelas de pago\n//    - funciones cr\xedticas que no deben romper todo el flujo\n'})}),"\n",(0,r.jsx)(e.h2,{id:"3-patr\xf3n-railway-oriented-programming",children:'3. Patr\xf3n "Railway Oriented Programming"'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// =======================================================\n// \ud83e\udde0 Pipeline: encadenar operaciones (sync/async) que pueden fallar\n// =======================================================\n// Idea clave: encapsular un valor y su "estado" (\xe9xito/fracaso).\n// Si alguna etapa falla, las siguientes se "saltan" y el error se propaga\n// hasta el final, donde lo manejamos con `.match(...)`.\n\nclass Pipeline {\n  constructor(value, isSuccess = true) {\n    // value \u2192 si vamos bien, es el valor acumulado; si fall\xf3, es el error.\n    // isSuccess \u2192 marca si el pipeline est\xe1 en estado de \xe9xito o de fallo.\n    this.value = value;\n    this.isSuccess = isSuccess;\n  }\n\n  // Crea un pipeline exitoso con un valor inicial.\n  static of(value) {\n    return new Pipeline(value, true);\n  }\n\n  // Crea un pipeline fallido con un "error" (objeto o Error).\n  static fail(error) {\n    return new Pipeline(error, false);\n  }\n\n  // =====================================================\n  // \ud83d\udd17 bind(fn): encadena una funci\xf3n SINCRONA\n  // - Si ya venimos fallidos \u2192 no hace nada y devuelve el mismo pipeline (error bubbling).\n  // - Si vamos bien \u2192 aplica fn(value). Si fn lanza, capturamos y pasamos a fail.\n  // =====================================================\n  bind(fn) {\n    if (!this.isSuccess) {\n      // Ya fall\xf3 antes: propagamos tal cual sin tocar el error.\n      return this;\n    }\n    try {\n      const next = fn(this.value); // Aplicamos la transformaci\xf3n\n      return Pipeline.of(next); // Envolvemos el nuevo valor en \xe9xito\n    } catch (error) {\n      // Si la funci\xf3n lanza, convertimos el pipeline a estado fallido\n      return Pipeline.fail(error);\n    }\n  }\n\n  // =====================================================\n  // \ud83d\udd17 bindAsync(asyncFn): encadena una funci\xf3n AS\xcdNCRONA (promesa)\n  // - Mismo comportamiento que bind, pero esperando el resultado.\n  // =====================================================\n  async bindAsync(asyncFn) {\n    if (!this.isSuccess) {\n      return this; // error bubbling\n    }\n    try {\n      const result = await asyncFn(this.value);\n      return Pipeline.of(result);\n    } catch (error) {\n      return Pipeline.fail(error);\n    }\n  }\n\n  // =====================================================\n  // \ud83c\udfaf match(successFn, failureFn): "desempaqueta" el resultado\n  // - Si \xe9xito \u2192 llama successFn(value)\n  // - Si fallo \u2192 llama failureFn(error)\n  // Devuelve lo que devuelvan esas funciones (patr\xf3n \'fold\').\n  // =====================================================\n  match(successFn, failureFn) {\n    if (this.isSuccess) {\n      return successFn(this.value);\n    } else {\n      return failureFn(this.value);\n    }\n  }\n}\n\n// =======================================================\n// \ud83d\uded2 Caso real: procesamiento de pedido en e-commerce\n// Flujo:\n//   datosPedido\n//     \u2192 validarStock (sync)\n//     \u2192 calcularImpuestos (async)\n//     \u2192 aplicarDescuentos (async)\n//     \u2192 procesarPago (async)\n//     \u2192 crearEnvio (async)\n// Si en cualquiera falla, las siguientes etapas NO se ejecutan.\n// =======================================================\nasync function procesarPedido(datosPedido) {\n  // Arrancamos el pipeline en estado exitoso con el pedido original\n  const pipeline = Pipeline.of(datosPedido)\n    // Etapa 1 (sync): valida y, si todo ok, marca stockValidado\n    .bind(validarStock)\n    // Etapa 2 (async): calcula impuestos y total\n    .bindAsync(calcularImpuestos)\n    // Etapa 3 (async): aplica descuentos (o lanza si cup\xf3n inv\xe1lido)\n    .bindAsync(aplicarDescuentos)\n    // Etapa 4 (async): cobra (puede fallar por fondos/tarjeta)\n    .bindAsync(procesarPago)\n    // Etapa 5 (async): crea el env\xedo (puede fallar si transportista cae)\n    .bindAsync(crearEnvio);\n\n  // Al final, "plegamos" el pipeline a un objeto est\xe1ndar de respuesta\n  return pipeline.match(\n    // \u2714 \xc9xito: devolvemos datos listos para el cliente/API\n    (pedidoCompletado) => ({\n      success: true,\n      data: pedidoCompletado,\n      message: "Pedido procesado exitosamente",\n    }),\n    // \u274c Fallo: normalizamos el error (mensaje, paso, recuperable)\n    (error) => ({\n      success: false,\n      error: error.message, // Mensaje de error human-readable\n      step: error.step || "unknown", // D\xf3nde fall\xf3 (si lo marcamos)\n      recoverable: !error.critical, // Podemos reintentar o pedir acci\xf3n al usuario\n    })\n  );\n}\n\n// =======================================================\n// \ud83e\udde9 Funciones del pipeline (cada una debe ser pura/id\xe9ntica en forma):\n//   - Reciben el "pedido" acumulado hasta ese punto\n//   - Devuelven el pedido enriquecido (o lanzan error estructurado)\n// =======================================================\n\n// 1) Validaci\xf3n de stock (SINCRONA)\nfunction validarStock(pedido) {\n  console.log("\ud83d\udce6 Validando stock...");\n  // Si alg\xfan item no tiene suficiente stock, lanzamos un error estructurado:\n  if (pedido.items.some((item) => item.stock < item.cantidad)) {\n    throw {\n      message: "Producto sin stock disponible",\n      step: "validarStock", // nos ayuda a saber en qu\xe9 etapa fall\xf3\n      recoverable: true, // podr\xeda resolverse (reducir cantidad, backorder, etc.)\n    };\n  }\n  // Enriquecemos el pedido con una marca de validaci\xf3n\n  return { ...pedido, stockValidado: true };\n}\n\n// 2) C\xe1lculo de impuestos (AS\xcdNCRONA)\nasync function calcularImpuestos(pedido) {\n  console.log("\ud83e\uddee Calculando impuestos...");\n  // Simulamos I/O (consulta reglas fiscales, etc.)\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  const impuestos = pedido.subtotal * 0.21; // IVA 21% de ejemplo\n  return {\n    ...pedido,\n    impuestos,\n    total: pedido.subtotal + impuestos, // acumulamos total parcial\n  };\n}\n\n// 3) Aplicaci\xf3n de descuentos (AS\xcdNCRONA)\nasync function aplicarDescuentos(pedido) {\n  console.log("\ud83c\udf81 Aplicando descuentos...");\n  // Regla simple: un c\xf3digo "EXPIRED" provoca fallo\n  if (pedido.codigoDescuento === "EXPIRED") {\n    throw {\n      message: "C\xf3digo de descuento expirado",\n      step: "aplicarDescuentos",\n      recoverable: true, // el usuario puede probar otro cup\xf3n\n    };\n  }\n\n  // Ejemplo: si hay cup\xf3n v\xe1lido, restamos un 10% (demo)\n  if (pedido.codigoDescuento === "WELCOME10") {\n    const descuento = (pedido.total ?? pedido.subtotal) * 0.1;\n    return {\n      ...pedido,\n      descuento,\n      total: (pedido.total ?? pedido.subtotal) - descuento,\n    };\n  }\n\n  // Sin cup\xf3n o sin cambios: devolvemos el pedido tal cual\n  return pedido;\n}\n\n// 4) Procesamiento de pago (AS\xcdNCRONA)\nasync function procesarPago(pedido) {\n  console.log("\ud83d\udcb3 Procesando pago...");\n  // Simulaci\xf3n de llamada a gateway de pago\n  await new Promise((resolve) => setTimeout(resolve, 400));\n\n  // Reglas de fallo de ejemplo:\n  if (!pedido.tarjetaValida) {\n    throw {\n      message: "Tarjeta inv\xe1lida o expirada",\n      step: "procesarPago",\n      recoverable: true, // el usuario puede actualizar tarjeta\n    };\n  }\n  if ((pedido.total ?? pedido.subtotal) > (pedido.limite ?? 0)) {\n    throw {\n      message: "Fondos insuficientes",\n      step: "procesarPago",\n      recoverable: true, // probar otro m\xe9todo de pago\n    };\n  }\n\n  // Si todo ok, adjuntamos datos de transacci\xf3n\n  return {\n    ...pedido,\n    pago: {\n      idTransaccion: `TX-${Date.now()}`,\n      estado: "COMPLETADO",\n      fecha: new Date().toISOString(),\n      importe: pedido.total ?? pedido.subtotal,\n    },\n  };\n}\n\n// 5) Creaci\xf3n de env\xedo (AS\xcdNCRONA)\nasync function crearEnvio(pedido) {\n  console.log("\ud83d\ude9a Creando env\xedo...");\n  // Simulamos llamada a proveedor log\xedstico\n  await new Promise((resolve) => setTimeout(resolve, 300));\n\n  // Simulaci\xf3n de ca\xedda del servicio log\xedstico\n  if (pedido.transportista === "FALLA_CARRIER") {\n    throw {\n      message: "El servicio del transportista no responde",\n      step: "crearEnvio",\n      critical: false, // no es cr\xedtico (podemos reintentar con otro carrier)\n      recoverable: true,\n    };\n  }\n\n  // Todo ok: devolvemos etiqueta/gu\xeda de env\xedo\n  return {\n    ...pedido,\n    envio: {\n      guia: `ENV-${Math.floor(Math.random() * 1e6)}`,\n      carrier: pedido.transportista || "STANDARD",\n      estado: "GENERADO",\n      fecha: new Date().toISOString(),\n    },\n    estadoFinal: "COMPLETADO",\n  };\n}\n\n// =======================================================\n// \ud83e\uddea Mini demo de uso (no se ejecuta aqu\xed, solo referencia)\n// =======================================================\n// (async () => {\n//   const pedido = {\n//     items: [{ sku: "A1", cantidad: 2, stock: 10 }],\n//     subtotal: 100,\n//     codigoDescuento: "WELCOME10", // prueba "EXPIRED" para ver fallo en descuentos\n//     tarjetaValida: true,          // pon false para forzar fallo en pago\n//     limite: 200,                  // baja a 50 para forzar "fondos insuficientes"\n//     transportista: "STANDARD",    // usa "FALLA_CARRIER" para simular ca\xedda\n//   };\n\n//   const res = await procesarPedido(pedido);\n//   console.log(JSON.stringify(res, null, 2));\n// })();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"4-sistema-de-recuperaci\xf3n-y-reintentos",children:"4. Sistema de Recuperaci\xf3n y Reintentos"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ==========================================================\n// \u267b\ufe0f RetryStrategy: reintentos con backoff exponencial controlado\n// ==========================================================\n// Objetivo: envolver una operaci\xf3n as\xedncrona que puede fallar (API ca\xedda,\n// timeouts, red saturada...) y reintentarla de forma segura un n\xfamero\n// finito de veces, solo cuando el error sea "recuperable".\n\nclass RetryStrategy {\n  // --------------------------------------------------------\n  // withRetry(operation, maxRetries, delay)\n  // - operation: () => Promise<any>  \u2192 la operaci\xf3n a ejecutar/reintentar\n  // - maxRetries: n\xba m\xe1ximo de intentos (incluye el primero)\n  // - delay: espera base en ms para el backoff exponencial\n  // Devuelve: Result.success(data) o Result.failure(errorEstructurado)\n  // --------------------------------------------------------\n  static async withRetry(operation, maxRetries = 3, delay = 1000) {\n    let lastError; // guardamos el \xfaltimo error para reportarlo si agotamos reintentos\n\n    // Bucle de intentos: 1..maxRetries\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        console.log(`\ud83d\udd04 Intento ${attempt}/${maxRetries}`);\n\n        // Ejecutamos la operaci\xf3n. Si resuelve \u2192 salimos devolviendo \xe9xito.\n        const result = await operation();\n\n        console.log("\u2705 Operaci\xf3n exitosa");\n        return Result.success(result);\n      } catch (error) {\n        // Si falla, capturamos el error y decidimos si reintentamos.\n        lastError = error;\n        console.log(`\u274c Intento ${attempt} fall\xf3:`, error.message);\n\n        // Si NO es recuperable o ya es el \xfaltimo intento \u2192 rompemos el bucle.\n        if (!this.isRecoverableError(error) || attempt === maxRetries) {\n          break;\n        }\n\n        // Backoff exponencial: delay * 2^(attempt-1)\n        // p.ej. con delay=1000ms \u2192 1000, 2000, 4000, ...\n        const waitTime = delay * Math.pow(2, attempt - 1);\n        console.log(`\u23f3 Esperando ${waitTime}ms antes del reintento...`);\n\n        // Esperamos el tiempo calculado antes de reintentar\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\n      }\n    }\n\n    // Si llegamos aqu\xed, agotamos reintentos o no era recuperable.\n    // Devolvemos un error estructurado para trazabilidad.\n    return Result.failure({\n      message: `Todos los intentos fallaron: ${\n        lastError?.message ?? "Error desconocido"\n      }`,\n      originalError: lastError, // el objeto Error original (\xfatil para logs)\n      retriesAttempted: maxRetries, // n\xba de intentos realizados\n    });\n  }\n\n  // --------------------------------------------------------\n  // isRecoverableError(error)\n  // Heur\xedstica simple que decide si vale la pena reintentar.\n  // Aqu\xed se buscan patrones "transitorios" t\xedpicos de red/servidor.\n  // En un entorno real, conviene ampliarlo con status HTTP, c\xf3digos propios, etc.\n  // --------------------------------------------------------\n  static isRecoverableError(error) {\n    const msg = (error?.message || "").toLowerCase();\n\n    // Patrones gen\xe9ricos de fallos temporales\n    const recoverablePatterns = [\n      "timeout", // tiempo de espera agotado\n      "network", // error de red gen\xe9rico\n      "temporarily unavailable", // temporalmente no disponible\n      "rate limit", // l\xedmite de peticiones\n      "server busy", // servidor ocupado\n      "ecs service unavailable", // (ejemplo) infra ocupada\n    ];\n\n    return recoverablePatterns.some((pattern) => msg.includes(pattern));\n  }\n}\n\n// ==========================================================\n// \ud83c\udf10 USO: servicio que golpea una API externa no siempre estable\n// - Intentamos hasta 3 veces con backoff 1s \u2192 1s, 2s, 4s.\n// - La operaci\xf3n tiene un 70% de fallos simulados.\n// ==========================================================\nasync function obtenerDatosDeAPI() {\n  const resultado = await RetryStrategy.withRetry(\n    async () => {\n      // Simulamos una API caprichosa: a veces falla\n      const shouldFail = Math.random() < 0.7; // 70% de probabilidad de fallo\n\n      if (shouldFail) {\n        // Lanzamos un error que aparenta ser transitorio\n        throw new Error("Servidor temporalmente no disponible");\n      }\n\n      // \xc9xito: devolvemos datos\n      return { datos: "Informaci\xf3n importante", timestamp: new Date() };\n    },\n    3, // m\xe1ximo de 3 intentos\n    1000 // delay base: 1s (backoff exponencial: 1s, 2s, 4s)\n  );\n\n  // resultado es un Result: success|failure\n  return resultado;\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"5-monitorizaci\xf3n-y-logging-avanzado",children:"5. Monitorizaci\xf3n y Logging Avanzado"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ============================================================\n// \ud83d\udee1\ufe0f Sistema profesional de tracking de errores (cliente/servidor)\n// ============================================================\n// Objetivo: capturar errores, enriquecerlos con contexto \xfatil,\n// guardarlos en memoria, reportarlos a un servicio externo y\n// detectar patrones de repetici\xf3n en ventanas de tiempo cortas.\n//\n// Nota: Este ejemplo funciona en navegador y Node.js. Para evitar\n// \'ReferenceError\' en Node, se usa acceso seguro a window/navigator.\n\n/* eslint-disable no-console */\nclass ErrorTracker {\n  // Almac\xe9n en memoria de los errores capturados (solo sesi\xf3n/proceso actual).\n  // En producci\xf3n, conviene limitar tama\xf1o o hacer flush peri\xf3dico.\n  static errors = [];\n\n  // ------------------------------------------------------------\n  // track(error, context)\n  // - error: instancia de Error (ideal) o un objeto compatible.\n  // - context: metadatos que nos interesen (componente, usuario, acci\xf3n...).\n  // Devuelve: el "errorEntry" enriquecido (con id, timestamp, etc.).\n  // ------------------------------------------------------------\n  static track(error, context = {}) {\n    // Entrada estructurada del error: normalizamos campos clave.\n    const errorEntry = {\n      // ID \xfanico para correlacionar reportes/logs/soporte humano.\n      id: this.generateId(),\n\n      // Tipo de error (por defecto \'Error\'; podr\xeda ser \'TypeError\', \'FetchError\'...).\n      type: error.name,\n\n      // Mensaje legible para humanos; \xfatil para detectar patrones.\n      message: error.message,\n\n      // Pila de llamadas (stacktrace) \u2192 cr\xedtica para diagn\xf3stico.\n      // Puede estar undefined si no es un Error real.\n      stack: error.stack,\n\n      // Metadatos que pasemos desde el punto de captura.\n      // Nunca metas PII sensible sin anonimizar (GDPR).\n      context: context,\n\n      // Cu\xe1ndo ocurri\xf3 (ISO 8601 para facilidad de parseo en backend).\n      timestamp: new Date().toISOString(),\n\n      // Info del agente de usuario (si estamos en navegador).\n      // En Node no existe navigator \u2192 acceso seguro.\n      userAgent:\n        (typeof navigator !== "undefined" && navigator.userAgent) || "Node.js",\n\n      // URL actual (navegador) o etiqueta "Server" si estamos en backend.\n      url:\n        (typeof window !== "undefined" &&\n          window.location &&\n          window.location.href) ||\n        "Server",\n    };\n\n    // Guardamos en memoria (para an\xe1lisis local y detecci\xf3n de patrones).\n    this.errors.push(errorEntry);\n\n    // Enviar a plataforma de observabilidad (Sentry, Datadog, LogRocket, etc.).\n    this.reportToService(errorEntry);\n\n    // Ejecutamos heur\xedstica simple para detectar picos/patrones recientes.\n    this.checkForPatterns();\n\n    // Devolvemos la entrada por si queremos mostrar/guardar el ID, etc.\n    return errorEntry;\n  }\n\n  // ------------------------------------------------------------\n  // generateId(): crea un identificador razonablemente \xfanico.\n  // En entornos modernos podr\xedas usar crypto.randomUUID().\n  // ------------------------------------------------------------\n  static generateId() {\n    return `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // ------------------------------------------------------------\n  // reportToService(errorEntry)\n  // Aqu\xed integrar\xedas el SDK/endpoint del proveedor de tracking.\n  // Este stub solo hace logging bonito en consola.\n  // ------------------------------------------------------------\n  static reportToService(errorEntry) {\n    // \ud83d\udd2d Consola agrupada para lectura humana (\xfatil en desarrollo).\n    console.group("\ud83d\udea8 ERROR REPORTADO");\n    console.log("ID:", errorEntry.id);\n    console.log("Tipo:", errorEntry.type);\n    console.log("Mensaje:", errorEntry.message);\n    console.log("Contexto:", errorEntry.context);\n    console.groupEnd();\n\n    // \ud83c\udf10 En producci\xf3n: env\xeda a tu colector/servicio.\n    // Recuerda sanear PII y manejar fallos (con retry/jitter si aplica).\n    // fetch(\'<https://api.error-tracking.com/errors>\', {\n    //   method: \'POST\',\n    //   headers: { \'Content-Type\': \'application/json\' },\n    //   body: JSON.stringify(errorEntry),\n    // });\n  }\n\n  // ------------------------------------------------------------\n  // checkForPatterns()\n  // Detecci\xf3n naive de "patrones" de error repetidos en la \xfaltima hora.\n  // Si un mensaje se repite \u2265 5 veces en 60 minutos \u2192 warning en consola.\n  // En serio: en producci\xf3n haz esto en el servidor con agregaciones.\n  // ------------------------------------------------------------\n  static checkForPatterns() {\n    const lastHour = new Date(Date.now() - 60 * 60 * 1000);\n\n    // Filtramos solo errores recientes (\xfaltimos 60 minutos).\n    const recentErrors = this.errors.filter(\n      (err) => new Date(err.timestamp) > lastHour\n    );\n\n    // Contamos ocurrencias por \'message\' (clave simple y efectiva).\n    const errorCounts = recentErrors.reduce((acc, err) => {\n      acc[err.message] = (acc[err.message] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Disparamos alerta si un mensaje supera el umbral.\n    Object.entries(errorCounts).forEach(([message, count]) => {\n      if (count >= 5) {\n        console.warn(\n          `\u26a0\ufe0f PATR\xd3N DETECTADO: "${message}" ocurri\xf3 ${count} veces en la \xfaltima hora`\n        );\n      }\n    });\n  }\n}\n\n// ============================================================\n// \ud83e\uddea USO en aplicaci\xf3n real (patr\xf3n de captura controlada)\n// ============================================================\n// Ejemplo: tenemos una funci\xf3n "cr\xedtica" donde algo puede fallar\n// (consulta BD, llamada a API, c\xe1lculo sensible...). Capturamos\n// el error, lo trackeamos con contexto, usamos el ID para soporte\n// y re-lanzamos para que el flujo normal de errores siga su curso.\nasync function funcionCritica() {\n  try {\n    // ...c\xf3digo que puede fallar (simulamos un fallo controlado)\n    throw new Error("Error de conexi\xf3n a base de datos");\n  } catch (error) {\n    // Enriquecemos con contexto (\xa1evita PII! usa ids o hashes).\n    const trackedError = ErrorTracker.track(error, {\n      component: "funcionCritica",\n      userId: "user123", // mejor: un hash/uuid no-identificable\n      action: "procesarPago", // qu\xe9 intentaba hacer el usuario\n    });\n\n    // Guardamos/mostramos el ID para correlaci\xf3n con soporte/logs.\n    console.log("Error ID para soporte:", trackedError.id);\n\n    // Re-lanzamos para que capas superiores (middleware/global) decidan.\n    throw error;\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"resumen-de-metodolog\xedas-avanzadas",children:"Resumen de Metodolog\xedas Avanzadas:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Result Object"})," - Evita excepciones, usa objetos predecibles"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error Boundaries"})," - Wrappers que capturan y transforman errores"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Railway Programming"})," - Encadenamiento elegante de operaciones que pueden fallar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Retry Strategies"})," - Recuperaci\xf3n autom\xe1tica de errores temporales"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error Tracking"})," - Monitorizaci\xf3n y an\xe1lisis de patrones de error"]}),"\n"]}),"\n",(0,r.jsx)(e.h1,{id:"limitaci\xf3n-de-concurrencia-en-javascript",children:"Limitaci\xf3n de concurrencia en JavaScript"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"qu\xe9-es-la-limitaci\xf3n-de-concurrencia",children:"\xbfQu\xe9 es la limitaci\xf3n de concurrencia?"}),"\n",(0,r.jsxs)(e.p,{children:["Imaginen que tienen ",(0,r.jsx)(e.strong,{children:"3 cajeros en un banco"})," y ",(0,r.jsx)(e.strong,{children:"10 personas haciendo fila"}),". Si dejaran que las 10 personas entren al banco al mismo tiempo, ser\xeda un caos total. En vez de eso, dejan entrar m\xe1ximo 3 personas a la vez."]}),"\n",(0,r.jsxs)(e.p,{children:["Eso es exactamente la limitaci\xf3n de concurrencia: ",(0,r.jsx)(e.strong,{children:'controlar cu\xe1ntas "tareas" pueden ejecutarse al mismo tiempo'}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"por-qu\xe9-es-importante-en-javascript",children:"\xbfPor qu\xe9 es importante en JavaScript?"}),"\n",(0,r.jsxs)(e.p,{children:["JavaScript es ",(0,r.jsx)(e.strong,{children:"single-threaded"})," (un solo hilo de ejecuci\xf3n). Si lanzamos 100 peticiones a una API al mismo tiempo, podemos:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\ud83d\udd25 ",(0,r.jsx)(e.strong,{children:"Saturar el servidor"})]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udcc8 ",(0,r.jsx)(e.strong,{children:"Consumir toda la memoria"})]}),"\n",(0,r.jsxs)(e.li,{children:["\ud83d\udc0c ",(0,r.jsx)(e.strong,{children:"Hacer que todo vaya m\xe1s lento"})]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"1-ejemplo-del-mundo-real-cajeros-del-banco",children:"1. Ejemplo del Mundo Real: Cajeros del Banco"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ============================================================\n// \ud83c\udfe6 Banco (limitador de concurrencia con cola FIFO)\n// ============================================================\n// Idea: tienes un n\xfamero finito de "cajeros" (workers). Si llegan m\xe1s\n// tareas (clientes) de las que puedes atender en paralelo, las pones en\n// una fila de espera. Cada vez que un cajero queda libre, llamas al siguiente.\n//\n// Ventajas:\n// - Controlas cu\xe1ntas tareas as\xedncronas corren a la vez.\n// - Evitas saturar APIs/DBs/CPU.\n// - Mantienes orden de llegada (FIFO).\n\nclass Banco {\n  constructor(numCajeros) {\n    // cu\xe1ntas tareas simult\xe1neas est\xe1n permitidas\n    this.cajerosDisponibles = numCajeros;\n\n    // cola de espera (FIFO) de tareas pendientes { resolve, nombreCliente, transaccion }\n    this.filaDeEspera = [];\n\n    // contador de tareas en ejecuci\xf3n ahora mismo\n    this.tareasEnProgreso = 0;\n  }\n\n  // ------------------------------------------------------------\n  // atenderCliente(nombreCliente, transaccion)\n  // - nombreCliente: etiqueta s\xf3lo para logs (debug/observabilidad)\n  // - transaccion: funci\xf3n as\xedncrona () => Promise<any> que ejecuta la tarea real\n  // Devuelve: una Promesa que se resuelve cuando termina la transacci\xf3n.\n  // ------------------------------------------------------------\n  async atenderCliente(nombreCliente, transaccion) {\n    console.log(`\ud83c\udfe6 [${nombreCliente}] Lleg\xf3 al banco...`);\n\n    // Si no queda ning\xfan cajero libre, el cliente espera en fila\n    if (this.tareasEnProgreso >= this.cajerosDisponibles) {\n      console.log(\n        `\u23f3 [${nombreCliente}] En espera... ${\n          this.filaDeEspera.length + 1\n        } en fila`\n      );\n\n      // Creamos una promesa "pendiente": guardamos su resolve para dispararla\n      // cuando haya cajero. No ejecutamos todav\xeda la transacci\xf3n.\n      return new Promise((resolve) => {\n        this.filaDeEspera.push({ resolve, nombreCliente, transaccion });\n      });\n    }\n\n    // Si hay cajero libre, ejecutamos ya la transacci\xf3n\n    return this.ejecutarTransaccion(nombreCliente, transaccion);\n  }\n\n  // ------------------------------------------------------------\n  // ejecutarTransaccion(nombreCliente, transaccion)\n  // Arranca la tarea, aumenta el contador y se asegura de liberarlo en "finally"\n  // ------------------------------------------------------------\n  async ejecutarTransaccion(nombreCliente, transaccion) {\n    // ocupamos un cajero (sube concurrencia activa)\n    this.tareasEnProgreso++;\n    console.log(\n      `\u2705 [${nombreCliente}] Atendiendo... ` +\n        `Cajeros ocupados: ${this.tareasEnProgreso}/${this.cajerosDisponibles}`\n    );\n\n    try {\n      // Ejecutamos la tarea as\xedncrona real\n      const resultado = await transaccion();\n      console.log(`\ud83c\udf89 [${nombreCliente}] Transacci\xf3n completada!`);\n      return resultado;\n    } finally {\n      // Pase lo que pase (\xe9xito o error), liberamos el cajero\n      this.tareasEnProgreso--;\n      console.log(\n        `\ud83d\udd04 [${nombreCliente}] Sali\xf3 del banco. ` +\n          `Cajeros ocupados: ${this.tareasEnProgreso}/${this.cajerosDisponibles}`\n      );\n\n      // Si hay gente esperando y queda hueco, atendemos al siguiente\n      this.atenderSiguiente();\n    }\n  }\n\n  // ------------------------------------------------------------\n  // atenderSiguiente()\n  // Saca el siguiente cliente de la cola (FIFO) y lo pone a ejecutar.\n  // ------------------------------------------------------------\n  atenderSiguiente() {\n    // S\xf3lo si hay alguien esperando y queda alg\xfan cajero libre\n    if (\n      this.filaDeEspera.length > 0 &&\n      this.tareasEnProgreso < this.cajerosDisponibles\n    ) {\n      // Extraemos el primero que lleg\xf3 (FIFO)\n      const siguienteCliente = this.filaDeEspera.shift();\n\n      console.log(`\ud83d\udc49 Llamando a: ${siguienteCliente.nombreCliente}`);\n\n      // Disparamos la promesa que ten\xedamos retenida en atenderCliente(...)\n      // Resolvi\xe9ndola con la promesa de ejecutarTransaccion(...)\n      // Nota: esto hace que la promesa original del cliente empiece a "correr" ahora.\n      siguienteCliente.resolve(\n        this.ejecutarTransaccion(\n          siguienteCliente.nombreCliente,\n          siguienteCliente.transaccion\n        )\n      );\n    }\n  }\n}\n\n// ============================================================\n// \ud83e\uddea SIMULACI\xd3N DEL BANCO (demo reproducible)\n// ============================================================\n// Creamos un banco con 2 cajeros y lanzamos 5 "clientes" en paralelo.\n// S\xf3lo 2 se ejecutar\xe1n a la vez; los otros esperar\xe1n su turno.\n\nasync function simularBanco() {\n  // Banco con s\xf3lo 2 cajeros (concurrencia m\xe1xima = 2)\n  const miBanco = new Banco(2);\n\n  // Transacci\xf3n simulada: devuelve una promesa que resuelve tras \'duracion\' ms\n  function hacerTransaccion(duracion = 2000) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(`Transacci\xf3n de ${duracion}ms completada`);\n      }, duracion);\n    });\n  }\n\n  console.log("\ud83d\ude80 INICIANDO SIMULACI\xd3N - Banco con 2 cajeros");\n  console.log("=============================================");\n\n  // Llegan 5 clientes "a la vez"\n  const clientes = [\n    miBanco.atenderCliente("Ana", () => hacerTransaccion(1000)),\n    miBanco.atenderCliente("Carlos", () => hacerTransaccion(3000)),\n    miBanco.atenderCliente("Maria", () => hacerTransaccion(2000)),\n    miBanco.atenderCliente("Pedro", () => hacerTransaccion(1500)),\n    miBanco.atenderCliente("Laura", () => hacerTransaccion(2500)),\n  ];\n\n  // Esperamos a que TODOS terminen (conserva el orden de la llamada)\n  const resultados = await Promise.all(clientes);\n\n  console.log("=============================================");\n  console.log("\ud83c\udfc1 TODOS LOS CLIENTES ATENDIDOS!");\n  console.log("Resultados:", resultados);\n}\n\n// Ejecutamos la simulaci\xf3n\nsimularBanco();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"2-limitaci\xf3n-simple-para-peticiones-http",children:"2. Limitaci\xf3n Simple para Peticiones HTTP"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ==================================================================\n// \ud83c\udf10 LimitadorDeAPI \u2014 Controla cu\xe1ntas peticiones simult\xe1neas puedes ejecutar\n// ==================================================================\n// Patr\xf3n \xfatil cuando necesitas lanzar muchas peticiones (fetch, descargas, etc.)\n// pero no quieres saturar al servidor ni disparar errores por "rate limit".\n// Usa una cola FIFO simple para ir liberando peticiones una a una.\n\nclass LimitadorDeAPI {\n  constructor(limiteSimultaneas) {\n    // N\xfamero m\xe1ximo de peticiones activas en paralelo\n    this.limite = limiteSimultaneas;\n\n    // Cu\xe1ntas peticiones se est\xe1n ejecutando ahora mismo\n    this.enEjecucion = 0;\n\n    // Cola de resolvers (promesas pendientes) cuando se alcanza el l\xedmite\n    this.cola = [];\n  }\n\n  // --------------------------------------------------------------\n  // ejecutar(peticion)\n  // - peticion: funci\xf3n as\xedncrona que representa la operaci\xf3n real\n  //   (por ejemplo, fetch, descarga, llamada a base de datos)\n  // Devuelve: la promesa que resuelve cuando se completa la petici\xf3n.\n  // --------------------------------------------------------------\n  async ejecutar(peticion) {\n    console.log(\n      `\ud83d\udce1 Peticiones en ejecuci\xf3n: ${this.enEjecucion}/${this.limite}`\n    );\n\n    // Si ya estamos en el l\xedmite de peticiones simult\xe1neas\n    if (this.enEjecucion >= this.limite) {\n      console.log(`\u23f3 L\xedmite alcanzado. Petici\xf3n en cola...`);\n\n      // Creamos una promesa que no se resuelve hasta que\n      // una petici\xf3n anterior termine y libere espacio.\n      await new Promise((resolve) => this.cola.push(resolve));\n      // \u26a1 En este punto, cuando se llame a resolve() m\xe1s adelante,\n      // la ejecuci\xf3n contin\xfaa y la petici\xf3n "entra en juego".\n    }\n\n    // Ahora tenemos un "slot" libre para ejecutar la petici\xf3n\n    this.enEjecucion++;\n\n    try {\n      console.log(\n        `\ud83d\ude80 Ejecutando petici\xf3n... (${this.enEjecucion}/${this.limite} activas)`\n      );\n\n      // Ejecutamos la funci\xf3n que representa la petici\xf3n real\n      const resultado = await peticion();\n\n      // Devolvemos el resultado para encadenar en Promise.all\n      return resultado;\n    } finally {\n      // \ud83e\uddf9 Liberamos espacio S\xcd O S\xcd (incluso si la petici\xf3n falla)\n      this.enEjecucion--;\n      console.log(\n        `\u2705 Petici\xf3n completada. (${this.enEjecucion}/${this.limite} activas)`\n      );\n\n      // Si hay peticiones esperando en la cola, liberamos la siguiente\n      if (this.cola.length > 0) {\n        const siguiente = this.cola.shift();\n        // Llamar a resolve() desbloquea la promesa creada arriba\n        siguiente();\n      }\n    }\n  }\n}\n\n// ==================================================================\n// \ud83e\uddea EJEMPLO PR\xc1CTICO: Descarga controlada de im\xe1genes\n// ==================================================================\n// Simulamos descargas para demostrar que nunca hay m\xe1s de 2\n// ejecut\xe1ndose al mismo tiempo, aunque lancemos 5 de golpe.\n\nasync function descargarImagenes() {\n  // Creamos un limitador con m\xe1ximo 2 peticiones simult\xe1neas\n  const limitador = new LimitadorDeAPI(2);\n\n  // URLs de im\xe1genes a descargar (simuladas)\n  const urlsDeImagenes = [\n    "<https://ejemplo.com/imagen1.jpg>",\n    "<https://ejemplo.com/imagen2.jpg>",\n    "<https://ejemplo.com/imagen3.jpg>",\n    "<https://ejemplo.com/imagen4.jpg>",\n    "<https://ejemplo.com/imagen5.jpg>",\n  ];\n\n  console.log("\ud83d\uddbc\ufe0f INICIANDO DESCARGA DE 5 IM\xc1GENES (m\xe1ximo 2 simult\xe1neas)");\n\n  // Mapeamos cada URL a una tarea limitada por el limitador\n  const descargas = urlsDeImagenes.map(async (url, index) => {\n    // Le decimos al limitador: \u201cejecuta esto cuando haya hueco\u201d\n    return limitador.ejecutar(async () => {\n      console.log(`\u2b07\ufe0f Descargando imagen ${index + 1}: ${url}`);\n\n      // Simulamos el tiempo de descarga (1\u20133 segundos)\n      await new Promise((resolve) =>\n        setTimeout(resolve, 1000 + Math.random() * 2000)\n      );\n\n      console.log(`\u2705 Imagen ${index + 1} descargada`);\n      return `Imagen_${index + 1}_completada`;\n    });\n  });\n\n  // Promise.all lanza todas las tareas, pero el limitador asegura\n  // que s\xf3lo 2 est\xe9n activas al mismo tiempo.\n  const resultados = await Promise.all(descargas);\n\n  console.log("\ud83c\udf89 TODAS LAS IM\xc1GENES DESCARGADAS:", resultados);\n}\n\n// Ejecuta la demo si quieres probarlo\n// descargarImagenes();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"3-patr\xf3n-pool-de-workers-reutilizable",children:'3. Patr\xf3n "Pool de Workers" Reutilizable'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ===================================================================\n// \ud83e\uddf5 PoolDeTrabajo: pool gen\xe9rico con N "workers" y cola FIFO\n// ===================================================================\n// Patr\xf3n t\xedpico para controlar concurrencia de tareas heterog\xe9neas\n// (I/O, CPU, llamadas a API, procesamiento de archivos, etc.)\n// - Hasta `tama\xf1oPool` tareas simult\xe1neas.\n// - Si no hay worker libre, la tarea entra en cola.\n// - Cuando un worker se libera, toma la siguiente tarea (FIFO).\nclass PoolDeTrabajo {\n  constructor(tama\xf1oPool) {\n    // Capacidad m\xe1xima simult\xe1nea (n\xfamero de workers)\n    this.tama\xf1o = tama\xf1oPool;\n\n    // M\xe9trica de cu\xe1ntos workers est\xe1n ocupados ahora\n    this.workersActivos = 0;\n\n    // Cola de espera FIFO con elementos { tarea, nombreTarea, resolve, reject }\n    this.cola = [];\n\n    // Representaci\xf3n \u201cl\xf3gica\u201d de los workers (id + flag ocupado)\n    this.workers = Array.from({ length: tama\xf1oPool }, (_, i) => ({\n      id: i + 1,\n      ocupado: false,\n    }));\n  }\n\n  // ---------------------------------------------------------------\n  // ejecutar(tarea, nombreTarea?)\n  // - tarea: funci\xf3n as\xedncrona () => Promise<any>\n  // - nombreTarea: etiqueta para logs/observabilidad\n  // Devuelve una promesa que resuelve/rechaza con el resultado de `tarea`.\n  // ---------------------------------------------------------------\n  async ejecutar(tarea, nombreTarea = "tarea") {\n    // 1) \xbfhay alg\xfan worker libre?\n    const workerLibre = this.workers.find((w) => !w.ocupado);\n\n    if (workerLibre) {\n      // S\xed \u2192 asignamos inmediatamente al worker y arrancamos\n      return this._asignarTarea(workerLibre, tarea, nombreTarea);\n    }\n\n    // 2) No hay worker libre \u2192 encolamos la tarea y devolvemos\n    //    una promesa que resolveremos cuando haya hueco.\n    console.log(\n      `\ud83d\udccb [${nombreTarea}] En cola. Cola actual: ${this.cola.length + 1}`\n    );\n\n    return new Promise((resolve, reject) => {\n      this.cola.push({ tarea, nombreTarea, resolve, reject });\n    });\n  }\n\n  // ---------------------------------------------------------------\n  // _asignarTarea(worker, tarea, nombreTarea)\n  // Marca el worker como ocupado, ejecuta la tarea y garantiza liberar\n  // el worker (y disparar la siguiente) en el `finally`.\n  // ---------------------------------------------------------------\n  async _asignarTarea(worker, tarea, nombreTarea) {\n    worker.ocupado = true;\n    this.workersActivos++;\n\n    console.log(`\ud83d\udc77 Worker ${worker.id} ejecutando: ${nombreTarea}`);\n    console.log(`   Workers activos: ${this.workersActivos}/${this.tama\xf1o}`);\n\n    try {\n      // Ejecutamos la tarea real (puede resolver o rechazar)\n      const resultado = await tarea();\n      return resultado;\n    } catch (error) {\n      // Rechazamos hacia arriba (no tragamos el error aqu\xed)\n      throw error;\n    } finally {\n      // \ud83d\udd10 Siempre liberar el worker (aunque la tarea falle)\n      worker.ocupado = false;\n      this.workersActivos--;\n\n      console.log(`\ud83c\udd93 Worker ${worker.id} liberado`);\n      console.log(`   Workers activos: ${this.workersActivos}/${this.tama\xf1o}`);\n\n      // Y despu\xe9s de liberar, intentamos despachar la siguiente en cola\n      this._procesarSiguiente();\n    }\n  }\n\n  // ---------------------------------------------------------------\n  // _procesarSiguiente()\n  // Si hay cola y un worker libre, saca el primero (FIFO) y lo lanza.\n  // Encadena el resultado a la promesa encolada (resolve/reject).\n  // ---------------------------------------------------------------\n  _procesarSiguiente() {\n    if (this.cola.length === 0) return;\n\n    const workerLibre = this.workers.find((w) => !w.ocupado);\n    if (workerLibre && this.cola.length > 0) {\n      const siguiente = this.cola.shift(); // FIFO\n      console.log(`\ud83d\udc49 Siguiente en cola: ${siguiente.nombreTarea}`);\n\n      // Lanzamos la tarea en el worker libre, y encadenamos su resultado\n      // a la promesa que devolvimos cuando se encol\xf3.\n      this._asignarTarea(workerLibre, siguiente.tarea, siguiente.nombreTarea)\n        .then(siguiente.resolve)\n        .catch(siguiente.reject);\n    }\n  }\n}\n\n// ===================================================================\n// \ud83e\uddea EJEMPLO: Procesamiento de archivos con diferentes duraciones\n// ===================================================================\n// - M\xe1ximo 3 archivos proces\xe1ndose a la vez.\n// - Los dem\xe1s esperan en cola y entran cuando se libere un worker.\nasync function procesarArchivos() {\n  const pool = new PoolDeTrabajo(3); // 3 workers m\xe1ximo\n\n  const archivos = [\n    "documento1.pdf",\n    "imagen1.jpg",\n    "video1.mp4",\n    "documento2.pdf",\n    "imagen2.jpg",\n    "video2.mp4",\n    "documento3.pdf",\n    "imagen3.jpg",\n  ];\n\n  console.log("\ud83d\udcc1 PROCESANDO 8 ARCHIVOS (m\xe1ximo 3 simult\xe1neos)");\n  console.log("==============================================");\n\n  // Mapeamos cada archivo a una tarea limitada por el pool\n  const procesos = archivos.map(async (archivo, index) => {\n    return pool.ejecutar(async () => {\n      console.log(`\ud83d\udd04 Procesando: ${archivo}`);\n\n      // Simulamos \u201ctrabajo\u201d con distintas duraciones por tipo\n      let tiempoProcesamiento;\n      if (archivo.endsWith(".pdf")) {\n        tiempoProcesamiento = 2000; // PDFs ~2s\n      } else if (archivo.endsWith(".jpg")) {\n        tiempoProcesamiento = 1500; // JPG ~1.5s\n      } else {\n        tiempoProcesamiento = 3000; // MP4 ~3s\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, tiempoProcesamiento));\n\n      console.log(`\u2705 Completado: ${archivo} (${tiempoProcesamiento}ms)`);\n      return `${archivo}_procesado`;\n    }, `Archivo_${index + 1}`);\n  });\n\n  // Esperamos todos los resultados (mantiene el orden de creaci\xf3n)\n  const resultados = await Promise.all(procesos);\n  console.log("==============================================");\n  console.log("\ud83c\udf89 TODOS LOS ARCHIVOS PROCESADOS!");\n  console.log("Resultados:", resultados);\n}\n\n// Ejecutar ejemplo\n// procesarArchivos();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"4-ejemplo-con-apis-reales-fetch",children:"4. Ejemplo con APIs Reales (fetch)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// ======================================================\n// \ud83c\udf10 LimitadorDePeticiones \u2014 throttle/concurrency para fetch\n// ======================================================\n// Controla cu\xe1ntas peticiones HTTP pueden estar activas a la vez.\n// Si alcanzas el m\xe1ximo, las siguientes esperan en una cola FIFO\n// hasta que se libere un "slot".\n\nclass LimitadorDePeticiones {\n  constructor(maxSimultaneas) {\n    // M\xe1ximo de peticiones simult\xe1neas permitidas\n    this.max = maxSimultaneas;\n\n    // Contador de peticiones actualmente en vuelo\n    this.actual = 0;\n\n    // Cola de "resolvers" para desbloquear cuando haya hueco\n    this.cola = [];\n  }\n\n  // ------------------------------------------------------\n  // fetchLimitado(url, options?)\n  // Encola/ejecuta un fetch respetando el l\xedmite de concurrencia.\n  // Devuelve la misma Response que `fetch` (no toca el resultado).\n  // ------------------------------------------------------\n  async fetchLimitado(url, options = {}) {\n    // Si ya estamos en el l\xedmite, espera tu turno (FIFO)\n    if (this.actual >= this.max) {\n      await new Promise((resolve) => this.cola.push(resolve));\n      // cuando alguien termine, llamaremos a resolve() y seguir\xe1s\n    }\n\n    // Reservamos un "slot" de concurrencia\n    this.actual++;\n    console.log(`\ud83c\udf10 Petici\xf3n a: ${url} (${this.actual}/${this.max} activas)`);\n\n    try {\n      // Ejecutamos la petici\xf3n real\n      const respuesta = await fetch(url, options);\n      return respuesta; // devolvemos la Response para que el llamador decida\n    } finally {\n      // Pase lo que pase (\xe9xito o error), liberamos el slot\n      this.actual--;\n\n      // Si hay gente esperando en la cola, desbloquea al siguiente\n      if (this.cola.length > 0) {\n        const siguiente = this.cola.shift(); // FIFO\n        siguiente(); // permite que contin\xfae la pr\xf3xima petici\xf3n en espera\n      }\n    }\n  }\n}\n\n// ======================================================\n// \ud83e\uddea USO PR\xc1CTICO: Consultar m\xfaltiples APIs con l\xedmite = 2\n// ======================================================\nasync function consultarMultiplesAPIs() {\n  const limitador = new LimitadorDePeticiones(2); // M\xe1ximo 2 peticiones en paralelo\n\n  const apis = [\n    "<https://jsonplaceholder.typicode.com/posts/1>",\n    "<https://jsonplaceholder.typicode.com/posts/2>",\n    "<https://jsonplaceholder.typicode.com/posts/3>",\n    "<https://jsonplaceholder.typicode.com/posts/4>",\n    "<https://jsonplaceholder.typicode.com/posts/5>",\n  ];\n\n  console.log("\ud83d\ude80 CONSULTANDO 5 APIS (m\xe1ximo 2 simult\xe1neas)");\n\n  // Creamos promesas: todas "salen" ya, pero el limitador frena la concurrencia real\n  const consultas = apis.map(async (url, index) => {\n    try {\n      const respuesta = await limitador.fetchLimitado(url);\n      const datos = await respuesta.json();\n\n      console.log(\n        `\u2705 API ${index + 1} respondi\xf3: ${datos.title.substring(0, 20)}...`\n      );\n      return datos; // acumulamos el JSON\n    } catch (error) {\n      console.log(`\u274c Error en API ${index + 1}:`, error.message);\n      return null; // no reventamos Promise.all por una sola ca\xedda\n    }\n  });\n\n  // Esperamos a que acaben todas (el limitador mantiene 2 activas como m\xe1ximo)\n  const resultados = await Promise.all(consultas);\n\n  console.log(\n    "\ud83c\udf89 Consultas completadas. Resultados obtenidos:",\n    resultados.length\n  );\n}\n\n// Para probar localmente, descomenta:\n// consultarMultiplesAPIs();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"resumen-visual",children:"Resumen Visual:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Sin limitaci\xf3n (CAOS):\n[\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25] [\ud83d\udd25]\n\u2191 10 tareas al mismo tiempo \u2192 Servidor colapsa\n\nCon limitaci\xf3n (ORDEN):\n[\ud83d\udc77] [\ud83d\udc77] [\ud83d\udc77] [\u23f3] [\u23f3] [\u23f3] [\u23f3] [\u23f3] [\u23f3] [\u23f3]\n\u2191 3 trabajando + 7 esperando \u2192 Todo fluye mejor\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"reglas-de-oro",children:"Reglas de Oro:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Identifica cuellos de botella"})," - \xbfQu\xe9 recursos son limitados?"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Usa l\xedmites conservadores"})," - Mejor prevenir que curar"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Siempre libera recursos"})," - Usa ",(0,r.jsx)(e.code,{children:"finally"})," para evitar bloqueos"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Maneja la cola"})," - Aseg\xfarate de que las tareas en espera se ejecuten"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Monitoriza"})," - Lleva cuenta de lo que est\xe1 pasando"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\xbfVen c\xf3mo con estos ejemplos podemos controlar el flujo de trabajo y evitar saturar nuestros sistemas? \xbfLes gustar\xeda que profundice en alg\xfan caso de uso espec\xedfico?"}),"\n",(0,r.jsx)(e.h1,{id:"debouncing-y-throttling---explicaci\xf3n-sencilla",children:"Debouncing y Throttling - Explicaci\xf3n Sencilla"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"por-qu\xe9-necesitamos-esto",children:"\xbfPor qu\xe9 necesitamos esto?"}),"\n",(0,r.jsxs)(e.p,{children:["Imaginen que tienen un ",(0,r.jsx)(e.strong,{children:"interruptor de luz"})," que cada vez que lo tocan, enciende o apaga la luz. Si alguien empieza a tocar el interruptor muy r\xe1pido (\xa1click, click, click!), la luz parpadea locamente y pueden fundir la bombilla."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Debouncing y Throttling"}),' evitan este "parpadeo" en nuestras aplicaciones.']}),"\n",(0,r.jsx)(e.h2,{id:"debouncing",children:"Debouncing"}),"\n",(0,r.jsx)(e.h3,{id:"analog\xeda-el-ascensor",children:"Analog\xeda: El Ascensor"}),"\n",(0,r.jsx)(e.p,{children:"Imaginen un ascensor en un edificio:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sin debouncing"}),": El ascensor se mueve inmediatamente cada vez que alguien pulsa un bot\xf3n (\xa1caos!)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con debouncing"}),": El ascensor espera 2 segundos despu\xe9s del \xfaltimo bot\xf3n pulsado, por si alguien m\xe1s va a pulsar otro bot\xf3n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * DEBOUNCE - Espera a que terminen los eventos r\xe1pidos antes de ejecutar\n *\n * Como un ascensor que espera 2 segundos despu\xe9s del \xfaltimo bot\xf3n pulsado\n * antes de moverse, por si alguien m\xe1s va a pulsar otro bot\xf3n.\n */\n\nfunction debounce(funcionOriginal, tiempoEspera) {\n  let timeoutId; // Esto es como el "temporizador del ascensor"\n\n  // Esta es la funci\xf3n que devolvemos (la versi\xf3n "debounceada")\n  return function (...args) {\n    console.log(\n      `\u23f0 Evento detectado! Reiniciando temporizador de ${tiempoEspera}ms...`\n    );\n\n    // SIEMPRE: Cancelar el temporizador anterior\n    // Es como decir: "Olv\xeddate del viaje que iba a hacer, tengo un nuevo destino"\n    clearTimeout(timeoutId);\n\n    // Configurar NUEVO temporizador\n    timeoutId = setTimeout(() => {\n      console.log("\ud83d\ude80 Ejecutando funci\xf3n despu\xe9s del periodo de espera!");\n      funcionOriginal.apply(this, args);\n    }, tiempoEspera);\n  };\n}\n\n// EJEMPLO REAL: B\xfasqueda en tiempo real\nfunction buscarEnBaseDeDatos(terminoBusqueda) {\n  // Esto simula una petici\xf3n costosa a una API\n  console.log(`\ud83d\udd0d BUSCANDO en API: "${terminoBusqueda}"`);\n  console.log("\ud83d\udcca Resultados para:", terminoBusqueda);\n}\n\n// Creamos la versi\xf3n "debounceada" que espera 500ms despu\xe9s del \xfaltimo typing\nconst buscarDebounceado = debounce(buscarEnBaseDeDatos, 500);\n\n// SIMULACI\xd3N: Usuario escribiendo en un search input\nfunction simularUsuarioEscribiendo() {\n  console.log("\ud83d\udc64 Usuario empez\xf3 a escribir...");\n\n  // El usuario escribe r\xe1pido: "h", "ho", "hol", "hola"\n  setTimeout(() => buscarDebounceado("h"), 100); // Se cancela\n  setTimeout(() => buscarDebounceado("ho"), 200); // Se cancela\n  setTimeout(() => buscarDebounceado("hol"), 300); // Se cancela\n  setTimeout(() => buscarDebounceado("hola"), 400); // \xa1Este se ejecuta!\n\n  // El usuario sigue escribiendo despu\xe9s de una pausa\n  setTimeout(() => {\n    console.log("\\\\n\ud83d\udc64 Usuario sigue escribiendo despu\xe9s de pausa...");\n    buscarDebounceado("hola m"); // Se cancela\n    buscarDebounceado("hola mu"); // Se cancela\n    buscarDebounceado("hola mun"); // Se cancela\n    buscarDebounceado("hola mund"); // Se cancela\n    buscarDebounceado("hola mundo"); // \xa1Este se ejecuta!\n  }, 1500);\n}\n\n// Ejecutar simulaci\xf3n\n// simularUsuarioEscribiendo();\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-pr\xe1ctico-search-input-en-una-web",children:"Ejemplo Pr\xe1ctico: Search Input en una Web"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * EJEMPLO DEL MUNDO REAL: Search input con Debouncing\n */\n\nclass SearchComponent {\n  constructor() {\n    this.buscarDebounceado = debounce(this.buscarReal, 300);\n  }\n\n  // Esta funci\xf3n se llama CADA VEZ que el usuario escribe\n  onInputChange(termino) {\n    console.log(`\u2328\ufe0f Usuario escribi\xf3: "${termino}"`);\n\n    // En vez de buscar inmediatamente, usamos la versi\xf3n debounceada\n    this.buscarDebounceado(termino);\n  }\n\n  // Esta es la funci\xf3n REAL que hace la b\xfasqueda (costosa)\n  buscarReal(termino) {\n    if (termino.length === 0) {\n      console.log("\u274c T\xe9rmino vac\xedo - no buscar");\n      return;\n    }\n\n    // Simulamos una petici\xf3n HTTP a una API\n    console.log("\ud83c\udf10 Haciendo petici\xf3n REAL a la API con:", termino);\n\n    // En una app real, aqu\xed ir\xeda:\n    // fetch(`/api/search?q=${termino}`)\n    //   .then(response => response.json())\n    //   .then(data => this.mostrarResultados(data));\n  }\n}\n\n// DEMOSTRACI\xd3N\nfunction demostrarSearch() {\n  const search = new SearchComponent();\n\n  console.log("\ud83c\udfaf DEMO: Usuario escribiendo \'javascript\' r\xe1pidamente");\n  console.log("===================================================");\n\n  const texto = "javascript";\n  let terminoActual = "";\n\n  // Simulamos typing r\xe1pido\n  for (let letra of texto) {\n    terminoActual += letra;\n    search.onInputChange(terminoActual);\n  }\n\n  console.log("===================================================");\n  console.log("\ud83d\udca1 Nota: Solo se hizo 1 b\xfasqueda REAL (por \'javascript\')");\n  console.log("\ud83d\udca1 En vez de 10 b\xfasquedas (una por cada letra)");\n}\n\n// Ejecutar demo\n// demostrarSearch();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"throttling",children:"Throttling"}),"\n",(0,r.jsx)(e.h3,{id:"analog\xeda-el-sem\xe1foro",children:"Analog\xeda: El Sem\xe1foro"}),"\n",(0,r.jsx)(e.p,{children:"Imaginen un sem\xe1foro en una calle muy transitada:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sin throttling"}),": Todos los coches pasan a la vez (embotellamiento)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Con throttling"}),": Solo pasan X coches cada Y tiempo (flujo controlado)"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * THROTTLE - Ejecuta la funci\xf3n como m\xe1ximo una vez cada X tiempo\n *\n * Como un sem\xe1foro que solo deja pasar coches cada 2 segundos,\n * sin importar cu\xe1ntos coches lleguen en ese tiempo.\n */\n\nfunction throttle(funcionOriginal, intervalo) {\n  let ultimaEjecucion = 0; // Cu\xe1ndo se ejecut\xf3 por \xfaltima vez\n  let timeoutId = null; // Para el caso del "trailing edge"\n\n  return function (...args) {\n    const ahora = Date.now();\n    const tiempoDesdeUltimaEjecucion = ahora - ultimaEjecucion;\n    const tiempoRestante = intervalo - tiempoDesdeUltimaEjecucion;\n\n    console.log(\n      `\u23f1\ufe0f  Tiempo desde \xfaltima ejecuci\xf3n: ${tiempoDesdeUltimaEjecucion}ms`\n    );\n\n    // Si ha pasado suficiente tiempo desde la \xfaltima ejecuci\xf3n\n    if (tiempoDesdeUltimaEjecucion >= intervalo) {\n      console.log("\ud83d\ude80 Ejecuci\xf3n INMEDIATA (pas\xf3 el intervalo)");\n\n      // Ejecutamos la funci\xf3n\n      funcionOriginal.apply(this, args);\n      ultimaEjecucion = ahora;\n    } else if (!timeoutId) {\n      // Si NO ha pasado suficiente tiempo, programamos para despu\xe9s\n      console.log(`\u23f3 Programando ejecuci\xf3n en ${tiempoRestante}ms...`);\n\n      timeoutId = setTimeout(() => {\n        console.log("\ud83d\ude80 Ejecuci\xf3n PROGRAMADA (final del intervalo)");\n        funcionOriginal.apply(this, args);\n        ultimaEjecucion = Date.now();\n        timeoutId = null;\n      }, tiempoRestante);\n    } else {\n      console.log("\u274c Ejecuci\xf3n BLOQUEADA - Ya hay una programada");\n    }\n  };\n}\n\n// EJEMPLO REAL: Tracking de scroll\nfunction trackScrollPosition(posicion) {\n  console.log(`\ud83d\udcca Guardando posici\xf3n de scroll: ${posicion}px`);\n  // En una app real: enviar analytics, lazy load images, etc.\n}\n\n// Throttle: m\xe1ximo una vez cada 100ms\nconst trackScrollThrottled = throttle(trackScrollPosition, 100);\n\n// SIMULACI\xd3N: Eventos de scroll r\xe1pidos\nfunction simularScrollRapido() {\n  console.log("\ud83d\uddb1\ufe0f SIMULANDO SCROLL R\xc1PIDO DEL USUARIO");\n  console.log("======================================");\n\n  // El usuario hace scroll muy r\xe1pido (muchos eventos en poco tiempo)\n  const posiciones = [100, 150, 200, 250, 300, 350, 400, 450, 500];\n\n  posiciones.forEach((pos, index) => {\n    setTimeout(() => {\n      console.log(`\\\\n\ud83d\udccd Evento scroll ${index + 1}: ${pos}px`);\n      trackScrollThrottled(pos);\n    }, index * 50); // Eventos cada 50ms (m\xe1s r\xe1pido que el throttle de 100ms)\n  });\n}\n\n// Ejecutar simulaci\xf3n\n// simularScrollRapido();\n'})}),"\n",(0,r.jsx)(e.h3,{id:"ejemplo-pr\xe1ctico-bot\xf3n-de-cargar-m\xe1s",children:'Ejemplo Pr\xe1ctico: Bot\xf3n de "Cargar M\xe1s"'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * EJEMPLO DEL MUNDO REAL: Bot\xf3n que evita clicks m\xfaltiples\n */\n\nclass LoadMoreButton {\n  constructor() {\n    this.cargarMasThrottled = throttle(this.cargarMasReal, 2000); // 2 segundos\n    this.clickCount = 0;\n  }\n\n  // Este m\xe9todo se llama cuando el usuario hace click\n  onButtonClick() {\n    this.clickCount++;\n    console.log(`\ud83d\uddb1\ufe0f Click #${this.clickCount} detectado`);\n\n    // Usamos la versi\xf3n throttled para evitar clicks m\xfaltiples\n    this.cargarMasThrottled();\n  }\n\n  // Esta es la funci\xf3n REAL que carga m\xe1s datos\n  cargarMasReal() {\n    console.log("\ud83d\ude80 CARGANDO M\xc1S DATOS (petici\xf3n REAL a la API)");\n\n    // Simulamos una petici\xf3n que tarda 1 segundo\n    setTimeout(() => {\n      console.log("\u2705 Datos cargados exitosamente");\n    }, 1000);\n  }\n}\n\n// DEMOSTRACI\xd3N\nfunction demostrarClicksMultiples() {\n  const button = new LoadMoreButton();\n\n  console.log("\ud83c\udfaf DEMO: Usuario haciendo clicks r\xe1pidos");\n  console.log("=======================================");\n\n  // Simulamos usuario haciendo clicks muy r\xe1pidos\n  for (let i = 1; i <= 5; i++) {\n    setTimeout(() => {\n      button.onButtonClick();\n    }, i * 300); // Clicks cada 300ms (m\xe1s r\xe1pido que el throttle de 2000ms)\n  }\n}\n\n// Ejecutar demo\n// demostrarClicksMultiples();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"comparaci\xf3n-directa",children:"Comparaci\xf3n directa"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * COMPARACI\xd3N: Debounce vs Throttle en el MISMO ejemplo\n */\n\nfunction mostrarMensaje(tipo, mensaje) {\n  console.log(`${tipo}: ${mensaje}`);\n}\n\n// Creamos ambas versiones\nconst mostrarDebounce = debounce((msg) => mostrarMensaje("DEBOUNCE", msg), 500);\n\nconst mostrarThrottle = throttle((msg) => mostrarMensaje("THROTTLE", msg), 500);\n\nfunction comparacionDirecta() {\n  console.log("\ud83c\udfad COMPARACI\xd3N DIRECTA: Debounce vs Throttle");\n  console.log("============================================");\n  console.log(\n    "Eventos r\xe1pidos cada 200ms (m\xe1s r\xe1pido que el intervalo de 500ms)"\n  );\n  console.log("------------------------------------------------------------");\n\n  // Simulamos 5 eventos r\xe1pidos\n  for (let i = 1; i <= 5; i++) {\n    setTimeout(() => {\n      const mensaje = `Evento ${i} a los ${i * 200}ms`;\n      console.log(`\\\\n\ud83d\udd04 ${mensaje}`);\n\n      mostrarDebounce(mensaje);\n      mostrarThrottle(mensaje);\n    }, i * 200);\n  }\n}\n\n// Ejecutar comparaci\xf3n\n// comparacionDirecta();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"casos-de-uso-del-mundo-real",children:"Casos de uso del mundo real"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'/**\n * CASOS DE USO PR\xc1CTICOS - Cu\xe1ndo usar cada uno\n */\n\nclass CasosDeUsoReales {\n  constructor() {\n    this.setupEventListeners();\n  }\n\n  setupEventListeners() {\n    // 1\ufe0f\u20e3 DEBOUNCE - Para b\xfasquedas en tiempo real\n    const searchInput = document.createElement("input");\n    searchInput.placeholder = "Buscar...";\n    searchInput.addEventListener(\n      "input",\n      debounce((e) => this.buscarProductos(e.target.value), 300)\n    );\n\n    // 2\ufe0f\u20e3 THROTTLE - Para eventos de scroll/resize\n    window.addEventListener(\n      "scroll",\n      throttle(() => this.verificarElementosVisibles(), 100)\n    );\n\n    window.addEventListener(\n      "resize",\n      throttle(() => this.actualizarLayout(), 250)\n    );\n\n    // 3\ufe0f\u20e3 THROTTLE - Para evitar spam de botones\n    const submitButton = document.createElement("button");\n    submitButton.textContent = "Enviar Formulario";\n    submitButton.addEventListener(\n      "click",\n      throttle(() => this.enviarFormulario(), 2000, { trailing: false })\n    );\n  }\n\n  buscarProductos(termino) {\n    console.log(`\ud83d\udd0d Buscando productos: "${termino}"`);\n    // L\xf3gica real de b\xfasqueda...\n  }\n\n  verificarElementosVisibles() {\n    console.log("\ud83d\udc40 Verificando elementos visibles en viewport");\n    // L\xf3gica para lazy loading, animaciones, etc.\n  }\n\n  actualizarLayout() {\n    console.log("\ud83d\udcd0 Actualizando layout despu\xe9s de resize");\n    // Recalcular layouts responsivos\n  }\n\n  enviarFormulario() {\n    console.log("\ud83d\udce7 Enviando formulario (evita doble env\xedo)");\n    // L\xf3gica de env\xedo del formulario\n  }\n}\n\n// RESUMEN VISUAL\nfunction mostrarResumen() {\n  console.log(`\n\ud83c\udfaf RESUMEN - CU\xc1NDO USAR CADA UNO:\n\nDEBOUNCE (\u23f0 Espera a que termine):\n\u2705 B\xfasquedas en tiempo real\n\u2705 Validaci\xf3n de formularios mientras se escribe\n\u2705 Auto-guardado mientras se escribe\n\u2705 Filtros que se actualizan al escribir\n\nTHROTTLE (\ud83d\udea6 Limita la frecuencia):\n\u2705 Eventos de scroll (infinite scroll, lazy load)\n\u2705 Eventos de resize (responsive design)\n\u2705 Eventos de mouse move (tooltips, efectos)\n\u2705 Clicks en botones (evitar spam/doble env\xedo)\n\n\ud83d\udca1 REGLA SIMPLE:\n\u2022 Usa DEBOUNCE cuando quieres ESPERAR a que termine la acci\xf3n r\xe1pida\n\u2022 Usa THROTTLE cuando quieres PERMITIR la acci\xf3n pero menos frecuente\n    `);\n}\n\n// Mostrar resumen\nmostrarResumen();\n'})}),"\n",(0,r.jsx)(e.h2,{id:"resumen-final",children:"Resumen Final:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Caracter\xedstica"}),(0,r.jsx)(e.th,{children:"Debouncing"}),(0,r.jsx)(e.th,{children:"Throttling"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Comportamiento"})}),(0,r.jsx)(e.td,{children:"Espera a que termine"}),(0,r.jsx)(e.td,{children:"Ejecuta peri\xf3dicamente"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Analog\xeda"})}),(0,r.jsx)(e.td,{children:"Ascensor que espera"}),(0,r.jsx)(e.td,{children:"Sem\xe1foro que controla"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Caso de uso"})}),(0,r.jsx)(e.td,{children:"Search inputs"}),(0,r.jsx)(e.td,{children:"Scroll events"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Resultado"})}),(0,r.jsx)(e.td,{children:"1 ejecuci\xf3n al final"}),(0,r.jsx)(e.td,{children:"Ejecuciones espaciadas"})]})]})]}),"\n",(0,r.jsx)(e.hr,{})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>t});var o=a(6540);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);