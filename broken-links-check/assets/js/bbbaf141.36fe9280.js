"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[2810],{6058:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"js/iterables","title":"Iterables","description":"Introducci\xf3n a los Objetos Iterables","source":"@site/docs/js/iterables.md","sourceDirName":"js","slug":"/js/iterables","permalink":"/docuQuest/docs/js/iterables","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/iterables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Break & Continue","permalink":"/docuQuest/docs/js/breakContinue"},"next":{"title":"Sets","permalink":"/docuQuest/docs/js/sets"}}');var t=r(4848),a=r(8453);const s={},l="Iterables",i={},d=[{value:"Introducci\xf3n a los Objetos Iterables",id:"introducci\xf3n-a-los-objetos-iterables",level:2},{value:"El Protocolo Iterable en JavaScript",id:"el-protocolo-iterable-en-javascript",level:2},{value:"El M\xe9todo Symbol.iterator",id:"el-m\xe9todo-symboliterator",level:3},{value:"Ejemplo de Implementaci\xf3n del M\xe9todo Symbol.iterator",id:"ejemplo-de-implementaci\xf3n-del-m\xe9todo-symboliterator",level:3},{value:"Utilizando Objetos Iterables en JavaScript",id:"utilizando-objetos-iterables-en-javascript",level:2},{value:"1. Utilizando un Bucle <code>for...of</code>",id:"1-utilizando-un-bucle-forof",level:3},{value:"2. Utilizando el M\xe9todo <code>forEach()</code>",id:"2-utilizando-el-m\xe9todo-foreach",level:3},{value:"3. Utilizando M\xe9todos de Array como <code>map()</code>, <code>filter()</code> y <code>reduce()</code>",id:"3-utilizando-m\xe9todos-de-array-como-map-filter-y-reduce",level:3},{value:"4. Creando Objetos Iterables Personalizados",id:"4-creando-objetos-iterables-personalizados",level:3},{value:"Conclusiones y Consideraciones Finales",id:"conclusiones-y-consideraciones-finales",level:2}];function c(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"iterables",children:"Iterables"})}),"\n",(0,t.jsx)(o.h2,{id:"introducci\xf3n-a-los-objetos-iterables",children:"Introducci\xf3n a los Objetos Iterables"}),"\n",(0,t.jsxs)(o.p,{children:["Un objeto iterable en JavaScript es aquel que implementa el protocolo iterable. Este protocolo define un est\xe1ndar para iterar sobre los elementos de un objeto, lo que significa que el objeto puede ser recorrido secuencialmente mediante un bucle o utilizando constructores como ",(0,t.jsx)(o.code,{children:"for...of"})," o el m\xe9todo ",(0,t.jsx)(o.code,{children:"forEach()"}),"."]}),"\n",(0,t.jsx)(o.p,{children:"Los objetos iterables son una caracter\xedstica central en JavaScript, ya que permiten trabajar con una variedad de estructuras de datos, como arrays, sets, maps, e incluso objetos personalizados, de una manera uniforme y consistente."}),"\n",(0,t.jsx)(o.h2,{id:"el-protocolo-iterable-en-javascript",children:"El Protocolo Iterable en JavaScript"}),"\n",(0,t.jsxs)(o.p,{children:["El protocolo iterable en JavaScript es un mecanismo que permite a los objetos definir y personalizar su comportamiento de iteraci\xf3n. Para que un objeto sea iterable, debe implementar un m\xe9todo denominado ",(0,t.jsx)(o.code,{children:"Symbol.iterator"}),", que devuelve un iterador."]}),"\n",(0,t.jsx)(o.h3,{id:"el-m\xe9todo-symboliterator",children:"El M\xe9todo Symbol.iterator"}),"\n",(0,t.jsxs)(o.p,{children:["El m\xe9todo ",(0,t.jsx)(o.code,{children:"Symbol.iterator"})," es un s\xedmbolo especial en JavaScript que define la forma en que un objeto se itera. Cuando se utiliza un bucle ",(0,t.jsx)(o.code,{children:"for...of"})," u otros m\xe9todos de iteraci\xf3n en un objeto, JavaScript busca y utiliza el m\xe9todo ",(0,t.jsx)(o.code,{children:"Symbol.iterator"})," para obtener un iterador que permita recorrer los elementos del objeto."]}),"\n",(0,t.jsx)(o.h3,{id:"ejemplo-de-implementaci\xf3n-del-m\xe9todo-symboliterator",children:"Ejemplo de Implementaci\xf3n del M\xe9todo Symbol.iterator"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"const iterableObject = {\r\n  datos: [\"a\", \"b\", \"c\"],\r\n  [Symbol.iterator]() {\r\n    let indice = 0;\r\n    return {\r\n      next: () => {\r\n        if (indice < this.datos.length) {\r\n          return { value: this.datos[indice++], done: false };\r\n        } else {\r\n          return { done: true };\r\n        }\r\n      },\r\n    };\r\n  },\r\n};\r\n\r\n// Utilizando un bucle for...of para iterar sobre el objeto iterable\r\nfor (const elemento of iterableObject) {\r\n  console.log(elemento);\r\n}\r\n\r\n// Salida esperada: 'a', 'b', 'c'\n"})}),"\n",(0,t.jsxs)(o.p,{children:["En este ejemplo, ",(0,t.jsx)(o.code,{children:"iterableObject"})," es un objeto iterable que implementa el m\xe9todo ",(0,t.jsx)(o.code,{children:"Symbol.iterator"}),". Este m\xe9todo devuelve un iterador que recorre los elementos del array ",(0,t.jsx)(o.code,{children:"datos"})," del objeto."]}),"\n",(0,t.jsx)(o.h2,{id:"utilizando-objetos-iterables-en-javascript",children:"Utilizando Objetos Iterables en JavaScript"}),"\n",(0,t.jsx)(o.p,{children:"Los objetos iterables ofrecen una amplia gama de funcionalidades y posibilidades de uso en JavaScript. Algunas de las formas m\xe1s comunes de utilizar objetos iterables incluyen:"}),"\n",(0,t.jsxs)(o.h3,{id:"1-utilizando-un-bucle-forof",children:["1. Utilizando un Bucle ",(0,t.jsx)(o.code,{children:"for...of"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"const iterable = [1, 2, 3, 4, 5];\r\nfor (const elemento of iterable) {\r\n  console.log(elemento);\r\n}\n"})}),"\n",(0,t.jsxs)(o.h3,{id:"2-utilizando-el-m\xe9todo-foreach",children:["2. Utilizando el M\xe9todo ",(0,t.jsx)(o.code,{children:"forEach()"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"const iterable = new Set([1, 2, 3, 4, 5]);\r\niterable.forEach((elemento) => {\r\n  console.log(elemento);\r\n});\n"})}),"\n",(0,t.jsxs)(o.h3,{id:"3-utilizando-m\xe9todos-de-array-como-map-filter-y-reduce",children:["3. Utilizando M\xe9todos de Array como ",(0,t.jsx)(o.code,{children:"map()"}),", ",(0,t.jsx)(o.code,{children:"filter()"})," y ",(0,t.jsx)(o.code,{children:"reduce()"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"const iterable = [1, 2, 3, 4, 5];\r\nconst resultado = iterable.map((numero) => numero * 2);\r\nconsole.log(resultado); // Salida esperada: [2, 4, 6, 8, 10]\n"})}),"\n",(0,t.jsx)(o.h3,{id:"4-creando-objetos-iterables-personalizados",children:"4. Creando Objetos Iterables Personalizados"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'const objetoIterable = {\r\n  datos: ["a", "b", "c"],\r\n  [Symbol.iterator]() {\r\n    let indice = 0;\r\n    return {\r\n      next: () => {\r\n        if (indice < this.datos.length) {\r\n          return { value: this.datos[indice++], done: false };\r\n        } else {\r\n          return { done: true };\r\n        }\r\n      },\r\n    };\r\n  },\r\n};\r\n\r\nfor (const elemento of objetoIterable) {\r\n  console.log(elemento);\r\n}\n'})}),"\n",(0,t.jsx)(o.h2,{id:"conclusiones-y-consideraciones-finales",children:"Conclusiones y Consideraciones Finales"}),"\n",(0,t.jsxs)(o.p,{children:["En resumen, los objetos iterables en JavaScript proporcionan una forma poderosa y flexible de trabajar con conjuntos de datos de manera estructurada y eficiente. Al implementar el protocolo iterable y utilizar el m\xe9todo ",(0,t.jsx)(o.code,{children:"Symbol.iterator"}),", los objetos pueden ser iterados f\xe1cilmente utilizando bucles ",(0,t.jsx)(o.code,{children:"for...of"}),", m\xe9todos de iteraci\xf3n como ",(0,t.jsx)(o.code,{children:"forEach()"}),", y otros m\xe9todos de manipulaci\xf3n de datos."]}),"\n",(0,t.jsx)(o.p,{children:"Es importante tener en cuenta que no todos los objetos son iterables por defecto en JavaScript. Sin embargo, la mayor\xeda de las estructuras de datos incorporadas, como"}),"\n",(0,t.jsxs)(o.p,{children:["arrays, sets y maps, son iterables de forma predeterminada. Adem\xe1s, es posible crear objetos iterables personalizados implementando el m\xe9todo ",(0,t.jsx)(o.code,{children:"Symbol.iterator"}),"."]}),"\n",(0,t.jsx)(o.p,{children:"En conclusi\xf3n, comprender los conceptos fundamentales de los objetos iterables y c\xf3mo funcionan en JavaScript es esencial para cualquier desarrollador que desee escribir c\xf3digo limpio, modular y eficiente en este lenguaje de programaci\xf3n. Con esta comprensi\xf3n, los desarrolladores pueden aprovechar al m\xe1ximo las capacidades de iteraci\xf3n de JavaScript y escribir aplicaciones m\xe1s robustas y mantenibles."})]})}function u(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,o,r)=>{r.d(o,{R:()=>s,x:()=>l});var n=r(6540);const t={},a=n.createContext(t);function s(e){const o=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);