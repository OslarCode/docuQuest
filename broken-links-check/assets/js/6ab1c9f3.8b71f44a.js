"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[1534],{8387:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"backend/JSON/crud","title":"CRUD HTTP nativo con Node.js","description":"Objetivo","source":"@site/docs/backend/JSON/crud.md","sourceDirName":"backend/JSON","slug":"/backend/JSON/crud","permalink":"/docuQuest/docs/backend/JSON/crud","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/JSON/crud.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Validaci\xf3n y control de errores con JSON","permalink":"/docuQuest/docs/backend/JSON/validacionControlErrores"},"next":{"title":"Cliente HTML minimo para la API","permalink":"/docuQuest/docs/backend/JSON/clienteHTTP"}}');var o=e(4848),a=e(8453);const i={},t="CRUD HTTP nativo con Node.js",d={},c=[{value:"Objetivo",id:"objetivo",level:2},{value:"Estructura del proyecto",id:"estructura-del-proyecto",level:2},{value:"server.js \u2014 Servidor HTTP nativo con CRUD",id:"serverjs--servidor-http-nativo-con-crud",level:2},{value:"C\xf3mo probar r\xe1pidamente (curl)",id:"c\xf3mo-probar-r\xe1pidamente-curl",level:2},{value:"Notas did\xe1cticas",id:"notas-did\xe1cticas",level:2}];function l(r){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"crud-http-nativo-con-nodejs",children:"CRUD HTTP nativo con Node.js"})}),"\n",(0,o.jsx)(n.h2,{id:"objetivo",children:"Objetivo"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Exponer endpoints HTTP que operen sobre ",(0,o.jsx)(n.code,{children:"data/usuarios.json"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Reutilizar ",(0,o.jsx)(n.code,{children:"readJsonArray"}),", ",(0,o.jsx)(n.code,{children:"writeJsonArray"})," y las validaciones."]}),"\n",(0,o.jsx)(n.li,{children:"Mantener el servidor simple y entendible."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"estructura-del-proyecto",children:"Estructura del proyecto"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"json-crud/\r\n\u251c\u2500\u2500 data/\r\n\u2502   \u2514\u2500\u2500 usuarios.json\r\n\u251c\u2500\u2500 lib/\r\n\u2502   \u251c\u2500\u2500 file-utils.js\r\n\u2502   \u2514\u2500\u2500 validate.js\r\n\u2514\u2500\u2500 server.js               \u2190 nuevo (CRUD nativo)\r\n\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Se asume que file-utils.js y validate.js son los del M\xf3dulo 10."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"serverjs--servidor-http-nativo-con-crud",children:"server.js \u2014 Servidor HTTP nativo con CRUD"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// server.js\r\nimport http from "node:http";\r\nimport { readJsonArray, writeJsonArray } from "./lib/file-utils.js";\r\nimport {\r\n  validarUsuarioNuevo,\r\n  validarUsuarioPatch,\r\n  asegurarEmailUnico,\r\n} from "./lib/validate.js";\r\n\r\nconst PORT = 3000;\r\n\r\n// Utilidad: enviar JSON con status y headers apropiados\r\nfunction sendJson(res, status, payload) {\r\n  const body = JSON.stringify(payload);\r\n  res.writeHead(status, {\r\n    "Content-Type": "application/json; charset=utf-8",\r\n    "Content-Length": Buffer.byteLength(body),\r\n    // CORS b\xe1sico para pruebas con navegador; qu\xedtalo si no lo necesitas\r\n    "Access-Control-Allow-Origin": "*",\r\n    "Access-Control-Allow-Methods": "GET,POST,PUT,DELETE,OPTIONS",\r\n    "Access-Control-Allow-Headers": "Content-Type",\r\n  });\r\n  res.end(body);\r\n}\r\n\r\n// Parsear body JSON de una petici\xf3n\r\nasync function parseJsonBody(req) {\r\n  const chunks = [];\r\n  for await (const chunk of req) chunks.push(chunk);\r\n  const raw = Buffer.concat(chunks).toString("utf8");\r\n  if (!raw.trim()) return {};\r\n  try {\r\n    return JSON.parse(raw);\r\n  } catch {\r\n    throw new Error("JSON inv\xe1lido");\r\n  }\r\n}\r\n\r\n// Router muy b\xe1sico\r\nconst server = http.createServer(async (req, res) => {\r\n  try {\r\n    const url = new URL(req.url, `http://${req.headers.host}`);\r\n    const method = req.method || "GET";\r\n\r\n    // Responder preflight CORS simple\r\n    if (method === "OPTIONS") {\r\n      res.writeHead(204, {\r\n        "Access-Control-Allow-Origin": "*",\r\n        "Access-Control-Allow-Methods": "GET,POST,PUT,DELETE,OPTIONS",\r\n        "Access-Control-Allow-Headers": "Content-Type",\r\n      });\r\n      return res.end();\r\n    }\r\n\r\n    // Rutas:\r\n    // GET    /api/usuarios\r\n    // GET    /api/usuarios/:id\r\n    // POST   /api/usuarios\r\n    // PUT    /api/usuarios/:id\r\n    // DELETE /api/usuarios/:id\r\n\r\n    // 1) GET /api/usuarios\r\n    if (method === "GET" && url.pathname === "/api/usuarios") {\r\n      const usuarios = await readJsonArray();\r\n      return sendJson(res, 200, usuarios);\r\n    }\r\n\r\n    // 2) GET /api/usuarios/:id\r\n    if (method === "GET" && url.pathname.startsWith("/api/usuarios/")) {\r\n      const id = Number(url.pathname.split("/").pop());\r\n      if (Number.isNaN(id)) return sendJson(res, 400, { error: "id inv\xe1lido" });\r\n\r\n      const usuarios = await readJsonArray();\r\n      const user = usuarios.find((u) => u.id === id);\r\n      if (!user) return sendJson(res, 404, { error: "No encontrado" });\r\n\r\n      return sendJson(res, 200, user);\r\n    }\r\n\r\n    // 3) POST /api/usuarios  (crear)\r\n    if (method === "POST" && url.pathname === "/api/usuarios") {\r\n      // Content-Type esperado: application/json\r\n      if (!/^application\\/json/i.test(req.headers["content-type"] || "")) {\r\n        return sendJson(res, 415, {\r\n          error: "Content-Type debe ser application/json",\r\n        });\r\n      }\r\n\r\n      let payload;\r\n      try {\r\n        payload = await parseJsonBody(req);\r\n      } catch (e) {\r\n        return sendJson(res, 400, { error: e.message });\r\n      }\r\n\r\n      try {\r\n        validarUsuarioNuevo(payload);\r\n        const usuarios = await readJsonArray();\r\n        asegurarEmailUnico(usuarios, payload.email);\r\n\r\n        const nextId = usuarios.length\r\n          ? Math.max(...usuarios.map((u) => u.id || 0)) + 1\r\n          : 1;\r\n\r\n        const nuevo = {\r\n          id: nextId,\r\n          nombre: String(payload.nombre).trim(),\r\n          email: String(payload.email).trim(),\r\n          edad: payload.edad,\r\n          fecha: new Date().toISOString().replace("T", " ").slice(0, 16),\r\n        };\r\n\r\n        usuarios.push(nuevo);\r\n        await writeJsonArray(usuarios);\r\n        return sendJson(res, 201, nuevo);\r\n      } catch (e) {\r\n        return sendJson(res, 400, { error: e.message });\r\n      }\r\n    }\r\n\r\n    // 4) PUT /api/usuarios/:id  (actualizar parcial o total)\r\n    if (method === "PUT" && url.pathname.startsWith("/api/usuarios/")) {\r\n      if (!/^application\\/json/i.test(req.headers["content-type"] || "")) {\r\n        return sendJson(res, 415, {\r\n          error: "Content-Type debe ser application/json",\r\n        });\r\n      }\r\n\r\n      const id = Number(url.pathname.split("/").pop());\r\n      if (Number.isNaN(id)) return sendJson(res, 400, { error: "id inv\xe1lido" });\r\n\r\n      let patch;\r\n      try {\r\n        patch = await parseJsonBody(req);\r\n      } catch (e) {\r\n        return sendJson(res, 400, { error: e.message });\r\n      }\r\n\r\n      // Validaci\xf3n de patch (solo valida lo que venga)\r\n      try {\r\n        validarUsuarioPatch(patch);\r\n      } catch (e) {\r\n        return sendJson(res, 400, { error: e.message });\r\n      }\r\n\r\n      const usuarios = await readJsonArray();\r\n      const idx = usuarios.findIndex((u) => u.id === id);\r\n      if (idx === -1) return sendJson(res, 404, { error: "No encontrado" });\r\n\r\n      // Si cambia email, asegurar unicidad\r\n      if (patch.email) {\r\n        try {\r\n          asegurarEmailUnico(usuarios, patch.email, id);\r\n        } catch (e) {\r\n          return sendJson(res, 400, { error: e.message });\r\n        }\r\n      }\r\n\r\n      usuarios[idx] = { ...usuarios[idx], ...patch };\r\n      await writeJsonArray(usuarios);\r\n      return sendJson(res, 200, usuarios[idx]);\r\n    }\r\n\r\n    // 5) DELETE /api/usuarios/:id\r\n    if (method === "DELETE" && url.pathname.startsWith("/api/usuarios/")) {\r\n      const id = Number(url.pathname.split("/").pop());\r\n      if (Number.isNaN(id)) return sendJson(res, 400, { error: "id inv\xe1lido" });\r\n\r\n      const usuarios = await readJsonArray();\r\n      const exists = usuarios.some((u) => u.id === id);\r\n      if (!exists) return sendJson(res, 404, { error: "No encontrado" });\r\n\r\n      const nuevos = usuarios.filter((u) => u.id !== id);\r\n      await writeJsonArray(nuevos);\r\n      // 204 No Content: no enviamos cuerpo\r\n      res.writeHead(204, {\r\n        "Access-Control-Allow-Origin": "*",\r\n        "Access-Control-Allow-Methods": "GET,POST,PUT,DELETE,OPTIONS",\r\n        "Access-Control-Allow-Headers": "Content-Type",\r\n      });\r\n      return res.end();\r\n    }\r\n\r\n    // 404 por defecto\r\n    return sendJson(res, 404, { error: "Ruta no encontrada" });\r\n  } catch (err) {\r\n    // 500 por defecto\r\n    return sendJson(res, 500, { error: "Error interno" });\r\n  }\r\n});\r\n\r\nserver.listen(PORT, () => {\r\n  console.log(`API en http://localhost:${PORT}`);\r\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"c\xf3mo-probar-r\xe1pidamente-curl",children:"C\xf3mo probar r\xe1pidamente (curl)"}),"\n",(0,o.jsx)(n.p,{children:"Crear:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'curl -X POST http://localhost:3000/api/usuarios \\\r\n  -H "Content-Type: application/json" \\\r\n  -d \'{"nombre":"Mario","email":"mario@mail.com","edad":35}\'\r\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Listar:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"curl http://localhost:3000/api/usuarios\r\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Obtener por id:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"curl http://localhost:3000/api/usuarios/1\r\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Actualizar parcial (PUT):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'curl -X PUT http://localhost:3000/api/usuarios/1 \\\r\n  -H "Content-Type: application/json" \\\r\n  -d \'{"email":"mario@new.com","edad":36}\'\r\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Eliminar:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"curl -X DELETE http://localhost:3000/api/usuarios/1\r\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"notas-did\xe1cticas",children:"Notas did\xe1cticas"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Usamos ",(0,o.jsx)(n.code,{children:"PUT"})," para actualizaci\xf3n parcial por simplicidad. Si quisieras seguir la convenci\xf3n estricta, podr\xedas usar ",(0,o.jsx)(n.code,{children:"PATCH"})," para parcial y ",(0,o.jsx)(n.code,{children:"PUT"})," para reemplazo completo. Para mantener el m\xf3dulo simple, dejamos solo ",(0,o.jsx)(n.code,{children:"PUT"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["El CORS b\xe1sico est\xe1 habilitado para que puedas llamar a la API desde un ",(0,o.jsx)(n.code,{children:"index.html"})," local con ",(0,o.jsx)(n.code,{children:"fetch"}),". Si no lo necesitas, qu\xedtalo."]}),"\n",(0,o.jsxs)(n.li,{children:["La validaci\xf3n se concentra en ",(0,o.jsx)(n.code,{children:"validate.js"}),". Si cambia el modelo de datos, actualiza ah\xed."]}),"\n",(0,o.jsxs)(n.li,{children:["La escritura es segura v\xeda ",(0,o.jsx)(n.code,{children:"writeJsonArray"})," (temporal + rename)."]}),"\n"]})]})}function u(r={}){const{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,o.jsx)(n,{...r,children:(0,o.jsx)(l,{...r})}):l(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>i,x:()=>t});var s=e(6540);const o={},a=s.createContext(o);function i(r){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function t(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:i(r.components),s.createElement(a.Provider,{value:n},r.children)}}}]);