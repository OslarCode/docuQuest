"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[5935],{8057:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"js/operadores/operadoresLogicos","title":"Operadores L\xf3gicos","description":"Los operadores l\xf3gicos son herramientas esenciales en cualquier lenguaje de programaci\xf3n, y en JavaScript no es diferente. Estos operadores permiten realizar operaciones l\xf3gicas sobre valores booleanos, es decir, valores que pueden ser true o false.","source":"@site/docs/js/operadores/operadoresLogicos.md","sourceDirName":"js/operadores","slug":"/js/operadores/operadoresLogicos","permalink":"/docuQuest/docs/js/operadores/operadoresLogicos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/operadores/operadoresLogicos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Operadores de Concatenaci\xf3n","permalink":"/docuQuest/docs/js/operadores/operadoresConcatenacion"},"next":{"title":"Precedencia de Operadores","permalink":"/docuQuest/docs/js/operadores/precedenciaOperadores"}}');var n=r(4848),a=r(8453);const c={},l="Operadores L\xf3gicos",d={},i=[{value:"1. Introducci\xf3n a los Operadores L\xf3gicos",id:"1-introducci\xf3n-a-los-operadores-l\xf3gicos",level:2},{value:"2. Operador AND L\xf3gico (<code>&amp;&amp;</code>)",id:"2-operador-and-l\xf3gico-",level:2},{value:"3. Operador OR L\xf3gico (<code>||</code>)",id:"3-operador-or-l\xf3gico-",level:2},{value:"4. Operador NOT L\xf3gico (<code>!</code>)",id:"4-operador-not-l\xf3gico-",level:2},{value:"5. Precedencia de Operadores L\xf3gicos",id:"5-precedencia-de-operadores-l\xf3gicos",level:2},{value:"6. Cortocircuito de Operadores L\xf3gicos",id:"6-cortocircuito-de-operadores-l\xf3gicos",level:2},{value:"7. Operadores L\xf3gicos en Control de Flujo",id:"7-operadores-l\xf3gicos-en-control-de-flujo",level:2},{value:"8. Conclusiones",id:"8-conclusiones",level:2}];function t(e){const o={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"operadores-l\xf3gicos",children:"Operadores L\xf3gicos"})}),"\n",(0,n.jsx)(o.h1,{id:"los-operadores-l\xf3gicos-en-javascript-fundamentos-y-aplicaciones-avanzadas",children:"Los Operadores L\xf3gicos en JavaScript: Fundamentos y Aplicaciones Avanzadas"}),"\n",(0,n.jsxs)(o.p,{children:["Los operadores l\xf3gicos son herramientas esenciales en cualquier lenguaje de programaci\xf3n, y en JavaScript no es diferente. Estos operadores permiten realizar operaciones l\xf3gicas sobre valores booleanos, es decir, valores que pueden ser ",(0,n.jsx)(o.code,{children:"true"})," o ",(0,n.jsx)(o.code,{children:"false"}),"."]}),"\n",(0,n.jsx)(o.h2,{id:"1-introducci\xf3n-a-los-operadores-l\xf3gicos",children:"1. Introducci\xf3n a los Operadores L\xf3gicos"}),"\n",(0,n.jsxs)(o.p,{children:["Los operadores l\xf3gicos se utilizan para realizar operaciones l\xf3gicas entre dos o m\xe1s valores booleanos. Los operadores l\xf3gicos m\xe1s comunes en JavaScript son ",(0,n.jsx)(o.code,{children:"&&"})," (AND l\xf3gico), ",(0,n.jsx)(o.code,{children:"||"})," (OR l\xf3gico) y ",(0,n.jsx)(o.code,{children:"!"})," (NOT l\xf3gico)."]}),"\n",(0,n.jsxs)(o.h2,{id:"2-operador-and-l\xf3gico-",children:["2. Operador AND L\xf3gico (",(0,n.jsx)(o.code,{children:"&&"}),")"]}),"\n",(0,n.jsxs)(o.p,{children:["El operador ",(0,n.jsx)(o.code,{children:"&&"})," retorna ",(0,n.jsx)(o.code,{children:"true"})," si ambos operandos son ",(0,n.jsx)(o.code,{children:"true"}),", de lo contrario, retorna ",(0,n.jsx)(o.code,{children:"false"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"console.log(true && true); // true\r\nconsole.log(true && false); // false\r\nconsole.log(false && true); // false\r\nconsole.log(false && false); // false\r\n\n"})}),"\n",(0,n.jsxs)(o.p,{children:["En un contexto pr\xe1ctico, el operador ",(0,n.jsx)(o.code,{children:"&&"})," es \xfatil para comprobar m\xfaltiples condiciones al mismo tiempo. Por ejemplo:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"let edad = 25;\r\nlet esAdulto = edad >= 18 && edad <= 65;\r\nconsole.log(esAdulto); // true, ya que la edad est\xe1 entre 18 y 65\r\n\n"})}),"\n",(0,n.jsxs)(o.p,{children:["Aqu\xed, ",(0,n.jsx)(o.code,{children:"esAdulto"})," ser\xe1 ",(0,n.jsx)(o.code,{children:"true"})," solo si ",(0,n.jsx)(o.code,{children:"edad"})," es mayor o igual a 18 y menor o igual a 65."]}),"\n",(0,n.jsxs)(o.h2,{id:"3-operador-or-l\xf3gico-",children:["3. Operador OR L\xf3gico (",(0,n.jsx)(o.code,{children:"||"}),")"]}),"\n",(0,n.jsxs)(o.p,{children:["El operador ",(0,n.jsx)(o.code,{children:"||"})," retorna ",(0,n.jsx)(o.code,{children:"true"})," si al menos uno de los operandos es ",(0,n.jsx)(o.code,{children:"true"}),", de lo contrario, retorna ",(0,n.jsx)(o.code,{children:"false"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"console.log(true || true); // true\r\nconsole.log(true || false); // true\r\nconsole.log(false || true); // true\r\nconsole.log(false || false); // false\r\n\n"})}),"\n",(0,n.jsxs)(o.p,{children:["El operador ",(0,n.jsx)(o.code,{children:"||"})," es \xfatil cuando queremos ejecutar una acci\xf3n si al menos una de varias condiciones es verdadera. Por ejemplo:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"let llueve = true;\r\nlet haceSol = false;\r\nlet llevarParaguas = llueve || haceSol;\r\nconsole.log(llevarParaguas); // true, ya que llueve\r\n\n"})}),"\n",(0,n.jsxs)(o.p,{children:["En este caso, ",(0,n.jsx)(o.code,{children:"llevarParaguas"})," ser\xe1 ",(0,n.jsx)(o.code,{children:"true"})," si llueve o hace sol, ya que en ambos casos necesitar\xedamos llevar un paraguas."]}),"\n",(0,n.jsxs)(o.h2,{id:"4-operador-not-l\xf3gico-",children:["4. Operador NOT L\xf3gico (",(0,n.jsx)(o.code,{children:"!"}),")"]}),"\n",(0,n.jsxs)(o.p,{children:["El operador ",(0,n.jsx)(o.code,{children:"!"})," niega el valor de un operando booleano. Si el operando es ",(0,n.jsx)(o.code,{children:"true"}),", ",(0,n.jsx)(o.code,{children:"!"})," lo convierte en ",(0,n.jsx)(o.code,{children:"false"}),"; si el operando es ",(0,n.jsx)(o.code,{children:"false"}),", ",(0,n.jsx)(o.code,{children:"!"})," lo convierte en ",(0,n.jsx)(o.code,{children:"true"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"console.log(!true); // false\r\nconsole.log(!false); // true\r\n\n"})}),"\n",(0,n.jsx)(o.p,{children:"Este operador es \xfatil para invertir el valor de una condici\xf3n. Por ejemplo:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"let valor = false;\r\nconsole.log(!valor); // true, ya que el valor se invierte\r\n\n"})}),"\n",(0,n.jsx)(o.h2,{id:"5-precedencia-de-operadores-l\xf3gicos",children:"5. Precedencia de Operadores L\xf3gicos"}),"\n",(0,n.jsxs)(o.p,{children:["Es crucial comprender la precedencia de los operadores l\xf3gicos. En JavaScript, ",(0,n.jsx)(o.code,{children:"!"})," tiene la mayor precedencia, seguido de ",(0,n.jsx)(o.code,{children:"&&"}),", y finalmente ",(0,n.jsx)(o.code,{children:"||"}),". Sin embargo, se recomienda utilizar par\xe9ntesis para clarificar la l\xf3gica cuando hay m\xfaltiples operadores en una expresi\xf3n."]}),"\n",(0,n.jsx)(o.h2,{id:"6-cortocircuito-de-operadores-l\xf3gicos",children:"6. Cortocircuito de Operadores L\xf3gicos"}),"\n",(0,n.jsx)(o.p,{children:"JavaScript utiliza un mecanismo conocido como cortocircuito (short-circuiting) al evaluar expresiones l\xf3gicas. Cuando se encuentra una expresi\xf3n que puede determinar el resultado final, JavaScript deja de evaluar el resto de la expresi\xf3n. Por ejemplo:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"let x = 5;\r\nlet y = 10;\r\n\r\nconsole.log(x > 0 && y > 0); // true\r\nconsole.log(x < 0 && y > 0); // false\r\n\n"})}),"\n",(0,n.jsxs)(o.p,{children:["En la segunda expresi\xf3n, ",(0,n.jsx)(o.code,{children:"x < 0"})," es ",(0,n.jsx)(o.code,{children:"false"}),", por lo que incluso antes de evaluar ",(0,n.jsx)(o.code,{children:"y > 0"}),", JavaScript sabe que el resultado final ser\xe1 ",(0,n.jsx)(o.code,{children:"false"}),". Por lo tanto, no eval\xfaa ",(0,n.jsx)(o.code,{children:"y > 0"}),", lo que ahorra tiempo de ejecuci\xf3n."]}),"\n",(0,n.jsx)(o.h2,{id:"7-operadores-l\xf3gicos-en-control-de-flujo",children:"7. Operadores L\xf3gicos en Control de Flujo"}),"\n",(0,n.jsxs)(o.p,{children:["Los operadores l\xf3gicos son esenciales en las estructuras de control de flujo como ",(0,n.jsx)(o.code,{children:"if"}),", ",(0,n.jsx)(o.code,{children:"else if"})," y ",(0,n.jsx)(o.code,{children:"else"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:'let edad = 25;\r\nif (edad >= 18 && edad <= 65) {\r\n  console.log("Eres un adulto en edad laboral.");\r\n} else {\r\n  console.log("No est\xe1s en edad laboral.");\r\n}\r\n\n'})}),"\n",(0,n.jsxs)(o.p,{children:["Aqu\xed, la expresi\xf3n ",(0,n.jsx)(o.code,{children:"(edad >= 18 && edad <= 65)"})," utiliza el operador ",(0,n.jsx)(o.code,{children:"&&"})," para verificar si la edad est\xe1 dentro del rango de adultos laborales."]}),"\n",(0,n.jsx)(o.h2,{id:"8-conclusiones",children:"8. Conclusiones"}),"\n",(0,n.jsxs)(o.p,{children:["Los operadores l\xf3gicos son una parte fundamental de JavaScript, permitiendo la construcci\xf3n de condiciones y expresiones l\xf3gicas complejas. Desde la combinaci\xf3n de condiciones con ",(0,n.jsx)(o.code,{children:"&&"})," y ",(0,n.jsx)(o.code,{children:"||"})," hasta la negaci\xf3n con ",(0,n.jsx)(o.code,{children:"!"}),", estos operadores son esenciales para la toma de decisiones en la programaci\xf3n."]}),"\n",(0,n.jsx)(o.p,{children:"Comprender c\xf3mo funcionan los operadores l\xf3gicos y c\xf3mo aplicarlos correctamente es crucial para escribir c\xf3digo JavaScript efectivo y sin errores. Con pr\xe1ctica y comprensi\xf3n de los conceptos, los desarrolladores pueden utilizar los operadores l\xf3gicos de manera eficiente en sus proyectos web."})]})}function p(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},8453:(e,o,r)=>{r.d(o,{R:()=>c,x:()=>l});var s=r(6540);const n={},a=s.createContext(n);function c(e){const o=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(a.Provider,{value:o},e.children)}}}]);