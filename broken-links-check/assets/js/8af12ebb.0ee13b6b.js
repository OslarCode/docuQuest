"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[2070],{8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(6540);const o={},i=r.createContext(o);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(i.Provider,{value:n},e.children)}},9547:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"backend/Node.js/servidorWeb","title":"Servidores web con Node.js","description":"Introducci\xf3n","source":"@site/docs/backend/Node.js/servidorWeb.md","sourceDirName":"backend/Node.js","slug":"/backend/Node.js/servidorWeb","permalink":"/docuQuest/docs/backend/Node.js/servidorWeb","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/Node.js/servidorWeb.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sistema de archivos y procesos en Node.js","permalink":"/docuQuest/docs/backend/Node.js/sistemaArchivosProcesos"},"next":{"title":"Express.js","permalink":"/docuQuest/docs/backend/Node.js/expressJS"}}');var o=s(4848),i=s(8453);const c={},a="Servidores web con Node.js",t={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Tu primer servidor HTTP en Node.js",id:"tu-primer-servidor-http-en-nodejs",level:2},{value:"C\xf3digo b\xe1sico",id:"c\xf3digo-b\xe1sico",level:3},{value:"Rutas b\xe1sicas",id:"rutas-b\xe1sicas",level:2},{value:"Sirviendo HTML desde archivos",id:"sirviendo-html-desde-archivos",level:2},{value:"Enviando archivos est\xe1ticos (CSS, im\xe1genes...)",id:"enviando-archivos-est\xe1ticos-css-im\xe1genes",level:2},{value:"\xbfQu\xe9 hace este servidor?",id:"qu\xe9-hace-este-servidor",level:3},{value:"Ejercicio pr\xe1ctico: servidor con HTML, CSS y JSON",id:"ejercicio-pr\xe1ctico-servidor-con-html-css-y-json",level:2},{value:"\xbfQu\xe9 has aprendido?",id:"qu\xe9-has-aprendido",level:2},{value:"Recursos adicionales",id:"recursos-adicionales",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"servidores-web-con-nodejs",children:"Servidores web con Node.js"})}),"\n",(0,o.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,o.jsxs)(n.p,{children:["Antes de usar frameworks como Express o Nest, es vital que entiendas ",(0,o.jsx)(n.strong,{children:"c\xf3mo Node.js puede crear un servidor web b\xe1sico por s\xed mismo"})," usando el m\xf3dulo interno ",(0,o.jsx)(n.code,{children:"http"}),". Esto te ayuda a comprender conceptos fundamentales como:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Peticiones y respuestas HTTP"}),"\n",(0,o.jsx)(n.li,{children:"Rutas (URLs)"}),"\n",(0,o.jsxs)(n.li,{children:["Cabeceras (",(0,o.jsx)(n.code,{children:"headers"}),")"]}),"\n",(0,o.jsx)(n.li,{children:"C\xf3digos de estado"}),"\n",(0,o.jsx)(n.li,{children:"Env\xedo de HTML, JSON y archivos est\xe1ticos"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Al terminar este m\xf3dulo ser\xe1s capaz de montar un servidor que escuche peticiones en un puerto, responda con diferentes contenidos seg\xfan la ruta, y maneje errores o rutas no encontradas."}),"\n",(0,o.jsx)(n.h2,{id:"tu-primer-servidor-http-en-nodejs",children:"Tu primer servidor HTTP en Node.js"}),"\n",(0,o.jsxs)(n.p,{children:["Node incluye un m\xf3dulo llamado ",(0,o.jsx)(n.code,{children:"http"})," que permite crear un servidor sin necesidad de instalar nada."]}),"\n",(0,o.jsx)(n.h3,{id:"c\xf3digo-b\xe1sico",children:"C\xf3digo b\xe1sico"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// server.js\n\n// Importamos el m\xf3dulo \'http\' que viene integrado en Node.js\n// Este m\xf3dulo permite crear servidores web.\nconst http = require("http");\n\n// Creamos el servidor usando http.createServer()\n// Esta funci\xf3n recibe un callback que maneja las peticiones (req) y respuestas (res)\nconst server = http.createServer((req, res) => {\n  // Escribimos la cabecera de la respuesta HTTP con el c\xf3digo de estado 200 (OK)\n  // y el tipo de contenido como texto plano.\n  res.writeHead(200, { "Content-Type": "text/plain" });\n\n  // Finalizamos la respuesta enviando el mensaje de texto al cliente.\n  res.end("\xa1Hola desde Node.js sin frameworks!");\n});\n\n// Indicamos al servidor que escuche en el puerto 3000\n// y definimos un callback que se ejecuta cuando el servidor empieza a escuchar.\nserver.listen(3000, () => {\n  // Mostramos un mensaje en la consola para indicar que el servidor est\xe1 funcionando.\n  console.log("\ud83d\ude80 Servidor escuchando en http://localhost:3000");\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Este c\xf3digo ya te permite visitar ",(0,o.jsx)(n.code,{children:"http://localhost:3000"})," y ver una respuesta."]}),"\n",(0,o.jsx)(n.h2,{id:"rutas-b\xe1sicas",children:"Rutas b\xe1sicas"}),"\n",(0,o.jsxs)(n.p,{children:["Podemos responder cosas distintas seg\xfan la URL (",(0,o.jsx)(n.code,{children:"req.url"}),") y el m\xe9todo (",(0,o.jsx)(n.code,{children:"req.method"}),"):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Importamos el m\xf3dulo \'http\' incorporado en Node.js\nconst http = require("http");\n\n// Creamos un servidor HTTP\n// La funci\xf3n que recibe maneja cada petici\xf3n (req) y genera una respuesta (res)\nconst server = http.createServer((req, res) => {\n  // Si la URL es "/" y el m\xe9todo es GET, mostramos la p\xe1gina principal\n  if (req.url === "/" && req.method === "GET") {\n    // Enviamos una cabecera con estado 200 (OK) y tipo de contenido HTML\n    res.writeHead(200, { "Content-Type": "text/html" });\n    // Enviamos un mensaje HTML como respuesta\n    res.end("<h1>P\xe1gina principal</h1>");\n\n    // Si la URL es "/api" y el m\xe9todo es GET, respondemos con JSON\n  } else if (req.url === "/api" && req.method === "GET") {\n    // Cabecera con estado 200 y tipo de contenido JSON\n    res.writeHead(200, { "Content-Type": "application/json" });\n    // Enviamos un objeto convertido a JSON como respuesta\n    res.end(JSON.stringify({ mensaje: "Hola desde la API" }));\n\n    // Si no coincide con ninguna ruta, devolvemos un error 404\n  } else {\n    // Estado 404 (no encontrado) y tipo de contenido texto plano\n    res.writeHead(404, { "Content-Type": "text/plain" });\n    // Mensaje de error como respuesta\n    res.end("404 - No encontrado");\n  }\n});\n\n// Iniciamos el servidor para que escuche en el puerto 3000\nserver.listen(3000, () => {\n  // Mostramos un mensaje en consola cuando el servidor est\xe9 activo\n  console.log("Servidor escuchando en http://localhost:3000");\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Este servidor responde HTML en la ra\xedz ",(0,o.jsx)(n.code,{children:"/"}),", JSON en ",(0,o.jsx)(n.code,{children:"/api"}),", y un error ",(0,o.jsx)(n.code,{children:"404"})," para cualquier otra ruta."]}),"\n",(0,o.jsx)(n.h2,{id:"sirviendo-html-desde-archivos",children:"Sirviendo HTML desde archivos"}),"\n",(0,o.jsxs)(n.p,{children:["Para no incrustar HTML en el c\xf3digo, puedes ",(0,o.jsx)(n.strong,{children:"leer archivos HTML y servirlos como respuesta"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Importamos el m\xf3dulo \'http\' para crear el servidor\nconst http = require("http");\n\n// Importamos el m\xf3dulo \'fs\' (filesystem) para leer archivos del sistema\nconst fs = require("fs");\n\n// Importamos el m\xf3dulo \'path\' para construir rutas de forma segura y multiplataforma\nconst path = require("path");\n\n// Creamos el servidor HTTP\nconst server = http.createServer((req, res) => {\n  // Si el usuario accede a la ra\xedz ("/"), servimos el archivo index.html\n  if (req.url === "/") {\n    // Construimos la ruta absoluta hacia el archivo index.html dentro de la carpeta \'public\'\n    const rutaArchivo = path.join(__dirname, "public", "index.html");\n\n    // Leemos el archivo HTML usando fs.readFile()\n    fs.readFile(rutaArchivo, (err, contenido) => {\n      // Si hay un error al leer el archivo (por ejemplo, no existe), devolvemos error 500\n      if (err) {\n        res.writeHead(500); // Error interno del servidor\n        res.end("Error interno del servidor");\n        return;\n      }\n\n      // Si el archivo se lee correctamente, enviamos estado 200 y tipo HTML\n      res.writeHead(200, { "Content-Type": "text/html" });\n      res.end(contenido); // Enviamos el contenido del archivo al navegador\n    });\n\n    // Si accede a cualquier otra ruta, respondemos con 404\n  } else {\n    res.writeHead(404); // P\xe1gina no encontrada\n    res.end("P\xe1gina no encontrada");\n  }\n});\n\n// Ponemos el servidor a escuchar en el puerto 3000\nserver.listen(3000, () => {\n  // Mostramos en consola que el servidor est\xe1 corriendo\n  console.log("\ud83c\udf10 Servidor iniciado en http://localhost:3000");\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Crea una carpeta ",(0,o.jsx)(n.code,{children:"public/"})," con un archivo ",(0,o.jsx)(n.code,{children:"index.html"})," y pru\xe9balo."]}),"\n",(0,o.jsx)(n.h2,{id:"enviando-archivos-est\xe1ticos-css-im\xe1genes",children:"Enviando archivos est\xe1ticos (CSS, im\xe1genes...)"}),"\n",(0,o.jsxs)(n.p,{children:["Para permitir el acceso a archivos como ",(0,o.jsx)(n.code,{children:"style.css"})," o im\xe1genes ",(0,o.jsx)(n.code,{children:".png"}),", necesitas detectar su extensi\xf3n y responder con el tipo MIME correcto:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Definimos un objeto que relaciona extensiones de archivo con sus tipos MIME\n// Esto se usar\xe1 para indicar el tipo de contenido correcto en la respuesta HTTP\nconst mime = {\n  ".html": "text/html",\n  ".css": "text/css",\n  ".js": "text/javascript",\n  ".json": "application/json",\n  ".png": "image/png",\n  ".jpg": "image/jpeg",\n};\n\n// Creamos el servidor HTTP\nconst server = http.createServer((req, res) => {\n  // Si la URL es "/", cargamos "/index.html" por defecto. En otros casos, usamos la ruta tal cual.\n  let ruta = req.url === "/" ? "/index.html" : req.url;\n\n  // Construimos la ruta completa al archivo dentro de la carpeta \'public\'\n  const rutaArchivo = path.join(__dirname, "public", ruta);\n\n  // Obtenemos la extensi\xf3n del archivo solicitado (por ejemplo, ".html", ".css", etc.)\n  const ext = path.extname(rutaArchivo);\n\n  // Buscamos el tipo MIME en el objeto \'mime\'. Si no lo encuentra, usa "text/plain" por defecto.\n  const tipo = mime[ext] || "text/plain";\n\n  // Leemos el archivo solicitado desde el sistema de archivos\n  fs.readFile(rutaArchivo, (err, contenido) => {\n    if (err) {\n      // Si hay un error (por ejemplo, el archivo no existe), respondemos con error 404\n      res.writeHead(404);\n      res.end("Archivo no encontrado");\n    } else {\n      // Si el archivo se lee correctamente, enviamos c\xf3digo 200 y el tipo MIME correspondiente\n      res.writeHead(200, { "Content-Type": tipo });\n\n      // Enviamos el contenido del archivo como respuesta\n      res.end(contenido); // \u2190 \u26a0\ufe0f \xa1Hay un error de escritura aqu\xed!\n    }\n  });\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Esto te permite cargar HTML, CSS, JS e im\xe1genes en rutas normales (",(0,o.jsx)(n.code,{children:"/"}),", ",(0,o.jsx)(n.code,{children:"/style.css"}),", ",(0,o.jsx)(n.code,{children:"/logo.png"}),", etc.)."]}),"\n",(0,o.jsx)(n.h3,{id:"qu\xe9-hace-este-servidor",children:"\xbfQu\xe9 hace este servidor?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Sirve ",(0,o.jsx)(n.strong,{children:"cualquier archivo est\xe1tico"})," desde la carpeta ",(0,o.jsx)(n.code,{children:"public"}),": ",(0,o.jsx)(n.code,{children:".html"}),", ",(0,o.jsx)(n.code,{children:".css"}),", ",(0,o.jsx)(n.code,{children:".js"}),", im\xe1genes, etc."]}),"\n",(0,o.jsxs)(n.li,{children:["Detecta autom\xe1ticamente el tipo de archivo y ajusta el ",(0,o.jsx)(n.code,{children:"Content-Type"})," correcto."]}),"\n",(0,o.jsx)(n.li,{children:"Muestra un error 404 si el archivo no existe."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"ejercicio-pr\xe1ctico-servidor-con-html-css-y-json",children:"Ejercicio pr\xe1ctico: servidor con HTML, CSS y JSON"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Crea una carpeta ",(0,o.jsx)(n.code,{children:"public/"})," con estos archivos:"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"index.html"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Mi Servidor Node.js</title>\n    <link rel="stylesheet" href="/estilo.css" />\n  </head>\n  <body>\n    <h1>Bienvenido a mi servidor sin frameworks</h1>\n    <p>Este contenido viene de un archivo HTML</p>\n  </body>\n</html>\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"estilo.css"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"body {\n  background-color: #f2f2f2;\n  font-family: sans-serif;\n  text-align: center;\n  padding: 50px;\n}\n"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Ejecuta el servidor y accede a:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"http://localhost:3000/"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"http://localhost:3000/api"})," \u2192 Respuesta JSON"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"http://localhost:3000/estilo.css"})," \u2192 Archivo CSS servido correctamente"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-has-aprendido",children:"\xbfQu\xe9 has aprendido?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"C\xf3mo crear un servidor HTTP b\xe1sico"}),"\n",(0,o.jsx)(n.li,{children:"C\xf3mo manejar rutas sin frameworks"}),"\n",(0,o.jsx)(n.li,{children:"C\xf3mo servir HTML, JSON y archivos est\xe1ticos"}),"\n",(0,o.jsxs)(n.li,{children:["C\xf3mo usar m\xf3dulos internos (",(0,o.jsx)(n.code,{children:"http"}),", ",(0,o.jsx)(n.code,{children:"fs"}),", ",(0,o.jsx)(n.code,{children:"path"}),")"]}),"\n",(0,o.jsx)(n.li,{children:"C\xf3mo responder correctamente con cabeceras y estados HTTP"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"recursos-adicionales",children:"Recursos adicionales"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://nodejs.org/api/http.html",children:"Node.js HTTP module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",children:"MDN HTTP status codes"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types",children:"Node.js MIME types"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);