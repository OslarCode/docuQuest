"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[3871],{2219:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"js/dom/renderizacionReflujos","title":"Renderizaci\xf3n y Reflujos","description":"Introducci\xf3n","source":"@site/docs/js/dom/renderizacionReflujos.md","sourceDirName":"js/dom","slug":"/js/dom/renderizacionReflujos","permalink":"/docuQuest/docs/js/dom/renderizacionReflujos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/dom/renderizacionReflujos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Manipulaci\xf3n del DOM","permalink":"/docuQuest/docs/js/dom/manipulacion"},"next":{"title":"Maps","permalink":"/docuQuest/docs/js/maps"}}');var i=r(4848),o=r(8453);const l={},s="Renderizaci\xf3n y Reflujos",t={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"1. Cambios en el DOM pueden afectar al rendimiento",id:"1-cambios-en-el-dom-pueden-afectar-al-rendimiento",level:2},{value:"1.1 Concepto de Renderizaci\xf3n del DOM",id:"11-concepto-de-renderizaci\xf3n-del-dom",level:3},{value:"1.2 Reflujos (Reflows) y Repaints",id:"12-reflujos-reflows-y-repaints",level:3},{value:"Ejemplo de Reflow y Repaint",id:"ejemplo-de-reflow-y-repaint",level:3},{value:"1.3 Impacto en el Rendimiento",id:"13-impacto-en-el-rendimiento",level:3},{value:"2. Minimizar Cambios Frecuentes y Costosos para Mejorar la Experiencia del Usuario",id:"2-minimizar-cambios-frecuentes-y-costosos-para-mejorar-la-experiencia-del-usuario",level:2},{value:"2.1 Estrategias para Minimizar Reflows y Repaints",id:"21-estrategias-para-minimizar-reflows-y-repaints",level:3},{value:"2.1.1 Evitar Cambios Inline Frecuentes",id:"211-evitar-cambios-inline-frecuentes",level:3},{value:"Ejemplo",id:"ejemplo",level:3},{value:"2.1.2 Usar Clases en Lugar de Estilos Inline",id:"212-usar-clases-en-lugar-de-estilos-inline",level:3},{value:"Ejemplo",id:"ejemplo-1",level:3},{value:"2.1.3 Manipular el DOM Fuera del Flujo de Documentos",id:"213-manipular-el-dom-fuera-del-flujo-de-documentos",level:3},{value:"Ejemplo",id:"ejemplo-2",level:3},{value:"2.1.4 Medir y Optimizar el Uso de JavaScript",id:"214-medir-y-optimizar-el-uso-de-javascript",level:3},{value:"2.2 T\xe9cnicas Avanzadas de Optimizaci\xf3n",id:"22-t\xe9cnicas-avanzadas-de-optimizaci\xf3n",level:3},{value:"2.2.1 Usar <code>requestAnimationFrame</code>",id:"221-usar-requestanimationframe",level:3},{value:"Ejemplo",id:"ejemplo-3",level:3},{value:"2.2.2 Layout Thrashing",id:"222-layout-thrashing",level:3},{value:"Ejemplo",id:"ejemplo-4",level:3},{value:"2.2.3 Debounce y Throttle",id:"223-debounce-y-throttle",level:3},{value:"Ejemplo de Throttle",id:"ejemplo-de-throttle",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"renderizaci\xf3n-y-reflujos",children:"Renderizaci\xf3n y Reflujos"})}),"\n",(0,i.jsx)(n.h1,{id:"renderizaci\xf3n-y-reflujos-del-dom-en-javascript-en-p\xe1ginas-web",children:"Renderizaci\xf3n y Reflujos del DOM en JavaScript en P\xe1ginas Web"}),"\n",(0,i.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,i.jsx)(n.p,{children:"La renderizaci\xf3n y los reflujos del DOM (Modelo de Objetos del Documento) son procesos fundamentales que afectan el rendimiento y la experiencia del usuario en las p\xe1ginas web. Comprender c\xf3mo estos procesos funcionan y c\xf3mo optimizarlos es crucial para cualquier desarrollador web que busque crear aplicaciones r\xe1pidas y eficientes. Este texto acad\xe9mico explorar\xe1 en profundidad c\xf3mo los cambios en el DOM pueden afectar al rendimiento, y c\xf3mo minimizar cambios frecuentes y costosos para mejorar la experiencia del usuario."}),"\n",(0,i.jsx)(n.h2,{id:"1-cambios-en-el-dom-pueden-afectar-al-rendimiento",children:"1. Cambios en el DOM pueden afectar al rendimiento"}),"\n",(0,i.jsx)(n.h3,{id:"11-concepto-de-renderizaci\xf3n-del-dom",children:"1.1 Concepto de Renderizaci\xf3n del DOM"}),"\n",(0,i.jsx)(n.p,{children:"La renderizaci\xf3n del DOM se refiere al proceso por el cual el navegador convierte el c\xf3digo HTML y CSS en una p\xe1gina web visualmente representada en la pantalla del usuario. Este proceso incluye varias etapas:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parseo del HTML"}),": El navegador analiza el HTML para construir el DOM."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parseo del CSS"}),": El navegador analiza el CSS para construir el CSSOM (Modelo de Objetos de CSS)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Construcci\xf3n del Render Tree"}),": El navegador combina el DOM y el CSSOM para crear el render tree."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layout (o Reflow)"}),": El navegador calcula las posiciones y dimensiones de todos los elementos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Painting"}),": El navegador dibuja los p\xedxeles en la pantalla."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Cualquier cambio en el DOM puede potencialmente desencadenar estos procesos nuevamente, afectando as\xed al rendimiento de la p\xe1gina."}),"\n",(0,i.jsx)(n.h3,{id:"12-reflujos-reflows-y-repaints",children:"1.2 Reflujos (Reflows) y Repaints"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reflow"})," (o layout) es el proceso por el cual el navegador recalcula las posiciones y tama\xf1os de los elementos en respuesta a cambios en el DOM. Cualquier cambio que afecte al layout puede provocar un reflow. Estos cambios pueden incluir modificaciones en el tama\xf1o, posici\xf3n, o propiedades que afectan al flujo del documento (como ",(0,i.jsx)(n.code,{children:"display"}),", ",(0,i.jsx)(n.code,{children:"width"}),", ",(0,i.jsx)(n.code,{children:"height"}),", ",(0,i.jsx)(n.code,{children:"margin"}),", etc.)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Repaint"})," es el proceso por el cual el navegador vuelve a dibujar un elemento despu\xe9s de un cambio visual que no afecta al layout, como un cambio en el color de fondo o la visibilidad. Los repaints son menos costosos en t\xe9rminos de rendimiento que los reflows."]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-reflow-y-repaint",children:"Ejemplo de Reflow y Repaint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Reflow y Repaint</title>\r\n    <style>\r\n      .box {\r\n        width: 100px;\r\n        height: 100px;\r\n        background-color: blue;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class="box"></div>\r\n    <script>\r\n      var box = document.querySelector(".box");\r\n\r\n      // Este cambio provoca un reflow\r\n      box.style.width = "200px";\r\n\r\n      // Este cambio provoca un repaint\r\n      box.style.backgroundColor = "red";\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,i.jsx)(n.p,{children:"En este ejemplo, cambiar la anchura de la caja provoca un reflow porque afecta al layout, mientras que cambiar el color de fondo solo provoca un repaint."}),"\n",(0,i.jsx)(n.h3,{id:"13-impacto-en-el-rendimiento",children:"1.3 Impacto en el Rendimiento"}),"\n",(0,i.jsx)(n.p,{children:"Los reflows y repaints pueden tener un impacto significativo en el rendimiento de una p\xe1gina web, especialmente cuando ocurren con frecuencia o afectan a un gran n\xfamero de elementos. Los reflows son particularmente costosos porque pueden requerir que el navegador vuelva a calcular el layout de parte o de toda la p\xe1gina. Este proceso puede ser especialmente perjudicial en dispositivos con recursos limitados, como los smartphones."}),"\n",(0,i.jsx)(n.h2,{id:"2-minimizar-cambios-frecuentes-y-costosos-para-mejorar-la-experiencia-del-usuario",children:"2. Minimizar Cambios Frecuentes y Costosos para Mejorar la Experiencia del Usuario"}),"\n",(0,i.jsx)(n.h3,{id:"21-estrategias-para-minimizar-reflows-y-repaints",children:"2.1 Estrategias para Minimizar Reflows y Repaints"}),"\n",(0,i.jsx)(n.p,{children:"Para mejorar la experiencia del usuario y optimizar el rendimiento de la p\xe1gina web, es importante minimizar los reflows y repaints. A continuaci\xf3n, se presentan varias estrategias para lograrlo:"}),"\n",(0,i.jsx)(n.h3,{id:"211-evitar-cambios-inline-frecuentes",children:"2.1.1 Evitar Cambios Inline Frecuentes"}),"\n",(0,i.jsx)(n.p,{children:"Realizar m\xfaltiples cambios inline en el DOM puede provocar numerosos reflows y repaints. Es preferible agrupar los cambios en una sola operaci\xf3n."}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo",children:"Ejemplo"}),"\n",(0,i.jsx)(n.p,{children:"En lugar de:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'var box = document.querySelector(".box");\r\nbox.style.width = "200px";\r\nbox.style.height = "200px";\r\nbox.style.backgroundColor = "red";\n'})}),"\n",(0,i.jsx)(n.p,{children:"Es mejor agrupar los cambios:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'var box = document.querySelector(".box");\r\nbox.style.cssText = "width: 200px; height: 200px; background-color: red;";\n'})}),"\n",(0,i.jsx)(n.h3,{id:"212-usar-clases-en-lugar-de-estilos-inline",children:"2.1.2 Usar Clases en Lugar de Estilos Inline"}),"\n",(0,i.jsx)(n.p,{children:"Agregar o quitar clases CSS es m\xe1s eficiente que realizar m\xfaltiples cambios en estilos inline."}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-1",children:"Ejemplo"}),"\n",(0,i.jsx)(n.p,{children:"HTML y CSS:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Clases CSS</title>\r\n    <style>\r\n      .box {\r\n        width: 100px;\r\n        height: 100px;\r\n        background-color: blue;\r\n      }\r\n      .large {\r\n        width: 200px;\r\n        height: 200px;\r\n        background-color: red;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class="box"></div>\r\n    <script>\r\n      var box = document.querySelector(".box");\r\n      box.classList.add("large");\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,i.jsx)(n.p,{children:"En este ejemplo, agregar una clase cambia m\xfaltiples propiedades de estilo de manera eficiente."}),"\n",(0,i.jsx)(n.h3,{id:"213-manipular-el-dom-fuera-del-flujo-de-documentos",children:"2.1.3 Manipular el DOM Fuera del Flujo de Documentos"}),"\n",(0,i.jsxs)(n.p,{children:["Utilizar t\xe9cnicas como ",(0,i.jsx)(n.code,{children:"documentFragment"})," para hacer cambios fuera del flujo de documentos y luego aplicar estos cambios de una vez puede reducir significativamente los reflows."]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-2",children:"Ejemplo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'var fragment = document.createDocumentFragment();\r\nfor (var i = 0; i < 1000; i++) {\r\n  var newDiv = document.createElement("div");\r\n  newDiv.className = "box";\r\n  fragment.appendChild(newDiv);\r\n}\r\ndocument.body.appendChild(fragment);\n'})}),"\n",(0,i.jsx)(n.p,{children:"En este ejemplo, se crean 1000 elementos div fuera del DOM y se a\xf1aden al DOM en una sola operaci\xf3n."}),"\n",(0,i.jsx)(n.h3,{id:"214-medir-y-optimizar-el-uso-de-javascript",children:"2.1.4 Medir y Optimizar el Uso de JavaScript"}),"\n",(0,i.jsx)(n.p,{children:"Utilizar herramientas de medici\xf3n de rendimiento como las Developer Tools de los navegadores para identificar y optimizar las \xe1reas problem\xe1ticas en el c\xf3digo JavaScript puede ayudar a reducir los reflows y repaints innecesarios."}),"\n",(0,i.jsx)(n.h3,{id:"22-t\xe9cnicas-avanzadas-de-optimizaci\xf3n",children:"2.2 T\xe9cnicas Avanzadas de Optimizaci\xf3n"}),"\n",(0,i.jsxs)(n.h3,{id:"221-usar-requestanimationframe",children:["2.2.1 Usar ",(0,i.jsx)(n.code,{children:"requestAnimationFrame"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"requestAnimationFrame"})," permite que las actualizaciones del DOM se sincronicen con la tasa de refresco del navegador, mejorando la fluidez y el rendimiento de las animaciones."]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-3",children:"Ejemplo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'function animate() {\r\n  var box = document.querySelector(".box");\r\n  var pos = 0;\r\n\r\n  function frame() {\r\n    pos++;\r\n    box.style.left = pos + "px";\r\n    if (pos < 100) {\r\n      requestAnimationFrame(frame);\r\n    }\r\n  }\r\n\r\n  requestAnimationFrame(frame);\r\n}\r\n\r\nanimate();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"222-layout-thrashing",children:"2.2.2 Layout Thrashing"}),"\n",(0,i.jsx)(n.p,{children:'El "layout thrashing" ocurre cuando se alternan repetidamente lecturas y escrituras en el DOM, lo que puede provocar m\xfaltiples reflows innecesarios. Para evitarlo, agrupe las lecturas y escrituras de manera separada.'}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-4",children:"Ejemplo"}),"\n",(0,i.jsx)(n.p,{children:"En lugar de:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'var box = document.querySelector(".box");\r\nfor (var i = 0; i < 1000; i++) {\r\n  box.style.left = box.offsetLeft + 1 + "px";\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Es preferible:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'var box = document.querySelector(".box");\r\nvar left = box.offsetLeft;\r\nfor (var i = 0; i < 1000; i++) {\r\n  left += 1;\r\n}\r\nbox.style.left = left + "px";\n'})}),"\n",(0,i.jsx)(n.h3,{id:"223-debounce-y-throttle",children:"2.2.3 Debounce y Throttle"}),"\n",(0,i.jsx)(n.p,{children:"El uso de t\xe9cnicas de debounce y throttle puede ayudar a controlar la frecuencia de ejecuci\xf3n de funciones que afectan al DOM, como los eventos de scroll y resize."}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-throttle",children:"Ejemplo de Throttle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'function throttle(func, limit) {\r\n  let lastFunc;\r\n  let lastRan;\r\n  return function () {\r\n    const context = this;\r\n    const args = arguments;\r\n    if (!lastRan) {\r\n      func.apply(context, args);\r\n      lastRan = Date.now();\r\n    } else {\r\n      clearTimeout(lastFunc);\r\n      lastFunc = setTimeout(function () {\r\n        if (Date.now() - lastRan >= limit) {\r\n          func.apply(context, args);\r\n          lastRan = Date.now();\r\n        }\r\n      }, limit - (Date.now() - lastRan));\r\n    }\r\n  };\r\n}\r\n\r\nwindow.addEventListener(\r\n  "resize",\r\n  throttle(function () {\r\n    console.log("Resize event throttled");\r\n  }, 200)\r\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["La renderizaci\xf3n y los reflujos del DOM son procesos fundamentales en el desarrollo web que pueden afectar significativamente al rendimiento y la experiencia del usuario. Comprender c\xf3mo estos procesos funcionan y c\xf3mo optimizarlos es crucial para cualquier desarrollador web. Minimizar los reflows y repaints mediante t\xe9cnicas como agrupar cambios, utilizar clases CSS, manipular el DOM fuera del flujo de documentos y utilizar herramientas de optimizaci\xf3n puede mejorar dr\xe1sticamente el rendimiento de las p\xe1ginas web. La implementaci\xf3n de t\xe9cnicas avanzadas como ",(0,i.jsx)(n.code,{children:"requestAnimationFrame"}),", la gesti\xf3n adecuada de lecturas y escrituras del DOM, y el uso de debounce y throttle son estrategias efectivas para crear aplicaciones web r\xe1pidas y responsivas. A trav\xe9s de estas pr\xe1cticas, los desarrolladores pueden asegurar que sus aplicaciones ofrezcan una experiencia de usuario fluida y eficiente."]}),"\n",(0,i.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var a=r(6540);const i={},o=a.createContext(i);function l(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);