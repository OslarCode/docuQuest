"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[7500],{2019:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>i});const l=JSON.parse('{"id":"js/arrays/metodosArrays","title":"M\xe9todos para arrays","description":"Introducci\xf3n","source":"@site/docs/js/arrays/metodosArrays.md","sourceDirName":"js/arrays","slug":"/js/arrays/metodosArrays","permalink":"/docuQuest/docs/js/arrays/metodosArrays","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/arrays/metodosArrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interactuar con arrays","permalink":"/docuQuest/docs/js/arrays/interactuar"},"next":{"title":"Fechas","permalink":"/docuQuest/docs/js/fechas"}}');var a=r(4848),o=r(8453);const s={},d="M\xe9todos para arrays",c={},i=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"1. <code>push()</code>",id:"1-push",level:2},{value:"2. <code>pop()</code>",id:"2-pop",level:2},{value:"3. <code>shift()</code>",id:"3-shift",level:2},{value:"4. <code>unshift()</code>",id:"4-unshift",level:2},{value:"5. <code>concat()</code>",id:"5-concat",level:2},{value:"6. <code>slice()</code>",id:"6-slice",level:2},{value:"7. <code>splice()</code>",id:"7-splice",level:2},{value:"8. <code>forEach()</code>",id:"8-foreach",level:2},{value:"9. <code>copyWithin()</code>",id:"9-copywithin",level:2},{value:"10. <code>entries()</code>",id:"10-entries",level:2},{value:"11. <code>every()</code>",id:"11-every",level:2},{value:"12. <code>fill()</code>",id:"12-fill",level:2},{value:"13. <code>filter()</code>",id:"13-filter",level:2},{value:"14. <code>find()</code>",id:"14-find",level:2},{value:"15. <code>findIndex() findLast() findLastIndex()</code>",id:"15-findindex-findlast-findlastindex",level:2},{value:"16. <code>flat() y flatMap()</code>",id:"16-flat-y-flatmap",level:2},{value:"17. <code>includes()</code>",id:"17-includes",level:2},{value:"18. <code>join()</code>",id:"18-join",level:2},{value:"19. <code>keys()</code>",id:"19-keys",level:2},{value:"20. <code>map()</code>",id:"20-map",level:2},{value:"21. <code>reduce() reduceRight()</code>",id:"21-reduce-reduceright",level:2},{value:"22. <code>reverse()</code>",id:"22-reverse",level:2},{value:"23. <code>some()</code>",id:"23-some",level:2},{value:"24. <code>sort()</code>",id:"24-sort",level:2},{value:"25. <code>toLocaleString()</code>",id:"25-tolocalestring",level:2},{value:"26. <code>values()</code>",id:"26-values",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"m\xe9todos-para-arrays",children:"M\xe9todos para arrays"})}),"\n",(0,a.jsx)(n.h1,{id:"manipulaci\xf3n-de-arrays-en-javascript-m\xe9todos-populares",children:"Manipulaci\xf3n de Arrays en JavaScript: M\xe9todos Populares"}),"\n",(0,a.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,a.jsx)(n.p,{children:"Los arrays son una estructura de datos fundamental en JavaScript que permite almacenar y manipular colecciones de elementos de manera eficiente. En el desarrollo de aplicaciones web, es com\xfan encontrarse con la necesidad de realizar operaciones sobre arrays, como agregar, eliminar, modificar y filtrar elementos. Para facilitar estas tareas, JavaScript proporciona una variedad de m\xe9todos integrados que permiten manipular arrays de manera efectiva."}),"\n",(0,a.jsxs)(n.h2,{id:"1-push",children:["1. ",(0,a.jsx)(n.code,{children:"push()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"push()"})," se utiliza para agregar uno o m\xe1s elementos al final de un array. Este m\xe9todo modifica el array original y devuelve la nueva longitud del array."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"manzana\", \"banana\", \"pera\"];\r\nfrutas.push(\"naranja\");\r\nconsole.log(frutas); // Imprime: ['manzana', 'banana', 'pera', 'naranja']\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"2-pop",children:["2. ",(0,a.jsx)(n.code,{children:"pop()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"pop()"})," se utiliza para eliminar el \xfaltimo elemento de un array. Este m\xe9todo modifica el array original y devuelve el elemento eliminado."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"manzana\", \"banana\", \"pera\"];\r\nlet ultimaFruta = frutas.pop();\r\nconsole.log(ultimaFruta); // Imprime: 'pera'\r\nconsole.log(frutas); // Imprime: ['manzana', 'banana']\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"3-shift",children:["3. ",(0,a.jsx)(n.code,{children:"shift()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"shift()"})," se utiliza para eliminar el primer elemento de un array. Este m\xe9todo modifica el array original y devuelve el elemento eliminado."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"manzana\", \"banana\", \"pera\"];\r\nlet primeraFruta = frutas.shift();\r\nconsole.log(primeraFruta); // Imprime: 'manzana'\r\nconsole.log(frutas); // Imprime: ['banana', 'pera']\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"4-unshift",children:["4. ",(0,a.jsx)(n.code,{children:"unshift()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"unshift()"})," se utiliza para agregar uno o m\xe1s elementos al inicio de un array. Este m\xe9todo modifica el array original y devuelve la nueva longitud del array."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"banana\", \"pera\"];\r\nlet nuevaLongitud = frutas.unshift(\"manzana\");\r\nconsole.log(nuevaLongitud); // Imprime: 3\r\nconsole.log(frutas); // Imprime: ['manzana', 'banana', 'pera']\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"5-concat",children:["5. ",(0,a.jsx)(n.code,{children:"concat()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"concat()"})," se utiliza para combinar dos o m\xe1s arrays. Este m\xe9todo no modifica los arrays originales, sino que devuelve un nuevo array con los elementos combinados."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas1 = [\"manzana\", \"banana\"];\r\nlet frutas2 = [\"pera\", \"naranja\"];\r\nlet frutasCombinadas = frutas1.concat(frutas2);\r\nconsole.log(frutasCombinadas); // Imprime: ['manzana', 'banana', 'pera', 'naranja']\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"6-slice",children:["6. ",(0,a.jsx)(n.code,{children:"slice()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"slice()"})," se utiliza para obtener una parte de un array, seleccionando los elementos desde un \xedndice inicial hasta un \xedndice final (no inclusivo). Este m\xe9todo no modifica el array original, sino que devuelve un nuevo array con los elementos seleccionados."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "pera", "naranja"];\r\nlet subArray = frutas.slice(1, 3);\r\nconsole.log(subArray); // Imprime: [\'banana\', \'pera\']\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"7-splice",children:["7. ",(0,a.jsx)(n.code,{children:"splice()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"splice()"})," se utiliza para agregar, eliminar o reemplazar elementos en un array. Permite especificar el \xedndice de inicio, el n\xfamero de elementos a eliminar y opcionalmente los elementos a agregar. Este m\xe9todo modifica el array original y devuelve un array con los elementos eliminados."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "pera", "naranja"];\r\nfrutas.splice(2, 1, "uva", "sand\xeda");\r\nconsole.log(frutas); // Imprime: [\'manzana\', \'banana\', \'uva\', \'sand\xeda\', \'naranja\']\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"8-foreach",children:["8. ",(0,a.jsx)(n.code,{children:"forEach()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"forEach()"})," se utiliza para iterar sobre los elementos de un array y ejecutar una funci\xf3n para cada elemento. No devuelve ning\xfan valor y no modifica el array original."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"manzana\", \"banana\", \"pera\"];\r\nfrutas.forEach(function (fruta) {\r\n  console.log(fruta);\r\n});\r\n// Imprime:\r\n// 'manzana'\r\n// 'banana'\r\n// 'pera'\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"9-copywithin",children:["9. ",(0,a.jsx)(n.code,{children:"copyWithin()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"copyWithin()"})," en JavaScript es como copiar y pegar dentro de un mismo lugar. Toma partes de tu arreglo y las coloca en otra parte del mismo arreglo, reemplazando lo que haya all\xed."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Creamos un arreglo de ejemplo\r\nlet numeros = [1, 2, 3, 4, 5];\r\n\r\n// Queremos copiar los elementos empezando desde el \xedndice 0\r\n// y pegarlos desde el \xedndice 3 en adelante\r\nnumeros.copyWithin(3, 0);\r\n\r\nconsole.log(numeros); // Resultado: [1, 2, 3, 1, 2]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"copyWithin(3, 0)"}),": El primer n\xfamero ",(0,a.jsx)(n.code,{children:"3"})," es el \xedndice donde empezamos a pegar los elementos. El segundo n\xfamero ",(0,a.jsx)(n.code,{children:"0"})," es el \xedndice desde donde empezamos a copiar los elementos."]}),"\n",(0,a.jsx)(n.li,{children:"Entonces, copiamos desde el \xedndice 0 (el primer elemento) hasta el final del arreglo."}),"\n",(0,a.jsx)(n.li,{children:"Luego, pegamos estos elementos desde el \xedndice 3 en adelante del arreglo."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Creamos otro arreglo de ejemplo\r\nlet letras = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n\r\n// Queremos copiar los elementos desde el \xedndice 1 hasta el \xedndice 3\r\n// y pegarlos desde el \xedndice 2 en adelante\r\nletras.copyWithin(2, 1, 4);\r\n\r\nconsole.log(letras); // Resultado: ['a', 'b', 'b', 'c', 'd']\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"copyWithin(2, 1, 4)"}),": El primer n\xfamero ",(0,a.jsx)(n.code,{children:"2"})," es el \xedndice donde empezamos a pegar los elementos. Los n\xfameros ",(0,a.jsx)(n.code,{children:"1"})," y ",(0,a.jsx)(n.code,{children:"4"})," son los \xedndices desde donde empezamos y dejamos de copiar respectivamente."]}),"\n",(0,a.jsxs)(n.li,{children:["Entonces, copiamos desde el \xedndice 1 (",(0,a.jsx)(n.code,{children:"'b'"}),") hasta el \xedndice 3 (",(0,a.jsx)(n.code,{children:"'d'"}),") del arreglo."]}),"\n",(0,a.jsx)(n.li,{children:"Luego, pegamos estos elementos desde el \xedndice 2 en adelante del arreglo."}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"10-entries",children:["10. ",(0,a.jsx)(n.code,{children:"entries()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"entries()"})," en JavaScript te permite obtener pares de \xedndice-valor de un arreglo. Esto es \xfatil cuando quieres recorrer un arreglo y necesitas tanto el \xedndice como el valor en cada iteraci\xf3n."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "cereza"];\r\n\r\n// Usamos entries() para obtener un iterador de pares de \xedndice-valor\r\nlet iterador = frutas.entries();\r\n\r\n// Usamos un bucle for...of para recorrer el iterador\r\nfor (let par of iterador) {\r\n  console.log(par);\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Esto imprimir\xe1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"[0, 'manzana']\r\n[1, 'banana']\r\n[2, 'cereza']\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"entries()"})," nos da un iterador que nos devuelve pares de \xedndice-valor del arreglo."]}),"\n",(0,a.jsxs)(n.li,{children:["En cada iteraci\xf3n del bucle ",(0,a.jsx)(n.code,{children:"for...of"}),", obtenemos un par que consiste en el \xedndice y el valor correspondiente del arreglo."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let colores = ["rojo", "verde", "azul"];\r\n\r\n// Usamos entries() para obtener un iterador de pares de \xedndice-valor\r\nlet iterador = colores.entries();\r\n\r\n// Recorremos el iterador con un bucle while\r\nlet resultado = iterador.next();\r\nwhile (!resultado.done) {\r\n  let [indice, valor] = resultado.value;\r\n  console.log(`El color en el \xedndice ${indice} es ${valor}`);\r\n  resultado = iterador.next();\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Esto imprimir\xe1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"El color en el \xedndice 0 es rojo\r\nEl color en el \xedndice 1 es verde\r\nEl color en el \xedndice 2 es azul\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"next()"})," nos da el siguiente elemento del iterador."]}),"\n",(0,a.jsxs)(n.li,{children:["El resultado de ",(0,a.jsx)(n.code,{children:"next()"})," tiene una propiedad ",(0,a.jsx)(n.code,{children:"value"})," que es un arreglo ",(0,a.jsx)(n.code,{children:"[\xedndice, valor]"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Usamos la desestructuraci\xf3n de arreglos para obtener el \xedndice y el valor por separado."}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"11-every",children:["11. ",(0,a.jsx)(n.code,{children:"every()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"every()"})," en JavaScript es como hacer una comprobaci\xf3n en todos los elementos de un arreglo. Revisa si cada elemento cumple con una condici\xf3n y devuelve ",(0,a.jsx)(n.code,{children:"true"})," si todos los elementos la cumplen, de lo contrario devuelve ",(0,a.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let edades = [20, 25, 30, 18, 22];\r\n\r\n// Comprobamos si todas las edades son mayores de 18\r\nlet todasMayoresDe18 = edades.every((edad) => edad > 18);\r\n\r\nconsole.log(todasMayoresDe18); // Resultado: true\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n dentro de ",(0,a.jsx)(n.code,{children:"every()"})," comprueba si cada ",(0,a.jsx)(n.code,{children:"edad"})," en el arreglo es mayor que 18."]}),"\n",(0,a.jsxs)(n.li,{children:["Como todas las edades son mayores que 18, ",(0,a.jsx)(n.code,{children:"every()"})," devuelve ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [2, 4, 6, 8, 9];\r\n\r\n// Comprobamos si todos los n\xfameros son pares\r\nlet todosPares = numeros.every((numero) => numero % 2 === 0);\r\n\r\nconsole.log(todosPares); // Resultado: false\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n dentro de ",(0,a.jsx)(n.code,{children:"every()"})," comprueba si cada ",(0,a.jsx)(n.code,{children:"numero"})," en el arreglo es par."]}),"\n",(0,a.jsxs)(n.li,{children:["Como el \xfaltimo n\xfamero, 9, no es par, ",(0,a.jsx)(n.code,{children:"every()"})," devuelve ",(0,a.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"12-fill",children:["12. ",(0,a.jsx)(n.code,{children:"fill()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"fill()"})," en JavaScript te permite llenar un arreglo con un valor espec\xedfico. Es como cuando pintas un cuadro de un solo color. Puedes llenar todo el arreglo con un valor que elijas."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Creamos un arreglo con 5 elementos\r\nlet arreglo = [1, 2, 3, 4, 5];\r\n\r\n// Llenamos todo el arreglo con el valor 0\r\narreglo.fill(0);\r\n\r\nconsole.log(arreglo); // Resultado: [0, 0, 0, 0, 0]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"fill(0)"})," llena todo el arreglo con el valor ",(0,a.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Creamos un arreglo con 3 elementos\r\nlet colores = [\"rojo\", \"verde\", \"azul\"];\r\n\r\n// Llenamos los \xfaltimos 2 elementos con el valor 'blanco'\r\ncolores.fill(\"blanco\", 1);\r\n\r\nconsole.log(colores); // Resultado: ['rojo', 'blanco', 'blanco']\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"fill('blanco', 1)"})," llena el arreglo a partir del \xedndice ",(0,a.jsx)(n.code,{children:"1"})," (el segundo elemento) con el valor ",(0,a.jsx)(n.code,{children:"'blanco'"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"13-filter",children:["13. ",(0,a.jsx)(n.code,{children:"filter()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"filter()"})," en JavaScript te permite crear un nuevo arreglo con los elementos que cumplan cierta condici\xf3n. Es como cuando revisas una lista y separas los elementos que quieres conservar de los que no."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [10, 20, 30, 40, 50];\r\n\r\n// Creamos un nuevo arreglo con los n\xfameros mayores que 25\r\nlet mayoresDe25 = numeros.filter((numero) => numero > 25);\r\n\r\nconsole.log(mayoresDe25); // Resultado: [30, 40, 50]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n dentro de ",(0,a.jsx)(n.code,{children:"filter()"})," eval\xfaa si cada ",(0,a.jsx)(n.code,{children:"numero"})," en el arreglo es mayor que 25."]}),"\n",(0,a.jsxs)(n.li,{children:["Solo los n\xfameros que cumplen esa condici\xf3n se incluyen en el nuevo arreglo ",(0,a.jsx)(n.code,{children:"mayoresDe25"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "cereza", "uva"];\r\n\r\n// Creamos un nuevo arreglo con las frutas que tienen m\xe1s de 5 letras\r\nlet frutasLargas = frutas.filter((fruta) => fruta.length > 5);\r\n\r\nconsole.log(frutasLargas); // Resultado: [\'manzana\', \'cereza\']\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n dentro de ",(0,a.jsx)(n.code,{children:"filter()"})," revisa si cada ",(0,a.jsx)(n.code,{children:"fruta"})," en el arreglo tiene m\xe1s de 5 letras."]}),"\n",(0,a.jsxs)(n.li,{children:["Solo las frutas que cumplen esa condici\xf3n se incluyen en el nuevo arreglo ",(0,a.jsx)(n.code,{children:"frutasLargas"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"14-find",children:["14. ",(0,a.jsx)(n.code,{children:"find()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"find()"})," en JavaScript te permite encontrar el primer elemento en un arreglo que cumpla con una condici\xf3n espec\xedfica. Es como cuando buscas un objeto espec\xedfico en una habitaci\xf3n llena de cosas, y una vez que lo encuentras, ya no sigues buscando."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [10, 20, 30, 40, 50];\r\n\r\n// Encontramos el primer n\xfamero mayor que 25\r\nlet mayorDe25 = numeros.find((numero) => numero > 25);\r\n\r\nconsole.log(mayorDe25); // Resultado: 30\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n dentro de ",(0,a.jsx)(n.code,{children:"find()"})," busca el primer ",(0,a.jsx)(n.code,{children:"numero"})," en el arreglo que sea mayor que 25."]}),"\n",(0,a.jsx)(n.li,{children:"Una vez que encuentra ese n\xfamero, lo devuelve y deja de buscar m\xe1s."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let personas = [\r\n  { nombre: "Juan", edad: 25 },\r\n  { nombre: "Mar\xeda", edad: 30 },\r\n  { nombre: "Pedro", edad: 20 },\r\n];\r\n\r\n// Encontramos la primera persona mayor de 24 a\xf1os\r\nlet mayorDe24 = personas.find((persona) => persona.edad > 24);\r\n\r\nconsole.log(mayorDe24); // Resultado: { nombre: \'Juan\', edad: 25 }\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n dentro de ",(0,a.jsx)(n.code,{children:"find()"})," busca la primera ",(0,a.jsx)(n.code,{children:"persona"})," en el arreglo cuya edad sea mayor que 24."]}),"\n",(0,a.jsx)(n.li,{children:"Encuentra a Juan, que tiene 25 a\xf1os, y devuelve toda la informaci\xf3n de Juan."}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"15-findindex-findlast-findlastindex",children:["15. ",(0,a.jsx)(n.code,{children:"findIndex() findLast() findLastIndex()"})]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"findIndex()"})}),": Este m\xe9todo devuelve el \xedndice del primer elemento en un arreglo que cumpla con una condici\xf3n espec\xedfica. Si no encuentra ning\xfan elemento que cumpla la condici\xf3n, devuelve ",(0,a.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [10, 20, 30, 40, 50];\r\n\r\n// Encontramos el \xedndice del primer n\xfamero mayor que 25\r\nlet indiceMayorDe25 = numeros.findIndex((numero) => numero > 25);\r\n\r\nconsole.log(indiceMayorDe25); // Resultado: 2 (\xedndice de 30)\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"findLast()"})}),": Este m\xe9todo funciona de manera similar a ",(0,a.jsx)(n.code,{children:"find()"}),", pero devuelve el \xfaltimo elemento que cumple con la condici\xf3n."]}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [10, 20, 30, 40, 50];\r\n\r\n// Encontramos el \xfaltimo n\xfamero mayor que 25\r\nlet ultimoMayorDe25 = numeros.findLast((numero) => numero > 25);\r\n\r\nconsole.log(ultimoMayorDe25); // Resultado: 50\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"findLastIndex()"})}),": Este m\xe9todo funciona como ",(0,a.jsx)(n.code,{children:"findIndex()"}),", pero busca desde el final del arreglo hacia el principio y devuelve el \xedndice del \xfaltimo elemento que cumpla con la condici\xf3n. Si no encuentra ning\xfan elemento que cumpla la condici\xf3n, devuelve ",(0,a.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [10, 20, 30, 40, 50, 30];\r\n\r\n// Encontramos el \xedndice del \xfaltimo n\xfamero igual a 30\r\nlet ultimoIndiceDe30 = numeros.findLastIndex((numero) => numero === 30);\r\n\r\nconsole.log(ultimoIndiceDe30); // Resultado: 5 (\xedndice del \xfaltimo 30)\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"16-flat-y-flatmap",children:["16. ",(0,a.jsx)(n.code,{children:"flat() y flatMap()"})]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"flat()"})}),': Este m\xe9todo te permite "aplanar" un arreglo multidimensional, es decir, convertir un arreglo anidado en un solo nivel de profundidad.']}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let arreglo = [1, 2, [3, 4], [5, [6, 7]]];\r\n\r\nlet arregloAplanado = arreglo.flat();\r\n\r\nconsole.log(arregloAplanado); // Resultado: [1, 2, 3, 4, 5, [6, 7]]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["En este ejemplo, el arreglo original tiene un nivel de profundidad adicional debido a los arreglos anidados. Al usar ",(0,a.jsx)(n.code,{children:"flat()"}),", se aplanan estos niveles adicionales y se obtiene un solo arreglo."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"flatMap()"})}),": Este m\xe9todo te permite primero mapear cada elemento de un arreglo con una funci\xf3n y luego aplanar el resultado en un solo nivel de profundidad."]}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\nlet duplicados = numeros.flatMap((numero) => [numero, numero]);\r\n\r\nconsole.log(duplicados); // Resultado: [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["En este ejemplo, ",(0,a.jsx)(n.code,{children:"flatMap()"})," primero duplica cada n\xfamero del arreglo original con la funci\xf3n de mapeo ",(0,a.jsx)(n.code,{children:"[numero, numero]"}),", y luego aplanamos el resultado en un solo arreglo."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"17-includes",children:["17. ",(0,a.jsx)(n.code,{children:"includes()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"includes()"})," en JavaScript es como hacer una pregunta: \xbfeste elemento est\xe1 en el arreglo? Devuelve ",(0,a.jsx)(n.code,{children:"true"})," si el elemento est\xe1 presente y ",(0,a.jsx)(n.code,{children:"false"})," si no lo est\xe1."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "cereza"];\r\n\r\n// Preguntamos si \'banana\' est\xe1 en el arreglo\r\nlet tieneBanana = frutas.includes("banana");\r\n\r\nconsole.log(tieneBanana); // Resultado: true\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"includes('banana')"})," busca si ",(0,a.jsx)(n.code,{children:"'banana'"})," est\xe1 presente en el arreglo ",(0,a.jsx)(n.code,{children:"frutas"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Como s\xed est\xe1 presente, ",(0,a.jsx)(n.code,{children:"includes()"})," devuelve ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Preguntamos si el n\xfamero 6 est\xe1 en el arreglo\r\nlet tieneSeis = numeros.includes(6);\r\n\r\nconsole.log(tieneSeis); // Resultado: false\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"includes(6)"})," busca si el n\xfamero ",(0,a.jsx)(n.code,{children:"6"})," est\xe1 presente en el arreglo ",(0,a.jsx)(n.code,{children:"numeros"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Como ",(0,a.jsx)(n.code,{children:"6"})," no est\xe1 presente, ",(0,a.jsx)(n.code,{children:"includes()"})," devuelve ",(0,a.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"18-join",children:["18. ",(0,a.jsx)(n.code,{children:"join()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"join()"})," en JavaScript toma todos los elementos de un arreglo y los une en una cadena de texto usando un separador que t\xfa elijas. Es como cuando juntas todas las piezas de un rompecabezas en una sola imagen."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "cereza"];\r\n\r\n// Unimos las frutas en una cadena usando una coma como separador\r\nlet cadenaFrutas = frutas.join(", ");\r\n\r\nconsole.log(cadenaFrutas); // Resultado: "manzana, banana, cereza"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"join(', ')"})," toma todas las frutas del arreglo y las une en una sola cadena."]}),"\n",(0,a.jsxs)(n.li,{children:["El separador ",(0,a.jsx)(n.code,{children:"', '"})," indica que queremos poner una coma y un espacio entre cada fruta."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Unimos los n\xfameros en una cadena usando un guion como separador\r\nlet cadenaNumeros = numeros.join("-");\r\n\r\nconsole.log(cadenaNumeros); // Resultado: "1-2-3-4-5"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"join('-')"})," toma todos los n\xfameros del arreglo y los une en una sola cadena."]}),"\n",(0,a.jsxs)(n.li,{children:["El separador ",(0,a.jsx)(n.code,{children:"'-'"})," indica que queremos poner un guion entre cada n\xfamero."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"19-keys",children:["19. ",(0,a.jsx)(n.code,{children:"keys()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"keys()"})," en JavaScript te permite obtener un iterador de los \xedndices de un arreglo. Es como obtener un mapa que muestra d\xf3nde est\xe1n ubicados los elementos en el arreglo."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "cereza"];\r\n\r\n// Obtenemos un iterador de los \xedndices de las frutas\r\nlet iterador = frutas.keys();\r\n\r\n// Usamos un bucle for...of para recorrer el iterador\r\nfor (let indice of iterador) {\r\n  console.log(indice);\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Esto imprimir\xe1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0\r\n1\r\n2\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"keys()"})," nos da un iterador que nos devuelve los \xedndices de los elementos en el arreglo."]}),"\n",(0,a.jsxs)(n.li,{children:["Con un bucle ",(0,a.jsx)(n.code,{children:"for...of"}),", recorremos el iterador y obtenemos cada \xedndice."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let colores = ["rojo", "verde", "azul"];\r\n\r\n// Obtenemos un iterador de los \xedndices de los colores\r\nlet iterador = colores.keys();\r\n\r\n// Recorremos el iterador con un bucle while\r\nlet resultado = iterador.next();\r\nwhile (!resultado.done) {\r\n  console.log(resultado.value);\r\n  resultado = iterador.next();\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Esto imprimir\xe1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0\r\n1\r\n2\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Tambi\xe9n podemos usar un bucle ",(0,a.jsx)(n.code,{children:"while"})," junto con ",(0,a.jsx)(n.code,{children:"next()"})," para recorrer el iterador y obtener los \xedndices."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"20-map",children:["20. ",(0,a.jsx)(n.code,{children:"map()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"map()"})," en JavaScript te permite crear un nuevo arreglo transformando cada elemento del arreglo original. Es como tener un traductor que convierte cada palabra de un idioma a otro."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Creamos un nuevo arreglo duplicando cada n\xfamero\r\nlet duplicados = numeros.map((numero) => numero * 2);\r\n\r\nconsole.log(duplicados); // Resultado: [2, 4, 6, 8, 10]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"map()"})," toma cada ",(0,a.jsx)(n.code,{children:"numero"})," del arreglo original y lo multiplica por 2."]}),"\n",(0,a.jsx)(n.li,{children:"Luego, crea un nuevo arreglo con los resultados de estas multiplicaciones."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"manzana\", \"banana\", \"cereza\"];\r\n\r\n// Creamos un nuevo arreglo con las frutas en may\xfasculas\r\nlet frutasMayusculas = frutas.map((fruta) => fruta.toUpperCase());\r\n\r\nconsole.log(frutasMayusculas); // Resultado: ['MANZANA', 'BANANA', 'CEREZA']\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"map()"})," toma cada ",(0,a.jsx)(n.code,{children:"fruta"})," del arreglo original y la convierte a may\xfasculas usando ",(0,a.jsx)(n.code,{children:"toUpperCase()"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Luego, crea un nuevo arreglo con las frutas en may\xfasculas."}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"21-reduce-reduceright",children:["21. ",(0,a.jsx)(n.code,{children:"reduce() reduceRight()"})]}),"\n",(0,a.jsxs)(n.p,{children:["Los m\xe9todos ",(0,a.jsx)(n.code,{children:"reduce()"})," y ",(0,a.jsx)(n.code,{children:"reduceRight()"}),' en JavaScript te permiten "reducir" un arreglo a un solo valor aplicando una funci\xf3n a cada elemento. La diferencia entre ellos es el orden en el que procesan los elementos del arreglo.']}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"reduce()"})}),": Comienza desde el primer elemento del arreglo y va acumulando un resultado al aplicar la funci\xf3n a cada elemento, de izquierda a derecha."]}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Sumamos todos los n\xfameros del arreglo\r\nlet suma = numeros.reduce((acumulador, numero) => acumulador + numero, 0);\r\n\r\nconsole.log(suma); // Resultado: 15 (1 + 2 + 3 + 4 + 5)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"reduce((acumulador, numero) => acumulador + numero, 0)"})," suma todos los n\xfameros del arreglo."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"acumulador"})," es el valor acumulado en cada iteraci\xf3n y ",(0,a.jsx)(n.code,{children:"numero"})," es cada n\xfamero del arreglo."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"reduceRight()"})}),": Comienza desde el \xfaltimo elemento del arreglo y va acumulando un resultado al aplicar la funci\xf3n a cada elemento, de derecha a izquierda."]}),"\n",(0,a.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let palabras = ["Hola", " ", "mundo", "!"];\r\n\r\n// Concatenamos todas las palabras del arreglo\r\nlet frase = palabras.reduceRight(\r\n  (acumulador, palabra) => acumulador + palabra\r\n);\r\n\r\nconsole.log(frase); // Resultado: \'!mundo Hola\'\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"reduceRight((acumulador, palabra) => acumulador + palabra)"})," concatena todas las palabras del arreglo."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"acumulador"})," es el valor acumulado en cada iteraci\xf3n y ",(0,a.jsx)(n.code,{children:"palabra"})," es cada palabra del arreglo."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"22-reverse",children:["22. ",(0,a.jsx)(n.code,{children:"reverse()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"reverse()"})," en JavaScript invierte el orden de los elementos en un arreglo. Es como voltear una baraja de cartas boca abajo."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"manzana\", \"banana\", \"cereza\"];\r\n\r\n// Invertimos el orden de las frutas\r\nfrutas.reverse();\r\n\r\nconsole.log(frutas); // Resultado: ['cereza', 'banana', 'manzana']\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"reverse()"})," invierte el orden de los elementos en el arreglo ",(0,a.jsx)(n.code,{children:"frutas"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Al principio ten\xedamos ",(0,a.jsx)(n.code,{children:"'manzana', 'banana', 'cereza'"}),", pero despu\xe9s de aplicar ",(0,a.jsx)(n.code,{children:"reverse()"}),", el orden se invierte y obtenemos ",(0,a.jsx)(n.code,{children:"'cereza', 'banana', 'manzana'"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Invertimos el orden de los n\xfameros\r\nnumeros.reverse();\r\n\r\nconsole.log(numeros); // Resultado: [5, 4, 3, 2, 1]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"reverse()"})," invierte el orden de los n\xfameros en el arreglo ",(0,a.jsx)(n.code,{children:"numeros"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Al principio ten\xedamos ",(0,a.jsx)(n.code,{children:"[1, 2, 3, 4, 5]"}),", pero despu\xe9s de aplicar ",(0,a.jsx)(n.code,{children:"reverse()"}),", el orden se invierte y obtenemos ",(0,a.jsx)(n.code,{children:"[5, 4, 3, 2, 1]"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"23-some",children:["23. ",(0,a.jsx)(n.code,{children:"some()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"some()"}),' en JavaScript comprueba si al menos un elemento en un arreglo cumple con una condici\xf3n espec\xedfica. Es como preguntar: "\xbfHay al menos uno que cumpla?".']}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let edades = [20, 25, 30, 18, 22];\r\n\r\n// Verificamos si hay al menos una persona mayor de 18 a\xf1os\r\nlet hayMayoresDe18 = edades.some((edad) => edad > 18);\r\n\r\nconsole.log(hayMayoresDe18); // Resultado: true\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"some(edad => edad > 18)"})," verifica si al menos una ",(0,a.jsx)(n.code,{children:"edad"})," en el arreglo es mayor que 18."]}),"\n",(0,a.jsxs)(n.li,{children:["Como al menos una edad es mayor que 18, ",(0,a.jsx)(n.code,{children:"some()"})," devuelve ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Verificamos si hay al menos un n\xfamero par\r\nlet hayNumerosPares = numeros.some((numero) => numero % 2 === 0);\r\n\r\nconsole.log(hayNumerosPares); // Resultado: true\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"some(numero => numero % 2 === 0)"})," verifica si al menos un ",(0,a.jsx)(n.code,{children:"numero"})," en el arreglo es par."]}),"\n",(0,a.jsxs)(n.li,{children:["Como al menos un n\xfamero es par, ",(0,a.jsx)(n.code,{children:"some()"})," devuelve ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"24-sort",children:["24. ",(0,a.jsx)(n.code,{children:"sort()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"sort()"})," en JavaScript se utiliza para ordenar los elementos de un arreglo. Ordena los elementos alfab\xe9ticamente como cadenas de texto, o num\xe9ricamente como n\xfameros."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo b\xe1sico:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let frutas = [\"banana\", \"manzana\", \"cereza\", \"uva\"];\r\n\r\n// Ordenamos las frutas alfab\xe9ticamente\r\nfrutas.sort();\r\n\r\nconsole.log(frutas); // Resultado: ['banana', 'cereza', 'manzana', 'uva']\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sort()"})," ordena las frutas alfab\xe9ticamente en orden ascendente (de la 'a' a la 'z')."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo ordenando n\xfameros:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [3, 1, 10, 5, 2];\r\n\r\n// Ordenamos los n\xfameros de menor a mayor\r\nnumeros.sort((a, b) => a - b);\r\n\r\nconsole.log(numeros); // Resultado: [1, 2, 3, 5, 10]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["En este ejemplo, pasamos una funci\xf3n de comparaci\xf3n ",(0,a.jsx)(n.code,{children:"(a, b) => a - b"})," como argumento de ",(0,a.jsx)(n.code,{children:"sort()"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Esta funci\xf3n indica c\xf3mo deben ser comparados los elementos para ordenarlos."}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"a - b"})," significa que si ",(0,a.jsx)(n.code,{children:"a"})," es menor que ",(0,a.jsx)(n.code,{children:"b"}),", el resultado de la resta ser\xe1 negativo, por lo que ",(0,a.jsx)(n.code,{children:"a"})," se colocar\xe1 antes que ",(0,a.jsx)(n.code,{children:"b"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Tambi\xe9n puedes usar ",(0,a.jsx)(n.code,{children:"sort()"})," con objetos, pero necesitas definir una funci\xf3n de comparaci\xf3n adecuada para que ordene correctamente seg\xfan tus criterios."]}),"\n",(0,a.jsxs)(n.h2,{id:"25-tolocalestring",children:["25. ",(0,a.jsx)(n.code,{children:"toLocaleString()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"toLocaleString()"})," en JavaScript se utiliza para devolver una cadena de texto que representa los elementos de un arreglo de una manera localizada, es decir, utilizando el formato de idioma y las convenciones de separaci\xf3n de n\xfameros espec\xedficos de la configuraci\xf3n regional del usuario."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let numeros = [1000, 20000, 300000];\r\n\r\n// Convertimos los n\xfameros en una cadena de texto con formato localizado\r\nlet cadenaNumeros = numeros.toLocaleString();\r\n\r\nconsole.log(cadenaNumeros); // Resultado: "1,000, 20,000, 300,000" (dependiendo de la configuraci\xf3n regional del usuario)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"toLocaleString()"})," convierte los n\xfameros en una cadena de texto con el formato de separaci\xf3n de n\xfameros adecuado para la configuraci\xf3n regional del usuario."]}),"\n",(0,a.jsx)(n.li,{children:"Por ejemplo, en algunos lugares se utiliza la coma como separador de miles, mientras que en otros se utiliza el punto."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo con fechas:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let fechas = [\r\n  new Date("2024-05-01"),\r\n  new Date("2024-05-15"),\r\n  new Date("2024-05-30"),\r\n];\r\n\r\n// Convertimos las fechas en una cadena de texto con formato localizado\r\nlet cadenaFechas = fechas.toLocaleString();\r\n\r\nconsole.log(cadenaFechas); // Resultado: depende de la configuraci\xf3n regional del usuario\n'})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"toLocaleString()"})," tambi\xe9n puede formatear fechas seg\xfan la configuraci\xf3n regional del usuario."]}),"\n",(0,a.jsx)(n.li,{children:"La salida depender\xe1 del formato de fecha y hora preferido en esa regi\xf3n."}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"26-values",children:["26. ",(0,a.jsx)(n.code,{children:"values()"})]}),"\n",(0,a.jsxs)(n.p,{children:["El m\xe9todo ",(0,a.jsx)(n.code,{children:"values()"})," en JavaScript se utiliza para obtener un iterador que contiene los valores de los elementos de un arreglo. B\xe1sicamente, te da acceso a cada valor en el arreglo uno por uno."]}),"\n",(0,a.jsx)(n.p,{children:"Aqu\xed tienes un ejemplo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let frutas = ["manzana", "banana", "cereza"];\r\n\r\n// Obtenemos un iterador de los valores de las frutas\r\nlet iterador = frutas.values();\r\n\r\n// Usamos un bucle for...of para recorrer el iterador\r\nfor (let valor of iterador) {\r\n  console.log(valor);\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Esto imprimir\xe1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"manzana\r\nbanana\r\ncereza\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"values()"})," nos da un iterador que nos devuelve los valores de cada elemento en el arreglo ",(0,a.jsx)(n.code,{children:"frutas"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Con un bucle ",(0,a.jsx)(n.code,{children:"for...of"}),", recorremos el iterador y obtenemos cada valor."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Otro ejemplo con n\xfameros:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"let numeros = [1, 2, 3, 4, 5];\r\n\r\n// Obtenemos un iterador de los valores de los n\xfameros\r\nlet iterador = numeros.values();\r\n\r\n// Recorremos el iterador con un bucle while\r\nlet resultado = iterador.next();\r\nwhile (!resultado.done) {\r\n  console.log(resultado.value);\r\n  resultado = iterador.next();\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Esto imprimir\xe1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"1\r\n2\r\n3\r\n4\r\n5\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Tambi\xe9n podemos usar un bucle ",(0,a.jsx)(n.code,{children:"while"})," junto con ",(0,a.jsx)(n.code,{children:"next()"})," para recorrer el iterador y obtener los valores uno por uno."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,a.jsx)(n.p,{children:"En este an\xe1lisis, hemos explorado algunos de los m\xe9todos m\xe1s utilizados para manipular arrays en JavaScript. Estos m\xe9todos proporcionan una manera eficiente y conveniente de agregar, eliminar, combinar y manipular elementos en arrays, lo que facilita el trabajo con colecciones de datos en el desarrollo de aplicaciones web. Al comprender y dominar estos m\xe9todos, los desarrolladores pueden escribir c\xf3digo m\xe1s limpio, legible y eficiente en JavaScript."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var l=r(6540);const a={},o=l.createContext(a);function s(e){const n=l.useContext(o);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);