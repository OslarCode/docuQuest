"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[3295],{4657:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"js/dom/eventos","title":"Eventos","description":"Introducci\xf3n","source":"@site/docs/js/dom/eventos.md","sourceDirName":"js/dom","slug":"/js/dom/eventos","permalink":"/docuQuest/docs/js/dom/eventos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/dom/eventos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Estructura del DOM","permalink":"/docuQuest/docs/js/dom/estructura"},"next":{"title":"Eventos de interacci\xf3n con el usuario","permalink":"/docuQuest/docs/js/dom/eventosUsuario"}}');var s=o(4848),d=o(8453);const t={},i="Eventos",l={},a=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:3},{value:"1. Interacciones del Usuario que Disparan Acciones en JavaScript",id:"1-interacciones-del-usuario-que-disparan-acciones-en-javascript",level:2},{value:"1.1 Definici\xf3n de Eventos del DOM",id:"11-definici\xf3n-de-eventos-del-dom",level:3},{value:"1.2 Tipos de Eventos del DOM",id:"12-tipos-de-eventos-del-dom",level:3},{value:"1.3 Modelo de Eventos del DOM",id:"13-modelo-de-eventos-del-dom",level:3},{value:"2. Ejemplos Comunes de Eventos del DOM",id:"2-ejemplos-comunes-de-eventos-del-dom",level:2},{value:"2.1 Evento <code>click</code>",id:"21-evento-click",level:3},{value:"Ejemplo Pr\xe1ctico",id:"ejemplo-pr\xe1ctico",level:3},{value:"2.2 Evento <code>mouseover</code>",id:"22-evento-mouseover",level:3},{value:"Ejemplo Pr\xe1ctico",id:"ejemplo-pr\xe1ctico-1",level:3},{value:"2.3 Evento <code>submit</code>",id:"23-evento-submit",level:3},{value:"Ejemplo Pr\xe1ctico",id:"ejemplo-pr\xe1ctico-2",level:3},{value:"3. Asociar Eventos a Elementos: <code>element.addEventListener()</code>",id:"3-asociar-eventos-a-elementos-elementaddeventlistener",level:2},{value:"3.1 Introducci\xf3n a <code>addEventListener()</code>",id:"31-introducci\xf3n-a-addeventlistener",level:3},{value:"3.2 Sintaxis y Uso",id:"32-sintaxis-y-uso",level:3},{value:"3.3 Ejemplo Avanzado",id:"33-ejemplo-avanzado",level:3},{value:"3.4 Gesti\xf3n de Eventos en Fase de Captura y Burbujeo",id:"34-gesti\xf3n-de-eventos-en-fase-de-captura-y-burbujeo",level:3},{value:"Ejemplo de Captura de Eventos",id:"ejemplo-de-captura-de-eventos",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"eventos",children:"Eventos"})}),"\n",(0,s.jsx)(n.h1,{id:"los-eventos-del-dom-en-javascript-en-p\xe1ginas-web",children:"Los Eventos del DOM en JavaScript en P\xe1ginas Web"}),"\n",(0,s.jsx)(n.h3,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,s.jsxs)(n.p,{children:["Los eventos del Modelo de Objetos del Documento (DOM) en JavaScript son fundamentales para crear p\xe1ginas web interactivas y din\xe1micas. Los eventos permiten que el navegador responda a acciones del usuario, como clics, desplazamientos y env\xedos de formularios, proporcionando una forma eficaz de implementar comportamientos personalizados en respuesta a las interacciones del usuario. Este texto acad\xe9mico explorar\xe1 en profundidad las interacciones del usuario que disparan acciones en JavaScript, ejemplos comunes de eventos como ",(0,s.jsx)(n.code,{children:"click"}),", ",(0,s.jsx)(n.code,{children:"mouseover"}),", y ",(0,s.jsx)(n.code,{children:"submit"}),", y c\xf3mo asociar eventos a elementos utilizando el m\xe9todo ",(0,s.jsx)(n.code,{children:"element.addEventListener()"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"1-interacciones-del-usuario-que-disparan-acciones-en-javascript",children:"1. Interacciones del Usuario que Disparan Acciones en JavaScript"}),"\n",(0,s.jsx)(n.h3,{id:"11-definici\xf3n-de-eventos-del-dom",children:"1.1 Definici\xf3n de Eventos del DOM"}),"\n",(0,s.jsx)(n.p,{children:"En el contexto del DOM, un evento es cualquier acci\xf3n o suceso que tiene lugar en el navegador y que puede ser detectado por JavaScript. Estos eventos pueden ser causados por acciones del usuario, como hacer clic en un bot\xf3n, o por eventos del sistema, como la carga completa de una p\xe1gina web. Cuando se produce un evento, el navegador genera un objeto de evento que contiene informaci\xf3n sobre lo ocurrido, como el tipo de evento y el elemento en el que ocurri\xf3."}),"\n",(0,s.jsx)(n.h3,{id:"12-tipos-de-eventos-del-dom",children:"1.2 Tipos de Eventos del DOM"}),"\n",(0,s.jsx)(n.p,{children:"Existen m\xfaltiples tipos de eventos que pueden ser gestionados en una p\xe1gina web, categorizados seg\xfan la acci\xf3n que representan. Los eventos m\xe1s comunes incluyen:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventos de rat\xf3n"}),": ",(0,s.jsx)(n.code,{children:"click"}),", ",(0,s.jsx)(n.code,{children:"dblclick"}),", ",(0,s.jsx)(n.code,{children:"mousedown"}),", ",(0,s.jsx)(n.code,{children:"mouseup"}),", ",(0,s.jsx)(n.code,{children:"mouseover"}),", ",(0,s.jsx)(n.code,{children:"mouseout"}),", ",(0,s.jsx)(n.code,{children:"mousemove"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventos de teclado"}),": ",(0,s.jsx)(n.code,{children:"keydown"}),", ",(0,s.jsx)(n.code,{children:"keypress"}),", ",(0,s.jsx)(n.code,{children:"keyup"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventos de formulario"}),": ",(0,s.jsx)(n.code,{children:"submit"}),", ",(0,s.jsx)(n.code,{children:"reset"}),", ",(0,s.jsx)(n.code,{children:"focus"}),", ",(0,s.jsx)(n.code,{children:"blur"}),", ",(0,s.jsx)(n.code,{children:"change"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventos de documento"}),": ",(0,s.jsx)(n.code,{children:"DOMContentLoaded"}),", ",(0,s.jsx)(n.code,{children:"load"}),", ",(0,s.jsx)(n.code,{children:"unload"}),", ",(0,s.jsx)(n.code,{children:"scroll"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventos de ventana"}),": ",(0,s.jsx)(n.code,{children:"resize"}),", ",(0,s.jsx)(n.code,{children:"scroll"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"13-modelo-de-eventos-del-dom",children:"1.3 Modelo de Eventos del DOM"}),"\n",(0,s.jsx)(n.p,{children:"El modelo de eventos del DOM define c\xf3mo se propagan los eventos a trav\xe9s del \xe1rbol del DOM y c\xf3mo se pueden gestionar en diferentes niveles. Existen tres fases en el ciclo de vida de un evento:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Captura"}),": El evento se propaga desde el documento ra\xedz hasta el elemento objetivo."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Target"}),": El evento alcanza el elemento objetivo."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Burbujeo"}),": El evento se propaga de regreso desde el elemento objetivo hasta el documento ra\xedz."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"JavaScript permite interceptar y gestionar eventos en cualquiera de estas fases, proporcionando flexibilidad en la forma en que se manejan las interacciones del usuario."}),"\n",(0,s.jsx)(n.h2,{id:"2-ejemplos-comunes-de-eventos-del-dom",children:"2. Ejemplos Comunes de Eventos del DOM"}),"\n",(0,s.jsxs)(n.h3,{id:"21-evento-click",children:["2.1 Evento ",(0,s.jsx)(n.code,{children:"click"})]}),"\n",(0,s.jsxs)(n.p,{children:["El evento ",(0,s.jsx)(n.code,{children:"click"})," es uno de los eventos m\xe1s comunes en el desarrollo web, disparado cuando un usuario hace clic en un elemento. Este evento es fundamental para interactuar con botones, enlaces y otras \xe1reas interactivas de una p\xe1gina web."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-pr\xe1ctico",children:"Ejemplo Pr\xe1ctico"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Evento Click</title>\r\n  </head>\r\n  <body>\r\n    <button id="myButton">Haz clic aqu\xed</button>\r\n    <script>\r\n      document\r\n        .getElementById("myButton")\r\n        .addEventListener("click", function () {\r\n          alert("Bot\xf3n clicado!");\r\n        });\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"En este ejemplo, se a\xf1ade un detector de eventos al bot\xf3n que muestra una alerta cuando se hace clic en \xe9l."}),"\n",(0,s.jsxs)(n.h3,{id:"22-evento-mouseover",children:["2.2 Evento ",(0,s.jsx)(n.code,{children:"mouseover"})]}),"\n",(0,s.jsxs)(n.p,{children:["El evento ",(0,s.jsx)(n.code,{children:"mouseover"})," se dispara cuando el cursor del rat\xf3n se desplaza sobre un elemento. Este evento es \xfatil para crear efectos de desplazamiento y men\xfas desplegables."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-pr\xe1ctico-1",children:"Ejemplo Pr\xe1ctico"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Evento Mouseover</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      id="hoverDiv"\r\n      style="width:100px;height:100px;background-color:blue;"\r\n    ></div>\r\n    <script>\r\n      document\r\n        .getElementById("hoverDiv")\r\n        .addEventListener("mouseover", function () {\r\n          this.style.backgroundColor = "red";\r\n        });\r\n      document\r\n        .getElementById("hoverDiv")\r\n        .addEventListener("mouseout", function () {\r\n          this.style.backgroundColor = "blue";\r\n        });\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Este ejemplo cambia el color de fondo de un div cuando el rat\xf3n se mueve sobre \xe9l y lo restablece cuando el rat\xf3n se mueve fuera del elemento."}),"\n",(0,s.jsxs)(n.h3,{id:"23-evento-submit",children:["2.3 Evento ",(0,s.jsx)(n.code,{children:"submit"})]}),"\n",(0,s.jsxs)(n.p,{children:["El evento ",(0,s.jsx)(n.code,{children:"submit"})," se dispara cuando un formulario es enviado. Este evento permite validar los datos del formulario antes de enviarlos al servidor."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-pr\xe1ctico-2",children:"Ejemplo Pr\xe1ctico"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Evento Submit</title>\r\n  </head>\r\n  <body>\r\n    <form id="myForm">\r\n      <input type="text" id="name" required />\r\n      <input type="submit" value="Enviar" />\r\n    </form>\r\n    <script>\r\n      document\r\n        .getElementById("myForm")\r\n        .addEventListener("submit", function (event) {\r\n          var name = document.getElementById("name").value;\r\n          if (name === "") {\r\n            alert("El nombre es obligatorio");\r\n            event.preventDefault();\r\n          }\r\n        });\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"En este ejemplo, se valida que el campo de texto no est\xe9 vac\xedo antes de permitir el env\xedo del formulario."}),"\n",(0,s.jsxs)(n.h2,{id:"3-asociar-eventos-a-elementos-elementaddeventlistener",children:["3. Asociar Eventos a Elementos: ",(0,s.jsx)(n.code,{children:"element.addEventListener()"})]}),"\n",(0,s.jsxs)(n.h3,{id:"31-introducci\xf3n-a-addeventlistener",children:["3.1 Introducci\xf3n a ",(0,s.jsx)(n.code,{children:"addEventListener()"})]}),"\n",(0,s.jsxs)(n.p,{children:["El m\xe9todo ",(0,s.jsx)(n.code,{children:"addEventListener()"})," es la forma moderna y recomendada de asociar eventos a elementos en el DOM. Este m\xe9todo proporciona una forma flexible de gestionar m\xfaltiples eventos en un mismo elemento y permite especificar la fase del evento (captura o burbujeo)."]}),"\n",(0,s.jsx)(n.h3,{id:"32-sintaxis-y-uso",children:"3.2 Sintaxis y Uso"}),"\n",(0,s.jsxs)(n.p,{children:["La sintaxis b\xe1sica de ",(0,s.jsx)(n.code,{children:"addEventListener()"})," es:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"element.addEventListener(eventType, listener, useCapture);\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"eventType"})}),": El tipo de evento (por ejemplo, ",(0,s.jsx)(n.code,{children:"click"}),", ",(0,s.jsx)(n.code,{children:"mouseover"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"listener"})}),": La funci\xf3n que se ejecutar\xe1 cuando se dispare el evento."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"useCapture"})})," (opcional): Un booleano que indica si el evento debe ser capturado (true) o burbujeado (false, por defecto)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"33-ejemplo-avanzado",children:"3.3 Ejemplo Avanzado"}),"\n",(0,s.jsx)(n.p,{children:"Consideremos un ejemplo m\xe1s complejo donde se gestionan m\xfaltiples eventos en un elemento:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo Avanzado de addEventListener</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      id="interactiveDiv"\r\n      style="width:200px;height:200px;background-color:green;"\r\n    ></div>\r\n    <script>\r\n      var div = document.getElementById("interactiveDiv");\r\n\r\n      function handleClick(event) {\r\n        alert("Div clicado!");\r\n      }\r\n\r\n      function handleMouseOver(event) {\r\n        div.style.backgroundColor = "yellow";\r\n      }\r\n\r\n      function handleMouseOut(event) {\r\n        div.style.backgroundColor = "green";\r\n      }\r\n\r\n      div.addEventListener("click", handleClick);\r\n      div.addEventListener("mouseover", handleMouseOver);\r\n      div.addEventListener("mouseout", handleMouseOut);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"En este ejemplo, el div cambia de color cuando se pasa el rat\xf3n sobre \xe9l y muestra una alerta cuando se hace clic."}),"\n",(0,s.jsx)(n.h3,{id:"34-gesti\xf3n-de-eventos-en-fase-de-captura-y-burbujeo",children:"3.4 Gesti\xf3n de Eventos en Fase de Captura y Burbujeo"}),"\n",(0,s.jsxs)(n.p,{children:["El m\xe9todo ",(0,s.jsx)(n.code,{children:"addEventListener()"})," tambi\xe9n permite especificar si el evento debe ser gestionado durante la fase de captura o burbujeo. Por defecto, los eventos se gestionan en la fase de burbujeo, pero esto se puede cambiar estableciendo el tercer argumento (",(0,s.jsx)(n.code,{children:"useCapture"}),") en ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-de-captura-de-eventos",children:"Ejemplo de Captura de Eventos"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Captura de Eventos</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      id="outerDiv"\r\n      style="width:300px;height:300px;background-color:lightblue;"\r\n    >\r\n      <div\r\n        id="innerDiv"\r\n        style="width:100px;height:100px;background-color:blue;"\r\n      ></div>\r\n    </div>\r\n    <script>\r\n      var outerDiv = document.getElementById("outerDiv");\r\n      var innerDiv = document.getElementById("innerDiv");\r\n\r\n      outerDiv.addEventListener(\r\n        "click",\r\n        function () {\r\n          alert("Outer DIV capturado!");\r\n        },\r\n        true\r\n      ); // Captura\r\n\r\n      innerDiv.addEventListener("click", function () {\r\n        alert("Inner DIV clicado!");\r\n      });\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, el clic en el ",(0,s.jsx)(n.code,{children:"innerDiv"})," primero ser\xe1 capturado por el ",(0,s.jsx)(n.code,{children:"outerDiv"})," debido al uso de la fase de captura."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,s.jsxs)(n.p,{children:["La gesti\xf3n de eventos del DOM en JavaScript es una t\xe9cnica esencial para el desarrollo web interactivo y din\xe1mico. A trav\xe9s de m\xe9todos como ",(0,s.jsx)(n.code,{children:"addEventListener()"}),", los desarrolladores pueden asociar eventos a elementos de manera flexible y eficiente, gestionando eventos en las fases de captura y burbujeo. Comprender c\xf3mo funcionan los eventos del DOM y c\xf3mo asociarlos a elementos es crucial para cualquier desarrollador web que desee crear experiencias de usuario avanzadas y responsivas en la web moderna. La capacidad de responder a interacciones del usuario y gestionar eventos de manera eficaz es una de las competencias clave en el desarrollo de aplicaciones web ricas y funcionales."]}),"\n",(0,s.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>i});var r=o(6540);const s={},d=r.createContext(s);function t(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);