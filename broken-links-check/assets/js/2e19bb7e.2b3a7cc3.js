"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[3786],{7457:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"backend/Node.js/asincronia","title":"Fundamentos de asincron\xeda en Node.js","description":"\xbfPor qu\xe9 es tan importante la asincron\xeda en Node.js?","source":"@site/docs/backend/Node.js/asincronia.md","sourceDirName":"backend/Node.js","slug":"/backend/Node.js/asincronia","permalink":"/docuQuest/docs/backend/Node.js/asincronia","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/Node.js/asincronia.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"M\xf3dulos y gesti\xf3n de dependencias con NPM","permalink":"/docuQuest/docs/backend/Node.js/modulosGestionDependenciasNPM"},"next":{"title":"Sistema de archivos y procesos en Node.js","permalink":"/docuQuest/docs/backend/Node.js/sistemaArchivosProcesos"}}');var a=o(4848),r=o(8453);const c={},l="Fundamentos de asincron\xeda en Node.js",i={},t=[{value:"\xbfPor qu\xe9 es tan importante la asincron\xeda en Node.js?",id:"por-qu\xe9-es-tan-importante-la-asincron\xeda-en-nodejs",level:2},{value:"Callback: el punto de partida",id:"callback-el-punto-de-partida",level:2},{value:"El problema del \u201ccallback hell\u201d",id:"el-problema-del-callback-hell",level:2},{value:"Promesas: una forma m\xe1s limpia",id:"promesas-una-forma-m\xe1s-limpia",level:2},{value:"Async/Await: promesas a\xfan m\xe1s f\xe1ciles",id:"asyncawait-promesas-a\xfan-m\xe1s-f\xe1ciles",level:2},{value:"\xbfC\xf3mo funciona todo esto por dentro?",id:"c\xf3mo-funciona-todo-esto-por-dentro",level:2},{value:"\ud83d\udcbb Ejercicio pr\xe1ctico guiado: lectura m\xfaltiple de archivos",id:"-ejercicio-pr\xe1ctico-guiado-lectura-m\xfaltiple-de-archivos",level:2},{value:"Paso 1: crea tres archivos de texto con algo dentro",id:"paso-1-crea-tres-archivos-de-texto-con-algo-dentro",level:3},{value:"Paso 2: crea <code>lector.js</code>",id:"paso-2-crea-lectorjs",level:3},{value:"Conclusi\xf3n del m\xf3dulo",id:"conclusi\xf3n-del-m\xf3dulo",level:2},{value:"Recursos complementarios",id:"recursos-complementarios",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"fundamentos-de-asincron\xeda-en-nodejs",children:"Fundamentos de asincron\xeda en Node.js"})}),"\n",(0,a.jsx)(n.h1,{id:"m\xf3dulo-3-fundamentos-de-asincron\xeda-en-nodejs",children:"M\xd3DULO 3: Fundamentos de asincron\xeda en Node.js"}),"\n",(0,a.jsx)(n.h2,{id:"por-qu\xe9-es-tan-importante-la-asincron\xeda-en-nodejs",children:"\xbfPor qu\xe9 es tan importante la asincron\xeda en Node.js?"}),"\n",(0,a.jsxs)(n.p,{children:["Node.js fue dise\xf1ado para ser ",(0,a.jsx)(n.strong,{children:"r\xe1pido y eficiente"}),", pero no porque tenga m\xfaltiples hilos como otros lenguajes. Lo que lo hace especial es su capacidad para ",(0,a.jsx)(n.strong,{children:"hacer muchas cosas al mismo tiempo sin bloquearse"}),", gracias a un modelo de ejecuci\xf3n basado en eventos y asincron\xeda."]}),"\n",(0,a.jsxs)(n.p,{children:["Este m\xf3dulo te ense\xf1ar\xe1 c\xf3mo funcionan los ",(0,a.jsx)(n.strong,{children:"callbacks"}),", las ",(0,a.jsx)(n.strong,{children:"promesas"})," y el sistema de ejecuci\xf3n conocido como ",(0,a.jsx)(n.strong,{children:"event loop"}),". Tambi\xe9n aprender\xe1s a trabajar con funciones as\xedncronas modernas como ",(0,a.jsx)(n.code,{children:"async/await"})," de forma clara y progresiva."]}),"\n",(0,a.jsx)(n.h2,{id:"callback-el-punto-de-partida",children:"Callback: el punto de partida"}),"\n",(0,a.jsxs)(n.p,{children:["En Node.js, muchas funciones que acceden al sistema (como leer un archivo) ",(0,a.jsx)(n.strong,{children:"no se ejecutan inmediatamente"}),", sino que ",(0,a.jsx)(n.strong,{children:"se programan para ejecutarse despu\xe9s"}),". Esto se hace mediante callbacks: funciones que se ejecutan cuando otra tarea termina."]}),"\n",(0,a.jsx)(n.p,{children:"Veamos un ejemplo pr\xe1ctico leyendo un archivo de forma as\xedncrona:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// leerArchivo.js\nconst fs = require("fs");\n\nfs.readFile("ejemplo.txt", "utf8", (error, datos) => {\n  if (error) {\n    console.error("\u274c Error al leer el archivo:", error.message);\n    return;\n  }\n  console.log("\ud83d\udcc4 Contenido del archivo:", datos);\n});\n\nconsole.log("\u2705 Archivo solicitado. Esperando resultados...");\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Cuando ejecutas este c\xf3digo, ",(0,a.jsx)(n.strong,{children:"el programa no se detiene"})," mientras se lee el archivo. Contin\xfaa y luego ejecuta el callback cuando el archivo ya est\xe1 disponible. Esa es la esencia de la asincron\xeda en Node.js."]}),"\n",(0,a.jsx)(n.h2,{id:"el-problema-del-callback-hell",children:"El problema del \u201ccallback hell\u201d"}),"\n",(0,a.jsxs)(n.p,{children:["Aunque los callbacks son muy \xfatiles, cuando los anidas demasiado se vuelven ca\xf3ticos. A eso se le llama ",(0,a.jsx)(n.strong,{children:"callback hell"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'fs.readFile("uno.txt", "utf8", (err1, data1) => {\n  fs.readFile("dos.txt", "utf8", (err2, data2) => {\n    fs.readFile("tres.txt", "utf8", (err3, data3) => {\n      console.log("Archivos le\xeddos:", data1, data2, data3);\n    });\n  });\n});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Este tipo de c\xf3digo es dif\xedcil de leer y mantener. Para resolverlo, surgieron las ",(0,a.jsx)(n.strong,{children:"promesas"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"promesas-una-forma-m\xe1s-limpia",children:"Promesas: una forma m\xe1s limpia"}),"\n",(0,a.jsx)(n.p,{children:"Las promesas son objetos que representan el resultado de una operaci\xf3n as\xedncrona. Te permiten encadenar acciones sin caer en la anidaci\xf3n excesiva."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const fs = require("fs/promises"); // Versi\xf3n moderna del m\xf3dulo fs\n\nfs.readFile("ejemplo.txt", "utf8")\n  .then((datos) => {\n    console.log("\u2705 Contenido del archivo:", datos);\n  })\n  .catch((error) => {\n    console.error("\u274c Error al leer el archivo:", error.message);\n  });\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Esto hace que el c\xf3digo sea m\xe1s limpio, legible y f\xe1cil de manejar. Adem\xe1s, al usar ",(0,a.jsx)(n.code,{children:".catch()"}),", gestionamos los errores de forma m\xe1s centralizada."]}),"\n",(0,a.jsx)(n.h2,{id:"asyncawait-promesas-a\xfan-m\xe1s-f\xe1ciles",children:"Async/Await: promesas a\xfan m\xe1s f\xe1ciles"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"async/await"})," es una forma moderna de trabajar con promesas como si fueran operaciones secuenciales, ",(0,a.jsx)(n.strong,{children:"sin bloquear el hilo principal"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const fs = require("fs/promises");\n\nasync function mostrarContenido() {\n  try {\n    const datos = await fs.readFile("ejemplo.txt", "utf8");\n    console.log("\ud83d\udcc4 Contenido:", datos);\n  } catch (error) {\n    console.error("\u274c Error:", error.message);\n  }\n}\n\nmostrarContenido();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Visualmente se parece a c\xf3digo sincr\xf3nico, pero internamente sigue siendo as\xedncrono y no bloqueante. Esto mejora la legibilidad sin perder rendimiento."}),"\n",(0,a.jsx)(n.h2,{id:"c\xf3mo-funciona-todo-esto-por-dentro",children:"\xbfC\xf3mo funciona todo esto por dentro?"}),"\n",(0,a.jsxs)(n.p,{children:['Node.js no ejecuta varias cosas "a la vez" como un navegador multihilo. En su lugar, tiene un \xfanico hilo que sigue un ciclo de eventos llamado ',(0,a.jsx)(n.strong,{children:"Event Loop"}),". Este ciclo revisa constantemente si hay tareas pendientes que deben ejecutarse, como leer un archivo o esperar una respuesta de red."]}),"\n",(0,a.jsx)(n.p,{children:"Piensa en \xe9l como un recepcionista muy eficiente: recibe tareas, las delega (a la cocina, al servicio t\xe9cnico, etc.), y cuando esas tareas est\xe1n listas, las vuelve a recoger para entreg\xe1rtelas."}),"\n",(0,a.jsx)(n.h2,{id:"-ejercicio-pr\xe1ctico-guiado-lectura-m\xfaltiple-de-archivos",children:"\ud83d\udcbb Ejercicio pr\xe1ctico guiado: lectura m\xfaltiple de archivos"}),"\n",(0,a.jsxs)(n.p,{children:["Vamos a crear un peque\xf1o script que lea 3 archivos usando ",(0,a.jsx)(n.code,{children:"async/await"})," y muestre su contenido en orden."]}),"\n",(0,a.jsx)(n.h3,{id:"paso-1-crea-tres-archivos-de-texto-con-algo-dentro",children:"Paso 1: crea tres archivos de texto con algo dentro"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"uno.txt\ndos.txt\ntres.txt\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"paso-2-crea-lectorjs",children:["Paso 2: crea ",(0,a.jsx)(n.code,{children:"lector.js"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// lector.js\nconst fs = require("fs/promises");\n\nasync function leerArchivos() {\n  try {\n    const uno = await fs.readFile("uno.txt", "utf8");\n    const dos = await fs.readFile("dos.txt", "utf8");\n    const tres = await fs.readFile("tres.txt", "utf8");\n\n    console.log("\ud83d\udfe0 Archivo uno:", uno);\n    console.log("\ud83d\udd35 Archivo dos:", dos);\n    console.log("\ud83d\udfe2 Archivo tres:", tres);\n  } catch (error) {\n    console.error("\u274c Hubo un error al leer los archivos:", error.message);\n  }\n}\n\nleerArchivos();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Este script lee los archivos en secuencia, respetando el orden. Si uno falla, se detiene y muestra el error correspondiente."}),"\n",(0,a.jsx)(n.h2,{id:"conclusi\xf3n-del-m\xf3dulo",children:"Conclusi\xf3n del m\xf3dulo"}),"\n",(0,a.jsxs)(n.p,{children:["Ya sabes c\xf3mo Node.js maneja la asincron\xeda y por qu\xe9 es tan potente para tareas que deben esperar resultados (como leer archivos, acceder a bases de datos o hacer peticiones HTTP). Has aprendido la evoluci\xf3n de los callbacks hasta llegar a ",(0,a.jsx)(n.code,{children:"async/await"}),", la herramienta m\xe1s c\xf3moda y usada hoy en d\xeda."]}),"\n",(0,a.jsx)(n.h2,{id:"recursos-complementarios",children:"Recursos complementarios"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ",children:"Art\xedculo: El event loop explicado en detalle (Fireship)"})}),"\n",(0,a.jsxs)(n.li,{children:["Documentaci\xf3n oficial de Promesas: ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>l});var s=o(6540);const a={},r=s.createContext(a);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);