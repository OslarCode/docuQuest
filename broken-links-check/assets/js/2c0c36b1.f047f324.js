"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[1973],{4515:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"backend/Node.js/mongoDBMongoose","title":"Conexi\xf3n a base de datos real con MongoDB y Mongoose","description":"Introducci\xf3n","source":"@site/docs/backend/Node.js/mongoDBMongoose.md","sourceDirName":"backend/Node.js","slug":"/backend/Node.js/mongoDBMongoose","permalink":"/docuQuest/docs/backend/Node.js/mongoDBMongoose","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/Node.js/mongoDBMongoose.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Express.js","permalink":"/docuQuest/docs/backend/Node.js/expressJS"},"next":{"title":"Seguridad, despliegue y buenas pr\xe1cticas","permalink":"/docuQuest/docs/backend/Node.js/seguridadBuenasPracticas"}}');var r=n(4848),a=n(8453);const c={},i="Conexi\xf3n a base de datos real con MongoDB y Mongoose",d={},l=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Paso 1: Instalar MongoDB y Mongoose",id:"paso-1-instalar-mongodb-y-mongoose",level:2},{value:"Paso 2: Conectar Express con MongoDB usando Mongoose",id:"paso-2-conectar-express-con-mongodb-usando-mongoose",level:2},{value:"\xbfQu\xe9 falta para hacerlo funcional?",id:"qu\xe9-falta-para-hacerlo-funcional",level:3},{value:"Paso 3: Crear el modelo de proyecto",id:"paso-3-crear-el-modelo-de-proyecto",level:2},{value:"\xbfQu\xe9 hace este archivo?",id:"qu\xe9-hace-este-archivo",level:3},{value:"Paso 4: Reescribir las rutas con MongoDB",id:"paso-4-reescribir-las-rutas-con-mongodb",level:2},{value:"\xbfQu\xe9 hace este c\xf3digo?",id:"qu\xe9-hace-este-c\xf3digo",level:3},{value:"El resto (frontend)",id:"el-resto-frontend",level:2},{value:"\xbfQu\xe9 has logrado?",id:"qu\xe9-has-logrado",level:2},{value:"Recursos \xfatiles",id:"recursos-\xfatiles",level:2}];function t(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"conexi\xf3n-a-base-de-datos-real-con-mongodb-y-mongoose",children:"Conexi\xf3n a base de datos real con MongoDB y Mongoose"})}),"\n",(0,r.jsx)(o.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,r.jsxs)(o.p,{children:["MongoDB es una base de datos NoSQL orientada a documentos. En lugar de tablas y filas, almacena ",(0,r.jsx)(o.strong,{children:"documentos JSON"})," flexibles. Usaremos ",(0,r.jsx)(o.strong,{children:"Mongoose"}),", una biblioteca que facilita la conexi\xf3n con MongoDB, define modelos con validaci\xf3n y permite hacer consultas m\xe1s seguras y organizadas."]}),"\n",(0,r.jsx)(o.h2,{id:"paso-1-instalar-mongodb-y-mongoose",children:"Paso 1: Instalar MongoDB y Mongoose"}),"\n",(0,r.jsxs)(o.ol,{children:["\n",(0,r.jsxs)(o.li,{children:["Aseg\xfarate de tener una base de datos local (MongoDB Community Server) o usar MongoDB Atlas (nube gratuita).","\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["Si no lo tienes: ",(0,r.jsx)(o.a,{href:"https://www.mongodb.com/try/download/community",children:"https://www.mongodb.com/try/download/community"})]}),"\n",(0,r.jsxs)(o.li,{children:["Para usar en la nube: ",(0,r.jsx)(o.a,{href:"https://www.mongodb.com/cloud/atlas",children:"https://www.mongodb.com/cloud/atlas"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(o.li,{children:["Instala ",(0,r.jsx)(o.code,{children:"mongoose"}),":"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"npm install mongoose\n"})}),"\n",(0,r.jsx)(o.h2,{id:"paso-2-conectar-express-con-mongodb-usando-mongoose",children:"Paso 2: Conectar Express con MongoDB usando Mongoose"}),"\n",(0,r.jsxs)(o.p,{children:["Modifica ",(0,r.jsx)(o.code,{children:"server.js"})," para incluir la conexi\xf3n:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'// Importamos Express, el framework para crear el servidor web\nconst express = require("express");\n\n// Importamos Mongoose, una librer\xeda para conectarse y trabajar con MongoDB\nconst mongoose = require("mongoose");\n\n// Creamos una instancia de la aplicaci\xf3n Express\nconst app = express();\n\n// Definimos el puerto donde se levantar\xe1 el servidor\nconst PORT = 3000;\n// Conectamos a una base de datos MongoDB local llamada "portafolio"\n// mongoose.connect() devuelve una promesa, por eso usamos .then() y .catch()\nmongoose\n  .connect("mongodb://127.0.0.1:27017/portafolio", {\n    useNewUrlParser: true, // Usa el nuevo parser de URL de MongoDB\n    useUnifiedTopology: true, // Usa el nuevo sistema de conexi\xf3n (recomendado)\n  })\n  .then(() => console.log("\u2705 Conectado a MongoDB")) // Si conecta con \xe9xito, se imprime en consola\n  .catch((err) => console.error("\u274c Error al conectar:", err)); // Si hay error, lo mostramos\n// Middleware para interpretar cuerpos JSON en las peticiones (req.body)\napp.use(express.json());\n\n// Middleware para servir archivos est\xe1ticos desde la carpeta \'public\'\n// Por ejemplo: HTML, CSS, JS frontend, im\xe1genes, etc.\napp.use(express.static("public"));\n'})}),"\n",(0,r.jsx)(o.h3,{id:"qu\xe9-falta-para-hacerlo-funcional",children:"\xbfQu\xe9 falta para hacerlo funcional?"}),"\n",(0,r.jsx)(o.p,{children:"Aunque este c\xf3digo es solo una base, ya est\xe1 listo para:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.strong,{children:"A\xf1adir modelos de datos con Mongoose"})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.strong,{children:"Definir rutas GET, POST, etc."})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.strong,{children:"Usar HTML est\xe1tico desde /public"})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.strong,{children:"Leer o escribir en MongoDB"})}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"paso-3-crear-el-modelo-de-proyecto",children:"Paso 3: Crear el modelo de proyecto"}),"\n",(0,r.jsxs)(o.p,{children:["Crea un archivo ",(0,r.jsx)(o.code,{children:"models/Proyecto.js"}),":"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"// Importamos Mongoose, que nos permite trabajar con MongoDB de forma m\xe1s sencilla\nconst mongoose = require(\"mongoose\");\n\n// Definimos el esquema del modelo \"Proyecto\"\n// Un esquema define la estructura y validaciones del documento que se guardar\xe1 en MongoDB\nconst ProyectoSchema = new mongoose.Schema({\n  // Campo 'titulo': debe ser un string obligatorio\n  titulo: { type: String, required: true },\n\n  // Campo 'descripcion': tambi\xe9n debe ser un string obligatorio\n  descripcion: { type: String, required: true },\n\n  // Campo 'fecha': es un objeto Date y si no se especifica, se usa la fecha actual autom\xe1ticamente\n  fecha: { type: Date, default: Date.now },\n});\n\n// Exportamos el modelo 'Proyecto' basado en el esquema definido\n// Esto nos permite usar Proyecto.find(), Proyecto.create(), etc. en otros archivos\nmodule.exports = mongoose.model(\"Proyecto\", ProyectoSchema);\n"})}),"\n",(0,r.jsx)(o.h3,{id:"qu\xe9-hace-este-archivo",children:"\xbfQu\xe9 hace este archivo?"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["Define c\xf3mo debe ser un documento ",(0,r.jsx)(o.code,{children:"Proyecto"})," dentro de MongoDB:","\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["Tiene ",(0,r.jsx)(o.code,{children:"titulo"}),", ",(0,r.jsx)(o.code,{children:"descripcion"})," y ",(0,r.jsx)(o.code,{children:"fecha"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["Valida que ",(0,r.jsx)(o.code,{children:"titulo"})," y ",(0,r.jsx)(o.code,{children:"descripcion"})," sean obligatorios (",(0,r.jsx)(o.code,{children:"required: true"}),")."]}),"\n",(0,r.jsxs)(o.li,{children:["Asigna autom\xe1ticamente la fecha actual si no se proporciona (",(0,r.jsx)(o.code,{children:"default: Date.now"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(o.li,{children:["Exporta el modelo para poder usarlo en tus rutas (",(0,r.jsx)(o.code,{children:"require('./models/Proyecto')"}),", por ejemplo)."]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"paso-4-reescribir-las-rutas-con-mongodb",children:"Paso 4: Reescribir las rutas con MongoDB"}),"\n",(0,r.jsxs)(o.p,{children:["En ",(0,r.jsx)(o.code,{children:"server.js"}),", debajo de ",(0,r.jsx)(o.code,{children:"app.use(...)"}),", a\xf1ade:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'// Importamos el modelo Proyecto que define la estructura de los documentos en MongoDB\nconst Proyecto = require("./models/Proyecto");\n// Ruta GET para obtener todos los proyectos\napp.get("/api/proyectos", async (req, res) => {\n  // Usamos Mongoose para buscar todos los proyectos y los ordenamos por fecha descendente\n  const proyectos = await Proyecto.find().sort({ fecha: -1 });\n\n  // Respondemos con la lista en formato JSON\n  res.json(proyectos);\n});\n// Ruta POST para crear un nuevo proyecto\napp.post("/api/proyectos", async (req, res) => {\n  // Extraemos los campos enviados en el cuerpo de la petici\xf3n\n  const { titulo, descripcion } = req.body;\n\n  // Validamos que no falten campos obligatorios\n  if (!titulo || !descripcion) {\n    return res.status(400).json({ mensaje: "Faltan campos" }); // Error 400: Bad Request\n  }\n\n  try {\n    // Creamos una instancia del modelo con los datos recibidos\n    const nuevo = new Proyecto({ titulo, descripcion });\n\n    // Guardamos el nuevo proyecto en MongoDB\n    await nuevo.save();\n\n    // Respondemos con estado 201 (creado) y el objeto guardado\n    res.status(201).json({ mensaje: "Proyecto creado", proyecto: nuevo });\n  } catch (err) {\n    // Si algo falla, devolvemos error 500 con el mensaje de error\n    res.status(500).json({ mensaje: "Error al guardar", error: err.message });\n  }\n});\n// Ruta DELETE para eliminar un proyecto por su ID\napp.delete("/api/proyectos/:id", async (req, res) => {\n  // Extraemos el ID desde los par\xe1metros de la URL\n  const id = req.params.id;\n\n  try {\n    // Buscamos y eliminamos el proyecto por ID\n    const resultado = await Proyecto.findByIdAndDelete(id);\n\n    // Si no se encontr\xf3 nada para eliminar, devolvemos 404\n    if (!resultado) return res.status(404).json({ mensaje: "No encontrado" });\n\n    // Si se elimin\xf3 correctamente, enviamos confirmaci\xf3n\n    res.json({ mensaje: "Proyecto eliminado" });\n  } catch (err) {\n    // Si ocurre un error, respondemos con error 500 y el detalle\n    res.status(500).json({ mensaje: "Error al eliminar", error: err.message });\n  }\n});\n'})}),"\n",(0,r.jsx)(o.h3,{id:"qu\xe9-hace-este-c\xf3digo",children:"\xbfQu\xe9 hace este c\xf3digo?"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"GET"})," ",(0,r.jsx)(o.code,{children:"/api/proyectos"}),": devuelve todos los proyectos ordenados por fecha."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"POST"})," ",(0,r.jsx)(o.code,{children:"/api/proyectos"}),": guarda un nuevo proyecto, validando los campos."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"DELETE"})," ",(0,r.jsx)(o.code,{children:"/api/proyectos/:id"}),": elimina un proyecto seg\xfan su ID."]}),"\n",(0,r.jsxs)(o.li,{children:["Usa ",(0,r.jsx)(o.code,{children:"async/await"})," para operaciones as\xedncronas con MongoDB."]}),"\n",(0,r.jsxs)(o.li,{children:["Incluye ",(0,r.jsx)(o.strong,{children:"manejo de errores"})," y respuestas con los c\xf3digos HTTP adecuados."]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"el-resto-frontend",children:"El resto (frontend)"}),"\n",(0,r.jsx)(o.p,{children:"\xa1No necesitas cambiar nada!"}),"\n",(0,r.jsxs)(o.p,{children:["Tu HTML, CSS y ",(0,r.jsx)(o.code,{children:"script.js"})," siguen funcionando igual porque todo lo que ha cambiado es el ",(0,r.jsx)(o.strong,{children:"backend"}),". Ahora tus proyectos se almacenan en ",(0,r.jsx)(o.strong,{children:"MongoDB"}),", no en un archivo local."]}),"\n",(0,r.jsx)(o.h2,{id:"qu\xe9-has-logrado",children:"\xbfQu\xe9 has logrado?"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:"Integrar tu API con una base de datos real"}),"\n",(0,r.jsx)(o.li,{children:"Usar Mongoose para definir esquemas con validaci\xf3n"}),"\n",(0,r.jsx)(o.li,{children:"Conectar Node.js + Express + MongoDB de forma profesional"}),"\n",(0,r.jsx)(o.li,{children:"Reutilizar tu frontend sin modificarlo"}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"recursos-\xfatiles",children:"Recursos \xfatiles"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.a,{href:"https://mongoosejs.com/",children:"Mongoose Docs"})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.a,{href:"https://www.mongodb.com/cloud/atlas",children:"MongoDB Atlas (base de datos en la nube)"})}),"\n",(0,r.jsxs)(o.li,{children:["GUI para MongoDB: ",(0,r.jsx)(o.a,{href:"https://www.mongodb.com/products/compass",children:"Compass"})]}),"\n"]})]})}function u(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>c,x:()=>i});var s=n(6540);const r={},a=s.createContext(r);function c(e){const o=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:o},e.children)}}}]);