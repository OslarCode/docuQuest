"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[9977],{1666:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"frontend/poo/clases&metodos","title":"Clases y m\xe9todos en JavaScript (ES6+)","description":"En este m\xf3dulo, exploraremos las Clases y M\xe9todos en JavaScript (ES6+), centr\xe1ndonos en su definici\xf3n, uso del constructor, instanciaci\xf3n de objetos, encapsulaci\xf3n y m\xe9todos est\xe1ticos. Estos conceptos son fundamentales para aplicar la Programaci\xf3n Orientada a Objetos (POO) en JavaScript de manera efectiva.","source":"@site/docs/frontend/poo/clases&metodos.md","sourceDirName":"frontend/poo","slug":"/frontend/poo/clases&metodos","permalink":"/docuQuest/docs/frontend/poo/clases&metodos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/poo/clases&metodos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Objetos y prototipos en JavaScript","permalink":"/docuQuest/docs/frontend/poo/objetos&prototipos"},"next":{"title":"Herencia y polimorfismo en JavaScript","permalink":"/docuQuest/docs/frontend/poo/herencia&polimorfismo"}}');var a=n(4848),r=n(8453);const c={},d="Clases y m\xe9todos en JavaScript (ES6+)",i={},l=[{value:"Introducci\xf3n a las Clases en JavaScript",id:"introducci\xf3n-a-las-clases-en-javascript",level:2},{value:"Definici\xf3n de clases con <code>class</code>",id:"definici\xf3n-de-clases-con-class",level:3},{value:"M\xe9todos en clases",id:"m\xe9todos-en-clases",level:3},{value:"El m\xe9todo <code>constructor()</code>",id:"el-m\xe9todo-constructor",level:3},{value:"Instanciaci\xf3n de objetos",id:"instanciaci\xf3n-de-objetos",level:3},{value:"Encapsulaci\xf3n y M\xe9todos Est\xe1ticos",id:"encapsulaci\xf3n-y-m\xe9todos-est\xe1ticos",level:2},{value:"Propiedades y m\xe9todos p\xfablicos",id:"propiedades-y-m\xe9todos-p\xfablicos",level:3},{value:"Propiedades y m\xe9todos privados con <code>#</code>",id:"propiedades-y-m\xe9todos-privados-con-",level:3},{value:"M\xe9todos est\xe1ticos con <code>static</code>",id:"m\xe9todos-est\xe1ticos-con-static",level:3},{value:"<strong>Conclusi\xf3n</strong>",id:"conclusi\xf3n",level:2}];function t(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"clases-y-m\xe9todos-en-javascript-es6",children:"Clases y m\xe9todos en JavaScript (ES6+)"})}),"\n",(0,a.jsxs)(s.p,{children:["En este m\xf3dulo, exploraremos las ",(0,a.jsx)(s.strong,{children:"Clases y M\xe9todos en JavaScript (ES6+)"}),", centr\xe1ndonos en su definici\xf3n, uso del constructor, instanciaci\xf3n de objetos, encapsulaci\xf3n y m\xe9todos est\xe1ticos. Estos conceptos son fundamentales para aplicar la Programaci\xf3n Orientada a Objetos (POO) en JavaScript de manera efectiva."]}),"\n",(0,a.jsx)(s.h2,{id:"introducci\xf3n-a-las-clases-en-javascript",children:"Introducci\xf3n a las Clases en JavaScript"}),"\n",(0,a.jsxs)(s.p,{children:["Con la introducci\xf3n de ECMAScript 2015 (ES6), JavaScript incorpor\xf3 la sintaxis de ",(0,a.jsx)(s.strong,{children:"clases"}),", proporcionando una forma m\xe1s clara y concisa de trabajar con objetos y herencia. Aunque las clases en JavaScript son una mejora sint\xe1ctica sobre la herencia basada en prototipos, no introducen un nuevo modelo de herencia orientada a objetos."]}),"\n",(0,a.jsxs)(s.h3,{id:"definici\xf3n-de-clases-con-class",children:["Definici\xf3n de clases con ",(0,a.jsx)(s.code,{children:"class"})]}),"\n",(0,a.jsxs)(s.p,{children:["Para definir una clase en JavaScript, utilizamos la palabra clave ",(0,a.jsx)(s.code,{children:"class"})," seguida del nombre de la clase. Por convenci\xf3n, los nombres de las clases comienzan con una letra may\xfascula."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:"class Persona {\r\n  // Definici\xf3n de la clase\r\n}\n"})}),"\n",(0,a.jsx)(s.h3,{id:"m\xe9todos-en-clases",children:"M\xe9todos en clases"}),"\n",(0,a.jsxs)(s.p,{children:["Dentro de una clase, podemos definir m\xe9todos que representen comportamientos asociados a esa clase. Estos m\xe9todos se declaran sin la palabra clave ",(0,a.jsx)(s.code,{children:"function"}),"."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:"class Persona {\r\n  constructor(nombre, edad) {\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n\r\n  saludar() {\r\n    console.log(`Hola, me llamo ${this.nombre} y tengo ${this.edad} a\xf1os.`);\r\n  }\r\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["En este ejemplo, hemos definido la clase ",(0,a.jsx)(s.code,{children:"Persona"})," con un m\xe9todo ",(0,a.jsx)(s.code,{children:"saludar"})," que imprime un saludo en la consola."]}),"\n",(0,a.jsxs)(s.h3,{id:"el-m\xe9todo-constructor",children:["El m\xe9todo ",(0,a.jsx)(s.code,{children:"constructor()"})]}),"\n",(0,a.jsxs)(s.p,{children:["El ",(0,a.jsx)(s.code,{children:"constructor"})," es un m\xe9todo especial que se invoca autom\xe1ticamente al crear una nueva instancia de la clase. Se utiliza para inicializar las propiedades del objeto."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:"class Persona {\r\n  constructor(nombre, edad) {\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Aqu\xed, el constructor recibe dos par\xe1metros (",(0,a.jsx)(s.code,{children:"nombre"})," y ",(0,a.jsx)(s.code,{children:"edad"}),") y asigna estos valores a las propiedades del objeto."]}),"\n",(0,a.jsx)(s.h3,{id:"instanciaci\xf3n-de-objetos",children:"Instanciaci\xf3n de objetos"}),"\n",(0,a.jsxs)(s.p,{children:["Para crear una instancia de una clase, utilizamos la palabra clave ",(0,a.jsx)(s.code,{children:"new"})," seguida del nombre de la clase y los argumentos necesarios para el constructor."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:'const persona1 = new Persona("Ana", 30);\r\npersona1.saludar(); // Hola, me llamo Ana y tengo 30 a\xf1os.\n'})}),"\n",(0,a.jsxs)(s.p,{children:["En este caso, hemos creado una instancia de la clase ",(0,a.jsx)(s.code,{children:"Persona"})," llamada ",(0,a.jsx)(s.code,{children:"persona1"})," y hemos llamado al m\xe9todo ",(0,a.jsx)(s.code,{children:"saludar"}),"."]}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"encapsulaci\xf3n-y-m\xe9todos-est\xe1ticos",children:"Encapsulaci\xf3n y M\xe9todos Est\xe1ticos"}),"\n",(0,a.jsxs)(s.p,{children:["La ",(0,a.jsx)(s.strong,{children:"encapsulaci\xf3n"})," es un principio de la POO que consiste en restringir el acceso directo a ciertas propiedades o m\xe9todos de un objeto, permitiendo controlarlos a trav\xe9s de m\xe9todos p\xfablicos. JavaScript ofrece mecanismos para lograr esta encapsulaci\xf3n, incluyendo propiedades privadas y m\xe9todos est\xe1ticos."]}),"\n",(0,a.jsx)(s.h3,{id:"propiedades-y-m\xe9todos-p\xfablicos",children:"Propiedades y m\xe9todos p\xfablicos"}),"\n",(0,a.jsx)(s.p,{children:"Por defecto, todas las propiedades y m\xe9todos definidos en una clase son p\xfablicos, es decir, accesibles desde fuera de la clase."}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:'class Persona {\r\n  constructor(nombre, edad) {\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n\r\n  saludar() {\r\n    console.log(`Hola, me llamo ${this.nombre}.`);\r\n  }\r\n}\r\n\r\nconst persona1 = new Persona("Luis", 25);\r\nconsole.log(persona1.nombre); // Luis\r\npersona1.saludar(); // Hola, me llamo Luis.\n'})}),"\n",(0,a.jsxs)(s.p,{children:["En este ejemplo, tanto la propiedad ",(0,a.jsx)(s.code,{children:"nombre"})," como el m\xe9todo ",(0,a.jsx)(s.code,{children:"saludar"})," son p\xfablicos y pueden ser accedidos directamente desde fuera de la clase."]}),"\n",(0,a.jsxs)(s.h3,{id:"propiedades-y-m\xe9todos-privados-con-",children:["Propiedades y m\xe9todos privados con ",(0,a.jsx)(s.code,{children:"#"})]}),"\n",(0,a.jsxs)(s.p,{children:["A partir de ECMAScript 2022, JavaScript introdujo la sintaxis de campos privados utilizando el prefijo ",(0,a.jsx)(s.code,{children:"#"}),". Las propiedades y m\xe9todos privados no son accesibles desde fuera de la clase, lo que permite una encapsulaci\xf3n m\xe1s estricta."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:'class CuentaBancaria {\r\n  #saldo = 0;\r\n\r\n  constructor(nombre) {\r\n    this.nombre = nombre;\r\n  }\r\n\r\n  depositar(cantidad) {\r\n    if (cantidad > 0) {\r\n      this.#saldo += cantidad;\r\n      console.log(`Dep\xf3sito exitoso. Saldo actual: ${this.#saldo}`);\r\n    } else {\r\n      console.log("La cantidad debe ser positiva.");\r\n    }\r\n  }\r\n\r\n  retirar(cantidad) {\r\n    if (cantidad > 0 && cantidad <= this.#saldo) {\r\n      this.#saldo -= cantidad;\r\n      console.log(`Retiro exitoso. Saldo actual: ${this.#saldo}`);\r\n    } else {\r\n      console.log("Fondos insuficientes o cantidad inv\xe1lida.");\r\n    }\r\n  }\r\n\r\n  #actualizarSaldo(nuevoSaldo) {\r\n    this.#saldo = nuevoSaldo;\r\n  }\r\n}\r\n\r\nconst cuenta = new CuentaBancaria("Carlos");\r\ncuenta.depositar(100); // Dep\xf3sito exitoso. Saldo actual: 100\r\ncuenta.retirar(50); // Retiro exitoso. Saldo actual: 50\r\nconsole.log(cuenta.#saldo); // SyntaxError: Private field \'#saldo\' must be declared in an enclosing class\n'})}),"\n",(0,a.jsxs)(s.p,{children:["En este ejemplo, la propiedad ",(0,a.jsx)(s.code,{children:"#saldo"})," y el m\xe9todo ",(0,a.jsx)(s.code,{children:"#actualizarSaldo"})," son privados y no pueden ser accedidos directamente desde fuera de la clase, garantizando que el saldo solo pueda ser modificado mediante los m\xe9todos p\xfablicos ",(0,a.jsx)(s.code,{children:"depositar"})," y ",(0,a.jsx)(s.code,{children:"retirar"}),"."]}),"\n",(0,a.jsxs)(s.h3,{id:"m\xe9todos-est\xe1ticos-con-static",children:["M\xe9todos est\xe1ticos con ",(0,a.jsx)(s.code,{children:"static"})]}),"\n",(0,a.jsxs)(s.p,{children:["Los ",(0,a.jsx)(s.strong,{children:"m\xe9todos est\xe1ticos"})," son funciones asociadas a la clase en s\xed misma, no a las instancias de la clase. Se definen utilizando la palabra clave ",(0,a.jsx)(s.code,{children:"static"})," y se invocan directamente desde la clase, sin necesidad de crear una instancia."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Ejemplo:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:"class Calculadora {\r\n  static sumar(a, b) {\r\n    return a + b;\r\n  }\r\n\r\n  static restar(a, b) {\r\n    return a - b;\r\n  }\r\n}\r\n\r\n// Llamada a los m\xe9todos est\xe1ticos sin instanciar la clase\r\nconsole.log(Calculadora.sumar(5, 3)); // 8\r\nconsole.log(Calculadora.restar(10, 4)); // 6\n"})}),"\n",(0,a.jsxs)(s.p,{children:["En este caso, ",(0,a.jsx)(s.code,{children:"sumar"})," y ",(0,a.jsx)(s.code,{children:"restar"})," son m\xe9todos est\xe1ticos de la clase ",(0,a.jsx)(s.code,{children:"Calculadora"}),", lo que significa que no es necesario crear una instancia para utilizarlos. Esto es \xfatil para funciones auxiliares o utilidades que no dependen de los atributos de una instancia."]}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"conclusi\xf3n",children:(0,a.jsx)(s.strong,{children:"Conclusi\xf3n"})}),"\n",(0,a.jsxs)(s.p,{children:["Las ",(0,a.jsx)(s.strong,{children:"clases en JavaScript"})," proporcionan una forma m\xe1s estructurada y legible de trabajar con objetos en la Programaci\xf3n Orientada a Objetos (POO). En este m\xf3dulo hemos aprendido sobre:"]}),"\n",(0,a.jsxs)(s.p,{children:["\u2705 Definir clases con ",(0,a.jsx)(s.code,{children:"class"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"\u2705 Crear m\xe9todos dentro de una clase."}),"\n",(0,a.jsxs)(s.p,{children:["\u2705 Usar el ",(0,a.jsx)(s.code,{children:"constructor()"})," para inicializar objetos."]}),"\n",(0,a.jsxs)(s.p,{children:["\u2705 Instanciar objetos con ",(0,a.jsx)(s.code,{children:"new"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["\u2705 Aplicar encapsulaci\xf3n con propiedades privadas ",(0,a.jsx)(s.code,{children:"#"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["\u2705 Definir m\xe9todos est\xe1ticos con ",(0,a.jsx)(s.code,{children:"static"}),"."]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>d});var o=n(6540);const a={},r=o.createContext(a);function c(e){const s=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);