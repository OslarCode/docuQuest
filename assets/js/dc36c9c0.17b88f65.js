"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[1470],{4208:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"backend/databases/Tablas_puente_y_modelado_N-a-N","title":"Tablas puente y modelado N-a-N","description":"16.1. Qu\xe9 es una relaci\xf3n N-a-N","source":"@site/docs/backend/databases/Tablas_puente_y_modelado_N-a-N.md","sourceDirName":"backend/databases","slug":"/backend/databases/Tablas_puente_y_modelado_N-a-N","permalink":"/docuQuest/docs/backend/databases/Tablas_puente_y_modelado_N-a-N","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/databases/Tablas_puente_y_modelado_N-a-N.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tipos de dominios pr\xe1cticos","permalink":"/docuQuest/docs/backend/databases/Tipos_de_dominios_practicos"},"next":{"title":"\xbfQu\xe9 es un \xedndice y c\xf3mo usarlo?","permalink":"/docuQuest/docs/backend/databases/Que_es_un_indice_y_como_usarlo"}}');var i=s(4848),r=s(8453);const o={},l="Tablas puente y modelado N-a-N",d={},c=[{value:"16.1. Qu\xe9 es una relaci\xf3n N-a-N",id:"161-qu\xe9-es-una-relaci\xf3n-n-a-n",level:2},{value:"16.2. Tabla puente: estructura base",id:"162-tabla-puente-estructura-base",level:2},{value:"16.3. Atributos en la relaci\xf3n",id:"163-atributos-en-la-relaci\xf3n",level:2},{value:"\ud83e\udded 16.4. Claves compuestas: por qu\xe9 son importantes",id:"-164-claves-compuestas-por-qu\xe9-son-importantes",level:2},{value:"16.5. Ejemplo pr\xe1ctico \u2014 usuarios y roles",id:"165-ejemplo-pr\xe1ctico--usuarios-y-roles",level:2},{value:"16.6. Tablas puente con atributos propios y PK artificial",id:"166-tablas-puente-con-atributos-propios-y-pk-artificial",level:2},{value:"16.7. Buenas pr\xe1cticas para modelar N-a-N",id:"167-buenas-pr\xe1cticas-para-modelar-n-a-n",level:2},{value:"16.8. Errores comunes",id:"168-errores-comunes",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tablas-puente-y-modelado-n-a-n",children:"Tablas puente y modelado N-a-N"})}),"\n",(0,i.jsx)(n.h2,{id:"161-qu\xe9-es-una-relaci\xf3n-n-a-n",children:"16.1. Qu\xe9 es una relaci\xf3n N-a-N"}),"\n",(0,i.jsxs)(n.p,{children:["Una relaci\xf3n ",(0,i.jsx)(n.strong,{children:"N-a-N"})," significa que:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Un registro de la tabla A puede relacionarse con ",(0,i.jsx)(n.strong,{children:"muchos registros"})," de la tabla B."]}),"\n",(0,i.jsxs)(n.li,{children:["Y un registro de la tabla B puede relacionarse con ",(0,i.jsx)(n.strong,{children:"muchos registros"})," de la tabla A."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Ejemplos comunes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Un alumno puede matricularse en muchos cursos, y un curso tener muchos alumnos."}),"\n",(0,i.jsx)(n.li,{children:"Un pedido puede incluir muchos productos, y un producto estar en muchos pedidos."}),"\n",(0,i.jsx)(n.li,{children:"Un usuario puede tener varios roles, y un rol pertenecer a varios usuarios."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Para representar esto ",(0,i.jsx)(n.strong,{children:"no podemos usar una FK directa"})," como en 1-a-N."]}),"\n",(0,i.jsxs)(n.p,{children:["Necesitamos una ",(0,i.jsx)(n.strong,{children:"tabla puente"})," (o tabla intermedia)."]}),"\n",(0,i.jsx)(n.h2,{id:"162-tabla-puente-estructura-base",children:"16.2. Tabla puente: estructura base"}),"\n",(0,i.jsx)(n.p,{children:"Sup\xf3n esta relaci\xf3n:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ALUMNO (N) \u27f7 (N) CURSO\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"La forma correcta de representarla es:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ALUMNO\n   |\n   |  1-a-N\n   v\nALUMNO_CURSO  (tabla puente)\n   ^\n   |  N-a-1\n   |\nCURSO\n\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ejemplo SQL:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE alumno (\n  id_alumno SERIAL PRIMARY KEY,\n  nombre VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE curso (\n  id_curso SERIAL PRIMARY KEY,\n  titulo VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE alumno_curso (\n  id_alumno INT NOT NULL,\n  id_curso INT NOT NULL,\n  fecha_matricula DATE NOT NULL DEFAULT CURRENT_DATE,\n  PRIMARY KEY (id_alumno, id_curso),\n  FOREIGN KEY (id_alumno) REFERENCES alumno(id_alumno),\n  FOREIGN KEY (id_curso) REFERENCES curso(id_curso)\n);\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La tabla ",(0,i.jsx)(n.code,{children:"alumno_curso"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Tiene ",(0,i.jsx)(n.strong,{children:"dos claves for\xe1neas"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["La ",(0,i.jsx)(n.strong,{children:"clave primaria compuesta"})," (",(0,i.jsx)(n.code,{children:"id_alumno"}),", ",(0,i.jsx)(n.code,{children:"id_curso"}),") garantiza que ",(0,i.jsx)(n.strong,{children:"un alumno no pueda matricularse dos veces"})," en el mismo curso."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fecha_matricula"})," es un atributo propio de la relaci\xf3n."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"163-atributos-en-la-relaci\xf3n",children:"16.3. Atributos en la relaci\xf3n"}),"\n",(0,i.jsx)(n.p,{children:"En 1-a-N, los atributos suelen ir en la tabla hija."}),"\n",(0,i.jsxs)(n.p,{children:["En N-a-N, los atributos ",(0,i.jsx)(n.strong,{children:"pertenecen a la relaci\xf3n misma"})," y por eso van en la tabla puente."]}),"\n",(0,i.jsx)(n.p,{children:"Ejemplos:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fecha de matr\xedcula en curso."}),"\n",(0,i.jsx)(n.li,{children:"Cantidad de productos en un pedido."}),"\n",(0,i.jsx)(n.li,{children:"Rol asignado a un usuario."}),"\n",(0,i.jsx)(n.li,{children:"Precio aplicado en el momento de la venta."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Importante:"})," no pongas esos datos en las tablas principales, porque pueden repetirse muchas veces con valores distintos."]}),"\n",(0,i.jsx)(n.p,{children:"Ejemplo con productos y pedidos:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE producto (\n  id_producto SERIAL PRIMARY KEY,\n  nombre VARCHAR(100)\n);\n\nCREATE TABLE pedido (\n  id_pedido SERIAL PRIMARY KEY,\n  fecha DATE NOT NULL\n);\n\nCREATE TABLE pedido_producto (\n  id_pedido INT NOT NULL,\n  id_producto INT NOT NULL,\n  cantidad INT NOT NULL CHECK (cantidad > 0),\n  precio_unitario NUMERIC(10,2) NOT NULL,\n  PRIMARY KEY (id_pedido, id_producto),\n  FOREIGN KEY (id_pedido) REFERENCES pedido(id_pedido),\n  FOREIGN KEY (id_producto) REFERENCES producto(id_producto)\n);\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cantidad"})," y ",(0,i.jsx)(n.code,{children:"precio_unitario"})," son ",(0,i.jsx)(n.strong,{children:"propios de la relaci\xf3n pedido-producto"}),", no del producto ni del pedido por separado."]}),"\n",(0,i.jsx)(n.h2,{id:"-164-claves-compuestas-por-qu\xe9-son-importantes",children:"\ud83e\udded 16.4. Claves compuestas: por qu\xe9 son importantes"}),"\n",(0,i.jsxs)(n.p,{children:["La ",(0,i.jsx)(n.strong,{children:"clave primaria compuesta"})," (FK A + FK B) evita duplicados sin necesidad de un ID artificial:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Garantiza que un alumno no se inscriba dos veces en el mismo curso."}),"\n",(0,i.jsx)(n.li,{children:"Que un producto no aparezca dos veces en el mismo pedido."}),"\n",(0,i.jsx)(n.li,{children:"Que un rol no se asigne dos veces al mismo usuario."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Tambi\xe9n puedes usar una PK artificial (ej. ",(0,i.jsx)(n.code,{children:"id SERIAL"}),") si:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["La tabla puente tiene ",(0,i.jsx)(n.strong,{children:"muchos atributos adicionales"}),","]}),"\n",(0,i.jsx)(n.li,{children:"O si vas a referenciar la relaci\xf3n desde otras tablas."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Pero en muchos casos, ",(0,i.jsx)(n.strong,{children:"la PK compuesta es m\xe1s natural y eficiente"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"165-ejemplo-pr\xe1ctico--usuarios-y-roles",children:"16.5. Ejemplo pr\xe1ctico \u2014 usuarios y roles"}),"\n",(0,i.jsx)(n.p,{children:"Supongamos que tenemos autenticaci\xf3n:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Tabla ",(0,i.jsx)(n.code,{children:"usuario"})]}),"\n",(0,i.jsxs)(n.li,{children:["Tabla ",(0,i.jsx)(n.code,{children:"rol"})]}),"\n",(0,i.jsx)(n.li,{children:"Un usuario puede tener varios roles, y un rol puede pertenecer a varios usuarios."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE usuario (\n  id_usuario SERIAL PRIMARY KEY,\n  nombre VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE rol (\n  id_rol SERIAL PRIMARY KEY,\n  nombre VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE usuario_rol (\n  id_usuario INT NOT NULL,\n  id_rol INT NOT NULL,\n  asignado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (id_usuario, id_rol),\n  FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),\n  FOREIGN KEY (id_rol) REFERENCES rol(id_rol)\n);\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"As\xed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cada usuario puede tener varios roles, pero no se duplica ninguno."}),"\n",(0,i.jsx)(n.li,{children:"Podemos saber cu\xe1ndo se asign\xf3 cada rol."}),"\n",(0,i.jsx)(n.li,{children:"La relaci\xf3n queda clara y sin datos repetidos."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"166-tablas-puente-con-atributos-propios-y-pk-artificial",children:"16.6. Tablas puente con atributos propios y PK artificial"}),"\n",(0,i.jsxs)(n.p,{children:["Si necesitas ",(0,i.jsx)(n.strong,{children:"identificar la relaci\xf3n individualmente"})," (por ejemplo, para auditarla o referenciarla desde otra tabla), puedes usar un ",(0,i.jsx)(n.code,{children:"id"})," artificial adem\xe1s de las FKs."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE inscripcion (\n  id SERIAL PRIMARY KEY,\n  id_alumno INT NOT NULL,\n  id_curso INT NOT NULL,\n  fecha_inscripcion DATE DEFAULT CURRENT_DATE,\n  nota NUMERIC(4,2),\n  UNIQUE (id_alumno, id_curso),\n  FOREIGN KEY (id_alumno) REFERENCES alumno(id_alumno),\n  FOREIGN KEY (id_curso) REFERENCES curso(id_curso)\n);\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Aqu\xed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," sirve como identificador \xfanico de inscripci\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:["La ",(0,i.jsx)(n.strong,{children:"restricci\xf3n UNIQUE"})," mantiene la integridad N-a-N."]}),"\n",(0,i.jsx)(n.li,{children:"Se pueden a\xf1adir m\xe1s atributos (nota, estado, etc.) f\xe1cilmente."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"167-buenas-pr\xe1cticas-para-modelar-n-a-n",children:"16.7. Buenas pr\xe1cticas para modelar N-a-N"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Usa ",(0,i.jsx)(n.strong,{children:"tabla puente siempre"}),": no intentes \u201cguardar arrays\u201d en una sola columna."]}),"\n",(0,i.jsxs)(n.li,{children:["Define ",(0,i.jsx)(n.strong,{children:"PK compuesta"})," si solo almacenas las FKs y alg\xfan atributo simple."]}),"\n",(0,i.jsxs)(n.li,{children:["Usa ",(0,i.jsx)(n.strong,{children:"PK artificial + UNIQUE"})," si la relaci\xf3n tiene atributos complejos."]}),"\n",(0,i.jsxs)(n.li,{children:["Aplica ",(0,i.jsx)(n.code,{children:"CHECK"})," a los atributos de relaci\xf3n para validar reglas (ej. ",(0,i.jsx)(n.code,{children:"cantidad > 0"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Documenta la relaci\xf3n: es parte clave del modelo conceptual."}),"\n",(0,i.jsxs)(n.li,{children:["Define ON DELETE/UPDATE adecuadamente para mantener integridad (por ejemplo, ",(0,i.jsx)(n.code,{children:"CASCADE"})," en relaciones d\xe9biles)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"168-errores-comunes",children:"16.8. Errores comunes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Guardar IDs separados por comas en un campo ",(0,i.jsx)(n.code,{children:"VARCHAR"})," (anti-patr\xf3n cl\xe1sico)."]}),"\n",(0,i.jsx)(n.li,{children:"No usar PK compuesta ni UNIQUE \u2192 duplicados silenciosos."}),"\n",(0,i.jsx)(n.li,{children:"No usar tabla puente \u2192 modelo inconsistente."}),"\n",(0,i.jsx)(n.li,{children:"Meter atributos en tablas equivocadas (producto/pedido en lugar de pedido_producto)."}),"\n",(0,i.jsx)(n.li,{children:"No documentar reglas de unicidad."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Con este m\xf3dulo, el estudiante:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Comprende cu\xe1ndo y c\xf3mo usar tablas puente,"}),"\n",(0,i.jsx)(n.li,{children:"Entiende la diferencia entre atributos de entidad y de relaci\xf3n,"}),"\n",(0,i.jsx)(n.li,{children:"Y evita anti-patrones muy comunes en principiantes."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var a=s(6540);const i={},r=a.createContext(i);function o(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);