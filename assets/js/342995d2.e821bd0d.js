"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[5069],{8453:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>i});var a=n(6540);const r={},s=a.createContext(r);function t(e){const o=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(s.Provider,{value:o},e.children)}},9565:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"poo/objetos&prototipos","title":"Objetos y prototipos en JavaScript","description":"En este m\xf3dulo, exploraremos los Objetos y Prototipos en JavaScript, comprendiendo c\xf3mo este lenguaje implementa la Programaci\xf3n Orientada a Objetos (POO) de manera \xfanica. Abordaremos las diferencias entre la POO cl\xe1sica y la basada en prototipos, la creaci\xf3n y manipulaci\xf3n de objetos, y profundizaremos en el concepto de prototipos y su papel en la herencia.","source":"@site/docs/poo/objetos&prototipos.md","sourceDirName":"poo","slug":"/poo/objetos&prototipos","permalink":"/docuQuest/docs/poo/objetos&prototipos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/poo/objetos&prototipos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Fundamentos de la programaci\xf3n orientada a objetos (Poo)","permalink":"/docuQuest/docs/poo/fundamentosPOO"},"next":{"title":"Clases y m\xe9todos en JavaScript (ES6+)","permalink":"/docuQuest/docs/poo/clases&metodos"}}');var r=n(4848),s=n(8453);const t={},i="Objetos y prototipos en JavaScript",d={},c=[{value:"JavaScript y su Modelo Basado en Prototipos",id:"javascript-y-su-modelo-basado-en-prototipos",level:2},{value:"Diferencia entre la POO cl\xe1sica y la POO en JavaScript",id:"diferencia-entre-la-poo-cl\xe1sica-y-la-poo-en-javascript",level:3},{value:"Creaci\xf3n de objetos con literales",id:"creaci\xf3n-de-objetos-con-literales",level:3},{value:"Manipulaci\xf3n de propiedades y m\xe9todos",id:"manipulaci\xf3n-de-propiedades-y-m\xe9todos",level:3},{value:"Prototipos en JavaScript",id:"prototipos-en-javascript",level:2},{value:"\xbfQu\xe9 es un prototipo?",id:"qu\xe9-es-un-prototipo",level:3},{value:"Herencia protot\xedpica",id:"herencia-protot\xedpica",level:3},{value:"<code>Object.create()</code>, <code>Object.getPrototypeOf()</code> y <code>Object.setPrototypeOf()</code>",id:"objectcreate-objectgetprototypeof-y-objectsetprototypeof",level:3},{value:"Propiedades y m\xe9todos heredados",id:"propiedades-y-m\xe9todos-heredados",level:3}];function l(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"objetos-y-prototipos-en-javascript",children:"Objetos y prototipos en JavaScript"})}),"\n",(0,r.jsxs)(o.p,{children:["En este m\xf3dulo, exploraremos los ",(0,r.jsx)(o.strong,{children:"Objetos y Prototipos en JavaScript"}),", comprendiendo c\xf3mo este lenguaje implementa la Programaci\xf3n Orientada a Objetos (POO) de manera \xfanica. Abordaremos las diferencias entre la POO cl\xe1sica y la basada en prototipos, la creaci\xf3n y manipulaci\xf3n de objetos, y profundizaremos en el concepto de prototipos y su papel en la herencia."]}),"\n",(0,r.jsx)(o.h2,{id:"javascript-y-su-modelo-basado-en-prototipos",children:"JavaScript y su Modelo Basado en Prototipos"}),"\n",(0,r.jsx)(o.h3,{id:"diferencia-entre-la-poo-cl\xe1sica-y-la-poo-en-javascript",children:"Diferencia entre la POO cl\xe1sica y la POO en JavaScript"}),"\n",(0,r.jsxs)(o.p,{children:["En la ",(0,r.jsx)(o.strong,{children:"POO cl\xe1sica"}),", presente en lenguajes como Java o C++, la estructura se basa en ",(0,r.jsx)(o.strong,{children:"clases"})," que act\xfaan como plantillas para crear objetos. Estas clases definen propiedades y m\xe9todos que las instancias (objetos) heredar\xe1n."]}),"\n",(0,r.jsxs)(o.p,{children:["Por otro lado, ",(0,r.jsx)(o.strong,{children:"JavaScript"})," implementa una ",(0,r.jsx)(o.strong,{children:"POO basada en prototipos"}),", donde no existen clases en el sentido tradicional. En su lugar, los objetos pueden heredar directamente de otros objetos. Cada objeto tiene una propiedad interna llamada ",(0,r.jsx)(o.code,{children:"[[Prototype]]"})," que apunta a otro objeto, formando una cadena de prototipos. Esto permite la reutilizaci\xf3n y extensi\xf3n de propiedades y m\xe9todos sin la necesidad de clases."]}),"\n",(0,r.jsx)(o.h3,{id:"creaci\xf3n-de-objetos-con-literales",children:"Creaci\xf3n de objetos con literales"}),"\n",(0,r.jsxs)(o.p,{children:["La forma m\xe1s sencilla de crear un objeto en JavaScript es utilizando la ",(0,r.jsx)(o.strong,{children:"notaci\xf3n literal"}),":"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'const persona = {\n  nombre: "Ana",\n  edad: 28,\n  saludar() {\n    console.log(`Hola, me llamo ${this.nombre}.`);\n  },\n};\n'})}),"\n",(0,r.jsxs)(o.p,{children:["Aqu\xed, ",(0,r.jsx)(o.code,{children:"persona"})," es un objeto con propiedades ",(0,r.jsx)(o.code,{children:"nombre"})," y ",(0,r.jsx)(o.code,{children:"edad"}),", y un m\xe9todo ",(0,r.jsx)(o.code,{children:"saludar"}),"."]}),"\n",(0,r.jsx)(o.h3,{id:"manipulaci\xf3n-de-propiedades-y-m\xe9todos",children:"Manipulaci\xf3n de propiedades y m\xe9todos"}),"\n",(0,r.jsx)(o.p,{children:"Podemos acceder y modificar las propiedades y m\xe9todos de un objeto de la siguiente manera:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'// Acceder a una propiedad\nconsole.log(persona.nombre); // Ana\n\n// Modificar una propiedad\npersona.edad = 29;\n\n// A\xf1adir una nueva propiedad\npersona.profesion = "Ingeniera";\n\n// Llamar a un m\xe9todo\npersona.saludar(); // Hola, me llamo Ana.\n'})}),"\n",(0,r.jsxs)(o.p,{children:["Tambi\xe9n es posible eliminar propiedades usando el operador ",(0,r.jsx)(o.code,{children:"delete"}),":"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"delete persona.profesion;\n"})}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.h2,{id:"prototipos-en-javascript",children:"Prototipos en JavaScript"}),"\n",(0,r.jsx)(o.h3,{id:"qu\xe9-es-un-prototipo",children:"\xbfQu\xe9 es un prototipo?"}),"\n",(0,r.jsxs)(o.p,{children:["Un ",(0,r.jsx)(o.strong,{children:"prototipo"})," es un objeto del cual otro objeto hereda propiedades y m\xe9todos. Cuando intentamos acceder a una propiedad o m\xe9todo en un objeto, JavaScript busca primero en el propio objeto. Si no lo encuentra, contin\xfaa la b\xfasqueda en su prototipo, y as\xed sucesivamente hasta llegar a ",(0,r.jsx)(o.code,{children:"null"}),". Esta cadena de b\xfasqueda se conoce como ",(0,r.jsx)(o.strong,{children:"cadena de prototipos"}),"."]}),"\n",(0,r.jsx)(o.h3,{id:"herencia-protot\xedpica",children:"Herencia protot\xedpica"}),"\n",(0,r.jsxs)(o.p,{children:["La ",(0,r.jsx)(o.strong,{children:"herencia protot\xedpica"})," permite que un objeto herede propiedades y m\xe9todos de otro objeto. Esto se logra asignando el prototipo de un objeto a otro objeto."]}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.strong,{children:"Ejemplo:"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'const animal = {\n  tipo: "mam\xedfero",\n  hacerSonido() {\n    console.log("Sonido gen\xe9rico");\n  },\n};\n\nconst perro = Object.create(animal);\nperro.hacerSonido(); // Sonido gen\xe9rico\n'})}),"\n",(0,r.jsxs)(o.p,{children:["En este ejemplo, ",(0,r.jsx)(o.code,{children:"perro"})," hereda las propiedades y m\xe9todos de ",(0,r.jsx)(o.code,{children:"animal"})," a trav\xe9s de la herencia protot\xedpica."]}),"\n",(0,r.jsxs)(o.h3,{id:"objectcreate-objectgetprototypeof-y-objectsetprototypeof",children:[(0,r.jsx)(o.code,{children:"Object.create()"}),", ",(0,r.jsx)(o.code,{children:"Object.getPrototypeOf()"})," y ",(0,r.jsx)(o.code,{children:"Object.setPrototypeOf()"})]}),"\n",(0,r.jsx)(o.p,{children:"JavaScript proporciona m\xe9todos para trabajar con prototipos de manera m\xe1s controlada:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"Object.create(proto, [propertiesObject])"})}),": Crea un nuevo objeto con el prototipo especificado."]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'const gato = Object.create(animal, {\n  nombre: {\n    value: "Misu",\n    writable: true,\n    enumerable: true,\n    configurable: true,\n  },\n});\nconsole.log(gato.tipo); // mam\xedfero\n'})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"Object.getPrototypeOf(obj)"})}),": Devuelve el prototipo del objeto especificado."]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"console.log(Object.getPrototypeOf(gato) === animal); // true\n"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"Object.setPrototypeOf(obj, proto)"})}),": Establece el prototipo de un objeto."]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'const reptil = {\n  tipo: "reptil",\n};\nObject.setPrototypeOf(gato, reptil);\nconsole.log(gato.tipo); // reptil\n'})}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Nota:"})," Modificar el prototipo de un objeto existente con ",(0,r.jsx)(o.code,{children:"Object.setPrototypeOf"})," puede tener implicaciones de rendimiento y debe hacerse con precauci\xf3n."]}),"\n",(0,r.jsx)(o.h3,{id:"propiedades-y-m\xe9todos-heredados",children:"Propiedades y m\xe9todos heredados"}),"\n",(0,r.jsx)(o.p,{children:"Cuando un objeto hereda propiedades y m\xe9todos de su prototipo, puede acceder a ellos como si fueran propios. Sin embargo, si se define una propiedad o m\xe9todo con el mismo nombre en el objeto hijo, este sobrescribir\xe1 al del prototipo."}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.strong,{children:"Ejemplo:"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:'const ave = {\n  volar() {\n    console.log("Volando");\n  },\n};\n\nconst pajaro = Object.create(ave);\npajaro.volar(); // Volando\n\npajaro.volar = function () {\n  console.log("El p\xe1jaro est\xe1 volando");\n};\npajaro.volar(); // El p\xe1jaro est\xe1 volando\n'})}),"\n",(0,r.jsxs)(o.p,{children:["En este caso, ",(0,r.jsx)(o.code,{children:"pajaro"})," sobrescribe el m\xe9todo ",(0,r.jsx)(o.code,{children:"volar"})," heredado de ",(0,r.jsx)(o.code,{children:"ave"})," con su propia implementaci\xf3n."]}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.p,{children:"Comprender el modelo de prototipos en JavaScript es esencial para aprovechar al m\xe1ximo las caracter\xedsticas del lenguaje y escribir c\xf3digo m\xe1s eficiente y reutilizable."})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);