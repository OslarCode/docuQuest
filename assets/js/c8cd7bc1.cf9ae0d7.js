"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[4032],{8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var i=a(6540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},9801:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>t,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"frontend/js/funciones/funciones","title":"Funciones","description":"Introducci\xf3n","source":"@site/docs/frontend/js/funciones/funciones.md","sourceDirName":"frontend/js/funciones","slug":"/frontend/js/funciones/","permalink":"/docuQuest/docs/frontend/js/funciones/","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/funciones/funciones.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Precedencia de Operadores","permalink":"/docuQuest/docs/frontend/js/operadores/precedenciaOperadores"},"next":{"title":"Funciones An\xf3nimas","permalink":"/docuQuest/docs/frontend/js/funciones/funcionesAnonimas"}}');var s=a(4848),r=a(8453);const c={},o="Funciones",l={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"\xbfQu\xe9 son las Funciones en JavaScript?",id:"qu\xe9-son-las-funciones-en-javascript",level:2},{value:"Funcionamiento de las Funciones en JavaScript",id:"funcionamiento-de-las-funciones-en-javascript",level:2},{value:"1. Declaraci\xf3n de Funci\xf3n",id:"1-declaraci\xf3n-de-funci\xf3n",level:3},{value:"2. Expresi\xf3n de Funci\xf3n",id:"2-expresi\xf3n-de-funci\xf3n",level:3},{value:"Buenas Pr\xe1cticas al Utilizar Funciones en JavaScript",id:"buenas-pr\xe1cticas-al-utilizar-funciones-en-javascript",level:2},{value:"1. Nombrar las Funciones de Forma Descriptiva",id:"1-nombrar-las-funciones-de-forma-descriptiva",level:3},{value:"2. Mantener las Funciones Cortas y Modulares",id:"2-mantener-las-funciones-cortas-y-modulares",level:3},{value:"3. Utilizar Comentarios para Documentar las Funciones",id:"3-utilizar-comentarios-para-documentar-las-funciones",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"funciones",children:"Funciones"})}),"\n",(0,s.jsx)(n.h1,{id:"fundamentos-de-javascript-funciones",children:"Fundamentos de JavaScript: Funciones"}),"\n",(0,s.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"En el mundo de la programaci\xf3n con JavaScript, las funciones son bloques de c\xf3digo reutilizables que realizan una tarea espec\xedfica. Las funciones son elementos fundamentales en la construcci\xf3n de aplicaciones web, ya que permiten modularizar el c\xf3digo, mejorar la legibilidad y facilitar el mantenimiento del software. En este an\xe1lisis exhaustivo, exploraremos en detalle qu\xe9 son las funciones en JavaScript, c\xf3mo funcionan y c\xf3mo se pueden utilizar de manera efectiva en el desarrollo de aplicaciones web."}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-son-las-funciones-en-javascript",children:"\xbfQu\xe9 son las Funciones en JavaScript?"}),"\n",(0,s.jsx)(n.p,{children:"En JavaScript, una funci\xf3n es un bloque de c\xf3digo que realiza una tarea espec\xedfica cuando es invocada. Las funciones en JavaScript son similares a las funciones en otros lenguajes de programaci\xf3n, como Python o Java. Pueden aceptar datos de entrada, llamados par\xe1metros, y pueden devolver un resultado, llamado valor de retorno. Las funciones en JavaScript pueden ser definidas de varias formas, incluyendo declaraciones de funci\xf3n, expresiones de funci\xf3n y funciones de flecha (arrow functions)."}),"\n",(0,s.jsx)(n.h2,{id:"funcionamiento-de-las-funciones-en-javascript",children:"Funcionamiento de las Funciones en JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"A continuaci\xf3n, exploraremos en detalle c\xf3mo funcionan las funciones en JavaScript y c\xf3mo pueden ser utilizadas en la pr\xe1ctica."}),"\n",(0,s.jsx)(n.h3,{id:"1-declaraci\xf3n-de-funci\xf3n",children:"1. Declaraci\xf3n de Funci\xf3n"}),"\n",(0,s.jsxs)(n.p,{children:["Una declaraci\xf3n de funci\xf3n es la forma m\xe1s com\xfan de definir una funci\xf3n en JavaScript. Para declarar una funci\xf3n, se utiliza la palabra clave ",(0,s.jsx)(n.code,{children:"function"}),", seguida del nombre de la funci\xf3n y una lista de par\xe1metros entre par\xe9ntesis. El cuerpo de la funci\xf3n, que contiene el c\xf3digo que se ejecutar\xe1 cuando la funci\xf3n sea invocada, se encierra entre llaves ",(0,s.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Declaraci\xf3n de una funci\xf3n llamada suma\r\nfunction suma(a, b) {\r\n  return a + b;\r\n}\r\n\r\n// Invocaci\xf3n de la funci\xf3n suma\r\nlet resultado = suma(3, 5); // resultado = 8\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, la funci\xf3n ",(0,s.jsx)(n.code,{children:"suma"})," acepta dos par\xe1metros ",(0,s.jsx)(n.code,{children:"a"})," y ",(0,s.jsx)(n.code,{children:"b"}),", y devuelve la suma de los dos valores. Luego, la funci\xf3n es invocada con los argumentos ",(0,s.jsx)(n.code,{children:"3"})," y ",(0,s.jsx)(n.code,{children:"5"}),", y el resultado se asigna a la variable ",(0,s.jsx)(n.code,{children:"resultado"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"2-expresi\xf3n-de-funci\xf3n",children:"2. Expresi\xf3n de Funci\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"Una expresi\xf3n de funci\xf3n es similar a una declaraci\xf3n de funci\xf3n, pero se asigna a una variable o constante en lugar de ser nombrada directamente. Esto permite crear funciones an\xf3nimas, es decir, funciones que no tienen nombre y solo existen dentro del contexto de la variable a la que est\xe1n asignadas."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Expresi\xf3n de funci\xf3n asignada a una variable\r\nlet resta = function (a, b) {\r\n  return a - b;\r\n};\r\n\r\n// Invocaci\xf3n de la funci\xf3n resta\r\nlet resultadoResta = resta(8, 3); // resultadoResta = 5\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, la funci\xf3n de resta se define como una expresi\xf3n de funci\xf3n y se asigna a la variable ",(0,s.jsx)(n.code,{children:"resta"}),". Luego, la funci\xf3n se invoca con los argumentos ",(0,s.jsx)(n.code,{children:"8"})," y ",(0,s.jsx)(n.code,{children:"3"}),", y el resultado se asigna a la variable ",(0,s.jsx)(n.code,{children:"resultadoResta"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"buenas-pr\xe1cticas-al-utilizar-funciones-en-javascript",children:"Buenas Pr\xe1cticas al Utilizar Funciones en JavaScript"}),"\n",(0,s.jsx)(n.h3,{id:"1-nombrar-las-funciones-de-forma-descriptiva",children:"1. Nombrar las Funciones de Forma Descriptiva"}),"\n",(0,s.jsx)(n.p,{children:"Es importante dar nombres descriptivos a las funciones para indicar claramente su prop\xf3sito y funci\xf3n en el c\xf3digo."}),"\n",(0,s.jsx)(n.h3,{id:"2-mantener-las-funciones-cortas-y-modulares",children:"2. Mantener las Funciones Cortas y Modulares"}),"\n",(0,s.jsx)(n.p,{children:"Las funciones deben ser cortas y realizar una sola tarea espec\xedfica. Esto facilita la lectura, comprensi\xf3n y mantenimiento del c\xf3digo."}),"\n",(0,s.jsx)(n.h3,{id:"3-utilizar-comentarios-para-documentar-las-funciones",children:"3. Utilizar Comentarios para Documentar las Funciones"}),"\n",(0,s.jsx)(n.p,{children:"Es una buena pr\xe1ctica agregar comentarios que expliquen el prop\xf3sito, los par\xe1metros y el valor de retorno de una funci\xf3n para que otros desarrolladores puedan entender su funcionamiento sin tener que revisar el c\xf3digo fuente."}),"\n",(0,s.jsx)(n.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,s.jsx)(n.p,{children:"En resumen, las funciones son elementos fundamentales en JavaScript que permiten encapsular y reutilizar bloques de c\xf3digo. Comprender c\xf3mo funcionan las funciones y c\xf3mo utilizarlas de manera efectiva es esencial para escribir c\xf3digo limpio, modular y mantenible en el desarrollo de aplicaciones web. Ya sea a trav\xe9s de declaraciones de funci\xf3n, expresiones de funci\xf3n o funciones de flecha, las funciones en JavaScript ofrecen flexibilidad y poder para los programadores, permiti\xe9ndoles crear aplicaciones web sofisticadas y funcionales de manera eficiente."})]})}function t(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);