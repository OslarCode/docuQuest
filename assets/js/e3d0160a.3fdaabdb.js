"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[6883],{4585:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"js/const","title":"Const","description":"\xbfQu\xe9 es \\"const\\" en JavaScript?","source":"@site/docs/js/const.md","sourceDirName":"js","slug":"/js/const","permalink":"/docuQuest/docs/js/const","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/const.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Let","permalink":"/docuQuest/docs/js/let"},"next":{"title":"Let VS Var","permalink":"/docuQuest/docs/js/letVar"}}');var c=n(4848),r=n(8453);const o={},i="Const",l={},t=[{value:"\xbfQu\xe9 es &quot;const&quot; en JavaScript?",id:"qu\xe9-es-const-en-javascript",level:2},{value:"Funcionamiento de &quot;const&quot; en JavaScript",id:"funcionamiento-de-const-en-javascript",level:2},{value:"Caracter\xedsticas Principales de &quot;const&quot;",id:"caracter\xedsticas-principales-de-const",level:2},{value:"1. Inmutabilidad",id:"1-inmutabilidad",level:3},{value:"2. Declaraci\xf3n y Asignaci\xf3n",id:"2-declaraci\xf3n-y-asignaci\xf3n",level:3},{value:"3. Alcance de Bloque",id:"3-alcance-de-bloque",level:3},{value:"4. No se Puede Re-declarar",id:"4-no-se-puede-re-declarar",level:3},{value:"Ejemplos Pr\xe1cticos",id:"ejemplos-pr\xe1cticos",level:2},{value:"Declaraci\xf3n de Constantes Matem\xe1ticas",id:"declaraci\xf3n-de-constantes-matem\xe1ticas",level:3},{value:"Uso de Constantes en C\xe1lculos",id:"uso-de-constantes-en-c\xe1lculos",level:3},{value:"Declaraci\xf3n de Objetos y Arreglos Constantes",id:"declaraci\xf3n-de-objetos-y-arreglos-constantes",level:3},{value:"Buenas Pr\xe1cticas al Usar &quot;const&quot;",id:"buenas-pr\xe1cticas-al-usar-const",level:2},{value:"1. Utilizar &quot;const&quot; para Valores Inmutables",id:"1-utilizar-const-para-valores-inmutables",level:3},{value:"2. Utilizar Nombres Descriptivos",id:"2-utilizar-nombres-descriptivos",level:3},{value:"3. Evitar Re-declaraciones",id:"3-evitar-re-declaraciones",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(a.header,{children:(0,c.jsx)(a.h1,{id:"const",children:"Const"})}),"\n",(0,c.jsx)(a.h2,{id:"qu\xe9-es-const-en-javascript",children:'\xbfQu\xe9 es "const" en JavaScript?'}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"const"})," es una palabra clave en JavaScript que se utiliza para declarar variables cuyo valor no cambiar\xe1 despu\xe9s de su inicializaci\xf3n. Es decir, una vez que se asigna un valor a una constante utilizando ",(0,c.jsx)(a.code,{children:"const"}),", ese valor no puede ser modificado posteriormente durante la ejecuci\xf3n del programa."]}),"\n",(0,c.jsx)(a.h2,{id:"funcionamiento-de-const-en-javascript",children:'Funcionamiento de "const" en JavaScript'}),"\n",(0,c.jsxs)(a.p,{children:["Cuando se declara una constante con ",(0,c.jsx)(a.code,{children:"const"}),", se debe asignar un valor a la constante al momento de la declaraci\xf3n. Una vez que se asigna un valor, este valor no puede ser cambiado posteriormente. Intentar cambiar el valor de una constante despu\xe9s de su inicializaci\xf3n resultar\xe1 en un error."]}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-jsx",children:"const PI = 3.1416;\r\nPI = 3.14; // Error: Assignment to constant variable\n"})}),"\n",(0,c.jsxs)(a.p,{children:["En este ejemplo, se intenta cambiar el valor de la constante ",(0,c.jsx)(a.code,{children:"PI"})," despu\xe9s de su inicializaci\xf3n, lo que resulta en un error. Las constantes declaradas con ",(0,c.jsx)(a.code,{children:"const"})," son inmutables y no pueden ser reasignadas."]}),"\n",(0,c.jsx)(a.h2,{id:"caracter\xedsticas-principales-de-const",children:'Caracter\xedsticas Principales de "const"'}),"\n",(0,c.jsx)(a.h3,{id:"1-inmutabilidad",children:"1. Inmutabilidad"}),"\n",(0,c.jsxs)(a.p,{children:["Las variables declaradas con ",(0,c.jsx)(a.code,{children:"const"})," son inmutables, lo que significa que su valor no puede ser cambiado una vez que se ha asignado."]}),"\n",(0,c.jsx)(a.h3,{id:"2-declaraci\xf3n-y-asignaci\xf3n",children:"2. Declaraci\xf3n y Asignaci\xf3n"}),"\n",(0,c.jsxs)(a.p,{children:["Una constante declarada con ",(0,c.jsx)(a.code,{children:"const"})," debe tener un valor asignado en el momento de la declaraci\xf3n. No se puede declarar una constante sin asignarle un valor inicial."]}),"\n",(0,c.jsx)(a.h3,{id:"3-alcance-de-bloque",children:"3. Alcance de Bloque"}),"\n",(0,c.jsxs)(a.p,{children:["Al igual que con ",(0,c.jsx)(a.code,{children:"let"}),", las constantes declaradas con ",(0,c.jsx)(a.code,{children:"const"})," tienen un alcance de bloque, lo que significa que solo son visibles dentro del bloque en el que fueron declaradas."]}),"\n",(0,c.jsx)(a.h3,{id:"4-no-se-puede-re-declarar",children:"4. No se Puede Re-declarar"}),"\n",(0,c.jsxs)(a.p,{children:["Al contrario que las variables declaradas con ",(0,c.jsx)(a.code,{children:"var"}),", una constante declarada con ",(0,c.jsx)(a.code,{children:"const"})," no puede ser re-declarada en el mismo \xe1mbito."]}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-jsx",children:"const y = 5;\r\nconst y = 10; // Error: Identifier 'y' has already been declared\n"})}),"\n",(0,c.jsx)(a.h2,{id:"ejemplos-pr\xe1cticos",children:"Ejemplos Pr\xe1cticos"}),"\n",(0,c.jsx)(a.h3,{id:"declaraci\xf3n-de-constantes-matem\xe1ticas",children:"Declaraci\xf3n de Constantes Matem\xe1ticas"}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-jsx",children:"const PI = 3.1416;\r\nconst GRAVEDAD = 9.81;\n"})}),"\n",(0,c.jsx)(a.p,{children:"En este ejemplo, se declaran constantes para representar el valor de Pi y la aceleraci\xf3n gravitatoria, valores que no cambian durante la ejecuci\xf3n del programa."}),"\n",(0,c.jsx)(a.h3,{id:"uso-de-constantes-en-c\xe1lculos",children:"Uso de Constantes en C\xe1lculos"}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-jsx",children:"const RADIO = 5;\r\nconst area = Math.PI * Math.pow(RADIO, 2);\n"})}),"\n",(0,c.jsx)(a.p,{children:"En este ejemplo, se utiliza una constante para representar el radio de un c\xedrculo y calcular su \xe1rea utilizando la f\xf3rmula matem\xe1tica correspondiente."}),"\n",(0,c.jsx)(a.h3,{id:"declaraci\xf3n-de-objetos-y-arreglos-constantes",children:"Declaraci\xf3n de Objetos y Arreglos Constantes"}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-jsx",children:'const persona = { nombre: "Juan", edad: 30 };\r\nconst colores = ["rojo", "verde", "azul"];\n'})}),"\n",(0,c.jsx)(a.p,{children:"En este ejemplo, se declaran constantes para representar un objeto y un arreglo de colores, cuyos valores no cambiar\xe1n durante la ejecuci\xf3n del programa."}),"\n",(0,c.jsx)(a.h2,{id:"buenas-pr\xe1cticas-al-usar-const",children:'Buenas Pr\xe1cticas al Usar "const"'}),"\n",(0,c.jsx)(a.h3,{id:"1-utilizar-const-para-valores-inmutables",children:'1. Utilizar "const" para Valores Inmutables'}),"\n",(0,c.jsxs)(a.p,{children:["Se recomienda utilizar ",(0,c.jsx)(a.code,{children:"const"})," siempre que sea posible para valores que no cambiar\xe1n durante la ejecuci\xf3n del programa, ya que ayuda a prevenir errores y mejorar la legibilidad del c\xf3digo."]}),"\n",(0,c.jsx)(a.h3,{id:"2-utilizar-nombres-descriptivos",children:"2. Utilizar Nombres Descriptivos"}),"\n",(0,c.jsx)(a.p,{children:"Es importante utilizar nombres descriptivos para las constantes para que sea claro cu\xe1l es su prop\xf3sito y qu\xe9 valor representan."}),"\n",(0,c.jsx)(a.h3,{id:"3-evitar-re-declaraciones",children:"3. Evitar Re-declaraciones"}),"\n",(0,c.jsx)(a.p,{children:"Evitar re-declarar constantes con el mismo nombre en el mismo \xe1mbito, ya que esto puede llevar a confusiones y errores en el c\xf3digo."}),"\n",(0,c.jsx)(a.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,c.jsxs)(a.p,{children:["En conclusi\xf3n, ",(0,c.jsx)(a.code,{children:"const"})," es una palabra clave en JavaScript que se utiliza para declarar variables cuyo valor no cambiar\xe1 durante la ejecuci\xf3n del programa. Las constantes declaradas con ",(0,c.jsx)(a.code,{children:"const"})," son inmutables y no pueden ser reasignadas despu\xe9s de su inicializaci\xf3n. Comprender c\xf3mo"]})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,c.jsx)(a,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>i});var s=n(6540);const c={},r=s.createContext(c);function o(e){const a=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);