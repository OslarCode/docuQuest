"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[4037],{6011:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>t});const o=JSON.parse('{"id":"js/maps","title":"Maps","description":"En el \xe1mbito de la programaci\xf3n en JavaScript, los maps son una estructura de datos fundamental que permite asociar claves con valores, ofreciendo una manera eficiente de almacenar y recuperar informaci\xf3n. Los maps son ampliamente utilizados en el desarrollo de aplicaciones web y programas para gestionar datos de manera estructurada y flexible.","source":"@site/docs/js/maps.md","sourceDirName":"js","slug":"/js/maps","permalink":"/docuQuest/docs/js/maps","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/maps.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Renderizaci\xf3n y Reflujos","permalink":"/docuQuest/docs/js/dom/renderizacionReflujos"},"next":{"title":"M\xf3dulos","permalink":"/docuQuest/docs/js/modulos"}}');var s=n(4848),r=n(8453);const c={},l="Maps",i={},t=[{value:"Introducci\xf3n a los Maps en JavaScript",id:"introducci\xf3n-a-los-maps-en-javascript",level:2},{value:"Creaci\xf3n de Maps en JavaScript",id:"creaci\xf3n-de-maps-en-javascript",level:2},{value:"Ejemplo de Creaci\xf3n de Maps",id:"ejemplo-de-creaci\xf3n-de-maps",level:3},{value:"Caracter\xedsticas de los Maps en JavaScript",id:"caracter\xedsticas-de-los-maps-en-javascript",level:2},{value:"1. Almacenamiento de Asociaciones Clave-Valor",id:"1-almacenamiento-de-asociaciones-clave-valor",level:3},{value:"2. Flexibilidad en los Tipos de Clave y Valor",id:"2-flexibilidad-en-los-tipos-de-clave-y-valor",level:3},{value:"3. M\xe9todos para Manipular Maps",id:"3-m\xe9todos-para-manipular-maps",level:3},{value:"4. Iteraci\xf3n sobre Maps",id:"4-iteraci\xf3n-sobre-maps",level:3},{value:"5. Sets como Claves en Maps",id:"5-sets-como-claves-en-maps",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"maps",children:"Maps"})}),"\n",(0,s.jsx)(a.h1,{id:"maps-en-javascript-introducci\xf3n-y-funcionamiento",children:"Maps en JavaScript: Introducci\xf3n y Funcionamiento"}),"\n",(0,s.jsx)(a.p,{children:"En el \xe1mbito de la programaci\xf3n en JavaScript, los maps son una estructura de datos fundamental que permite asociar claves con valores, ofreciendo una manera eficiente de almacenar y recuperar informaci\xf3n. Los maps son ampliamente utilizados en el desarrollo de aplicaciones web y programas para gestionar datos de manera estructurada y flexible."}),"\n",(0,s.jsx)(a.h2,{id:"introducci\xf3n-a-los-maps-en-javascript",children:"Introducci\xf3n a los Maps en JavaScript"}),"\n",(0,s.jsx)(a.p,{children:"Un map en JavaScript es una colecci\xf3n de pares clave-valor donde cada clave es \xfanica y est\xe1 asociada a un valor correspondiente. A diferencia de los objetos regulares en JavaScript, los maps permiten utilizar cualquier tipo de valor como clave, incluyendo objetos, funciones y valores primitivos. Esto los convierte en una herramienta vers\xe1til para la organizaci\xf3n y manipulaci\xf3n de datos en aplicaciones de cualquier tama\xf1o y complejidad."}),"\n",(0,s.jsx)(a.p,{children:"Los maps fueron introducidos en ECMAScript 6 (tambi\xe9n conocido como ES6 o ECMAScript 2015) como una nueva estructura de datos incorporada en el lenguaje JavaScript para ofrecer una soluci\xf3n moderna y eficiente para el manejo de asociaciones clave-valor."}),"\n",(0,s.jsx)(a.h2,{id:"creaci\xf3n-de-maps-en-javascript",children:"Creaci\xf3n de Maps en JavaScript"}),"\n",(0,s.jsxs)(a.p,{children:["En JavaScript, se pueden crear maps utilizando la clase ",(0,s.jsx)(a.code,{children:"Map"}),". Para crear un nuevo map, simplemente se utiliza el constructor ",(0,s.jsx)(a.code,{children:"Map"})," sin ning\xfan argumento, o se pasa un iterable (como un array de arrays) donde cada subarray representa un par clave-valor inicial."]}),"\n",(0,s.jsx)(a.h3,{id:"ejemplo-de-creaci\xf3n-de-maps",children:"Ejemplo de Creaci\xf3n de Maps"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-jsx",children:'// Creaci\xf3n de un map vac\xedo\nconst mapaVacio = new Map();\n\n// Creaci\xf3n de un map con valores iniciales\nconst mapaConValores = new Map([\n  ["clave1", "valor1"],\n  ["clave2", "valor2"],\n  ["clave3", "valor3"],\n]);\n\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En este ejemplo, ",(0,s.jsx)(a.code,{children:"mapaVacio"})," es un map vac\xedo, mientras que ",(0,s.jsx)(a.code,{children:"mapaConValores"})," es un map que contiene tres pares clave-valor inicializados."]}),"\n",(0,s.jsx)(a.h2,{id:"caracter\xedsticas-de-los-maps-en-javascript",children:"Caracter\xedsticas de los Maps en JavaScript"}),"\n",(0,s.jsx)(a.p,{children:"Los maps en JavaScript tienen varias caracter\xedsticas importantes que los hacen \xfatiles en diferentes contextos de programaci\xf3n. Algunas de estas caracter\xedsticas incluyen:"}),"\n",(0,s.jsx)(a.h3,{id:"1-almacenamiento-de-asociaciones-clave-valor",children:"1. Almacenamiento de Asociaciones Clave-Valor"}),"\n",(0,s.jsx)(a.p,{children:"Los maps en JavaScript permiten asociar una clave \xfanica con un valor correspondiente. Esto permite almacenar y recuperar datos de manera eficiente utilizando una clave como referencia."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-jsx",children:"const mapa = new Map();\nmapa.set(\"clave1\", \"valor1\"); // Asocia la clave 'clave1' con el valor 'valor1'\nmapa.set(\"clave2\", \"valor2\"); // Asocia la clave 'clave2' con el valor 'valor2'\nconsole.log(mapa.get(\"clave1\")); // Devuelve 'valor1'\n\n"})}),"\n",(0,s.jsx)(a.h3,{id:"2-flexibilidad-en-los-tipos-de-clave-y-valor",children:"2. Flexibilidad en los Tipos de Clave y Valor"}),"\n",(0,s.jsx)(a.p,{children:"Los maps en JavaScript permiten utilizar cualquier tipo de valor como clave y como valor, incluyendo objetos, funciones y valores primitivos. Esto proporciona una gran flexibilidad en la estructura de datos que se puede almacenar en un map."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-jsx",children:"const mapa = new Map();\nconst objeto = {};\nconst funcion = () => {};\nmapa.set(objeto, \"valor1\");\nmapa.set(funcion, \"valor2\");\nconsole.log(mapa.get(objeto)); // Devuelve 'valor1'\nconsole.log(mapa.get(funcion)); // Devuelve 'valor2'\n\n"})}),"\n",(0,s.jsx)(a.h3,{id:"3-m\xe9todos-para-manipular-maps",children:"3. M\xe9todos para Manipular Maps"}),"\n",(0,s.jsx)(a.p,{children:"Los maps en JavaScript proporcionan m\xe9todos integrados para realizar operaciones comunes, como agregar pares clave-valor, eliminar pares, verificar la existencia de una clave y obtener el tama\xf1o del map."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-jsx",children:'const mapa = new Map();\nmapa.set("clave1", "valor1");\nmapa.set("clave2", "valor2");\nmapa.delete("clave1"); // Elimina el par clave-valor con la clave \'clave1\'\nconsole.log(mapa.has("clave1")); // Devuelve false (la clave \'clave1\' ya no est\xe1 presente)\nconsole.log(mapa.size); // Devuelve 1 (tama\xf1o actual del map)\n\n'})}),"\n",(0,s.jsx)(a.h3,{id:"4-iteraci\xf3n-sobre-maps",children:"4. Iteraci\xf3n sobre Maps"}),"\n",(0,s.jsxs)(a.p,{children:["Los maps en JavaScript son iterables, lo que significa que se pueden recorrer f\xe1cilmente utilizando bucles ",(0,s.jsx)(a.code,{children:"for...of"})," o utilizando el m\xe9todo ",(0,s.jsx)(a.code,{children:"forEach()"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-jsx",children:'const mapa = new Map([\n  ["clave1", "valor1"],\n  ["clave2", "valor2"],\n  ["clave3", "valor3"],\n]);\nfor (const [clave, valor] of mapa) {\n  console.log(`Clave: ${clave}, Valor: ${valor}`);\n}\n\nmapa.forEach((valor, clave) => {\n  console.log(`Clave: ${clave}, Valor: ${valor}`);\n});\n\n'})}),"\n",(0,s.jsx)(a.h3,{id:"5-sets-como-claves-en-maps",children:"5. Sets como Claves en Maps"}),"\n",(0,s.jsx)(a.p,{children:"Una caracter\xedstica interesante de los maps en JavaScript es que permiten utilizar sets como claves. Esto es posible porque los sets son valores \xfanicos y, por lo tanto, pueden ser utilizados como claves en un map."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-jsx",children:"const set = new Set([1, 2, 3]);\nconst mapa = new Map();\nmapa.set(set, \"Este es un set como clave\");\nconsole.log(mapa.get(set)); // Devuelve 'Este es un set como clave'\n\n"})}),"\n",(0,s.jsx)(a.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,s.jsx)(a.p,{children:"En resumen, los maps en JavaScript son una herramienta poderosa para almacenar y manipular asociaciones clave-valor de manera eficiente. Proporcionan una forma flexible de estructurar y gestionar datos en aplicaciones web y programas, permitiendo utilizar cualquier tipo de valor como clave y como valor. Con sus m\xe9todos integrados para agregar, eliminar, verificar y recorrer elementos, los maps se han convertido en una estructura de datos esencial en el arsenal de cualquier desarrollador de JavaScript. Con un s\xf3lido entendimiento de los maps y c\xf3mo funcionan, los programadores pueden aprovechar al m\xe1ximo esta poderosa herramienta para crear aplicaciones robustas y eficientes en JavaScript."})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>c,x:()=>l});var o=n(6540);const s={},r=o.createContext(s);function c(e){const a=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:a},e.children)}}}]);