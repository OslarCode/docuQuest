"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[6174],{5510:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>j,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"frontend/js/objetos_literales/objetos_literales","title":"Objetos","description":"\xbfQu\xe9 son los Objetos en JavaScript?","source":"@site/docs/frontend/js/objetos_literales/objetos_literales.md","sourceDirName":"frontend/js/objetos_literales","slug":"/frontend/js/objetos_literales/","permalink":"/docuQuest/docs/frontend/js/objetos_literales/","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/objetos_literales/objetos_literales.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Funciones Flecha","permalink":"/docuQuest/docs/frontend/js/funciones/funcionesFlecha"},"next":{"title":"This","permalink":"/docuQuest/docs/frontend/js/objetos_literales/this"}}');var s=o(4848),a=o(8453);const d={},i="Objetos",c={},l=[{value:"\xbfQu\xe9 son los Objetos en JavaScript?",id:"qu\xe9-son-los-objetos-en-javascript",level:2},{value:"Estructura de un Objeto Literal en JavaScript",id:"estructura-de-un-objeto-literal-en-javascript",level:2},{value:"Ejemplo de un Objeto en Literal en JavaScript",id:"ejemplo-de-un-objeto-en-literal-en-javascript",level:3},{value:"Funcionamiento de los Objetos en JavaScript",id:"funcionamiento-de-los-objetos-en-javascript",level:2},{value:"Acceso a Propiedades y M\xe9todos",id:"acceso-a-propiedades-y-m\xe9todos",level:3},{value:"Agregar y Modificar Propiedades",id:"agregar-y-modificar-propiedades",level:3},{value:"Eliminar Propiedades",id:"eliminar-propiedades",level:3},{value:"M\xe9todos de Objetos en JavaScript",id:"m\xe9todos-de-objetos-en-javascript",level:2},{value:"Ejemplo de M\xe9todo en un Objeto",id:"ejemplo-de-m\xe9todo-en-un-objeto",level:3},{value:"\ud83d\udee0 \xbfC\xf3mo cambia <code>this</code>?",id:"-c\xf3mo-cambia-this",level:3},{value:"Estructura de un objeto con clases (ES6+)",id:"estructura-de-un-objeto-con-clases-es6",level:2},{value:"\ud83d\udee0 <strong>\xbfCu\xe1ndo usar cada uno?</strong>",id:"-cu\xe1ndo-usar-cada-uno",level:2},{value:"Conclusiones",id:"conclusiones",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"objetos",children:"Objetos"})}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-son-los-objetos-en-javascript",children:"\xbfQu\xe9 son los Objetos en JavaScript?"}),"\n",(0,s.jsx)(n.p,{children:"En JavaScript, un objeto es una colecci\xf3n de pares de clave-valor donde cada clave es una cadena \xfanica y cada valor puede ser cualquier tipo de dato, incluidos otros objetos. Los objetos en JavaScript se utilizan para representar entidades complejas y estructuradas, como usuarios, productos, servicios, etc. Cada objeto en JavaScript es una instancia de una clase, que es una plantilla para crear objetos con propiedades y m\xe9todos espec\xedficos."}),"\n",(0,s.jsx)(n.h2,{id:"estructura-de-un-objeto-literal-en-javascript",children:"Estructura de un Objeto Literal en JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"La estructura b\xe1sica de un objeto en JavaScript es la siguiente:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"let objeto = {\r\n  clave1: valor1,\r\n  clave2: valor2,\r\n  // Otras claves y valores\r\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En esta estructura, ",(0,s.jsx)(n.code,{children:"clave1"}),", ",(0,s.jsx)(n.code,{children:"clave2"}),", etc., son las claves del objeto, y ",(0,s.jsx)(n.code,{children:"valor1"}),", ",(0,s.jsx)(n.code,{children:"valor2"}),", etc., son los valores asociados a esas claves. Los valores pueden ser de cualquier tipo de dato, incluyendo n\xfameros, cadenas, arreglos, funciones e incluso otros objetos."]}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Ventajas de los objetos literales"})]}),"\n",(0,s.jsx)(n.p,{children:"\u2714 R\xe1pidos y sencillos de crear."}),"\n",(0,s.jsx)(n.p,{children:"\u2714 \xdatiles para datos \xfanicos o configuraciones."}),"\n",(0,s.jsxs)(n.p,{children:["\u2714 No necesitas usar ",(0,s.jsx)(n.code,{children:"new"})," para instanciarlos."]}),"\n",(0,s.jsxs)(n.p,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Desventajas"})]}),"\n",(0,s.jsx)(n.p,{children:"\u274c No puedes reutilizar el c\xf3digo f\xe1cilmente si necesitas m\xfaltiples objetos con la misma estructura."}),"\n",(0,s.jsx)(n.p,{children:"\u274c No hay herencia ni encapsulamiento."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-de-un-objeto-en-literal-en-javascript",children:"Ejemplo de un Objeto en Literal en JavaScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'// Definici\xf3n de un objeto persona\r\nlet persona = {\r\n  nombre: "Juan",\r\n  edad: 30,\r\n  profesion: "Desarrollador",\r\n  saludar: function () {\r\n    console.log(\r\n      "\xa1Hola! Mi nombre es " + this.nombre + " y tengo " + this.edad + " a\xf1os."\r\n    );\r\n  },\r\n};\r\n\r\n// Acceso a las propiedades del objeto\r\nconsole.log(persona.nombre); // Imprime: Juan\r\nconsole.log(persona.edad); // Imprime: 30\r\n\r\n// Llamada a un m\xe9todo del objeto\r\npersona.saludar(); // Imprime: \xa1Hola! Mi nombre es Juan y tengo 30 a\xf1os.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, se define un objeto ",(0,s.jsx)(n.code,{children:"persona"})," con tres propiedades (",(0,s.jsx)(n.code,{children:"nombre"}),", ",(0,s.jsx)(n.code,{children:"edad"})," y ",(0,s.jsx)(n.code,{children:"profesion"}),") y un m\xe9todo (",(0,s.jsx)(n.code,{children:"saludar"}),"). Las propiedades se acceden utilizando la notaci\xf3n de punto (",(0,s.jsx)(n.code,{children:"persona.nombre"}),") y el m\xe9todo se llama de la misma manera (",(0,s.jsx)(n.code,{children:"persona.saludar()"}),")."]}),"\n",(0,s.jsx)(n.h2,{id:"funcionamiento-de-los-objetos-en-javascript",children:"Funcionamiento de los Objetos en JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"Los objetos en JavaScript funcionan como contenedores flexibles que permiten almacenar y organizar datos de manera eficiente. A continuaci\xf3n, exploraremos algunos conceptos clave sobre c\xf3mo funcionan los objetos en JavaScript:"}),"\n",(0,s.jsx)(n.h3,{id:"acceso-a-propiedades-y-m\xe9todos",children:"Acceso a Propiedades y M\xe9todos"}),"\n",(0,s.jsxs)(n.p,{children:["Las propiedades y m\xe9todos de un objeto se acceden utilizando la notaci\xf3n de punto (",(0,s.jsx)(n.code,{children:"objeto.propiedad"}),") o la notaci\xf3n de corchetes (",(0,s.jsx)(n.code,{children:"objeto['propiedad']"}),"). La notaci\xf3n de punto es m\xe1s com\xfan y f\xe1cil de leer, pero la notaci\xf3n de corchetes es \xfatil cuando se accede a propiedades con nombres din\xe1micos o cuando el nombre de la propiedad contiene caracteres especiales."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let persona = {\r\n  nombre: "Mar\xeda",\r\n  edad: 25,\r\n  "lugar de nacimiento": "Madrid",\r\n};\r\n\r\nconsole.log(persona.nombre); // Imprime: Mar\xeda\r\nconsole.log(persona["edad"]); // Imprime: 25\r\nconsole.log(persona["lugar de nacimiento"]); // Imprime: Madrid\n'})}),"\n",(0,s.jsx)(n.h3,{id:"agregar-y-modificar-propiedades",children:"Agregar y Modificar Propiedades"}),"\n",(0,s.jsx)(n.p,{children:"Las propiedades de un objeto pueden agregarse o modificarse en cualquier momento despu\xe9s de la creaci\xf3n del objeto utilizando la notaci\xf3n de punto o la notaci\xf3n de corchetes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let persona = {\r\n  nombre: "Pedro",\r\n  edad: 35,\r\n};\r\n\r\npersona.profesion = "Ingeniero"; // Agregar nueva propiedad\r\npersona["lugar de residencia"] = "Barcelona"; // Agregar nueva propiedad con notaci\xf3n de corchetes\r\n\r\npersona.edad = 40; // Modificar propiedad existente\r\n\r\nconsole.log(persona);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"eliminar-propiedades",children:"Eliminar Propiedades"}),"\n",(0,s.jsxs)(n.p,{children:["Las propiedades de un objeto pueden eliminarse utilizando el operador ",(0,s.jsx)(n.code,{children:"delete"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let persona = {\r\n  nombre: "Ana",\r\n  edad: 30,\r\n  profesion: "Abogada",\r\n};\r\n\r\ndelete persona.profesion; // Eliminar propiedad \'profesion\'\r\n\r\nconsole.log(persona);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"m\xe9todos-de-objetos-en-javascript",children:"M\xe9todos de Objetos en JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"Los objetos en JavaScript pueden contener m\xe9todos, que son funciones asociadas al objeto. Estos m\xe9todos pueden realizar acciones y manipular los datos del objeto."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-de-m\xe9todo-en-un-objeto",children:"Ejemplo de M\xe9todo en un Objeto"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let persona = {\r\n  nombre: "Carlos",\r\n  edad: 28,\r\n  saludar: function () {\r\n    console.log(\r\n      "\xa1Hola! Mi nombre es " + this.nombre + " y tengo " + this.edad + " a\xf1os."\r\n    );\r\n  },\r\n};\r\n\r\npersona.saludar(); // Imprime: \xa1Hola! Mi nombre es Carlos y tengo 28 a\xf1os.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, el m\xe9todo ",(0,s.jsx)(n.code,{children:"saludar"})," del objeto ",(0,s.jsx)(n.code,{children:"persona"})," imprime un mensaje saludando con el nombre y la edad de la persona."]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,s.jsxs)(n.strong,{children:["\xbfQu\xe9 es ",(0,s.jsx)(n.code,{children:"this"}),"?"]})]}),"\n",(0,s.jsx)(n.p,{children:"Es una palabra clave que hace referencia al objeto en el que se encuentra el c\xf3digo en ejecuci\xf3n."}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udccc ",(0,s.jsx)(n.strong,{children:"Ejemplo b\xe1sico:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'javascript;\r\nCopiarEditar;\r\nconst persona = {\r\n  nombre: "Ana",\r\n  saludar: function () {\r\n    console.log("Hola, mi nombre es " + this.nombre);\r\n  },\r\n};\r\n\r\npersona.saludar(); // Salida: Hola, mi nombre es Ana\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc49 Aqu\xed, ",(0,s.jsx)(n.code,{children:"this.nombre"})," se refiere a ",(0,s.jsx)(n.code,{children:"persona.nombre"}),", porque ",(0,s.jsx)(n.code,{children:"this"})," apunta al objeto ",(0,s.jsx)(n.code,{children:"persona"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"-c\xf3mo-cambia-this",children:["\ud83d\udee0 \xbfC\xf3mo cambia ",(0,s.jsx)(n.code,{children:"this"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:["1\ufe0f\u20e3 ",(0,s.jsx)(n.strong,{children:"En un objeto:"})," ",(0,s.jsx)(n.code,{children:"this"})," apunta al objeto en el que se ejecuta el m\xe9todo."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'javascript;\r\nCopiarEditar;\r\nconst coche = {\r\n  marca: "Toyota",\r\n  mostrarMarca: function () {\r\n    console.log("Marca: " + this.marca);\r\n  },\r\n};\r\n\r\ncoche.mostrarMarca(); // Marca: Toyota\n'})}),"\n",(0,s.jsxs)(n.p,{children:["2\ufe0f\u20e3 ",(0,s.jsx)(n.strong,{children:"En una funci\xf3n normal (modo estricto):"})," ",(0,s.jsx)(n.code,{children:"this"})," es ",(0,s.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'javascript;\r\nCopiarEditar;\r\n("use strict");\r\nfunction prueba() {\r\n  console.log(this);\r\n}\r\nprueba(); // undefined\n'})}),"\n",(0,s.jsxs)(n.p,{children:["3\ufe0f\u20e3 ",(0,s.jsx)(n.strong,{children:"En una funci\xf3n dentro de otra funci\xf3n:"})," ",(0,s.jsx)(n.code,{children:"this"})," puede perder su contexto."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'javascript;\r\nCopiarEditar;\r\nconst usuario = {\r\n  nombre: "Carlos",\r\n  mostrar: function () {\r\n    function interna() {\r\n      console.log(this.nombre);\r\n    }\r\n    interna();\r\n  },\r\n};\r\n\r\nusuario.mostrar(); // undefined\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc49 Aqu\xed, ",(0,s.jsx)(n.code,{children:"this"})," dentro de ",(0,s.jsx)(n.code,{children:"interna()"})," ya no apunta a ",(0,s.jsx)(n.code,{children:"usuario"}),", sino al ",(0,s.jsxs)(n.strong,{children:["objeto global (",(0,s.jsx)(n.code,{children:"window"})," en navegadores o ",(0,s.jsx)(n.code,{children:"undefined"})," en modo estricto)"]}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,s.jsx)(n.strong,{children:"Soluci\xf3n:"})," Usar ",(0,s.jsx)(n.code,{children:"bind()"})," o una arrow function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'javascript;\r\nCopiarEditar;\r\nconst usuario = {\r\n  nombre: "Carlos",\r\n  mostrar: function () {\r\n    const interna = () => {\r\n      console.log(this.nombre);\r\n    };\r\n    interna();\r\n  },\r\n};\r\n\r\nusuario.mostrar(); // Carlos\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsxs)(n.strong,{children:["Las arrow functions heredan ",(0,s.jsx)(n.code,{children:"this"})," del contexto donde fueron creadas."]})]}),"\n",(0,s.jsx)(n.h2,{id:"estructura-de-un-objeto-con-clases-es6",children:"Estructura de un objeto con clases (ES6+)"}),"\n",(0,s.jsx)(n.p,{children:'Las clases en JavaScript permiten crear "moldes" para generar m\xfaltiples instancias de un objeto con las mismas propiedades y m\xe9todos.'}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udccc ",(0,s.jsx)(n.strong,{children:"Ejemplo de clase en JavaScript:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'javascript;\r\nCopiarEditar;\r\nclass Persona {\r\n  constructor(nombre, edad) {\r\n    this.nombre = nombre;\r\n    this.edad = edad;\r\n  }\r\n\r\n  saludar() {\r\n    console.log(`Hola, soy ${this.nombre}`);\r\n  }\r\n}\r\n\r\n// Crear instancias de la clase\r\nconst juan = new Persona("Juan", 30);\r\nconst maria = new Persona("Mar\xeda", 25);\r\n\r\njuan.saludar(); // Hola, soy Juan\r\nmaria.saludar(); // Hola, soy Mar\xeda\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Ventajas de las clases"})]}),"\n",(0,s.jsx)(n.p,{children:"\u2714 Permiten reutilizaci\xf3n del c\xf3digo mediante instancias."}),"\n",(0,s.jsxs)(n.p,{children:["\u2714 Soportan ",(0,s.jsx)(n.strong,{children:"herencia"})," (",(0,s.jsx)(n.code,{children:"extends"}),"), lo que facilita la organizaci\xf3n del c\xf3digo."]}),"\n",(0,s.jsx)(n.p,{children:"\u2714 Son m\xe1s estructuradas y f\xe1ciles de mantener en proyectos grandes."}),"\n",(0,s.jsxs)(n.p,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Desventajas"})]}),"\n",(0,s.jsx)(n.p,{children:"\u274c Para objetos peque\xf1os, es m\xe1s c\xf3digo del necesario."}),"\n",(0,s.jsxs)(n.p,{children:["\u274c Requiere el uso de ",(0,s.jsx)(n.code,{children:"new"})," para crear instancias."]}),"\n",(0,s.jsx)(n.p,{children:"\u274c Puede ser m\xe1s lento en rendimiento si solo necesitas un objeto \xfanico."}),"\n",(0,s.jsxs)(n.h2,{id:"-cu\xe1ndo-usar-cada-uno",children:["\ud83d\udee0 ",(0,s.jsx)(n.strong,{children:"\xbfCu\xe1ndo usar cada uno?"})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Caso"}),(0,s.jsxs)(n.th,{children:["Objeto Literal ",(0,s.jsx)(n.code,{children:"{}"})]}),(0,s.jsxs)(n.th,{children:["Clase ",(0,s.jsx)(n.code,{children:"class"})]})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Datos \xfanicos o de configuraci\xf3n"}),(0,s.jsx)(n.td,{children:"\u2705 S\xed"}),(0,s.jsx)(n.td,{children:"\u274c No necesario"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"M\xfaltiples instancias con misma estructura"}),(0,s.jsx)(n.td,{children:"\u274c No recomendado"}),(0,s.jsx)(n.td,{children:"\u2705 Ideal"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Reutilizaci\xf3n de c\xf3digo"}),(0,s.jsx)(n.td,{children:"\u274c Dif\xedcil"}),(0,s.jsx)(n.td,{children:"\u2705 S\xed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Soporte para herencia"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u2705 S\xed"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,s.jsxs)(n.strong,{children:["Si necesitas un objeto r\xe1pido y \xfanico \u2192 Usa un objeto literal ",(0,s.jsx)(n.code,{children:"{}"}),"."]})]}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,s.jsx)(n.strong,{children:"Si necesitas crear varios objetos con la misma estructura \u2192 Usa una clase."})]}),"\n",(0,s.jsx)(n.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,s.jsx)(n.p,{children:"En resumen, los objetos en JavaScript son elementos fundamentales que permiten organizar y estructurar datos de manera efectiva. Con su capacidad para contener propiedades y m\xe9todos, los objetos proporcionan una forma poderosa de modelar entidades y funcionalidades en aplicaciones web y m\xe1s all\xe1. Al comprender c\xf3mo funcionan los objetos en JavaScript y c\xf3mo utilizarlos de manera efectiva, los desarrolladores pueden escribir c\xf3digo m\xe1s limpio, legible y mantenible, lo que contribuye a la creaci\xf3n de aplicaciones robustas y escalables."})]})}function j(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var r=o(6540);const s={},a=r.createContext(s);function d(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);