"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[5136],{8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var a=r(6540);const s={},i=a.createContext(s);function t(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(i.Provider,{value:n},e.children)}},8933:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"frontend/js/strings/stringTemplates","title":"Strings Templates","description":"Introducci\xf3n","source":"@site/docs/frontend/js/strings/stringTemplates.md","sourceDirName":"frontend/js/strings","slug":"/frontend/js/strings/stringTemplates","permalink":"/docuQuest/docs/frontend/js/strings/stringTemplates","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/strings/stringTemplates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"M\xe9todos de Strings","permalink":"/docuQuest/docs/frontend/js/strings/metodosStrings"},"next":{"title":"N\xfameros","permalink":"/docuQuest/docs/frontend/js/numeros"}}');var s=r(4848),i=r(8453);const t={},l="Strings Templates",o={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"\xbfQu\xe9 son los Template Strings en JavaScript?",id:"qu\xe9-son-los-template-strings-en-javascript",level:2},{value:"Funcionamiento de los Template Strings en JavaScript",id:"funcionamiento-de-los-template-strings-en-javascript",level:2},{value:"1. Interpolaci\xf3n de Variables",id:"1-interpolaci\xf3n-de-variables",level:3},{value:"2. Evaluaci\xf3n de Expresiones",id:"2-evaluaci\xf3n-de-expresiones",level:3},{value:"3. Multil\xednea",id:"3-multil\xednea",level:3},{value:"4. Incrustaci\xf3n de HTML",id:"4-incrustaci\xf3n-de-html",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"strings-templates",children:"Strings Templates"})}),"\n",(0,s.jsx)(n.h1,{id:"template-strings-en-javascript-fundamentos-y-funcionamiento",children:"Template Strings en JavaScript: Fundamentos y Funcionamiento"}),"\n",(0,s.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"Los template strings, tambi\xe9n conocidos como strings de plantilla, son una caracter\xedstica importante de JavaScript que permite crear strings de una manera m\xe1s flexible y legible. En este exhaustivo an\xe1lisis, exploraremos en detalle qu\xe9 son los template strings en JavaScript, c\xf3mo funcionan y c\xf3mo se pueden utilizar para crear strings din\xe1micos con variables y expresiones incrustadas. Comprender los template strings es esencial para cualquier desarrollador JavaScript, ya que ofrecen una forma m\xe1s poderosa y conveniente de trabajar con strings en comparaci\xf3n con las comillas simples o dobles convencionales."}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-son-los-template-strings-en-javascript",children:"\xbfQu\xe9 son los Template Strings en JavaScript?"}),"\n",(0,s.jsx)(n.p,{children:"Los template strings son una caracter\xedstica introducida en ECMAScript 6 (tambi\xe9n conocido como ES6) que permite crear strings de una manera m\xe1s flexible y legible. A diferencia de los strings definidos con comillas simples o dobles, los template strings se definen utilizando comillas invertidas (````). Esta sintaxis especial permite incrustar variables y expresiones dentro del string de una manera m\xe1s natural y sencilla."}),"\n",(0,s.jsx)(n.h2,{id:"funcionamiento-de-los-template-strings-en-javascript",children:"Funcionamiento de los Template Strings en JavaScript"}),"\n",(0,s.jsxs)(n.p,{children:["Los template strings en JavaScript funcionan permitiendo la interpolaci\xf3n de variables y expresiones dentro del string utilizando la sintaxis ",(0,s.jsx)(n.code,{children:"${}"}),". Esto significa que las variables y expresiones dentro de ",(0,s.jsx)(n.code,{children:"${}"})," son evaluadas y sus valores se incorporan en el string resultante. A continuaci\xf3n, exploraremos algunos ejemplos para comprender mejor c\xf3mo funcionan los template strings en JavaScript:"]}),"\n",(0,s.jsx)(n.h3,{id:"1-interpolaci\xf3n-de-variables",children:"1. Interpolaci\xf3n de Variables"}),"\n",(0,s.jsx)(n.p,{children:"Los template strings permiten incrustar variables dentro del string de una manera m\xe1s sencilla y legible que las comillas simples o dobles."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let nombre = "Juan";\r\nlet edad = 30;\r\n\r\n// Utilizando comillas invertidas y la sintaxis ${} para interpolaci\xf3n de variables\r\nlet mensaje = `Hola, mi nombre es ${nombre} y tengo ${edad} a\xf1os.`;\r\n\r\nconsole.log(mensaje); // Imprime: Hola, mi nombre es Juan y tengo 30 a\xf1os.\r\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, las variables ",(0,s.jsx)(n.code,{children:"nombre"})," y ",(0,s.jsx)(n.code,{children:"edad"})," se incrustan dentro del string utilizando la sintaxis ",(0,s.jsx)(n.code,{children:"${}"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"2-evaluaci\xf3n-de-expresiones",children:"2. Evaluaci\xf3n de Expresiones"}),"\n",(0,s.jsx)(n.p,{children:"Adem\xe1s de variables, los template strings tambi\xe9n permiten incrustar expresiones JavaScript dentro del string y evaluarlas."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"let a = 10;\r\nlet b = 5;\r\n\r\n// Utilizando comillas invertidas y la sintaxis ${} para interpolaci\xf3n de expresiones\r\nlet resultado = `El resultado de ${a} + ${b} es ${a + b}`;\r\n\r\nconsole.log(resultado); // Imprime: El resultado de 10 + 5 es 15\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, la expresi\xf3n ",(0,s.jsx)(n.code,{children:"${a + b}"})," se eval\xfaa y su resultado se incrusta dentro del string resultante."]}),"\n",(0,s.jsx)(n.h3,{id:"3-multil\xednea",children:"3. Multil\xednea"}),"\n",(0,s.jsx)(n.p,{children:"Los template strings tambi\xe9n permiten la creaci\xf3n de strings multil\xednea de una manera m\xe1s f\xe1cil que las comillas simples o dobles."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Utilizando comillas invertidas para crear un string multil\xednea\r\nlet poema = `\r\n    En un lugar de la Mancha, de cuyo nombre no quiero acordarme,\r\n    no ha mucho tiempo que viv\xeda un hidalgo de los de lanza en astillero,\r\n    adarga antigua, roc\xedn flaco y galgo corredor.\r\n`;\r\n\r\nconsole.log(poema);\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, el string ",(0,s.jsx)(n.code,{children:"poema"})," se define utilizando comillas invertidas y abarca varias l\xedneas sin necesidad de concatenaci\xf3n."]}),"\n",(0,s.jsx)(n.h3,{id:"4-incrustaci\xf3n-de-html",children:"4. Incrustaci\xf3n de HTML"}),"\n",(0,s.jsx)(n.p,{children:"Los template strings tambi\xe9n son \xfatiles para la generaci\xf3n din\xe1mica de HTML en aplicaciones web."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let producto = {\r\n            nombre: "Camisa",\r\n            precio: 20,\r\n            imagen: "<https://via.placeholder.com/200x200>" // URL de la imagen del producto\r\n        };\r\n\r\n        // Utilizando template strings para generar la tarjeta de producto\r\n        let html = `\r\n            <div class="card">\r\n                <img src="${producto.imagen}" alt="${producto.nombre}">\r\n                <h2>${producto.nombre}</h2>\r\n                <p class="precio">Precio: $${producto.precio}</p>\r\n                <button>Agregar al carrito</button>\r\n            </div>\r\n        `;\r\n\r\n        // Esperando a que el DOM est\xe9 cargado completamente antes de ejecutar el script\r\n        document.addEventListener("DOMContentLoaded", function() {\r\n            document.getElementById("contenedor").innerHTML = html;\r\n        });\r\n\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="es">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>Tienda Online</title>\r\n</head>\r\n<body>\r\n    <div id="contenedor"></div>\r\n</body>\r\n</html>\r\n\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:" .card {\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            padding: 20px;\r\n            width: 200px;\r\n            margin: 20px;\r\n            display: inline-block;\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .card img {\r\n            width: 100%;\r\n            border-radius: 5px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .card h2 {\r\n            font-size: 18px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .card p {\r\n            margin: 0;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .precio {\r\n            font-weight: bold;\r\n            color: #007bff;\r\n        }\r\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"En este ejemplo, se utiliza un template string para generar din\xe1micamente HTML que muestra informaci\xf3n sobre un producto."}),"\n",(0,s.jsx)(n.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,s.jsxs)(n.p,{children:["En conclusi\xf3n, los template strings en JavaScript ofrecen una forma m\xe1s flexible y legible de trabajar con strings al permitir la interpolaci\xf3n de variables y expresiones dentro del string utilizando la sintaxis ",(0,s.jsx)(n.code,{children:"${}"}),". Esto los hace especialmente \xfatiles para la generaci\xf3n de strings din\xe1micos, la creaci\xf3n de strings multil\xednea y la generaci\xf3n de HTML en aplicaciones web. Al comprender c\xf3mo funcionan los template strings y c\xf3mo se pueden utilizar de manera efectiva, los desarrolladores JavaScript pueden escribir c\xf3digo m\xe1s limpio, legible y mantenible. Con su sintaxis intuitiva y poderosa, los template strings son una herramienta invaluable en el arsenal de cualquier desarrollador JavaScript."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);