"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[6264],{1430:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"js/asincronia/promesas","title":"Promesas","description":"\ud83d\udfe2 \xbfQu\xe9 es una Promesa?","source":"@site/docs/js/asincronia/promesas.md","sourceDirName":"js/asincronia","slug":"/js/asincronia/promesas","permalink":"/docuQuest/docs/js/asincronia/promesas","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/asincronia/promesas.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Callbacks","permalink":"/docuQuest/docs/js/asincronia/callbacks"},"next":{"title":"Async/Await","permalink":"/docuQuest/docs/js/asincronia/asyncAwait"}}');var o=n(4848),r=n(8453);const l={},c="Promesas",i={},d=[{value:"\ud83d\udfe2 \xbfQu\xe9 es una Promesa?",id:"-qu\xe9-es-una-promesa",level:2},{value:"\ud83e\uddf1 Estados de una Promesa",id:"-estados-de-una-promesa",level:2},{value:"\u2705 Ejemplo real: Simular una tarea que tarda un poco",id:"-ejemplo-real-simular-una-tarea-que-tarda-un-poco",level:2},{value:"\ud83d\udd0d Explicaci\xf3n l\xednea por l\xednea",id:"-explicaci\xf3n-l\xednea-por-l\xednea",level:3},{value:"\ud83d\udfe2 Ventajas sobre los callbacks",id:"-ventajas-sobre-los-callbacks",level:2},{value:"Creaci\xf3n de Promesas",id:"creaci\xf3n-de-promesas",level:2},{value:"\u2705 Ejemplo real: Simular un pedido de comida",id:"-ejemplo-real-simular-un-pedido-de-comida",level:2},{value:"\ud83d\udd0d Explicaci\xf3n",id:"-explicaci\xf3n",level:3},{value:"2. Estados de una Promesa",id:"2-estados-de-una-promesa",level:2},{value:"1. <code>pending</code> (pendiente)",id:"1-pending-pendiente",level:3},{value:"\u2705 Ejemplo real de promesa en estado <code>pending</code> (pendiente)",id:"-ejemplo-real-de-promesa-en-estado-pending-pendiente",level:2},{value:"\ud83d\udd0d Resultado esperado en consola:",id:"-resultado-esperado-en-consola",level:3},{value:"2. <code>fulfilled</code> (cumplido)",id:"2-fulfilled-cumplido",level:2},{value:"\u2705 Ejemplo real de promesa en estado <code>fulfilled</code>",id:"-ejemplo-real-de-promesa-en-estado-fulfilled",level:2},{value:"\ud83e\uddea \xbfQu\xe9 se muestra en consola?",id:"-qu\xe9-se-muestra-en-consola",level:3},{value:"3. <code>rejected</code> (rechazado)",id:"3-rejected-rechazado",level:2},{value:"\u274c Ejemplo real de promesa en estado <code>rejected</code>",id:"-ejemplo-real-de-promesa-en-estado-rejected",level:2},{value:"\ud83e\uddea Resultado esperado en consola:",id:"-resultado-esperado-en-consola-1",level:3},{value:"3. M\xe9todos de las Promesas",id:"3-m\xe9todos-de-las-promesas",level:3},{value:"M\xe9todo <code>.then()</code>",id:"m\xe9todo-then",level:3},{value:"\u274c Promesa rechazada manejada con <code>.then(success, error)</code>",id:"-promesa-rechazada-manejada-con-thensuccess-error",level:2},{value:"\ud83e\uddea Resultado en consola:",id:"-resultado-en-consola",level:3},{value:"M\xe9todo <code>.catch()</code>",id:"m\xe9todo-catch",level:3},{value:"\u274c Ejemplo de promesa rechazada con <code>.catch()</code> y comentarios l\xednea por l\xednea",id:"-ejemplo-de-promesa-rechazada-con-catch-y-comentarios-l\xednea-por-l\xednea",level:2},{value:"\ud83e\uddea Resultado en consola:",id:"-resultado-en-consola-1",level:3},{value:"M\xe9todo <code>.finally()</code>",id:"m\xe9todo-finally",level:3},{value:"\ud83d\udd04 Promesa con <code>.finally()</code>, ejemplo comentado l\xednea por l\xednea",id:"-promesa-con-finally-ejemplo-comentado-l\xednea-por-l\xednea",level:2},{value:"\ud83e\uddea Resultado en consola:",id:"-resultado-en-consola-2",level:3},{value:"Uso Avanzado de Promesas",id:"uso-avanzado-de-promesas",level:3},{value:"Encadenamiento de Promesas",id:"encadenamiento-de-promesas",level:3},{value:"Manejo de Errores en Promesas",id:"manejo-de-errores-en-promesas",level:3},{value:"\ud83d\udd0d \xbfQu\xe9 est\xe1 pasando?",id:"-qu\xe9-est\xe1-pasando",level:3},{value:"Patrones Avanzados con Promesas",id:"patrones-avanzados-con-promesas",level:3},{value:"Promesas Paralelas con <code>Promise.all()</code>",id:"promesas-paralelas-con-promiseall",level:3},{value:"Promesas R\xe1pidas con <code>Promise.race()</code>",id:"promesas-r\xe1pidas-con-promiserace",level:3},{value:"\ud83e\udde0 \xbfQu\xe9 hace <code>Promise.race()</code>?",id:"-qu\xe9-hace-promiserace",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"\ud83e\uddea <strong>Ejercicio Pr\xe1ctico: Simulador de Descarga de Archivos con Promesas</strong>",id:"-ejercicio-pr\xe1ctico-simulador-de-descarga-de-archivos-con-promesas",level:2},{value:"\ud83e\udde9 Paso 1: Crear una funci\xf3n <code>descargarArchivo(nombre, tiempo, errorProbable)</code>",id:"-paso-1-crear-una-funci\xf3n-descargararchivonombre-tiempo-errorprobable",level:2},{value:"\u2705 Paso 2: Simular descargas con <code>.then()</code> y <code>.catch()</code>",id:"-paso-2-simular-descargas-con-then-y-catch",level:2},{value:"\ud83d\ude80 <strong>Paso 3A: Descargar m\xfaltiples archivos con <code>Promise.all()</code></strong>",id:"-paso-3a-descargar-m\xfaltiples-archivos-con-promiseall",level:2},{value:"\u26a1 <strong>Paso 3B: Ver cu\xe1l descarga termina primero con <code>Promise.race()</code></strong>",id:"-paso-3b-ver-cu\xe1l-descarga-termina-primero-con-promiserace",level:2},{value:"\ud83d\udea8 Paso 4: Timeout de seguridad con <code>Promise.race()</code>",id:"-paso-4-timeout-de-seguridad-con-promiserace",level:2},{value:"\ud83e\udde0 Objetivo:",id:"-objetivo",level:3},{value:"\u2705 Ejemplo completo y comentado l\xednea por l\xednea:",id:"-ejemplo-completo-y-comentado-l\xednea-por-l\xednea",level:3},{value:"\ud83e\uddea Resultado esperado:",id:"-resultado-esperado",level:3},{value:"\u2705 Paso 5: M\xfaltiples descargas protegidas por un timeout global",id:"-paso-5-m\xfaltiples-descargas-protegidas-por-un-timeout-global",level:2},{value:"\ud83c\udfaf Objetivo:",id:"-objetivo-1",level:3},{value:"\ud83d\udcbb C\xf3digo completo y comentado l\xednea por l\xednea:",id:"-c\xf3digo-completo-y-comentado-l\xednea-por-l\xednea",level:3},{value:"\ud83e\uddea Resultado esperado:",id:"-resultado-esperado-1",level:3},{value:"\u2705 App Visual: Descarga M\xfaltiple con Spinners y Timeout Global",id:"-app-visual-descarga-m\xfaltiple-con-spinners-y-timeout-global",level:2},{value:"\ud83e\uddf1 Archivos usados:",id:"-archivos-usados",level:3},{value:"\ud83d\udcc4 index.html (c\xf3digo completo con comentarios):",id:"-indexhtml-c\xf3digo-completo-con-comentarios",level:3},{value:"\ud83e\uddea Comportamiento esperado:",id:"-comportamiento-esperado",level:3}];function t(e){const a={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"promesas",children:"Promesas"})}),"\n",(0,o.jsx)(a.h2,{id:"-qu\xe9-es-una-promesa",children:"\ud83d\udfe2 \xbfQu\xe9 es una Promesa?"}),"\n",(0,o.jsxs)(a.p,{children:["Una ",(0,o.jsx)(a.strong,{children:"promesa"})," es un objeto en JavaScript que ",(0,o.jsx)(a.strong,{children:"representa el resultado futuro"})," de una operaci\xf3n asincr\xf3nica."]}),"\n",(0,o.jsxs)(a.p,{children:["Es como una ",(0,o.jsx)(a.strong,{children:"promesa real"}),": algo que ",(0,o.jsx)(a.strong,{children:"todav\xeda no ha pasado"}),", pero que ",(0,o.jsx)(a.strong,{children:"puede cumplirse o fallar"})," m\xe1s adelante."]}),"\n",(0,o.jsxs)(a.blockquote,{children:["\n",(0,o.jsx)(a.p,{children:"\ud83d\udd01 Las promesas permiten escribir c\xf3digo asincr\xf3nico de forma m\xe1s ordenada y legible que los callbacks anidados."}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"-estados-de-una-promesa",children:"\ud83e\uddf1 Estados de una Promesa"}),"\n",(0,o.jsxs)(a.p,{children:["Una promesa puede estar en ",(0,o.jsx)(a.strong,{children:"tres estados"}),":"]}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Pending (pendiente)"})," \u2013 A\xfan no se ha resuelto ni rechazado."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Fulfilled (cumplida)"})," \u2013 La operaci\xf3n se complet\xf3 con \xe9xito."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Rejected (rechazada)"})," \u2013 La operaci\xf3n fall\xf3 por alg\xfan motivo."]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"-ejemplo-real-simular-una-tarea-que-tarda-un-poco",children:"\u2705 Ejemplo real: Simular una tarea que tarda un poco"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Creamos una promesa que simula una operaci\xf3n asincr\xf3nica\nconst tareaLenta = new Promise((resolve, reject) => {\n  console.log("\u23f3 Iniciando tarea...");\n\n  setTimeout(() => {\n    const exito = Math.random() > 0.3; // 70% de probabilidad de \xe9xito\n\n    if (exito) {\n      resolve("\ud83c\udf89 Tarea completada con \xe9xito");\n    } else {\n      reject("\ud83d\udca5 Algo sali\xf3 mal");\n    }\n  }, 2000); // Simula un retardo de 2 segundos\n});\n\n// Manejo de la promesa con .then() y .catch()\ntareaLenta\n  .then(resultado => {\n    console.log("\u2705 Resultado:", resultado);\n  })\n  .catch(error => {\n    console.error("\u274c Error:", error);\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-explicaci\xf3n-l\xednea-por-l\xednea",children:"\ud83d\udd0d Explicaci\xf3n l\xednea por l\xednea"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"new Promise((resolve, reject) => { ... })"}),": creamos una promesa. Dentro definimos qu\xe9 pasar\xe1 si ",(0,o.jsx)(a.strong,{children:"se resuelve"})," o si ",(0,o.jsx)(a.strong,{children:"falla"}),"."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"setTimeout(...)"}),": simulamos una tarea que tarda 2 segundos (como una petici\xf3n a una API)."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"resolve(...)"}),": indica que la promesa se cumpli\xf3 (fulfilled)."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"reject(...)"}),": indica que la promesa fall\xf3 (rejected)."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:".then(...)"}),": se ejecuta cuando la promesa se cumple."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:".catch(...)"}),": se ejecuta cuando la promesa falla."]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"-ventajas-sobre-los-callbacks",children:"\ud83d\udfe2 Ventajas sobre los callbacks"}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Callbacks"}),(0,o.jsx)(a.th,{children:"Promesas"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:"Pueden anidarse mal"}),(0,o.jsx)(a.td,{children:"Encadenamiento ordenado"})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:"Dif\xedcil manejo de errores"}),(0,o.jsxs)(a.td,{children:[(0,o.jsx)(a.code,{children:".catch()"})," centraliza errores"]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:"No controlan estado"}),(0,o.jsx)(a.td,{children:"Las promesas tienen estado"})]})]})]}),"\n",(0,o.jsx)(a.h2,{id:"creaci\xf3n-de-promesas",children:"Creaci\xf3n de Promesas"}),"\n",(0,o.jsxs)(a.p,{children:["Para crear una promesa, se utiliza el constructor ",(0,o.jsx)(a.code,{children:"Promise"}),", que toma una funci\xf3n ejecutora (executor) como argumento. Esta funci\xf3n ejecutora recibe dos par\xe1metros: ",(0,o.jsx)(a.code,{children:"resolve"})," y ",(0,o.jsx)(a.code,{children:"reject"}),". La funci\xf3n ",(0,o.jsx)(a.code,{children:"resolve"})," se llama cuando la operaci\xf3n asincr\xf3nica se completa con \xe9xito, mientras que ",(0,o.jsx)(a.code,{children:"reject"})," se llama cuando ocurre un error."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo de creaci\xf3n de una promesa:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'const miPromesa = new Promise((resolve, reject) => {\n  let operacionExitosa = true; // Simulaci\xf3n de una operaci\xf3n asincr\xf3nica\n\n  if (operacionExitosa) {\n    resolve("Operaci\xf3n completada con \xe9xito");\n  } else {\n    reject("Ocurri\xf3 un error");\n  }\n});\n\n'})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, ",(0,o.jsx)(a.code,{children:"miPromesa"})," es una promesa que se resolver\xe1 con \xe9xito si ",(0,o.jsx)(a.code,{children:"operacionExitosa"})," es ",(0,o.jsx)(a.code,{children:"true"}),", o se rechazar\xe1 con un error si ",(0,o.jsx)(a.code,{children:"operacionExitosa"})," es ",(0,o.jsx)(a.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(a.h2,{id:"-ejemplo-real-simular-un-pedido-de-comida",children:"\u2705 Ejemplo real: Simular un pedido de comida"}),"\n",(0,o.jsxs)(a.p,{children:["Vamos a crear una funci\xf3n que simula pedir una pizza a domicilio. Tarda 2 segundos y puede ",(0,o.jsx)(a.strong,{children:"tener \xe9xito"})," o ",(0,o.jsx)(a.strong,{children:"fallar"}),"."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'function pedirPizza() {\n  return new Promise((resolve, reject) => {\n    console.log("\ud83c\udf55 Pedido recibido, preparando pizza...");\n\n    setTimeout(() => {\n      const exito = Math.random() > 0.2; // 80% de probabilidad de \xe9xito\n\n      if (exito) {\n        resolve("\u2705 \xa1Tu pizza est\xe1 lista!");\n      } else {\n        reject("\u274c Lo sentimos, no quedan ingredientes.");\n      }\n    }, 2000);\n  });\n}\n\n// Usamos la promesa\npedirPizza()\n  .then(mensaje => {\n    console.log(mensaje); // Se ejecuta si todo va bien\n  })\n  .catch(error => {\n    console.error(error); // Se ejecuta si algo falla\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-explicaci\xf3n",children:"\ud83d\udd0d Explicaci\xf3n"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"function pedirPizza() {\n  return new Promise((resolve, reject) => {\n\n"})}),"\n",(0,o.jsxs)(a.p,{children:["\ud83e\uddf1 Creamos una funci\xf3n que retorna una promesa. Dentro tenemos dos funciones: ",(0,o.jsx)(a.code,{children:"resolve"})," (si todo va bien) y ",(0,o.jsx)(a.code,{children:"reject"})," (si algo falla)."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'    console.log("\ud83c\udf55 Pedido recibido, preparando pizza...");\n\n'})}),"\n",(0,o.jsx)(a.p,{children:"\ud83d\udda8\ufe0f Mensaje para mostrar que el pedido comenz\xf3."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"    setTimeout(() => {\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"\u23f3 Simula que la tarea toma 2 segundos (como un pedido real)."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"      const exito = Math.random() > 0.2;\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"\ud83c\udfb2 Usamos un valor aleatorio para decidir si el pedido fue exitoso (80% de probabilidad)."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'      if (exito) {\n        resolve("\u2705 \xa1Tu pizza est\xe1 lista!");\n\n'})}),"\n",(0,o.jsxs)(a.p,{children:["\u2705 Si hay \xe9xito, llamamos a ",(0,o.jsx)(a.code,{children:"resolve"})," con el mensaje."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'      } else {\n        reject("\u274c Lo sentimos, no quedan ingredientes.");\n      }\n\n'})}),"\n",(0,o.jsxs)(a.p,{children:["\u274c Si falla, llamamos a ",(0,o.jsx)(a.code,{children:"reject"}),"."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"    }, 2000);\n  });\n}\n\n"})}),"\n",(0,o.jsxs)(a.p,{children:["\u23f1\ufe0f Terminamos el ",(0,o.jsx)(a.code,{children:"setTimeout"})," y cerramos la promesa."]}),"\n",(0,o.jsx)(a.h2,{id:"2-estados-de-una-promesa",children:"2. Estados de una Promesa"}),"\n",(0,o.jsx)(a.p,{children:"Las promesas pueden estar en uno de los siguientes estados:"}),"\n",(0,o.jsxs)(a.h3,{id:"1-pending-pendiente",children:["1. ",(0,o.jsx)(a.code,{children:"pending"})," (pendiente)"]}),"\n",(0,o.jsx)(a.p,{children:"Este es el estado inicial de una promesa. En este estado, la promesa ni se ha cumplido ni se ha rechazado. Est\xe1 esperando a que la operaci\xf3n asincr\xf3nica se complete o falle."}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"const promesaPendiente = new Promise((resolve, reject) => {\n  // La promesa est\xe1 en estado pendiente\n});\n\n"})}),"\n",(0,o.jsxs)(a.h2,{id:"-ejemplo-real-de-promesa-en-estado-pending-pendiente",children:["\u2705 Ejemplo real de promesa en estado ",(0,o.jsx)(a.code,{children:"pending"})," (pendiente)"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n que simula consultar una base de datos\nfunction consultarBaseDeDatos() {\n  return new Promise((resolve, reject) => {\n    // Mostramos un mensaje al comenzar la operaci\xf3n asincr\xf3nica\n    console.log("\ud83d\udd0d Consultando la base de datos...");\n\n    // Simulamos una espera de 3 segundos antes de obtener un resultado\n    setTimeout(() => {\n      // Llamamos a resolve despu\xe9s del tiempo simulado (\xe9xito)\n      resolve("\ud83d\udce6 Resultado: datos encontrados");\n    }, 3000); // Tiempo en milisegundos (3 segundos)\n  });\n}\n\n// Llamamos a la funci\xf3n que devuelve una promesa\nconst promesa = consultarBaseDeDatos();\n\n// En este punto la promesa est\xe1 en estado "pending" (pendiente)\n// porque a\xfan no se ha cumplido ni rechazado\nconsole.log("\ud83d\udfe1 Estado actual de la promesa:", promesa);\n\n// Registramos lo que debe ocurrir cuando la promesa se cumple\npromesa.then(resultado => {\n  // Esto se ejecuta cuando se llama a resolve()\n  console.log("\u2705 Promesa cumplida:", resultado);\n});\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-esperado-en-consola",children:"\ud83d\udd0d Resultado esperado en consola:"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"Inmediatamente:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0d Consultando la base de datos...\n\ud83d\udfe1 Estado actual de la promesa: Promise {<pending>}\n\n"})}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"Tres segundos despu\xe9s:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\u2705 Promesa cumplida: \ud83d\udce6 Resultado: datos encontrados\n\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(a.h2,{id:"2-fulfilled-cumplido",children:["2. ",(0,o.jsx)(a.code,{children:"fulfilled"})," (cumplido)"]}),"\n",(0,o.jsxs)(a.p,{children:["Una promesa pasa a este estado cuando la operaci\xf3n asincr\xf3nica se completa con \xe9xito y se llama a la funci\xf3n ",(0,o.jsx)(a.code,{children:"resolve"}),". En este estado, la promesa devuelve un valor que puede ser manejado por el m\xe9todo ",(0,o.jsx)(a.code,{children:".then()"}),"."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'const promesaCumplida = new Promise((resolve, reject) => {\n  resolve("Operaci\xf3n exitosa");\n});\n\n'})}),"\n",(0,o.jsxs)(a.h2,{id:"-ejemplo-real-de-promesa-en-estado-fulfilled",children:["\u2705 Ejemplo real de promesa en estado ",(0,o.jsx)(a.code,{children:"fulfilled"})]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n que simula verificar el stock de un producto\nfunction verificarStock(producto) {\n  return new Promise((resolve, reject) => {\n    // Mostramos un mensaje indicando el inicio del proceso\n    console.log(`\ud83d\udd0e Verificando stock para: ${producto}...`);\n\n    // Simulamos una consulta que tarda 2 segundos\n    setTimeout(() => {\n      const productosDisponibles = ["camiseta", "zapatillas", "gorra"];\n\n      // Si el producto est\xe1 en la lista, lo damos por disponible\n      if (productosDisponibles.includes(producto)) {\n        // Se resuelve la promesa exitosamente (fulfilled)\n        resolve(`\u2705 Stock disponible para ${producto}`);\n      } else {\n        // En caso contrario, se rechaza (veremos esto luego)\n        reject(`\u274c No hay stock de ${producto}`);\n      }\n    }, 2000); // Simulamos una espera de 2 segundos\n  });\n}\n\n// Llamamos a la funci\xf3n con un producto que s\xed existe\nconst promesa = verificarStock("zapatillas");\n\n// En este momento, la promesa est\xe1 en estado "pending"\n// pero luego pasar\xe1 a "fulfilled" porque el producto s\xed existe\nconsole.log("\ud83d\udfe1 Estado inicial de la promesa:", promesa);\n\n// Manejamos el resultado exitoso con .then()\npromesa.then(resultado => {\n  // Esta funci\xf3n se ejecuta si la promesa se resuelve (fulfilled)\n  console.log("\ud83c\udf89 Promesa cumplida:", resultado);\n});\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-qu\xe9-se-muestra-en-consola",children:"\ud83e\uddea \xbfQu\xe9 se muestra en consola?"}),"\n",(0,o.jsx)(a.p,{children:"Inmediatamente:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0e Verificando stock para: zapatillas...\n\ud83d\udfe1 Estado inicial de la promesa: Promise {<pending>}\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"Dos segundos despu\xe9s:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83c\udf89 Promesa cumplida: \u2705 Stock disponible para zapatillas\n\n"})}),"\n",(0,o.jsxs)(a.h2,{id:"3-rejected-rechazado",children:["3. ",(0,o.jsx)(a.code,{children:"rejected"})," (rechazado)"]}),"\n",(0,o.jsxs)(a.p,{children:["Una promesa entra en este estado cuando la operaci\xf3n asincr\xf3nica falla y se llama a la funci\xf3n ",(0,o.jsx)(a.code,{children:"reject"}),". En este estado, la promesa devuelve un motivo de rechazo que puede ser manejado por el m\xe9todo ",(0,o.jsx)(a.code,{children:".catch()"}),"."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'const promesaRechazada = new Promise((resolve, reject) => {\n  reject("Ocurri\xf3 un error");\n});\n\n'})}),"\n",(0,o.jsxs)(a.h2,{id:"-ejemplo-real-de-promesa-en-estado-rejected",children:["\u274c Ejemplo real de promesa en estado ",(0,o.jsx)(a.code,{children:"rejected"})]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n que simula verificar el stock de un producto\nfunction verificarStock(producto) {\n  return new Promise((resolve, reject) => {\n    // Mostramos un mensaje indicando el inicio de la verificaci\xf3n\n    console.log(`\ud83d\udd0e Verificando stock para: ${producto}...`);\n\n    // Simulamos una operaci\xf3n asincr\xf3nica con retraso\n    setTimeout(() => {\n      const productosDisponibles = ["camiseta", "zapatillas", "gorra"];\n\n      // Si el producto est\xe1 en la lista, resolvemos la promesa\n      if (productosDisponibles.includes(producto)) {\n        resolve(`\u2705 Stock disponible para ${producto}`);\n      } else {\n        // Si no est\xe1 disponible, rechazamos la promesa (rejected)\n        reject(`\u274c No hay stock disponible para ${producto}`);\n      }\n    }, 2000); // Espera simulada de 2 segundos\n  });\n}\n\n// Llamamos a la funci\xf3n con un producto que NO est\xe1 en stock\nconst promesa = verificarStock("pantal\xf3n");\n\n// La promesa est\xe1 inicialmente en estado "pending"\nconsole.log("\ud83d\udfe1 Estado inicial de la promesa:", promesa);\n\n// Manejamos el resultado exitoso con .then()\npromesa\n  .then(resultado => {\n    // Esto se ejecutar\xeda si la promesa se resolviera (no ser\xe1 el caso aqu\xed)\n    console.log("\ud83c\udf89 Promesa cumplida:", resultado);\n  })\n  .catch(error => {\n    // Esto se ejecuta cuando la promesa es rechazada (rejected)\n    console.log("\ud83d\udea8 Promesa rechazada:", error);\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-esperado-en-consola-1",children:"\ud83e\uddea Resultado esperado en consola:"}),"\n",(0,o.jsx)(a.p,{children:"Inmediatamente:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0e Verificando stock para: pantal\xf3n...\n\ud83d\udfe1 Estado inicial de la promesa: Promise {<pending>}\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"Dos segundos despu\xe9s:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udea8 Promesa rechazada: \u274c No hay stock disponible para pantal\xf3n\n\n"})}),"\n",(0,o.jsx)(a.h3,{id:"3-m\xe9todos-de-las-promesas",children:"3. M\xe9todos de las Promesas"}),"\n",(0,o.jsxs)(a.p,{children:["Las promesas en JavaScript vienen con varios m\xe9todos integrados que permiten manejar sus estados y resultados de manera eficiente. Los m\xe1s importantes son ",(0,o.jsx)(a.code,{children:".then()"}),", ",(0,o.jsx)(a.code,{children:".catch()"}),", y ",(0,o.jsx)(a.code,{children:".finally()"}),"."]}),"\n",(0,o.jsxs)(a.h3,{id:"m\xe9todo-then",children:["M\xe9todo ",(0,o.jsx)(a.code,{children:".then()"})]}),"\n",(0,o.jsxs)(a.p,{children:["El m\xe9todo ",(0,o.jsx)(a.code,{children:".then()"})," se ejecuta cuando la promesa se cumple. Toma hasta dos argumentos: una funci\xf3n que se ejecutar\xe1 si la promesa se resuelve correctamente, y una funci\xf3n opcional que se ejecutar\xe1 si la promesa se rechaza."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Sintaxis:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"promesa.then(onFulfilled, onRejected);\n\n"})}),"\n",(0,o.jsxs)(a.h2,{id:"-promesa-rechazada-manejada-con-thensuccess-error",children:["\u274c Promesa rechazada manejada con ",(0,o.jsx)(a.code,{children:".then(success, error)"})]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n que simula verificar el stock de un producto\nfunction verificarStock(producto) {\n  return new Promise((resolve, reject) => {\n    // Mostramos un mensaje indicando que comienza la verificaci\xf3n\n    console.log(`\ud83d\udd0e Verificando stock para: ${producto}...`);\n\n    // Simulamos una espera de 2 segundos\n    setTimeout(() => {\n      const productosDisponibles = ["camiseta", "zapatillas", "gorra"];\n\n      // Si el producto existe, resolvemos la promesa\n      if (productosDisponibles.includes(producto)) {\n        resolve(`\u2705 Stock disponible para ${producto}`);\n      } else {\n        // Si no existe, rechazamos la promesa\n        reject(`\u274c No hay stock disponible para ${producto}`);\n      }\n    }, 2000);\n  });\n}\n\n// Llamamos a la funci\xf3n con un producto que NO est\xe1 en la lista\nconst promesa = verificarStock("pantal\xf3n");\n\n// Estado inicial: pending\nconsole.log("\ud83d\udfe1 Estado inicial de la promesa:", promesa);\n\n// Usamos .then() con dos funciones:\n// 1. Primera funci\xf3n \u2192 se ejecuta si la promesa se resuelve (fulfilled)\n// 2. Segunda funci\xf3n \u2192 se ejecuta si la promesa es rechazada (rejected)\npromesa.then(\n  resultado => {\n    // \xc9xito (no se ejecutar\xe1 en este caso)\n    console.log("\ud83c\udf89 Promesa cumplida:", resultado);\n  },\n  error => {\n    // Error (esto s\xed se ejecutar\xe1)\n    console.log("\ud83d\udea8 Promesa rechazada:", error);\n  }\n);\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-en-consola",children:"\ud83e\uddea Resultado en consola:"}),"\n",(0,o.jsx)(a.p,{children:"Inmediatamente:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0e Verificando stock para: pantal\xf3n...\n\ud83d\udfe1 Estado inicial de la promesa: Promise {<pending>}\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"Dos segundos despu\xe9s:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udea8 Promesa rechazada: \u274c No hay stock disponible para pantal\xf3n\n\n"})}),"\n",(0,o.jsxs)(a.p,{children:["\u2705 Este m\xe9todo funciona, pero hoy en d\xeda es ",(0,o.jsxs)(a.strong,{children:["m\xe1s limpio usar ",(0,o.jsx)(a.code,{children:".catch()"})," separado"]}),", porque separa claramente el flujo de \xe9xito y el de error, especialmente en c\xf3digo encadenado o largo."]}),"\n",(0,o.jsxs)(a.p,{children:["\xbfQuieres ahora ver c\xf3mo encadenar varios ",(0,o.jsx)(a.code,{children:".then()"})," o un ejemplo real con ",(0,o.jsx)(a.code,{children:".finally()"}),"?"]}),"\n",(0,o.jsxs)(a.h3,{id:"m\xe9todo-catch",children:["M\xe9todo ",(0,o.jsx)(a.code,{children:".catch()"})]}),"\n",(0,o.jsxs)(a.p,{children:["El m\xe9todo ",(0,o.jsx)(a.code,{children:".catch()"})," se ejecuta cuando la promesa se rechaza. Es un atajo para ",(0,o.jsx)(a.code,{children:".then(null, onRejected)"}),", proporcionando una forma m\xe1s clara y concisa de manejar errores."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Sintaxis:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"promesa.catch(onRejected);\n\n"})}),"\n",(0,o.jsxs)(a.h2,{id:"-ejemplo-de-promesa-rechazada-con-catch-y-comentarios-l\xednea-por-l\xednea",children:["\u274c Ejemplo de promesa rechazada con ",(0,o.jsx)(a.code,{children:".catch()"})," y comentarios l\xednea por l\xednea"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n que simula verificar el stock de un producto\nfunction verificarStock(producto) {\n  return new Promise((resolve, reject) => {\n    // Mostramos que estamos iniciando la verificaci\xf3n\n    console.log(`\ud83d\udd0e Verificando stock para: ${producto}...`);\n\n    // Simulamos una espera asincr\xf3nica de 2 segundos\n    setTimeout(() => {\n      const productosDisponibles = ["camiseta", "zapatillas", "gorra"];\n\n      // Si el producto est\xe1 disponible, resolvemos la promesa\n      if (productosDisponibles.includes(producto)) {\n        resolve(`\u2705 Stock disponible para ${producto}`);\n      } else {\n        // Si no est\xe1 disponible, rechazamos la promesa con un mensaje de error\n        reject(`\u274c No hay stock disponible para ${producto}`);\n      }\n    }, 2000); // Tiempo de espera simulado\n  });\n}\n\n// Solicitamos un producto que NO est\xe1 en la lista (provocar\xe1 un error)\nconst promesa = verificarStock("pantal\xf3n");\n\n// Estado inicial de la promesa es "pending"\nconsole.log("\ud83d\udfe1 Estado inicial de la promesa:", promesa);\n\n// Usamos .then() para manejar el \xe9xito\npromesa\n  .then(resultado => {\n    // Este bloque se ejecutar\xeda si la promesa se resuelve correctamente\n    console.log("\ud83c\udf89 Promesa cumplida:", resultado);\n  })\n  .catch(error => {\n    // Este bloque se ejecuta si la promesa es rechazada (rejected)\n    console.log("\ud83d\udea8 Promesa rechazada:", error);\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-en-consola-1",children:"\ud83e\uddea Resultado en consola:"}),"\n",(0,o.jsx)(a.p,{children:"Al ejecutar el script, ver\xe1s:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0e Verificando stock para: pantal\xf3n...\n\ud83d\udfe1 Estado inicial de la promesa: Promise {<pending>}\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"Despu\xe9s de 2 segundos:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udea8 Promesa rechazada: \u274c No hay stock disponible para pantal\xf3n\n\n"})}),"\n",(0,o.jsxs)(a.h3,{id:"m\xe9todo-finally",children:["M\xe9todo ",(0,o.jsx)(a.code,{children:".finally()"})]}),"\n",(0,o.jsxs)(a.p,{children:["El m\xe9todo ",(0,o.jsx)(a.code,{children:".finally()"})," se ejecuta independientemente de si la promesa se cumple o se rechaza. Es \xfatil para realizar acciones de limpieza o finalizar tareas que deben ejecutarse en cualquier caso."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Sintaxis:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"promesa.finally(onFinally);\n\n"})}),"\n",(0,o.jsxs)(a.h2,{id:"-promesa-con-finally-ejemplo-comentado-l\xednea-por-l\xednea",children:["\ud83d\udd04 Promesa con ",(0,o.jsx)(a.code,{children:".finally()"}),", ejemplo comentado l\xednea por l\xednea"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n que simula verificar el stock de un producto\nfunction verificarStock(producto) {\n  return new Promise((resolve, reject) => {\n    // Mostramos que empieza el proceso\n    console.log(`\ud83d\udd0e Verificando stock para: ${producto}...`);\n\n    // Simulamos un retraso asincr\xf3nico (como si fuera una consulta de red)\n    setTimeout(() => {\n      const productosDisponibles = ["camiseta", "zapatillas", "gorra"];\n\n      // Verificamos si el producto existe en stock\n      if (productosDisponibles.includes(producto)) {\n        resolve(`\u2705 Stock disponible para ${producto}`);\n      } else {\n        reject(`\u274c No hay stock disponible para ${producto}`);\n      }\n    }, 2000); // Espera de 2 segundos simulada\n  });\n}\n\n// Pedimos un producto que NO est\xe1 en la lista, as\xed la promesa ser\xe1 rechazada\nverificarStock("pantal\xf3n")\n  .then(resultado => {\n    // Se ejecuta si la promesa se resuelve correctamente\n    console.log("\ud83c\udf89 Resultado:", resultado);\n  })\n  .catch(error => {\n    // Se ejecuta si la promesa es rechazada\n    console.log("\ud83d\udea8 Error:", error);\n  })\n  .finally(() => {\n    // Este bloque se ejecuta siempre, sin importar el resultado de la promesa\n    console.log("\ud83d\udce6 Verificaci\xf3n finalizada.");\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-en-consola-2",children:"\ud83e\uddea Resultado en consola:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0e Verificando stock para: pantal\xf3n...\n\ud83d\udea8 Error: \u274c No hay stock disponible para pantal\xf3n\n\ud83d\udce6 Verificaci\xf3n finalizada.\n\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Si pruebas con ",(0,o.jsx)(a.code,{children:'"gorra"'})," (que s\xed est\xe1 disponible), ver\xe1s:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"\ud83d\udd0e Verificando stock para: gorra...\n\ud83c\udf89 Resultado: \u2705 Stock disponible para gorra\n\ud83d\udce6 Verificaci\xf3n finalizada.\n\n"})}),"\n",(0,o.jsx)(a.h3,{id:"uso-avanzado-de-promesas",children:"Uso Avanzado de Promesas"}),"\n",(0,o.jsx)(a.h3,{id:"encadenamiento-de-promesas",children:"Encadenamiento de Promesas"}),"\n",(0,o.jsxs)(a.p,{children:["Una de las caracter\xedsticas m\xe1s poderosas de las promesas es su capacidad para encadenar m\xfaltiples operaciones asincr\xf3nicas de manera secuencial. Esto se logra devolviendo una nueva promesa en el m\xe9todo ",(0,o.jsx)(a.code,{children:".then()"}),", permitiendo que las operaciones se ejecuten una tras otra."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo de encadenamiento:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// \ud83d\udd27 Funci\xf3n que devuelve una promesa para obtener datos desde una URL\nfunction obtenerDatos(url) {\nreturn new Promise((resolve, reject) => {\n// Creamos un nuevo objeto XMLHttpRequest para hacer una petici\xf3n HTTP\nconst xhr = new XMLHttpRequest();\n\n// Abrimos una petici\xf3n GET a la URL especificada\nxhr.open("GET", url);\n\n// Cuando la respuesta ha sido cargada completamente\nxhr.onload = () => {\n// Si el estado HTTP es 200 (OK), resolvemos la promesa con la respuesta\nif (xhr.status === 200) {\nresolve(xhr.responseText);\n} else {\n// Si no es 200, rechazamos la promesa con un error que incluye el c\xf3digo de estado\nreject(new Error(`Error: ${xhr.status}`));\n}\n};\n\n// Si ocurre un error de red (no se puede conectar al servidor, por ejemplo)\nxhr.onerror = () => reject(new Error("Error de red"));\n\n// Enviamos la petici\xf3n HTTP\nxhr.send();\n});\n}\n\n// \ud83d\udd01 Encadenamos m\xfaltiples llamadas a obtenerDatos, una despu\xe9s de otra\n\nobtenerDatos("[https://api.example.com/datos1](https://api.example.com/datos1)")\n.then((datos1) => {\n// Cuando se obtienen los datos1, se muestran en consola\nconsole.log("Datos 1 obtenidos:", datos1);\n\n// Luego se hace otra solicitud (datos2)\nreturn obtenerDatos("[https://api.example.com/datos2](https://api.example.com/datos2)");\n})\n.then((datos2) => {\n// Cuando se obtienen los datos2, se muestran en consola\nconsole.log("Datos 2 obtenidos:", datos2);\n\n// Luego se hace otra solicitud (datos3)\nreturn obtenerDatos("[https://api.example.com/datos3](https://api.example.com/datos3)");\n})\n.then((datos3) => {\n// Cuando se obtienen los datos3, se muestran en consola\nconsole.log("Datos 3 obtenidos:", datos3);\n})\n.catch((error) => {\n// Si ocurre alg\xfan error en cualquiera de las solicitudes, se captura aqu\xed\nconsole.error("Error al obtener datos:", error);\n});\n'})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, cada llamada a ",(0,o.jsx)(a.code,{children:"obtenerDatos"})," devuelve una nueva promesa que se encadena en el m\xe9todo ",(0,o.jsx)(a.code,{children:".then()"}),", permitiendo que las operaciones se realicen en secuencia. Si ocurre un error en cualquier punto del encadenamiento, el m\xe9todo ",(0,o.jsx)(a.code,{children:".catch()"})," lo manejar\xe1."]}),"\n",(0,o.jsx)(a.h3,{id:"manejo-de-errores-en-promesas",children:"Manejo de Errores en Promesas"}),"\n",(0,o.jsxs)(a.p,{children:["El manejo adecuado de errores es crucial para aplicaciones robustas. Las promesas ofrecen una forma coherente de manejar errores mediante el m\xe9todo ",(0,o.jsx)(a.code,{children:".catch()"}),". Adem\xe1s, se pueden manejar errores de manera centralizada en el final de un encadenamiento de promesas, lo que simplifica la gesti\xf3n de errores en operaciones complejas."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo de manejo de errores centralizado:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// \ud83d\udd01 Iniciamos una cadena de promesas llamando a obtenerDatos con la primera URL\nobtenerDatos("https://api.example.com/datos1")\n  .then((datos1) => {\n    // \u2705 Si la primera solicitud fue exitosa, mostramos los datos1 por consola\n    console.log("Datos 1 obtenidos:", datos1);\n\n    // \ud83d\udd01 Luego devolvemos una nueva promesa para la segunda solicitud\n    return obtenerDatos("https://api.example.com/datos2");\n  })\n  .then((datos2) => {\n    // \u2705 Si la segunda solicitud fue exitosa, mostramos los datos2 por consola\n    console.log("Datos 2 obtenidos:", datos2);\n\n    // \ud83d\udd01 Luego devolvemos una nueva promesa para la tercera solicitud\n    return obtenerDatos("https://api.example.com/datos3");\n  })\n  .then((datos3) => {\n    // \u2705 Si la tercera solicitud fue exitosa, mostramos los datos3 por consola\n    console.log("Datos 3 obtenidos:", datos3);\n  })\n  .catch((error) => {\n    // \u274c Si ocurre un error en cualquiera de las tres solicitudes, se captura aqu\xed\n    console.error("Error durante la obtenci\xf3n de datos:", error);\n  });\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-qu\xe9-est\xe1-pasando",children:"\ud83d\udd0d \xbfQu\xe9 est\xe1 pasando?"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Cada ",(0,o.jsx)(a.code,{children:".then()"})," espera que el ",(0,o.jsx)(a.code,{children:".then()"})," anterior termine correctamente."]}),"\n",(0,o.jsxs)(a.li,{children:["Si una promesa falla (por ejemplo, si ",(0,o.jsx)(a.code,{children:"obtenerDatos()"})," no puede acceder a la URL), se ",(0,o.jsx)(a.strong,{children:"detiene la cadena"})," y se ejecuta ",(0,o.jsx)(a.code,{children:".catch()"}),"."]}),"\n",(0,o.jsxs)(a.li,{children:["Este patr\xf3n permite manejar m\xfaltiples operaciones asincr\xf3nicas en ",(0,o.jsx)(a.strong,{children:"orden secuencial"}),", sin anidamientos profundos (lo que se conoce como evitar el ",(0,o.jsx)(a.em,{children:"callback hell"}),")."]}),"\n"]}),"\n",(0,o.jsx)(a.h3,{id:"patrones-avanzados-con-promesas",children:"Patrones Avanzados con Promesas"}),"\n",(0,o.jsxs)(a.h3,{id:"promesas-paralelas-con-promiseall",children:["Promesas Paralelas con ",(0,o.jsx)(a.code,{children:"Promise.all()"})]}),"\n",(0,o.jsxs)(a.p,{children:["El m\xe9todo ",(0,o.jsx)(a.code,{children:"Promise.all()"})," permite ejecutar m\xfaltiples promesas en paralelo y esperar a que todas se resuelvan. Esto es \xfatil para realizar operaciones asincr\xf3nicas concurrentes y mejorar el rendimiento."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Sintaxis:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"Promise.all(iterable);\n\n"})}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// \ud83d\udd27 Creamos una promesa para obtener datos desde la URL 1\nconst promesa1 = obtenerDatos("https://api.example.com/datos1");\n\n// \ud83d\udd27 Creamos una segunda promesa para obtener datos desde la URL 2\nconst promesa2 = obtenerDatos("https://api.example.com/datos2");\n\n// \ud83d\udd27 Creamos una tercera promesa para obtener datos desde la URL 3\nconst promesa3 = obtenerDatos("https://api.example.com/datos3");\n\n// \ud83d\udd01 Ejecutamos las tres promesas al mismo tiempo usando Promise.all\nPromise.all([promesa1, promesa2, promesa3])\n  .then((resultados) => {\n    // \u2705 Si todas las promesas se resuelven correctamente,\n    // `resultados` ser\xe1 un array con las respuestas de cada una (en el mismo orden)\n    console.log("Todos los datos obtenidos:", resultados);\n  })\n  .catch((error) => {\n    // \u274c Si alguna de las promesas falla, se ejecuta este bloque\n    // y se interrumpe el resto del procesamiento\n    console.error("Error al obtener datos:", error);\n  });\n'})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, ",(0,o.jsx)(a.code,{children:"Promise.all()"})," toma un array de promesas y devuelve una nueva promesa que se resuelve cuando todas las promesas del array se han resuelto. Si alguna de las promesas se rechaza, ",(0,o.jsx)(a.code,{children:"Promise.all()"})," se rechaza con el motivo de la primera promesa rechazada."]}),"\n",(0,o.jsxs)(a.h3,{id:"promesas-r\xe1pidas-con-promiserace",children:["Promesas R\xe1pidas con ",(0,o.jsx)(a.code,{children:"Promise.race()"})]}),"\n",(0,o.jsxs)(a.p,{children:["El m\xe9todo ",(0,o.jsx)(a.code,{children:"Promise.race()"})," devuelve una promesa que se resuelve o se rechaza tan pronto como una de las promesas en el iterable se resuelva o se rechace. Esto es \xfatil cuando solo te interesa la primera promesa que se complete, independientemente de su resultado."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Sintaxis:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"Promise.race(iterable);\n\n"})}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Ejemplo:"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// \u23f3 Creamos una promesa que se resolver\xe1 despu\xe9s de 2 segundos\nconst promesaLenta = new Promise((resolve) => \n  setTimeout(() => resolve("Lenta"), 2000)\n);\n\n// \u26a1 Creamos otra promesa que se resolver\xe1 m\xe1s r\xe1pido, despu\xe9s de 1 segundo\nconst promesaRapida = new Promise((resolve) => \n  setTimeout(() => resolve("R\xe1pida"), 1000)\n);\n\n// \ud83c\udfc1 Usamos Promise.race para ejecutar ambas promesas y obtener solo la que se resuelva primero\nPromise.race([promesaLenta, promesaRapida])\n  .then((resultado) => {\n    // \u2705 Se ejecuta cuando la promesa m\xe1s r\xe1pida se resuelve primero\n    console.log("Promesa ganadora:", resultado); // Mostrar\xe1: "R\xe1pida"\n  })\n  .catch((error) => {\n    // \u274c Se ejecuta si la promesa ganadora es rechazada\n    console.error("Error:", error);\n  });\n'})}),"\n",(0,o.jsxs)(a.h3,{id:"-qu\xe9-hace-promiserace",children:["\ud83e\udde0 \xbfQu\xe9 hace ",(0,o.jsx)(a.code,{children:"Promise.race()"}),"?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Ejecuta ",(0,o.jsx)(a.strong,{children:"todas"})," las promesas en paralelo."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Devuelve solo la primera que se resuelva o se rechace"}),", ignorando el resto."]}),"\n",(0,o.jsxs)(a.li,{children:["En este caso, ",(0,o.jsx)(a.code,{children:"promesaRapida"})," gana la carrera porque se resuelve en 1 segundo, antes que la lenta."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:["Este patr\xf3n se usa mucho cuando quieres tener un ",(0,o.jsx)(a.strong,{children:"timeout manual"})," o cuando lo \xfanico que te interesa es ",(0,o.jsx)(a.strong,{children:"la primera respuesta disponible"}),", por ejemplo en peticiones a varios servidores espejo (mirrors)."]}),"\n",(0,o.jsx)(a.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,o.jsxs)(a.p,{children:["Las promesas representan un avance significativo en la gesti\xf3n de la asincron\xeda en JavaScript. Proporcionan una estructura m\xe1s manejable y coherente para manejar operaciones asincr\xf3nicas en comparaci\xf3n con los callbacks tradicionales. Al entender los diferentes estados de una promesa y los m\xe9todos asociados como ",(0,o.jsx)(a.code,{children:".then()"}),", ",(0,o.jsx)(a.code,{children:".catch()"}),", y ",(0,o.jsx)(a.code,{children:".finally()"}),", los desarrolladores pueden crear aplicaciones web m\xe1s eficientes, legibles y mantenibles."]}),"\n",(0,o.jsxs)(a.p,{children:["El uso de t\xe9cnicas avanzadas como el encadenamiento de promesas, el manejo centralizado de errores, y la ejecuci\xf3n de promesas en paralelo con ",(0,o.jsx)(a.code,{children:"Promise.all()"})," o en competici\xf3n con ",(0,o.jsx)(a.code,{children:"Promise.race()"}),", permite a los desarrolladores abordar operaciones asincr\xf3nicas complejas de manera efectiva. En resumen, el dominio de las promesas es esencial para cualquier desarrollador de JavaScript que desee crear aplicaciones web modernas y robustas."]}),"\n",(0,o.jsxs)(a.h2,{id:"-ejercicio-pr\xe1ctico-simulador-de-descarga-de-archivos-con-promesas",children:["\ud83e\uddea ",(0,o.jsx)(a.strong,{children:"Ejercicio Pr\xe1ctico: Simulador de Descarga de Archivos con Promesas"})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Objetivo:"})," Simular la descarga de varios archivos usando Promesas, controlando tiempos, errores, y mostrando los resultados en consola. Aprender\xe1s a:"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Crear promesas manualmente"}),"\n",(0,o.jsxs)(a.li,{children:["Usar ",(0,o.jsx)(a.code,{children:".then()"}),", ",(0,o.jsx)(a.code,{children:".catch()"})," y ",(0,o.jsx)(a.code,{children:".finally()"})]}),"\n",(0,o.jsxs)(a.li,{children:["Aplicar ",(0,o.jsx)(a.code,{children:"Promise.all()"})," y ",(0,o.jsx)(a.code,{children:"Promise.race()"})]}),"\n"]}),"\n",(0,o.jsxs)(a.h2,{id:"-paso-1-crear-una-funci\xf3n-descargararchivonombre-tiempo-errorprobable",children:["\ud83e\udde9 Paso 1: Crear una funci\xf3n ",(0,o.jsx)(a.code,{children:"descargarArchivo(nombre, tiempo, errorProbable)"})]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"// \ud83e\uddf1 Funci\xf3n que simula la descarga de un archivo\nfunction descargarArchivo(nombre, tiempo, errorProbable = false) {\n  return new Promise((resolve, reject) => {\n    console.log(`\u23f3 Iniciando descarga de: ${nombre}...`);\n\n    // Simulamos el tiempo que tarda en descargarse\n    setTimeout(() => {\n      if (errorProbable && Math.random() < 0.3) {\n        // \u274c Simulamos un fallo en un 30% de los casos si errorProbable es true\n        reject(`\u274c Error al descargar ${nombre}`);\n      } else {\n        // \u2705 Si todo va bien, resolvemos la promesa con el nombre del archivo\n        resolve(`\u2705 Archivo descargado: ${nombre}`);\n      }\n    }, tiempo);\n  });\n}\n\n"})}),"\n",(0,o.jsxs)(a.h2,{id:"-paso-2-simular-descargas-con-then-y-catch",children:["\u2705 Paso 2: Simular descargas con ",(0,o.jsx)(a.code,{children:".then()"})," y ",(0,o.jsx)(a.code,{children:".catch()"})]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Descargamos un solo archivo usando Promesas b\xe1sicas\ndescargarArchivo("video1.mp4", 2000)\n  .then((mensaje) => {\n    // Si la descarga fue exitosa\n    console.log(mensaje);\n  })\n  .catch((error) => {\n    // Si ocurri\xf3 un error\n    console.error(error);\n  })\n  .finally(() => {\n    // Siempre se ejecuta al final, ocurra o no error\n    console.log("\ud83d\udd1a Descarga finalizada.");\n  });\n\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Continuamos con el ",(0,o.jsx)(a.strong,{children:"Paso 3"}),", donde vamos a descargar m\xfaltiples archivos en paralelo usando ",(0,o.jsx)(a.code,{children:"Promise.all()"})," y ",(0,o.jsx)(a.code,{children:"Promise.race()"}),"."]}),"\n",(0,o.jsxs)(a.h2,{id:"-paso-3a-descargar-m\xfaltiples-archivos-con-promiseall",children:["\ud83d\ude80 ",(0,o.jsxs)(a.strong,{children:["Paso 3A: Descargar m\xfaltiples archivos con ",(0,o.jsx)(a.code,{children:"Promise.all()"})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Objetivo:"})," Esperar a que todos los archivos terminen de descargarse antes de continuar."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Creamos varias promesas de descarga\nconst descarga1 = descargarArchivo("foto1.jpg", 1000);\nconst descarga2 = descargarArchivo("audio1.mp3", 1500);\nconst descarga3 = descargarArchivo("documento.pdf", 2000);\n\n// Usamos Promise.all para esperar a que todas se resuelvan\nPromise.all([descarga1, descarga2, descarga3])\n  .then((resultados) => {\n    // Este bloque se ejecuta si TODAS las promesas fueron resueltas\n    console.log("\ud83d\udce6 Todas las descargas completadas:");\n    resultados.forEach((mensaje) => console.log(mensaje));\n  })\n  .catch((error) => {\n    // Este bloque se ejecuta si ALGUNA de las promesas falla\n    console.error("\ud83d\udea8 Ocurri\xf3 un error durante las descargas:");\n    console.error(error);\n  })\n  .finally(() => {\n    // Siempre se ejecuta al final\n    console.log("\ud83e\uddfe Fin del proceso de descarga.");\n  });\n\n'})}),"\n",(0,o.jsxs)(a.p,{children:["\ud83e\udde0 ",(0,o.jsx)(a.strong,{children:"Nota:"})," Si una sola descarga falla, ",(0,o.jsx)(a.code,{children:"Promise.all()"})," ",(0,o.jsx)(a.strong,{children:"rechaza todo el conjunto"}),"."]}),"\n",(0,o.jsxs)(a.h2,{id:"-paso-3b-ver-cu\xe1l-descarga-termina-primero-con-promiserace",children:["\u26a1 ",(0,o.jsxs)(a.strong,{children:["Paso 3B: Ver cu\xe1l descarga termina primero con ",(0,o.jsx)(a.code,{children:"Promise.race()"})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Objetivo:"})," Obtener el resultado de la primera promesa que se resuelva, sin importar el resto."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Simulamos las mismas descargas\nconst descargaA = descargarArchivo("foto2.jpg", 1000);\nconst descargaB = descargarArchivo("audio2.mp3", 2000);\nconst descargaC = descargarArchivo("documento2.pdf", 3000);\n\n// Usamos Promise.race para saber cu\xe1l se resuelve primero\nPromise.race([descargaA, descargaB, descargaC])\n  .then((ganadora) => {\n    // Solo se obtiene el resultado de la PRIMERA promesa resuelta\n    console.log("\ud83c\udfc1 Descarga m\xe1s r\xe1pida:", ganadora);\n  })\n  .catch((error) => {\n    // Si la primera promesa rechaza, se captura aqu\xed\n    console.error("\ud83d\udca5 Error en la primera descarga:", error);\n  });\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Ahora implementamos un ",(0,o.jsx)(a.strong,{children:"timeout de seguridad"})," usando ",(0,o.jsx)(a.code,{children:"Promise.race()"})," para cancelar la operaci\xf3n si ",(0,o.jsx)(a.strong,{children:"ninguna descarga termina en un tiempo razonable"}),"."]}),"\n",(0,o.jsxs)(a.h2,{id:"-paso-4-timeout-de-seguridad-con-promiserace",children:["\ud83d\udea8 Paso 4: Timeout de seguridad con ",(0,o.jsx)(a.code,{children:"Promise.race()"})]}),"\n",(0,o.jsx)(a.h3,{id:"-objetivo",children:"\ud83e\udde0 Objetivo:"}),"\n",(0,o.jsx)(a.p,{children:"Crear una promesa que rechace autom\xe1ticamente si el tiempo m\xe1ximo (timeout) se agota antes de que cualquier descarga termine. As\xed evitamos que una descarga lenta o colgada bloquee el sistema."}),"\n",(0,o.jsx)(a.h3,{id:"-ejemplo-completo-y-comentado-l\xednea-por-l\xednea",children:"\u2705 Ejemplo completo y comentado l\xednea por l\xednea:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Simulamos una funci\xf3n de descarga lenta\nfunction descargarArchivo(nombre, tiempo) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(`\u2705 ${nombre} descargado en ${tiempo}ms`);\n    }, tiempo);\n  });\n}\n\n// Creamos una promesa de timeout que se rechaza despu\xe9s de cierto tiempo\nfunction crearTimeout(tiempoLimite) {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(`\u23f0 Timeout: no se complet\xf3 en ${tiempoLimite}ms`));\n    }, tiempoLimite);\n  });\n}\n\n// Simulamos una descarga lenta\nconst descargaLenta = descargarArchivo("video_lento.mp4", 5000); // 5 segundos\n\n// Establecemos un timeout de 2 segundos\nconst timeout = crearTimeout(2000); // Se dispara si tarda m\xe1s de 2 segundos\n\n// Usamos Promise.race para quedarnos con lo que ocurra primero\nPromise.race([descargaLenta, timeout])\n  .then((resultado) => {\n    // Si la descarga fue m\xe1s r\xe1pida que el timeout\n    console.log(resultado);\n  })\n  .catch((error) => {\n    // Si el timeout se ejecut\xf3 primero\n    console.error("\u274c Error o timeout:", error.message);\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-esperado",children:"\ud83e\uddea Resultado esperado:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Si la descarga tarda menos de ",(0,o.jsx)(a.code,{children:"2000ms"}),", se muestra el resultado normal."]}),"\n",(0,o.jsxs)(a.li,{children:["Si tarda m\xe1s, el ",(0,o.jsx)(a.code,{children:"timeout"})," gana la carrera y se lanza un error."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:["Vamos a combinar ",(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"Promise.all()"})})," con ",(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"Promise.race()"})})," para lanzar m\xfaltiples descargas en paralelo, pero cancelarlas si ",(0,o.jsx)(a.strong,{children:"todas tardan demasiado tiempo"})," (timeout global)."]}),"\n",(0,o.jsx)(a.h2,{id:"-paso-5-m\xfaltiples-descargas-protegidas-por-un-timeout-global",children:"\u2705 Paso 5: M\xfaltiples descargas protegidas por un timeout global"}),"\n",(0,o.jsx)(a.h3,{id:"-objetivo-1",children:"\ud83c\udfaf Objetivo:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Descargar varios archivos en paralelo."}),"\n",(0,o.jsxs)(a.li,{children:["Cancelar ",(0,o.jsx)(a.strong,{children:"todas"})," las descargas si se demoran m\xe1s del l\xedmite permitido."]}),"\n"]}),"\n",(0,o.jsx)(a.h3,{id:"-c\xf3digo-completo-y-comentado-l\xednea-por-l\xednea",children:"\ud83d\udcbb C\xf3digo completo y comentado l\xednea por l\xednea:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:'// Funci\xf3n simulada para "descargar" un archivo con retraso variable\nfunction descargarArchivo(nombre, tiempo) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(`\u2705 Archivo ${nombre} descargado en ${tiempo}ms`);\n    }, tiempo); // Espera "tiempo" milisegundos\n  });\n}\n\n// Funci\xf3n que crea una promesa que se rechaza si pasa el tiempo l\xedmite\nfunction crearTimeoutGlobal(tiempoLimite) {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(`\u23f0 Timeout global: las descargas tardaron m\xe1s de ${tiempoLimite}ms`));\n    }, tiempoLimite);\n  });\n}\n\n// Creamos m\xfaltiples promesas de descarga con distintos tiempos\nconst promesa1 = descargarArchivo("imagen1.jpg", 1500); // 1.5s\nconst promesa2 = descargarArchivo("video1.mp4", 3000);  // 3s\nconst promesa3 = descargarArchivo("audio1.mp3", 4000);  // 4s\n\n// Agrupamos todas las descargas en Promise.all()\nconst todasLasDescargas = Promise.all([promesa1, promesa2, promesa3]);\n\n// Creamos un timeout global de 3 segundos\nconst timeoutGlobal = crearTimeoutGlobal(3000);\n\n// Usamos Promise.race() para que gane el grupo o el timeout\nPromise.race([todasLasDescargas, timeoutGlobal])\n  .then((resultados) => {\n    console.log("\ud83d\udce6 Todas las descargas completadas con \xe9xito:");\n    resultados.forEach((res) => console.log(res));\n  })\n  .catch((error) => {\n    console.error("\u274c Error en la descarga:", error.message);\n  });\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-resultado-esperado-1",children:"\ud83e\uddea Resultado esperado:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Si ",(0,o.jsx)(a.strong,{children:"todas las descargas"})," terminan antes de 3 segundos \u2192 Se muestra el resultado completo."]}),"\n",(0,o.jsxs)(a.li,{children:["Si ",(0,o.jsx)(a.strong,{children:"alguna descarga tarda demasiado y se excede el tiempo total"}),", se dispara el error de timeout."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:["Vamos a integrar el ejemplo anterior en una versi\xf3n con interfaz visual usando ",(0,o.jsx)(a.strong,{children:"HTML + Bootstrap 5"}),", con ",(0,o.jsx)(a.strong,{children:"spinners individuales por archivo"})," y un mensaje visual de timeout."]}),"\n",(0,o.jsx)(a.h2,{id:"-app-visual-descarga-m\xfaltiple-con-spinners-y-timeout-global",children:"\u2705 App Visual: Descarga M\xfaltiple con Spinners y Timeout Global"}),"\n",(0,o.jsx)(a.h3,{id:"-archivos-usados",children:"\ud83e\uddf1 Archivos usados:"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"index.html"}),": Interfaz visual (con Bootstrap)."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"<script>"}),": C\xf3digo JavaScript embebido con ",(0,o.jsx)(a.code,{children:"Promise.all()"})," + ",(0,o.jsx)(a.code,{children:"Promise.race()"}),"."]}),"\n"]}),"\n",(0,o.jsx)(a.h3,{id:"-indexhtml-c\xf3digo-completo-con-comentarios",children:"\ud83d\udcc4 index.html (c\xf3digo completo con comentarios):"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n<head>\n  <meta charset="UTF-8">\n  <title>Descarga m\xfaltiple con Timeout</title>\n  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">\n</head>\n<body class="bg-dark text-light p-5">\n\n  <div class="container">\n    <h1 class="mb-4">\ud83d\ude80 Descarga de Archivos con Timeout</h1>\n\n    \x3c!-- Contenedor para mostrar estado de cada archivo --\x3e\n    <div id="descargas" class="mb-4">\n      \x3c!-- Aqu\xed se insertar\xe1n din\xe1micamente los estados --\x3e\n    </div>\n\n    \x3c!-- Alerta global de \xe9xito o error --\x3e\n    <div id="alerta" class="alert d-none" role="alert"></div>\n  </div>\n\n  <script>\n    // Lista de archivos a descargar con su tiempo (simulado)\n    const archivos = [\n      { nombre: "imagen1.jpg", tiempo: 1500 },\n      { nombre: "video1.mp4", tiempo: 3000 },\n      { nombre: "audio1.mp3", tiempo: 4000 },\n    ];\n\n    const descargasContainer = document.getElementById("descargas");\n    const alerta = document.getElementById("alerta");\n\n    // Muestra un spinner por cada archivo\n    archivos.forEach(({ nombre }) => {\n      const item = document.createElement("div");\n      item.id = nombre;\n      item.innerHTML = `\n        <div class="mb-2">\n          <strong>${nombre}</strong>\n          <div class="spinner-border text-info spinner-border-sm" role="status"></div>\n          <span class="ms-2">Descargando...</span>\n        </div>\n      `;\n      descargasContainer.appendChild(item);\n    });\n\n    // Simula una descarga con tiempo variable\n    function descargarArchivo(nombre, tiempo) {\n      return new Promise((resolve) => {\n        setTimeout(() => resolve(nombre), tiempo);\n      });\n    }\n\n    // Timeout global\n    function timeoutGlobal(ms) {\n      return new Promise((_, reject) => {\n        setTimeout(() => reject(new Error("\u23f0 Timeout global alcanzado")), ms);\n      });\n    }\n\n    // Ejecutar las descargas\n    const promesas = archivos.map(({ nombre, tiempo }) =>\n      descargarArchivo(nombre, tiempo).then((archivo) => {\n        // Al resolver, actualiza el estado visual del archivo\n        const item = document.getElementById(archivo);\n        item.querySelector(".spinner-border").remove();\n        item.querySelector("span").textContent = `\u2705 ${archivo} descargado`;\n        return archivo;\n      })\n    );\n\n    const todas = Promise.all(promesas);\n    const limite = timeoutGlobal(3500);\n\n    Promise.race([todas, limite])\n      .then(() => {\n        alerta.className = "alert alert-success";\n        alerta.textContent = "\ud83c\udf89 Todas las descargas se completaron a tiempo";\n        alerta.classList.remove("d-none");\n      })\n      .catch((error) => {\n        alerta.className = "alert alert-danger";\n        alerta.textContent = `\u274c ${error.message}`;\n\n        // Cancelar visualmente cualquier spinner que quede activo\n        archivos.forEach(({ nombre }) => {\n          const item = document.getElementById(nombre);\n          if (item.querySelector(".spinner-border")) {\n            item.querySelector(".spinner-border").remove();\n            item.querySelector("span").textContent = "\u26d4 Cancelado por timeout";\n          }\n        });\n\n        alerta.classList.remove("d-none");\n      });\n  <\/script>\n</body>\n</html>\n\n'})}),"\n",(0,o.jsx)(a.h3,{id:"-comportamiento-esperado",children:"\ud83e\uddea Comportamiento esperado:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Cada archivo tiene su ",(0,o.jsx)(a.strong,{children:"spinner"})," mientras se descarga."]}),"\n",(0,o.jsx)(a.li,{children:"Si todos terminan a tiempo \u2192 \u2705 Se muestra alerta verde."}),"\n",(0,o.jsx)(a.li,{children:"Si alguna se retrasa demasiado \u2192 \u26d4 Se muestra alerta roja y se cancelan todas."}),"\n"]})]})}function m(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>c});var s=n(6540);const o={},r=s.createContext(o);function l(e){const a=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);