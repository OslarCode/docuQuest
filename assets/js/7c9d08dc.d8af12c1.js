"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[257],{7924:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"js/dom/manipulacion","title":"Manipulaci\xf3n del DOM","description":"La manipulaci\xf3n del Modelo de Objetos del Documento (DOM) es una habilidad fundamental en el desarrollo web, que permite a los desarrolladores crear, modificar y eliminar elementos en una p\xe1gina web de manera din\xe1mica. La capacidad de interactuar con el DOM de forma program\xe1tica utilizando JavaScript es crucial para crear experiencias de usuario ricas e interactivas. En este texto, exploraremos en profundidad las principales t\xe9cnicas de manipulaci\xf3n del DOM: crear elementos con document.createElement(), modificar el contenido de los elementos con element.innerHTML o element.textContent, modificar atributos con element.setAttribute() o directamente con element.attribute, y agregar o eliminar nodos con parent.appendChild(), parent.removeChild(), entre otros.","source":"@site/docs/js/dom/manipulacion.md","sourceDirName":"js/dom","slug":"/js/dom/manipulacion","permalink":"/docuQuest/docs/js/dom/manipulacion","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/dom/manipulacion.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Eventos de interacci\xf3n con el usuario","permalink":"/docuQuest/docs/js/dom/eventosUsuario"},"next":{"title":"Renderizaci\xf3n y Reflujos","permalink":"/docuQuest/docs/js/dom/renderizacionReflujos"}}');var r=i(4848),l=i(8453);const o={},a="Manipulaci\xf3n del DOM",d={},s=[{value:"1. Crear elementos: <code>document.createElement()</code>",id:"1-crear-elementos-documentcreateelement",level:2},{value:"1.1 Uso y Sintaxis",id:"11-uso-y-sintaxis",level:3},{value:"1.2 Ejemplo Pr\xe1ctico",id:"12-ejemplo-pr\xe1ctico",level:3},{value:"1.3 Ventajas y Limitaciones",id:"13-ventajas-y-limitaciones",level:3},{value:"2. Modificar contenido: <code>element.innerHTML</code> o <code>element.textContent</code>",id:"2-modificar-contenido-elementinnerhtml-o-elementtextcontent",level:2},{value:"2.1 innerHTML",id:"21-innerhtml",level:3},{value:"2.1.1 Uso y Sintaxis",id:"211-uso-y-sintaxis",level:3},{value:"2.1.2 Ejemplo Pr\xe1ctico",id:"212-ejemplo-pr\xe1ctico",level:3},{value:"2.2 textContent",id:"22-textcontent",level:3},{value:"2.2.1 Uso y Sintaxis",id:"221-uso-y-sintaxis",level:3},{value:"2.2.2 Ejemplo Pr\xe1ctico",id:"222-ejemplo-pr\xe1ctico",level:3},{value:"2.3 Ventajas y Limitaciones",id:"23-ventajas-y-limitaciones",level:3},{value:"3. Modificar atributos: <code>element.setAttribute()</code> o directamente <code>element.attribute</code>",id:"3-modificar-atributos-elementsetattribute-o-directamente-elementattribute",level:2},{value:"3.1 Uso de setAttribute()",id:"31-uso-de-setattribute",level:3},{value:"3.1.1 Uso y Sintaxis",id:"311-uso-y-sintaxis",level:3},{value:"3.1.2 Ejemplo Pr\xe1ctico",id:"312-ejemplo-pr\xe1ctico",level:3},{value:"3.2 Acceso Directo a Atributos",id:"32-acceso-directo-a-atributos",level:3},{value:"3.2.1 Uso y Sintaxis",id:"321-uso-y-sintaxis",level:3},{value:"3.2.2 Ejemplo Pr\xe1ctico",id:"322-ejemplo-pr\xe1ctico",level:3},{value:"3.3 Ventajas y Limitaciones",id:"33-ventajas-y-limitaciones",level:3},{value:"4. Agregar o eliminar nodos: <code>parent.appendChild()</code>, <code>parent.removeChild()</code>, etc.",id:"4-agregar-o-eliminar-nodos-parentappendchild-parentremovechild-etc",level:2},{value:"4.1 parent.appendChild()",id:"41-parentappendchild",level:3},{value:"4.1.1 Uso y Sintaxis",id:"411-uso-y-sintaxis",level:3},{value:"4.1.2 Ejemplo Pr\xe1ctico",id:"412-ejemplo-pr\xe1ctico",level:3},{value:"4.2 parent.removeChild()",id:"42-parentremovechild",level:3},{value:"4.2.1 Uso y Sintaxis",id:"421-uso-y-sintaxis",level:3},{value:"4.2.2 Ejemplo Pr\xe1ctico",id:"422-ejemplo-pr\xe1ctico",level:3},{value:"4.3 Otras Operaciones de Manipulaci\xf3n de Nodos",id:"43-otras-operaciones-de-manipulaci\xf3n-de-nodos",level:3},{value:"Ejemplo de <code>insertBefore()</code>",id:"ejemplo-de-insertbefore",level:3},{value:"Ejemplo de <code>replaceChild()</code>",id:"ejemplo-de-replacechild",level:3},{value:"4.4 Ventajas y Limitaciones",id:"44-ventajas-y-limitaciones",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"manipulaci\xf3n-del-dom",children:"Manipulaci\xf3n del DOM"})}),"\n",(0,r.jsx)(n.h1,{id:"manipulaci\xf3n-del-dom-de-javascript-en-p\xe1ginas-web",children:"Manipulaci\xf3n del DOM de JavaScript en P\xe1ginas Web"}),"\n",(0,r.jsxs)(n.p,{children:["La manipulaci\xf3n del Modelo de Objetos del Documento (DOM) es una habilidad fundamental en el desarrollo web, que permite a los desarrolladores crear, modificar y eliminar elementos en una p\xe1gina web de manera din\xe1mica. La capacidad de interactuar con el DOM de forma program\xe1tica utilizando JavaScript es crucial para crear experiencias de usuario ricas e interactivas. En este texto, exploraremos en profundidad las principales t\xe9cnicas de manipulaci\xf3n del DOM: crear elementos con ",(0,r.jsx)(n.code,{children:"document.createElement()"}),", modificar el contenido de los elementos con ",(0,r.jsx)(n.code,{children:"element.innerHTML"})," o ",(0,r.jsx)(n.code,{children:"element.textContent"}),", modificar atributos con ",(0,r.jsx)(n.code,{children:"element.setAttribute()"})," o directamente con ",(0,r.jsx)(n.code,{children:"element.attribute"}),", y agregar o eliminar nodos con ",(0,r.jsx)(n.code,{children:"parent.appendChild()"}),", ",(0,r.jsx)(n.code,{children:"parent.removeChild()"}),", entre otros."]}),"\n",(0,r.jsxs)(n.h2,{id:"1-crear-elementos-documentcreateelement",children:["1. Crear elementos: ",(0,r.jsx)(n.code,{children:"document.createElement()"})]}),"\n",(0,r.jsxs)(n.p,{children:["El m\xe9todo ",(0,r.jsx)(n.code,{children:"document.createElement()"})," permite crear un nuevo elemento HTML, que puede ser posteriormente insertado en el DOM. Este m\xe9todo es fundamental para la creaci\xf3n de contenido din\xe1mico en p\xe1ginas web."]}),"\n",(0,r.jsx)(n.h3,{id:"11-uso-y-sintaxis",children:"1.1 Uso y Sintaxis"}),"\n",(0,r.jsxs)(n.p,{children:["La sintaxis b\xe1sica de ",(0,r.jsx)(n.code,{children:"document.createElement()"})," es simple:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'var newElement = document.createElement("tagName");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Donde ",(0,r.jsx)(n.code,{children:"'tagName'"})," es el nombre de la etiqueta del elemento que se desea crear, como ",(0,r.jsx)(n.code,{children:"'div'"}),", ",(0,r.jsx)(n.code,{children:"'p'"}),", ",(0,r.jsx)(n.code,{children:"'span'"}),", etc."]}),"\n",(0,r.jsx)(n.h3,{id:"12-ejemplo-pr\xe1ctico",children:"1.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.p,{children:"Consideremos el siguiente documento HTML:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de createElement</title>\r\n  </head>\r\n  <body>\r\n    <div id="container"></div>\r\n    <script>\r\n      // Crear un nuevo elemento <p>\r\n      var newParagraph = document.createElement("p");\r\n      newParagraph.textContent = "Este es un p\xe1rrafo creado din\xe1micamente.";\r\n\r\n      // A\xf1adir el nuevo elemento al contenedor\r\n      var container = document.getElementById("container");\r\n      container.appendChild(newParagraph);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["En este ejemplo, ",(0,r.jsx)(n.code,{children:"document.createElement('p')"})," se utiliza para crear un nuevo elemento ",(0,r.jsx)(n.code,{children:"<p>"}),", que luego se inserta en el contenedor ",(0,r.jsx)(n.code,{children:"<div>"})," con el ",(0,r.jsx)(n.code,{children:"id"}),' "container".']}),"\n",(0,r.jsx)(n.h3,{id:"13-ventajas-y-limitaciones",children:"1.3 Ventajas y Limitaciones"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibilidad"}),": Permite crear cualquier tipo de elemento HTML de manera din\xe1mica."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integraci\xf3n"}),": Los elementos creados pueden ser completamente integrados en el DOM, con la capacidad de a\xf1adir atributos, estilos y contenido."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pasos adicionales"}),": Crear un elemento con ",(0,r.jsx)(n.code,{children:"createElement"})," requiere pasos adicionales para configurar sus atributos y contenido antes de insertarlo en el DOM."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"2-modificar-contenido-elementinnerhtml-o-elementtextcontent",children:["2. Modificar contenido: ",(0,r.jsx)(n.code,{children:"element.innerHTML"})," o ",(0,r.jsx)(n.code,{children:"element.textContent"})]}),"\n",(0,r.jsxs)(n.p,{children:["Modificar el contenido de los elementos HTML es una de las tareas m\xe1s comunes en la manipulaci\xf3n del DOM. Dos propiedades principales permiten esta manipulaci\xf3n: ",(0,r.jsx)(n.code,{children:"innerHTML"})," y ",(0,r.jsx)(n.code,{children:"textContent"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"21-innerhtml",children:"2.1 innerHTML"}),"\n",(0,r.jsxs)(n.p,{children:["La propiedad ",(0,r.jsx)(n.code,{children:"innerHTML"})," permite obtener o establecer el HTML contenido dentro de un elemento. Es \xfatil cuando se desea insertar HTML con varias etiquetas."]}),"\n",(0,r.jsx)(n.h3,{id:"211-uso-y-sintaxis",children:"2.1.1 Uso y Sintaxis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'element.innerHTML = "Nuevo <b>contenido</b> con HTML.";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"212-ejemplo-pr\xe1ctico",children:"2.1.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de innerHTML</title>\r\n  </head>\r\n  <body>\r\n    <div id="content">Contenido original</div>\r\n    <script>\r\n      var contentDiv = document.getElementById("content");\r\n\r\n      // Modificar el contenido del elemento usando innerHTML\r\n      contentDiv.innerHTML = "Nuevo <b>contenido</b> con HTML.";\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"22-textcontent",children:"2.2 textContent"}),"\n",(0,r.jsxs)(n.p,{children:["La propiedad ",(0,r.jsx)(n.code,{children:"textContent"})," permite obtener o establecer el contenido textual de un elemento, sin interpretar el texto como HTML."]}),"\n",(0,r.jsx)(n.h3,{id:"221-uso-y-sintaxis",children:"2.2.1 Uso y Sintaxis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'element.textContent = "Nuevo contenido textual";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"222-ejemplo-pr\xe1ctico",children:"2.2.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de textContent</title>\r\n  </head>\r\n  <body>\r\n    <div id="content">Contenido original</div>\r\n    <script>\r\n      var contentDiv = document.getElementById("content");\r\n\r\n      // Modificar el contenido del elemento usando textContent\r\n      contentDiv.textContent = "Nuevo contenido textual";\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"23-ventajas-y-limitaciones",children:"2.3 Ventajas y Limitaciones"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"innerHTML"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),": Permite insertar HTML complejo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),": Riesgo de inyecci\xf3n de HTML si se utilizan datos no validados, ya que el HTML se analiza y se interpreta."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"textContent"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),": Seguro contra inyecci\xf3n de HTML, ya que el texto se inserta tal cual."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),": No permite insertar HTML."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"3-modificar-atributos-elementsetattribute-o-directamente-elementattribute",children:["3. Modificar atributos: ",(0,r.jsx)(n.code,{children:"element.setAttribute()"})," o directamente ",(0,r.jsx)(n.code,{children:"element.attribute"})]}),"\n",(0,r.jsxs)(n.p,{children:["Modificar los atributos de los elementos HTML es esencial para controlar su comportamiento y apariencia. Existen dos formas principales de hacerlo: usando ",(0,r.jsx)(n.code,{children:"setAttribute()"})," o accediendo directamente a las propiedades del elemento."]}),"\n",(0,r.jsx)(n.h3,{id:"31-uso-de-setattribute",children:"3.1 Uso de setAttribute()"}),"\n",(0,r.jsxs)(n.p,{children:["El m\xe9todo ",(0,r.jsx)(n.code,{children:"setAttribute()"})," permite establecer el valor de un atributo espec\xedfico de un elemento."]}),"\n",(0,r.jsx)(n.h3,{id:"311-uso-y-sintaxis",children:"3.1.1 Uso y Sintaxis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'element.setAttribute("attributeName", "value");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"312-ejemplo-pr\xe1ctico",children:"3.1.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de setAttribute</title>\r\n  </head>\r\n  <body>\r\n    <a id="myLink" href="<https://www.ejemplo.com>">Enlace a Ejemplo</a>\r\n    <script>\r\n      var link = document.getElementById("myLink");\r\n\r\n      // Modificar el atributo href del enlace\r\n      link.setAttribute("href", "<https://www.nuevo-ejemplo.com>");\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"32-acceso-directo-a-atributos",children:"3.2 Acceso Directo a Atributos"}),"\n",(0,r.jsx)(n.p,{children:"Otra forma de modificar los atributos es accediendo directamente a las propiedades del elemento."}),"\n",(0,r.jsx)(n.h3,{id:"321-uso-y-sintaxis",children:"3.2.1 Uso y Sintaxis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'element.attributeName = "value";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"322-ejemplo-pr\xe1ctico",children:"3.2.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de Modificaci\xf3n Directa de Atributos</title>\r\n  </head>\r\n  <body>\r\n    <img id="myImage" src="imagen1.jpg" alt="Imagen 1" />\r\n    <script>\r\n      var image = document.getElementById("myImage");\r\n\r\n      // Modificar el atributo src de la imagen\r\n      image.src = "imagen2.jpg";\r\n      image.alt = "Imagen 2";\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"33-ventajas-y-limitaciones",children:"3.3 Ventajas y Limitaciones"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"setAttribute()"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),": Puede usarse para cualquier atributo, incluyendo aquellos que no tienen propiedades asociadas."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),": Es m\xe1s verboso y puede ser menos intuitivo para atributos comunes."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Acceso Directo a Atributos"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),": Sintaxis m\xe1s limpia y directa para atributos comunes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),": No todos los atributos tienen propiedades asociadas, lo que limita su uso."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"4-agregar-o-eliminar-nodos-parentappendchild-parentremovechild-etc",children:["4. Agregar o eliminar nodos: ",(0,r.jsx)(n.code,{children:"parent.appendChild()"}),", ",(0,r.jsx)(n.code,{children:"parent.removeChild()"}),", etc."]}),"\n",(0,r.jsxs)(n.p,{children:["Agregar y eliminar nodos es una de las operaciones m\xe1s fundamentales en la manipulaci\xf3n del DOM. Los m\xe9todos ",(0,r.jsx)(n.code,{children:"appendChild()"})," y ",(0,r.jsx)(n.code,{children:"removeChild()"})," permiten modificar la estructura del DOM de manera din\xe1mica."]}),"\n",(0,r.jsx)(n.h3,{id:"41-parentappendchild",children:"4.1 parent.appendChild()"}),"\n",(0,r.jsxs)(n.p,{children:["El m\xe9todo ",(0,r.jsx)(n.code,{children:"appendChild()"})," se utiliza para a\xf1adir un nodo al final de la lista de hijos de un nodo padre."]}),"\n",(0,r.jsx)(n.h3,{id:"411-uso-y-sintaxis",children:"4.1.1 Uso y Sintaxis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"parentNode.appendChild(childNode);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"412-ejemplo-pr\xe1ctico",children:"4.1.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de appendChild</title>\r\n  </head>\r\n  <body>\r\n    <ul id="list">\r\n      <li>Elemento 1</li>\r\n      <li>Elemento 2</li>\r\n    </ul>\r\n    <script>\r\n      var list = document.getElementById("list");\r\n\r\n      // Crear un nuevo elemento de lista\r\n      var newItem = document.createElement("li");\r\n      newItem.textContent = "Elemento 3";\r\n\r\n      // A\xf1adir el nuevo elemento al final de la lista\r\n      list.appendChild(newItem);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"42-parentremovechild",children:"4.2 parent.removeChild()"}),"\n",(0,r.jsxs)(n.p,{children:["El m\xe9todo ",(0,r.jsx)(n.code,{children:"removeChild()"})," se utiliza para eliminar un nodo hijo de un nodo padre."]}),"\n",(0,r.jsx)(n.h3,{id:"421-uso-y-sintaxis",children:"4.2.1 Uso y Sintaxis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"parentNode.removeChild(childNode);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"422-ejemplo-pr\xe1ctico",children:"4.2.2 Ejemplo Pr\xe1ctico"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de removeChild</title>\r\n  </head>\r\n  <body>\r\n    <ul id="list">\r\n      <li id="item1">Elemento 1</li>\r\n      <li id="item2">Elemento 2</li>\r\n    </ul>\r\n    <script>\r\n             var list = document.getElementById(\'list\');\r\n             var item2 = document.getElementById(\'item2\');\r\n\r\n             // Eliminar el segundo elemento\r\n\r\n      de la lista\r\n             list.removeChild(item2);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"43-otras-operaciones-de-manipulaci\xf3n-de-nodos",children:"4.3 Otras Operaciones de Manipulaci\xf3n de Nodos"}),"\n",(0,r.jsxs)(n.p,{children:["Adem\xe1s de ",(0,r.jsx)(n.code,{children:"appendChild()"})," y ",(0,r.jsx)(n.code,{children:"removeChild()"}),", existen otros m\xe9todos \xfatiles para la manipulaci\xf3n de nodos, tales como:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"insertBefore(newNode, referenceNode)"})}),": Inserta un nuevo nodo antes de un nodo de referencia."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"replaceChild(newNode, oldNode)"})}),": Reemplaza un nodo hijo existente con un nuevo nodo."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"ejemplo-de-insertbefore",children:["Ejemplo de ",(0,r.jsx)(n.code,{children:"insertBefore()"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de insertBefore</title>\r\n  </head>\r\n  <body>\r\n    <ul id="list">\r\n      <li>Elemento 1</li>\r\n      <li>Elemento 3</li>\r\n    </ul>\r\n    <script>\r\n      var list = document.getElementById("list");\r\n\r\n      // Crear un nuevo elemento de lista\r\n      var newItem = document.createElement("li");\r\n      newItem.textContent = "Elemento 2";\r\n\r\n      // Insertar el nuevo elemento antes del tercer elemento\r\n      list.insertBefore(newItem, list.children[1]);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"ejemplo-de-replacechild",children:["Ejemplo de ",(0,r.jsx)(n.code,{children:"replaceChild()"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Ejemplo de replaceChild</title>\r\n  </head>\r\n  <body>\r\n    <ul id="list">\r\n      <li id="item1">Elemento 1</li>\r\n      <li id="item2">Elemento 2</li>\r\n    </ul>\r\n    <script>\r\n      var list = document.getElementById("list");\r\n      var item2 = document.getElementById("item2");\r\n\r\n      // Crear un nuevo elemento de lista\r\n      var newItem = document.createElement("li");\r\n      newItem.textContent = "Elemento 2 reemplazado";\r\n\r\n      // Reemplazar el segundo elemento de la lista\r\n      list.replaceChild(newItem, item2);\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"44-ventajas-y-limitaciones",children:"4.4 Ventajas y Limitaciones"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"appendChild()"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),": Simple y directo para a\xf1adir nuevos nodos al final de la lista de hijos."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),": Solo puede a\xf1adir nodos al final, no en una posici\xf3n espec\xedfica."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"removeChild()"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ventajas"}),": Permite eliminar nodos espec\xedficos del DOM."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limitaciones"}),": Requiere una referencia al nodo hijo que se desea eliminar."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,r.jsxs)(n.p,{children:["La manipulaci\xf3n del DOM mediante JavaScript es una t\xe9cnica esencial en el desarrollo web moderno, permitiendo a los desarrolladores crear, modificar y eliminar elementos de manera din\xe1mica. La creaci\xf3n de elementos con ",(0,r.jsx)(n.code,{children:"document.createElement()"}),", la modificaci\xf3n del contenido con ",(0,r.jsx)(n.code,{children:"element.innerHTML"})," y ",(0,r.jsx)(n.code,{children:"element.textContent"}),", la modificaci\xf3n de atributos con ",(0,r.jsx)(n.code,{children:"element.setAttribute()"})," y acceso directo, y la manipulaci\xf3n de nodos con ",(0,r.jsx)(n.code,{children:"appendChild()"})," y ",(0,r.jsx)(n.code,{children:"removeChild()"})," son herramientas fundamentales para crear aplicaciones web interactivas y din\xe1micas. La comprensi\xf3n y el dominio de estas t\xe9cnicas son cruciales para cualquier desarrollador web que aspire a crear experiencias de usuario avanzadas y funcionales en la web moderna."]}),"\n",(0,r.jsx)(n.hr,{})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},l=t.createContext(r);function o(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);