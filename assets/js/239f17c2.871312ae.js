"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[7220],{3122:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"backend/Node.js/expressJS","title":"Express.js","description":"Introducci\xf3n","source":"@site/docs/backend/Node.js/expressJS.md","sourceDirName":"backend/Node.js","slug":"/backend/Node.js/expressJS","permalink":"/docuQuest/docs/backend/Node.js/expressJS","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/Node.js/expressJS.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Servidores web con Node.js","permalink":"/docuQuest/docs/backend/Node.js/servidorWeb"},"next":{"title":"Conexi\xf3n a base de datos real con MongoDB y Mongoose","permalink":"/docuQuest/docs/backend/Node.js/mongoDBMongoose"}}');var o=n(4848),a=n(8453);const i={},c="Express.js",l={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Instalaci\xf3n de Express",id:"instalaci\xf3n-de-express",level:2},{value:"Tu primer servidor con Express",id:"tu-primer-servidor-con-express",level:2},{value:"\xbfQu\xe9 hace este servidor?",id:"qu\xe9-hace-este-servidor",level:3},{value:"Crear y consumir una API REST",id:"crear-y-consumir-una-api-rest",level:2},{value:"\xbfQu\xe9 hace este c\xf3digo?",id:"qu\xe9-hace-este-c\xf3digo",level:3},{value:"Middleware para servir contenido est\xe1tico",id:"middleware-para-servir-contenido-est\xe1tico",level:2},{value:"Reutilizar lo aprendido",id:"reutilizar-lo-aprendido",level:2},{value:"Resultado: servidor Express completo (equivalente al m\xf3dulo anterior)",id:"resultado-servidor-express-completo-equivalente-al-m\xf3dulo-anterior",level:2},{value:"\xbfQu\xe9 hace este servidor?",id:"qu\xe9-hace-este-servidor-1",level:3},{value:"\xbfQu\xe9 has aprendido en este m\xf3dulo?",id:"qu\xe9-has-aprendido-en-este-m\xf3dulo",level:2},{value:"Recursos adicionales",id:"recursos-adicionales",level:2}];function t(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"expressjs",children:"Express.js"})}),"\n",(0,o.jsx)(s.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,o.jsxs)(s.p,{children:["Despu\xe9s de aprender a manejar rutas, peticiones y respuestas manualmente con ",(0,o.jsx)(s.code,{children:"http"}),", llega el momento de hacer tu vida mucho m\xe1s f\xe1cil con ",(0,o.jsx)(s.strong,{children:"Express.js"}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["Express es un ",(0,o.jsx)(s.strong,{children:"framework minimalista y flexible"})," que facilita la creaci\xf3n de aplicaciones web y APIs REST. Con \xe9l puedes:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Definir rutas con claridad"}),"\n",(0,o.jsx)(s.li,{children:"Trabajar con middlewares (para validar, autenticar, registrar, etc.)"}),"\n",(0,o.jsx)(s.li,{children:"Servir contenido est\xe1tico"}),"\n",(0,o.jsx)(s.li,{children:"Crear APIs REST en pocas l\xedneas"}),"\n",(0,o.jsx)(s.li,{children:"Integrar f\xe1cilmente bases de datos, plantillas o librer\xedas"}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"instalaci\xf3n-de-express",children:"Instalaci\xf3n de Express"}),"\n",(0,o.jsxs)(s.ol,{children:["\n",(0,o.jsx)(s.li,{children:"Crea una carpeta nueva o usa la del proyecto anterior:"}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"npm init -y\nnpm install express\n"})}),"\n",(0,o.jsxs)(s.ol,{children:["\n",(0,o.jsxs)(s.li,{children:["Crea un archivo ",(0,o.jsx)(s.code,{children:"server.js"})," para empezar desde cero."]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"tu-primer-servidor-con-express",children:"Tu primer servidor con Express"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:'// server.js\n\n// Importamos el framework Express\nconst express = require("express");\n\n// Creamos una instancia de la aplicaci\xf3n de Express\nconst app = express();\n\n// Definimos el puerto en el que se ejecutar\xe1 el servidor\nconst PORT = 3000;\n\n// Middleware para que Express pueda interpretar cuerpos de tipo JSON en peticiones\n// Esto es \xfatil para manejar POST, PUT, PATCH, etc.\napp.use(express.json());\n\n// Ruta GET para la ra\xedz ("/")\n// Cuando el usuario visita la p\xe1gina principal, se responde con HTML simple\napp.get("/", (req, res) => {\n  res.send("<h1>Bienvenido a mi servidor con Express</h1>");\n});\n\n// Ruta GET para la API ("/api/hola")\n// Devuelve un objeto JSON como respuesta, ideal para una API REST\napp.get("/api/hola", (req, res) => {\n  res.json({ mensaje: "Hola desde Express" });\n});\n\n// Inicia el servidor en el puerto especificado\n// El callback se ejecuta una vez que el servidor est\xe1 corriendo\napp.listen(PORT, () => {\n  console.log(`\ud83d\ude80 Servidor corriendo en http://localhost:${PORT}`);\n});\n'})}),"\n",(0,o.jsx)(s.h3,{id:"qu\xe9-hace-este-servidor",children:"\xbfQu\xe9 hace este servidor?"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Usa Express para simplificar la creaci\xf3n de rutas y manejo de peticiones."}),"\n",(0,o.jsxs)(s.li,{children:["Tiene dos rutas:","\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"/"}),": responde con HTML."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"/api/hola"}),": responde con JSON."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["Tiene configurado el middleware ",(0,o.jsx)(s.code,{children:"express.json()"})," para poder recibir peticiones con cuerpo en formato JSON (aunque en este ejemplo no se usa, est\xe1 listo para ampliarse)."]}),"\n",(0,o.jsx)(s.li,{children:"Muestra un mensaje en consola cuando el servidor est\xe1 funcionando."}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"crear-y-consumir-una-api-rest",children:"Crear y consumir una API REST"}),"\n",(0,o.jsx)(s.p,{children:"Supongamos que queremos manejar proyectos (como en el m\xf3dulo anterior). Usamos un array para simular una base de datos:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:'// Creamos una lista (array) de proyectos en memoria, simulando una base de datos temporal\nlet proyectos = [\n  { id: 1, titulo: "Gestor de tareas", descripcion: "App con Node.js" },\n  { id: 2, titulo: "Wiki retro", descripcion: "HTML, CSS y JS puros" },\n];\n\n// Ruta GET para obtener todos los proyectos\n// Cuando el cliente hace una petici\xf3n GET a /api/proyectos, se devuelve el array completo\napp.get("/api/proyectos", (req, res) => {\n  res.json(proyectos); // Enviamos los proyectos como JSON\n});\n\n// Ruta POST para crear un nuevo proyecto\n// El cliente debe enviar un objeto JSON con "titulo" y "descripcion"\napp.post("/api/proyectos", (req, res) => {\n  // Creamos un nuevo objeto proyecto con ID \xfanico basado en la hora actual\n  const nuevo = {\n    id: Date.now(), // Genera un ID \xfanico basado en el timestamp\n    titulo: req.body.titulo, // Extrae el t\xedtulo del cuerpo de la petici\xf3n\n    descripcion: req.body.descripcion, // Extrae la descripci\xf3n del cuerpo\n  };\n\n  // Validamos que se hayan enviado ambos campos obligatorios\n  if (!nuevo.titulo || !nuevo.descripcion) {\n    // Si falta alguno, respondemos con error 400 (Bad Request)\n    return res.status(400).json({ mensaje: "Faltan campos obligatorios" });\n  }\n\n  // Si todo est\xe1 bien, agregamos el nuevo proyecto al array\n  proyectos.push(nuevo);\n\n  // Respondemos con estado 201 (creado) y enviamos el nuevo proyecto\n  res.status(201).json({ mensaje: "Proyecto creado", proyecto: nuevo });\n});\n'})}),"\n",(0,o.jsx)(s.h3,{id:"qu\xe9-hace-este-c\xf3digo",children:"\xbfQu\xe9 hace este c\xf3digo?"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Define un array ",(0,o.jsx)(s.code,{children:"proyectos"})," con datos simulados."]}),"\n",(0,o.jsxs)(s.li,{children:["Tiene una ",(0,o.jsx)(s.strong,{children:"ruta GET"})," (",(0,o.jsx)(s.code,{children:"/api/proyectos"}),") que devuelve todos los proyectos."]}),"\n",(0,o.jsxs)(s.li,{children:["Tiene una ",(0,o.jsx)(s.strong,{children:"ruta POST"})," (",(0,o.jsx)(s.code,{children:"/api/proyectos"}),") que permite a\xf1adir un nuevo proyecto desde el cuerpo de la petici\xf3n (JSON)."]}),"\n",(0,o.jsxs)(s.li,{children:["Usa ",(0,o.jsx)(s.code,{children:"Date.now()"})," como ID r\xe1pido (aunque en apps reales se usar\xeda UUID o una base de datos)."]}),"\n",(0,o.jsx)(s.li,{children:"Valida que los campos requeridos no est\xe9n vac\xedos."}),"\n",(0,o.jsxs)(s.li,{children:["Env\xeda respuestas con los ",(0,o.jsx)(s.strong,{children:"c\xf3digos HTTP adecuados"}),": ",(0,o.jsx)(s.code,{children:"200"}),", ",(0,o.jsx)(s.code,{children:"201"}),", ",(0,o.jsx)(s.code,{children:"400"}),"."]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"middleware-para-servir-contenido-est\xe1tico",children:"Middleware para servir contenido est\xe1tico"}),"\n",(0,o.jsxs)(s.p,{children:["Puedes usar una carpeta p\xfablica (",(0,o.jsx)(s.code,{children:"/public"}),") y servir archivos HTML, CSS, im\xe1genes o JS sin tener que definir rutas a mano:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:'app.use(express.static("public"));\n'})}),"\n",(0,o.jsx)(s.p,{children:"Ahora, si tienes:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"public/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 estilo.css\n\u251c\u2500\u2500 script.js\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Entonces ",(0,o.jsx)(s.code,{children:"http://localhost:3000/"})," cargar\xe1 ",(0,o.jsx)(s.code,{children:"index.html"})," autom\xe1ticamente."]}),"\n",(0,o.jsxs)(s.p,{children:["Y puedes enlazar ",(0,o.jsx)(s.code,{children:"/estilo.css"})," y ",(0,o.jsx)(s.code,{children:"/script.js"})," sin configurar nada m\xe1s."]}),"\n",(0,o.jsx)(s.h2,{id:"reutilizar-lo-aprendido",children:"Reutilizar lo aprendido"}),"\n",(0,o.jsx)(s.p,{children:"Si migras tu proyecto del m\xf3dulo anterior:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"El formulario HTML no cambia."}),"\n",(0,o.jsxs)(s.li,{children:["El ",(0,o.jsx)(s.code,{children:"fetch()"})," del frontend tampoco cambia."]}),"\n",(0,o.jsxs)(s.li,{children:["Solo migras la l\xf3gica del backend, y es ",(0,o.jsx)(s.strong,{children:"mucho m\xe1s sencilla"})," con Express."]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"resultado-servidor-express-completo-equivalente-al-m\xf3dulo-anterior",children:"Resultado: servidor Express completo (equivalente al m\xf3dulo anterior)"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:'// server.js\n\n// Importamos el framework Express\nconst express = require("express");\nconst app = express();\n\n// Importamos el m\xf3dulo \'fs\' para trabajar con el sistema de archivos\nconst fs = require("fs");\n\n// Importamos \'path\' para construir rutas absolutas de forma segura\nconst path = require("path");\n\n// Puerto donde se levantar\xe1 el servidor\nconst PORT = 3000;\n\n// Ruta absoluta al archivo JSON donde se guardan los proyectos\nconst RUTA_JSON = path.join(__dirname, "data", "proyectos.json");\n\n// Middleware para poder interpretar cuerpos de tipo JSON en las peticiones\napp.use(express.json());\n\n// Middleware para servir archivos est\xe1ticos desde la carpeta \'public\'\n// Por ejemplo, HTML, CSS, JS frontend\napp.use(express.static("public"));\n\n// Ruta GET para obtener todos los proyectos almacenados en el archivo JSON\napp.get("/api/proyectos", (req, res) => {\n  // Leemos el contenido del archivo de forma as\xedncrona\n  fs.readFile(RUTA_JSON, "utf8", (err, data) => {\n    if (err) {\n      // Si ocurre un error al leer, devolvemos un error 500 (interno)\n      return res.status(500).json({ mensaje: "Error al leer" });\n    }\n    // Si se lee correctamente, convertimos el JSON a objeto y lo enviamos\n    res.json(JSON.parse(data));\n  });\n});\n\n// Ruta POST para a\xf1adir un nuevo proyecto al archivo JSON\napp.post("/api/proyectos", (req, res) => {\n  // Extraemos los campos esperados del cuerpo de la petici\xf3n\n  const { titulo, descripcion } = req.body;\n\n  // Validaci\xf3n: Si falta alguno, respondemos con error 400\n  if (!titulo || !descripcion) {\n    return res.status(400).json({ mensaje: "Faltan campos" });\n  }\n\n  // Leemos el archivo actual para obtener la lista de proyectos\n  fs.readFile(RUTA_JSON, "utf8", (err, data) => {\n    if (err) {\n      return res.status(500).json({ mensaje: "Error leyendo BD" });\n    }\n\n    // Convertimos el contenido a array de objetos\n    const proyectos = JSON.parse(data);\n\n    // Creamos un nuevo proyecto con ID \xfanico\n    const nuevo = { id: Date.now(), titulo, descripcion };\n\n    // Lo agregamos a la lista existente\n    proyectos.push(nuevo);\n\n    // Guardamos de nuevo el archivo con el proyecto a\xf1adido\n    fs.writeFile(RUTA_JSON, JSON.stringify(proyectos, null, 2), (err) => {\n      if (err) {\n        return res.status(500).json({ mensaje: "Error guardando" });\n      }\n\n      // Respondemos con estado 201 (creado) y el nuevo objeto\n      res.status(201).json({ mensaje: "Proyecto a\xf1adido", proyecto: nuevo });\n    });\n  });\n});\n\n// Iniciamos el servidor en el puerto indicado\napp.listen(PORT, () => {\n  console.log(`\u2705 Servidor Express en http://localhost:${PORT}`);\n});\n'})}),"\n",(0,o.jsx)(s.h3,{id:"qu\xe9-hace-este-servidor-1",children:"\xbfQu\xe9 hace este servidor?"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Sirve archivos est\xe1ticos desde la carpeta ",(0,o.jsx)(s.code,{children:"public/"})," (por ejemplo, una interfaz HTML)."]}),"\n",(0,o.jsxs)(s.li,{children:["Tiene un endpoint ",(0,o.jsx)(s.code,{children:"GET /api/proyectos"})," que ",(0,o.jsx)(s.strong,{children:"lee y devuelve"})," los proyectos desde un archivo ",(0,o.jsx)(s.code,{children:"proyectos.json"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:["Tiene un endpoint ",(0,o.jsx)(s.code,{children:"POST /api/proyectos"})," que ",(0,o.jsx)(s.strong,{children:"agrega un nuevo proyecto"})," a ese archivo JSON, con validaci\xf3n de campos."]}),"\n",(0,o.jsxs)(s.li,{children:["Usa ",(0,o.jsx)(s.code,{children:"Date.now()"})," para generar IDs \xfanicos (v\xe1lido para proyectos simples)."]}),"\n",(0,o.jsx)(s.li,{children:"Maneja errores de lectura y escritura en disco."}),"\n",(0,o.jsxs)(s.li,{children:["Usa ",(0,o.jsx)(s.code,{children:"express.json()"})," para poder recibir datos en formato JSON en peticiones POST."]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"qu\xe9-has-aprendido-en-este-m\xf3dulo",children:"\xbfQu\xe9 has aprendido en este m\xf3dulo?"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Qu\xe9 es Express y por qu\xe9 simplifica el desarrollo web"}),"\n",(0,o.jsx)(s.li,{children:"C\xf3mo crear rutas para GET y POST"}),"\n",(0,o.jsx)(s.li,{children:"C\xf3mo parsear JSON y servir archivos est\xe1ticos"}),"\n",(0,o.jsx)(s.li,{children:"C\xf3mo manejar errores y respuestas limpias"}),"\n",(0,o.jsx)(s.li,{children:"C\xf3mo migrar un proyecto Node puro a Express"}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"recursos-adicionales",children:"Recursos adicionales"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://expressjs.com/es/",children:"https://expressjs.com/es/"})}),"\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://github.com/azat-co/cheatsheets/tree/master/express4",children:"Express cheat sheet"})}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(6540);const o={},a=r.createContext(o);function i(e){const s=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);