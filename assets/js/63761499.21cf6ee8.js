"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[8840],{8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>c});var a=n(6540);const o={},s=a.createContext(o);function i(e){const r=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:r},e.children)}},8728:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"js/asincronia/errores","title":"Manejo de errores","description":"En la programaci\xf3n, los errores son inevitables. Pueden surgir por diversas razones, como errores de sintaxis, errores l\xf3gicos o problemas de conectividad a la red. En JavaScript, un lenguaje de programaci\xf3n ampliamente utilizado en el desarrollo web, es fundamental comprender c\xf3mo manejar estos errores de manera efectiva para garantizar un funcionamiento suave y confiable de las aplicaciones.","source":"@site/docs/js/asincronia/errores.md","sourceDirName":"js/asincronia","slug":"/js/asincronia/errores","permalink":"/docuQuest/docs/js/asincronia/errores","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/asincronia/errores.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Async/Await","permalink":"/docuQuest/docs/js/asincronia/asyncAwait"},"next":{"title":"Operaciones as\xedncronas comunes (Ajax VS Fetch)","permalink":"/docuQuest/docs/js/asincronia/operacionesAsincronas"}}');var o=n(4848),s=n(8453);const i={},c="Manejo de errores",l={},d=[{value:"Introducci\xf3n al Manejo de Errores en JavaScript",id:"introducci\xf3n-al-manejo-de-errores-en-javascript",level:2},{value:"Tipos de Errores en JavaScript",id:"tipos-de-errores-en-javascript",level:2},{value:"Manejo de Errores con Try...Catch",id:"manejo-de-errores-con-trycatch",level:2},{value:"El Bloque Finally",id:"el-bloque-finally",level:2},{value:"Propagaci\xf3n de Errores",id:"propagaci\xf3n-de-errores",level:2},{value:"Manejo de Errores Asincr\xf3nicos",id:"manejo-de-errores-asincr\xf3nicos",level:2},{value:"Conclusiones y Mejores Pr\xe1cticas",id:"conclusiones-y-mejores-pr\xe1cticas",level:2}];function t(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"manejo-de-errores",children:"Manejo de errores"})}),"\n",(0,o.jsx)(r.h1,{id:"manejo-de-errores-en-javascript-fundamentos-y-buenas-pr\xe1cticas",children:"Manejo de Errores en JavaScript: Fundamentos y Buenas Pr\xe1cticas"}),"\n",(0,o.jsx)(r.p,{children:"En la programaci\xf3n, los errores son inevitables. Pueden surgir por diversas razones, como errores de sintaxis, errores l\xf3gicos o problemas de conectividad a la red. En JavaScript, un lenguaje de programaci\xf3n ampliamente utilizado en el desarrollo web, es fundamental comprender c\xf3mo manejar estos errores de manera efectiva para garantizar un funcionamiento suave y confiable de las aplicaciones."}),"\n",(0,o.jsx)(r.h2,{id:"introducci\xf3n-al-manejo-de-errores-en-javascript",children:"Introducci\xf3n al Manejo de Errores en JavaScript"}),"\n",(0,o.jsx)(r.p,{children:"El manejo de errores en JavaScript se refiere al proceso de detectar, diagnosticar y responder a los errores que ocurren durante la ejecuci\xf3n de un programa. Cuando se produce un error en JavaScript, el motor de JavaScript detiene la ejecuci\xf3n del programa y genera un objeto de error que contiene informaci\xf3n sobre el tipo y la causa del error."}),"\n",(0,o.jsx)(r.p,{children:"El manejo adecuado de los errores es esencial para escribir c\xf3digo robusto y resistente a fallos. Un manejo deficiente de los errores puede resultar en aplicaciones inestables, comportamientos inesperados y experiencias de usuario insatisfactorias."}),"\n",(0,o.jsx)(r.h2,{id:"tipos-de-errores-en-javascript",children:"Tipos de Errores en JavaScript"}),"\n",(0,o.jsx)(r.p,{children:"JavaScript clasifica los errores en diferentes tipos, que incluyen:"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Errores de Sintaxis:"})," Ocurren cuando se violan las reglas de sintaxis del lenguaje."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Errores de Referencia:"})," Ocurren cuando se intenta acceder a una variable que no est\xe1 definida o a una propiedad de un objeto que no existe."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Errores de Tipo:"})," Ocurren cuando se realizan operaciones no v\xe1lidas en tipos de datos incorrectos."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Errores de Evaluaci\xf3n:"})," Ocurren durante la evaluaci\xf3n de una expresi\xf3n, como dividir por cero."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Errores Personalizados:"})," Errores espec\xedficos creados por el desarrollador para manejar situaciones particulares en el c\xf3digo."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"manejo-de-errores-con-trycatch",children:"Manejo de Errores con Try...Catch"}),"\n",(0,o.jsxs)(r.p,{children:["Una de las principales construcciones para manejar errores en JavaScript es el bloque ",(0,o.jsx)(r.code,{children:"try...catch"}),". Este bloque permite ejecutar un bloque de c\xf3digo y capturar cualquier error que se produzca dentro de \xe9l."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:'try {\n  // Bloque de c\xf3digo que puede generar un error\n  throw new Error("Este es un error personalizado");\n} catch (error) {\n  // Manejo del error\n  console.error(error.message);\n}\n'})}),"\n",(0,o.jsxs)(r.p,{children:["En este ejemplo, el bloque ",(0,o.jsx)(r.code,{children:"try"})," contiene el c\xf3digo que puede lanzar un error. Si se produce un error, el control se transfiere al bloque ",(0,o.jsx)(r.code,{children:"catch"}),", donde se puede manejar el error de manera adecuada."]}),"\n",(0,o.jsx)(r.h2,{id:"el-bloque-finally",children:"El Bloque Finally"}),"\n",(0,o.jsxs)(r.p,{children:["Adem\xe1s del bloque ",(0,o.jsx)(r.code,{children:"try"})," y ",(0,o.jsx)(r.code,{children:"catch"}),", JavaScript tambi\xe9n proporciona el bloque ",(0,o.jsx)(r.code,{children:"finally"}),", que permite ejecutar un bloque de c\xf3digo independientemente de si se produjo un error o no."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:"try {\n  // Bloque de c\xf3digo que puede generar un error\n} catch (error) {\n  // Manejo del error\n} finally {\n  // Bloque de c\xf3digo que se ejecutar\xe1 siempre\n}\n"})}),"\n",(0,o.jsxs)(r.p,{children:["El bloque ",(0,o.jsx)(r.code,{children:"finally"})," es \xfatil para la limpieza de recursos, como cerrar conexiones de red o liberar memoria, independientemente de si se produjo un error o no."]}),"\n",(0,o.jsx)(r.h2,{id:"propagaci\xf3n-de-errores",children:"Propagaci\xf3n de Errores"}),"\n",(0,o.jsx)(r.p,{children:"En JavaScript, los errores pueden propagarse a trav\xe9s de m\xfaltiples niveles de llamadas de funci\xf3n. Cuando se produce un error en una funci\xf3n y no se maneja dentro de esa funci\xf3n, se propaga hacia arriba a trav\xe9s de la pila de llamadas hasta que se maneja o alcanza el nivel superior del programa."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:'function funcionUno() {\n  throw new Error("Este es un error en funci\xf3nUno");\n}\n\nfunction funcionDos() {\n  funcionUno();\n}\n\ntry {\n  funcionDos();\n} catch (error) {\n  console.error(error.message);\n}\n'})}),"\n",(0,o.jsxs)(r.p,{children:["En este ejemplo, el error lanzado en ",(0,o.jsx)(r.code,{children:"funcionUno"})," se propaga hacia arriba hasta que se maneja en el bloque ",(0,o.jsx)(r.code,{children:"catch"})," en el nivel superior del programa."]}),"\n",(0,o.jsx)(r.h2,{id:"manejo-de-errores-asincr\xf3nicos",children:"Manejo de Errores Asincr\xf3nicos"}),"\n",(0,o.jsx)(r.p,{children:"En JavaScript, muchas operaciones, como solicitudes de red o lecturas de archivos, son asincr\xf3nicas y pueden generar errores de manera as\xedncrona. Para manejar estos errores, se utilizan devoluciones de llamada (callbacks), promesas o async/await."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:'function hacerAlgoAsincrono() {\n  return new Promise((resolve, reject) => {\n    setTimeout(\n      () => {\n        // Simulaci\xf3n de un error asincr\xf3nico\n        reject(new Error("Este es un error asincr\xf3nico"));\n      },\n\n      1000\n    );\n  });\n}\n\nasync function iniciar() {\n  try {\n    await hacerAlgoAsincrono();\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\niniciar();\n'})}),"\n",(0,o.jsxs)(r.p,{children:["En este ejemplo, la funci\xf3n ",(0,o.jsx)(r.code,{children:"hacerAlgoAsincrono"})," devuelve una promesa que se rechaza despu\xe9s de un tiempo de espera simulado. El error se maneja utilizando ",(0,o.jsx)(r.code,{children:"async/await"})," en la funci\xf3n ",(0,o.jsx)(r.code,{children:"iniciar"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"conclusiones-y-mejores-pr\xe1cticas",children:"Conclusiones y Mejores Pr\xe1cticas"}),"\n",(0,o.jsx)(r.p,{children:"El manejo de errores es un aspecto crucial de la programaci\xf3n en JavaScript. Algunas mejores pr\xe1cticas a tener en cuenta incluyen:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Utilizar bloques ",(0,o.jsx)(r.code,{children:"try...catch"})," para manejar errores de manera efectiva."]}),"\n",(0,o.jsx)(r.li,{children:"Proporcionar mensajes de error claros y descriptivos para facilitar la depuraci\xf3n."}),"\n",(0,o.jsxs)(r.li,{children:["Utilizar el bloque ",(0,o.jsx)(r.code,{children:"finally"})," para la limpieza de recursos."]}),"\n",(0,o.jsx)(r.li,{children:"Manejar errores asincr\xf3nicos utilizando promesas, async/await o devoluciones de llamada."}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Al comprender y aplicar adecuadamente las t\xe9cnicas de manejo de errores en JavaScript, los desarrolladores pueden escribir c\xf3digo m\xe1s robusto y confiable, mejorar la calidad del software y proporcionar mejores experiencias de usuario."})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}}}]);