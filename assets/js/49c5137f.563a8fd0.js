"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[6529],{8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>t});var a=n(6540);const s={},i=a.createContext(s);function r(e){const o=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function t(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:o},e.children)}},9534:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"js/tiposDatos","title":"Tipos de datos","description":"Tipos de Datos en JavaScript","source":"@site/docs/js/tiposDatos.md","sourceDirName":"js","slug":"/js/tiposDatos","permalink":"/docuQuest/docs/js/tiposDatos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/tiposDatos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sintaxis JavaScript","permalink":"/docuQuest/docs/js/sintaxis"},"next":{"title":"Comentarios","permalink":"/docuQuest/docs/js/comentarios"}}');var s=n(4848),i=n(8453);const r={},t="Tipos de datos",d={},l=[{value:"Tipos de Datos en JavaScript",id:"tipos-de-datos-en-javascript",level:2},{value:"1. Tipos de Datos Primitivos",id:"1-tipos-de-datos-primitivos",level:3},{value:"a. N\xfameros (Number)",id:"a-n\xfameros-number",level:3},{value:"b. Cadena de Texto (String)",id:"b-cadena-de-texto-string",level:3},{value:"c. Booleano (Boolean)",id:"c-booleano-boolean",level:3},{value:"d. Valor Nulo (Null)",id:"d-valor-nulo-null",level:3},{value:"e. Valor Indefinido (Undefined)",id:"e-valor-indefinido-undefined",level:3},{value:"f. S\xedmbolo (Symbol)",id:"f-s\xedmbolo-symbol",level:3},{value:"2. Tipos de Datos No Primitivos",id:"2-tipos-de-datos-no-primitivos",level:3},{value:"a. Objeto (Object)",id:"a-objeto-object",level:3},{value:"b. Arreglo (Array)",id:"b-arreglo-array",level:3},{value:"c. Funci\xf3n (Function)",id:"c-funci\xf3n-function",level:3},{value:"Funcionamiento de los Tipos de Datos en JavaScript",id:"funcionamiento-de-los-tipos-de-datos-en-javascript",level:2},{value:"Ejemplo Pr\xe1ctico:",id:"ejemplo-pr\xe1ctico",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function c(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"tipos-de-datos",children:"Tipos de datos"})}),"\n",(0,s.jsx)(o.h2,{id:"tipos-de-datos-en-javascript",children:"Tipos de Datos en JavaScript"}),"\n",(0,s.jsx)(o.p,{children:"JavaScript es un lenguaje de programaci\xf3n din\xe1micamente tipado, lo que significa que las variables no est\xe1n asociadas a un tipo de dato espec\xedfico y pueden contener diferentes tipos de datos en momentos diferentes durante la ejecuci\xf3n del programa. A continuaci\xf3n, describiremos los principales tipos de datos en JavaScript:"}),"\n",(0,s.jsx)(o.h3,{id:"1-tipos-de-datos-primitivos",children:"1. Tipos de Datos Primitivos"}),"\n",(0,s.jsx)(o.p,{children:"Los tipos de datos primitivos en JavaScript son aquellos que representan valores simples y se almacenan directamente en la ubicaci\xf3n de memoria que la variable tiene asignada. Estos tipos de datos son inmutables, lo que significa que no se pueden modificar directamente. Los tipos de datos primitivos en JavaScript son los siguientes:"}),"\n",(0,s.jsx)(o.h3,{id:"a-n\xfameros-number",children:"a. N\xfameros (Number)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "number" se utiliza para representar valores num\xe9ricos, ya sean enteros o de punto flotante.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"let edad = 25; // Entero\r\nlet precio = 99.99; // Punto flotante\n"})}),"\n",(0,s.jsx)(o.h3,{id:"b-cadena-de-texto-string",children:"b. Cadena de Texto (String)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "string" se utiliza para representar cadenas de caracteres, es decir, texto.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:'let nombre = "Juan";\r\nlet mensaje = "Hola Mundo";\n'})}),"\n",(0,s.jsx)(o.h3,{id:"c-booleano-boolean",children:"c. Booleano (Boolean)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "boolean" se utiliza para representar valores de verdadero (true) o falso (false).'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"let esMayorDeEdad = true;\r\nlet tienePermiso = false;\n"})}),"\n",(0,s.jsx)(o.h3,{id:"d-valor-nulo-null",children:"d. Valor Nulo (Null)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "null" se utiliza para representar la ausencia intencional de cualquier valor o referencia de objeto.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"let datoNulo = null;\n"})}),"\n",(0,s.jsx)(o.h3,{id:"e-valor-indefinido-undefined",children:"e. Valor Indefinido (Undefined)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "undefined" se utiliza para representar una variable que ha sido declarada pero a\xfan no ha sido asignada.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"let variableIndefinida;\n"})}),"\n",(0,s.jsx)(o.h3,{id:"f-s\xedmbolo-symbol",children:"f. S\xedmbolo (Symbol)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "symbol" se utiliza para crear identificadores \xfanicos para propiedades de objetos.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:'const simbolo = Symbol("descripcion");\n'})}),"\n",(0,s.jsx)(o.h3,{id:"2-tipos-de-datos-no-primitivos",children:"2. Tipos de Datos No Primitivos"}),"\n",(0,s.jsx)(o.p,{children:"Los tipos de datos no primitivos en JavaScript son aquellos que representan valores m\xe1s complejos y se almacenan como referencias a ubicaciones de memoria. Estos tipos de datos pueden contener conjuntos de valores y pueden ser modificados directamente. Los tipos de datos no primitivos en JavaScript son los siguientes:"}),"\n",(0,s.jsx)(o.h3,{id:"a-objeto-object",children:"a. Objeto (Object)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "object" se utiliza para representar colecciones de datos y funcionalidades. Los objetos en JavaScript son conjuntos de pares clave-valor, donde cada clave es una cadena \xfanica y cada valor puede ser cualquier tipo de datos, incluyendo otros objetos.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:'let persona = {\r\n  nombre: "Juan",\r\n  edad: 25,\r\n  esEstudiante: true,\r\n};\n'})}),"\n",(0,s.jsx)(o.h3,{id:"b-arreglo-array",children:"b. Arreglo (Array)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "array" se utiliza para representar una colecci\xf3n ordenada de elementos. Los elementos de un arreglo pueden ser de cualquier tipo de datos, incluyendo otros arreglos u objetos.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:'let colores = ["rojo", "verde", "azul"];\n'})}),"\n",(0,s.jsx)(o.h3,{id:"c-funci\xf3n-function",children:"c. Funci\xf3n (Function)"}),"\n",(0,s.jsx)(o.p,{children:'El tipo de datos "function" se utiliza para representar funciones en JavaScript. Las funciones son objetos de primera clase en JavaScript y pueden ser asignadas a variables, pasadas como argumentos y devueltas como valores de otras funciones.'}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"function sumar(a, b) {\r\n  return a + b;\r\n}\n"})}),"\n",(0,s.jsx)(o.h2,{id:"funcionamiento-de-los-tipos-de-datos-en-javascript",children:"Funcionamiento de los Tipos de Datos en JavaScript"}),"\n",(0,s.jsx)(o.p,{children:"Los tipos de datos en JavaScript se comportan de manera diferente seg\xfan su naturaleza. Los tipos de datos primitivos son inmutables, lo que significa que una vez que se han creado, no se pueden modificar directamente. Por otro lado, los tipos de datos no primitivos son mutables, lo que significa que pueden ser modificados directamente."}),"\n",(0,s.jsx)(o.h3,{id:"ejemplo-pr\xe1ctico",children:"Ejemplo Pr\xe1ctico:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:'// Tipos de datos primitivos\r\nlet numero = 10;\r\nlet texto = "Hola";\r\nlet esVerdadero = true;\r\n\r\n// Tipos de datos no primitivos\r\nlet persona = {\r\n  nombre: "Juan",\r\n  edad: 25,\r\n};\r\n\r\nlet colores = ["rojo", "verde", "azul"];\n'})}),"\n",(0,s.jsxs)(o.p,{children:["En este ejemplo, se muestran ejemplos de ambos tipos de datos en JavaScript. La variable ",(0,s.jsx)(o.code,{children:"numero"})," contiene un tipo de dato primitivo (n\xfamero), mientras que las variables ",(0,s.jsx)(o.code,{children:"persona"})," y ",(0,s.jsx)(o.code,{children:"colores"})," contienen tipos de datos no primitivos (objeto y arreglo, respectivamente)."]}),"\n",(0,s.jsx)(o.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,s.jsx)(o.p,{children:"En conclusi\xf3n, los tipos de datos en JavaScript son elementos fundamentales que permiten almacenar y manipular informaci\xf3n en un programa. Comprender los diferentes tipos de datos disponibles en JavaScript, as\xed como sus caracter\xedsticas y comportamientos, es esencial para escribir c\xf3digo efectivo y funcional en el desarrollo de aplicaciones web. Tanto los tipos de datos primitivos como los no primitivos tienen roles importantes en JavaScript, y saber c\xf3mo utilizarlos correctamente es crucial para convertirse en un programador competente y eficiente en este lenguaje de programaci\xf3n."})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);