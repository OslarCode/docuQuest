"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[1469],{6006:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"frontend/js/expresionesRegulares","title":"Expresiones Regulares","description":"Las expresiones regulares, tambi\xe9n conocidas como regex o RegExp, son una herramienta poderosa y vers\xe1til utilizada en muchos lenguajes de programaci\xf3n, incluyendo JavaScript. Permiten realizar b\xfasquedas, manipulaciones y validaciones de patrones de texto de manera eficiente y flexible.","source":"@site/docs/frontend/js/expresionesRegulares.md","sourceDirName":"frontend/js","slug":"/frontend/js/expresionesRegulares","permalink":"/docuQuest/docs/frontend/js/expresionesRegulares","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/expresionesRegulares.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Typeof","permalink":"/docuQuest/docs/frontend/js/typeof"},"next":{"title":"Clases","permalink":"/docuQuest/docs/frontend/js/clases"}}');var a=s(4848),o=s(8453);const i={},c="Expresiones Regulares",l={},t=[{value:"Introducci\xf3n a las Expresiones Regulares",id:"introducci\xf3n-a-las-expresiones-regulares",level:2},{value:"Sintaxis B\xe1sica de Expresiones Regulares en JavaScript",id:"sintaxis-b\xe1sica-de-expresiones-regulares-en-javascript",level:2},{value:"Funcionamiento de las Expresiones Regulares en JavaScript",id:"funcionamiento-de-las-expresiones-regulares-en-javascript",level:2},{value:"Patrones de Expresiones Regulares en JavaScript",id:"patrones-de-expresiones-regulares-en-javascript",level:2},{value:"Ejemplos de Expresiones Regulares en JavaScript",id:"ejemplos-de-expresiones-regulares-en-javascript",level:2},{value:"Conclusiones",id:"conclusiones",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"expresiones-regulares",children:"Expresiones Regulares"})}),"\n",(0,a.jsx)(n.h1,{id:"expresiones-regulares-en-javascript-introducci\xf3n-y-funcionamiento",children:"Expresiones Regulares en JavaScript: Introducci\xf3n y Funcionamiento"}),"\n",(0,a.jsx)(n.p,{children:"Las expresiones regulares, tambi\xe9n conocidas como regex o RegExp, son una herramienta poderosa y vers\xe1til utilizada en muchos lenguajes de programaci\xf3n, incluyendo JavaScript. Permiten realizar b\xfasquedas, manipulaciones y validaciones de patrones de texto de manera eficiente y flexible."}),"\n",(0,a.jsx)(n.h2,{id:"introducci\xf3n-a-las-expresiones-regulares",children:"Introducci\xf3n a las Expresiones Regulares"}),"\n",(0,a.jsx)(n.p,{children:"Las expresiones regulares son patrones de b\xfasqueda que se utilizan para encontrar coincidencias dentro de cadenas de texto. Estos patrones pueden ser simples o complejos, y pueden incluir caracteres literales, clases de caracteres, cuantificadores, grupos y otros constructos que permiten definir patrones espec\xedficos."}),"\n",(0,a.jsxs)(n.p,{children:["En JavaScript, las expresiones regulares se crean utilizando el objeto ",(0,a.jsx)(n.code,{children:"RegExp"})," o utilizando la sintaxis literal ",(0,a.jsx)(n.code,{children:"/patr\xf3n/"}),". Una vez creada, una expresi\xf3n regular puede ser utilizada para buscar coincidencias dentro de una cadena de texto utilizando m\xe9todos como ",(0,a.jsx)(n.code,{children:"test()"})," o ",(0,a.jsx)(n.code,{children:"exec()"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"sintaxis-b\xe1sica-de-expresiones-regulares-en-javascript",children:"Sintaxis B\xe1sica de Expresiones Regulares en JavaScript"}),"\n",(0,a.jsx)(n.p,{children:"La sintaxis b\xe1sica para crear una expresi\xf3n regular en JavaScript es la siguiente:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// Utilizando el constructor RegExp\r\nlet expresion1 = new RegExp("patr\xf3n");\r\n\r\n// Utilizando la sintaxis literal\r\nlet expresion2 = /patr\xf3n/;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Donde ",(0,a.jsx)(n.code,{children:"'patr\xf3n'"})," es el patr\xf3n de b\xfasqueda que se desea utilizar. Las expresiones regulares tambi\xe9n pueden contener modificadores para controlar el comportamiento de la b\xfasqueda, como ",(0,a.jsx)(n.code,{children:"i"})," para hacer la b\xfasqueda insensible a may\xfasculas y min\xfasculas, ",(0,a.jsx)(n.code,{children:"g"})," para realizar una b\xfasqueda global, y ",(0,a.jsx)(n.code,{children:"m"})," para realizar una b\xfasqueda multilinea."]}),"\n",(0,a.jsx)(n.h2,{id:"funcionamiento-de-las-expresiones-regulares-en-javascript",children:"Funcionamiento de las Expresiones Regulares en JavaScript"}),"\n",(0,a.jsxs)(n.p,{children:["Las expresiones regulares funcionan buscando coincidencias entre el patr\xf3n especificado y la cadena de texto objetivo. Esto se realiza utilizando m\xe9todos proporcionados por el objeto ",(0,a.jsx)(n.code,{children:"RegExp"}),", como ",(0,a.jsx)(n.code,{children:"test()"})," y ",(0,a.jsx)(n.code,{children:"exec()"}),". A continuaci\xf3n, se describen estos m\xe9todos y su funcionamiento:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"test()"}),":"]})," Este m\xe9todo comprueba si el patr\xf3n de la expresi\xf3n regular coincide con la cadena de texto especificada. Devuelve ",(0,a.jsx)(n.code,{children:"true"})," si hay una coincidencia y ",(0,a.jsx)(n.code,{children:"false"})," si no la hay."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let expresion = /patr\xf3n/;\r\nlet cadena = "cadena de texto";\r\n\r\nif (expresion.test(cadena)) {\r\n  console.log("La cadena contiene el patr\xf3n.");\r\n} else {\r\n  console.log("La cadena no contiene el patr\xf3n.");\r\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"exec()"}),":"]})," Este m\xe9todo busca la primera coincidencia del patr\xf3n dentro de la cadena de texto especificada. Devuelve un array con informaci\xf3n sobre la coincidencia encontrada, incluyendo el texto coincidente y la posici\xf3n en la cadena donde se encontr\xf3."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let expresion = /patr\xf3n/;\r\nlet cadena = "cadena de texto con patr\xf3n dentro";\r\n\r\nlet resultado = expresion.exec(cadena);\r\nconsole.log(resultado); // Devuelve informaci\xf3n sobre la coincidencia encontrada\n'})}),"\n",(0,a.jsx)(n.h2,{id:"patrones-de-expresiones-regulares-en-javascript",children:"Patrones de Expresiones Regulares en JavaScript"}),"\n",(0,a.jsx)(n.p,{children:"Las expresiones regulares pueden contener diversos elementos que permiten definir patrones espec\xedficos de b\xfasqueda. Algunos de los elementos m\xe1s comunes son:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Caracteres Literales:"})," Representan caracteres que deben coincidir exactamente en la cadena de texto."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clases de Caracteres:"})," Representan un conjunto de caracteres que pueden coincidir en una posici\xf3n espec\xedfica."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cuantificadores:"})," Especifican la cantidad de veces que un elemento puede aparecer en una coincidencia."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Grupos y Capturas:"})," Permiten agrupar elementos y realizar capturas para referirse a ellos posteriormente."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"ejemplos-de-expresiones-regulares-en-javascript",children:"Ejemplos de Expresiones Regulares en JavaScript"}),"\n",(0,a.jsx)(n.p,{children:"A continuaci\xf3n, se presentan algunos ejemplos de expresiones regulares y su uso en JavaScript:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Coincidencia de N\xfameros de Tel\xe9fono:"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let telefonoExpresion = /\\\\d{3}-\\\\d{3}-\\\\d{4}/;\r\nlet telefono = "123-456-7890";\r\n\r\nif (telefonoExpresion.test(telefono)) {\r\n  console.log("El n\xfamero de tel\xe9fono es v\xe1lido.");\r\n} else {\r\n  console.log("El n\xfamero de tel\xe9fono no es v\xe1lido.");\r\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Extracci\xf3n de Correos Electr\xf3nicos:"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'let correoExp;\r\n\r\nresion = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}/;\r\nlet texto = "Correo electr\xf3nico: ejemplo@dominio.com";\r\n\r\nlet resultado = correoExpresion.exec(texto);\r\nconsole.log("Correo electr\xf3nico encontrado:", resultado[0]);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,a.jsx)(n.p,{children:"Las expresiones regulares son una herramienta poderosa y vers\xe1til que permite realizar b\xfasquedas y manipulaciones avanzadas de cadenas de texto en JavaScript. Con su sintaxis flexible y sus diversos elementos, las expresiones regulares pueden adaptarse a una amplia gama de patrones de b\xfasqueda, lo que las convierte en una herramienta fundamental para cualquier programador de JavaScript. Al dominar el uso de expresiones regulares, los desarrolladores pueden escribir c\xf3digo m\xe1s eficiente y expresivo, mejorando as\xed la calidad y la robustez de sus aplicaciones."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);