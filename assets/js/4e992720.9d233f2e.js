"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[6627],{8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>i});var s=a(6540);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},8959:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"js/api/asyncAwait","title":"Async/Await","description":"Introducci\xf3n","source":"@site/docs/js/api/asyncAwait.md","sourceDirName":"js/api","slug":"/js/api/asyncAwait","permalink":"/docuQuest/docs/js/api/asyncAwait","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/api/asyncAwait.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"C\xf3digos de estado HTTP","permalink":"/docuQuest/docs/js/api/codigosEstado"},"next":{"title":"Autenticaci\xf3n y Autorizaci\xf3n","permalink":"/docuQuest/docs/js/api/autenticacionAutorizacion"}}');var o=a(4848),r=a(8453);const c={},i="Async/Await",t={},l=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"\xbfQu\xe9 es Async/Await y c\xf3mo funciona?",id:"qu\xe9-es-asyncawait-y-c\xf3mo-funciona",level:2},{value:"Definici\xf3n de Async/Await",id:"definici\xf3n-de-asyncawait",level:3},{value:"Ejemplo B\xe1sico de Async/Await",id:"ejemplo-b\xe1sico-de-asyncawait",level:3},{value:"Funcionamiento Interno",id:"funcionamiento-interno",level:3},{value:"La Forma M\xe1s Sencilla de Trabajar con Promesas y Solicitudes As\xedncronas",id:"la-forma-m\xe1s-sencilla-de-trabajar-con-promesas-y-solicitudes-as\xedncronas",level:2},{value:"Comparaci\xf3n entre Promesas y Async/Await",id:"comparaci\xf3n-entre-promesas-y-asyncawait",level:3},{value:"Ejemplo con Promesas",id:"ejemplo-con-promesas",level:3},{value:"Ejemplo con Async/Await",id:"ejemplo-con-asyncawait",level:3},{value:"Ventajas de Async/Await",id:"ventajas-de-asyncawait",level:3},{value:"Implementaci\xf3n de Solicitudes As\xedncronas con Fetch API",id:"implementaci\xf3n-de-solicitudes-as\xedncronas-con-fetch-api",level:3},{value:"Solicitud GET",id:"solicitud-get",level:3},{value:"Solicitud POST",id:"solicitud-post",level:3},{value:"Manejo de Errores con Async/Await",id:"manejo-de-errores-con-asyncawait",level:3},{value:"Ejemplo de Manejo de Errores",id:"ejemplo-de-manejo-de-errores",level:3},{value:"Uso de Async/Await en Ciclos y Funciones Concurrentes",id:"uso-de-asyncawait-en-ciclos-y-funciones-concurrentes",level:3},{value:"Ejemplo de Ciclo con Async/Await",id:"ejemplo-de-ciclo-con-asyncawait",level:3},{value:"Ejemplo de Funciones Concurrentes",id:"ejemplo-de-funciones-concurrentes",level:3},{value:"Aplicaciones Avanzadas de Async/Await",id:"aplicaciones-avanzadas-de-asyncawait",level:2},{value:"Ejecuci\xf3n Condicional y Reintentos",id:"ejecuci\xf3n-condicional-y-reintentos",level:3},{value:"Ejemplo de Reintentos",id:"ejemplo-de-reintentos",level:3},{value:"Async/Await con WebSockets",id:"asyncawait-con-websockets",level:3},{value:"Ejemplo de WebSocket",id:"ejemplo-de-websocket",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"asyncawait",children:"Async/Await"})}),"\n",(0,o.jsx)(n.h1,{id:"asyncawait-en-las-apis-rest-de-javascript-para-p\xe1ginas-web",children:"Async/Await en las APIs REST de JavaScript para P\xe1ginas Web"}),"\n",(0,o.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,o.jsxs)(n.p,{children:["La introducci\xf3n de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," en ECMAScript 2017 ha transformado la manera en que los desarrolladores manejan operaciones as\xedncronas en JavaScript. Esta t\xe9cnica proporciona una forma m\xe1s intuitiva y legible de trabajar con promesas, especialmente en el contexto de las APIs REST."]}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-es-asyncawait-y-c\xf3mo-funciona",children:"\xbfQu\xe9 es Async/Await y c\xf3mo funciona?"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-de-asyncawait",children:"Definici\xf3n de Async/Await"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," son palabras clave en JavaScript que permiten escribir c\xf3digo as\xedncrono de manera que se asemeja a c\xf3digo s\xedncrono, mejorando la legibilidad y la gesti\xf3n de las promesas. Una funci\xf3n declarada con ",(0,o.jsx)(n.code,{children:"async"})," devuelve una promesa impl\xedcitamente, y dentro de esta funci\xf3n, ",(0,o.jsx)(n.code,{children:"await"})," se puede utilizar para pausar la ejecuci\xf3n hasta que una promesa se resuelva o se rechace."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-asyncawait",children:"Ejemplo B\xe1sico de Async/Await"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchData() {\n  const response = await fetch("<https://api.example.com/data>");\n  const data = await response.json();\n  console.log(data);\n}\n\nfetchData();\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"async function fetchData()"}),": Define una funci\xf3n as\xedncrona."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await fetch('<https://api.example.com/data>')"}),": Pausa la ejecuci\xf3n hasta que la promesa devuelta por ",(0,o.jsx)(n.code,{children:"fetch"})," se resuelva."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await response.json()"}),": Pausa la ejecuci\xf3n hasta que la promesa devuelta por ",(0,o.jsx)(n.code,{children:"response.json()"})," se resuelva, permitiendo obtener y procesar los datos de la respuesta."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"funcionamiento-interno",children:"Funcionamiento Interno"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Declaraci\xf3n de Funciones As\xedncronas"}),": Cuando una funci\xf3n se declara con ",(0,o.jsx)(n.code,{children:"async"}),", se garantiza que esta funci\xf3n devolver\xe1 una promesa. Si la funci\xf3n devuelve un valor, \xe9ste se envuelve autom\xe1ticamente en una promesa resuelta."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function example() {\n  return "Hello, World!";\n}\n\nexample().then(console.log); // Output: Hello, World!\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Uso de Await"}),": Dentro de una funci\xf3n as\xedncrona, ",(0,o.jsx)(n.code,{children:"await"})," se utiliza para esperar a que una promesa se resuelva. Esto pausa la ejecuci\xf3n de la funci\xf3n hasta que la promesa se resuelva y retorna el resultado de la promesa. Si la promesa es rechazada, se lanza una excepci\xf3n que puede ser manejada con un bloque ",(0,o.jsx)(n.code,{children:"try/catch"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"async function example() {\n  try {\n    const result = await someAsyncFunction();\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Manejo de Errores"}),": Las funciones as\xedncronas pueden manejar errores utilizando bloques ",(0,o.jsx)(n.code,{children:"try/catch"}),", lo que simplifica la gesti\xf3n de errores en comparaci\xf3n con el manejo tradicional de promesas."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function example() {\n  try {\n    const response = await fetch("<https://api.example.com/data>");\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error("Fetch error:", error);\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"la-forma-m\xe1s-sencilla-de-trabajar-con-promesas-y-solicitudes-as\xedncronas",children:"La Forma M\xe1s Sencilla de Trabajar con Promesas y Solicitudes As\xedncronas"}),"\n",(0,o.jsx)(n.h3,{id:"comparaci\xf3n-entre-promesas-y-asyncawait",children:"Comparaci\xf3n entre Promesas y Async/Await"}),"\n",(0,o.jsxs)(n.p,{children:["Antes de la introducci\xf3n de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),', las promesas eran la principal forma de manejar operaciones as\xedncronas en JavaScript. Aunque las promesas mejoraron la gesti\xf3n de callbacks anidados (el conocido "callback hell"), ',(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," ofrecen una sintaxis m\xe1s limpia y directa."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-promesas",children:"Ejemplo con Promesas"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/data>")\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-asyncawait",children:"Ejemplo con Async/Await"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchData() {\n  try {\n    const response = await fetch("<https://api.example.com/data>");\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error("Fetch error:", error);\n  }\n}\n\nfetchData();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"ventajas-de-asyncawait",children:"Ventajas de Async/Await"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Legibilidad"}),": El c\xf3digo escrito con ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," se asemeja m\xe1s al c\xf3digo s\xedncrono, lo que facilita la lectura y el mantenimiento."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Manejo de Errores"}),": Utilizar bloques ",(0,o.jsx)(n.code,{children:"try/catch"})," para manejar errores es m\xe1s intuitivo y limpio en comparaci\xf3n con el uso de ",(0,o.jsx)(n.code,{children:".catch"})," en las promesas."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Depuraci\xf3n"}),": La depuraci\xf3n de c\xf3digo as\xedncrono es m\xe1s sencilla con ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),", ya que las herramientas de desarrollo pueden trazar el flujo de ejecuci\xf3n de manera m\xe1s clara."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-de-solicitudes-as\xedncronas-con-fetch-api",children:"Implementaci\xf3n de Solicitudes As\xedncronas con Fetch API"}),"\n",(0,o.jsxs)(n.p,{children:["La Fetch API es una herramienta poderosa para realizar solicitudes HTTP. Combinada con ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),", se convierte en una opci\xf3n ideal para interactuar con APIs REST de manera eficiente y legible."]}),"\n",(0,o.jsx)(n.h3,{id:"solicitud-get",children:"Solicitud GET"}),"\n",(0,o.jsx)(n.p,{children:"Una solicitud GET se utiliza para obtener datos de un servidor."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function getData() {\n  try {\n    const response = await fetch("<https://api.example.com/data>");\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error("Fetch error:", error);\n  }\n}\n\ngetData();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"solicitud-post",children:"Solicitud POST"}),"\n",(0,o.jsx)(n.p,{children:"Una solicitud POST se utiliza para enviar datos al servidor, t\xedpicamente para crear un nuevo recurso."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function postData(url = "", data = {}) {\n  try {\n    const response = await fetch(url, {\n      method: "POST",\n      headers: {\n        "Content-Type": "application/json",\n      },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    const jsonResponse = await response.json();\n    console.log(jsonResponse);\n  } catch (error) {\n    console.error("Fetch error:", error);\n  }\n}\n\npostData("<https://api.example.com/data>", { answer: 42 });\n'})}),"\n",(0,o.jsx)(n.h3,{id:"manejo-de-errores-con-asyncawait",children:"Manejo de Errores con Async/Await"}),"\n",(0,o.jsx)(n.p,{children:"El manejo de errores es crucial en cualquier aplicaci\xf3n web para asegurar una experiencia de usuario robusta y resiliente."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-manejo-de-errores",children:"Ejemplo de Manejo de Errores"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchData(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error("Error fetching data:", error);\n    throw error; // Re-lanzar el error para que pueda ser manejado por el llamador\n  }\n}\n\nasync function main() {\n  try {\n    const data = await fetchData("<https://api.example.com/data>");\n    console.log("Data fetched successfully:", data);\n  } catch (error) {\n    console.error("Failed to fetch data:", error);\n  }\n}\n\nmain();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"uso-de-asyncawait-en-ciclos-y-funciones-concurrentes",children:"Uso de Async/Await en Ciclos y Funciones Concurrentes"}),"\n",(0,o.jsxs)(n.p,{children:["Una de las caracter\xedsticas poderosas de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," es su capacidad para manejar m\xfaltiples operaciones as\xedncronas de manera secuencial o concurrente."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-ciclo-con-asyncawait",children:"Ejemplo de Ciclo con Async/Await"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchMultipleUrls(urls) {\n  for (const url of urls) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error("Error fetching data from", url, ":", error);\n    }\n  }\n}\n\nconst urls = [\n  "<https://api.example.com/data1>",\n  "<https://api.example.com/data2>",\n  "<https://api.example.com/data3>",\n];\n\nfetchMultipleUrls(urls);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-funciones-concurrentes",children:"Ejemplo de Funciones Concurrentes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchConcurrently(urls) {\n  const fetchPromises = urls.map((url) =>\n    fetch(url).then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n  );\n\n  try {\n    const results = await Promise.all(fetchPromises);\n    console.log("All data fetched:", results);\n  } catch (error) {\n    console.error("Error fetching one or more URLs:", error);\n  }\n}\n\nconst urls = [\n  "<https://api.example.com/data1>",\n  "<https://api.example.com/data2>",\n  "<https://api.example.com/data3>",\n];\n\nfetchConcurrently(urls);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"Promise.all"})," se utiliza para ejecutar"]}),"\n",(0,o.jsxs)(n.p,{children:["m\xfaltiples solicitudes en paralelo, y ",(0,o.jsx)(n.code,{children:"await"})," se utiliza para esperar a que todas las promesas se resuelvan."]}),"\n",(0,o.jsx)(n.h2,{id:"aplicaciones-avanzadas-de-asyncawait",children:"Aplicaciones Avanzadas de Async/Await"}),"\n",(0,o.jsx)(n.h3,{id:"ejecuci\xf3n-condicional-y-reintentos",children:"Ejecuci\xf3n Condicional y Reintentos"}),"\n",(0,o.jsxs)(n.p,{children:["A veces es necesario realizar solicitudes condicionalmente o reintentar solicitudes fallidas. Esto se puede lograr f\xe1cilmente con ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-reintentos",children:"Ejemplo de Reintentos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchWithRetry(url, retries = 3) {\n  for (let i = 0; i < retries; i++) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      if (i < retries - 1) {\n        console.log(`Retrying... (${i + 1})`);\n      } else {\n        console.error("Max retries reached. Failed to fetch data.");\n        throw error;\n      }\n    }\n  }\n}\n\nfetchWithRetry("<https://api.example.com/data>")\n  .then((data) => console.log("Data fetched successfully:", data))\n  .catch((error) => console.error("Failed to fetch data:", error));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, se intenta realizar la solicitud hasta un m\xe1ximo de ",(0,o.jsx)(n.code,{children:"retries"})," veces antes de rendirse y lanzar el error."]}),"\n",(0,o.jsx)(n.h3,{id:"asyncawait-con-websockets",children:"Async/Await con WebSockets"}),"\n",(0,o.jsxs)(n.p,{children:["Adem\xe1s de HTTP, ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," tambi\xe9n pueden ser \xfatiles cuando se trabaja con WebSockets para manejar comunicaci\xf3n en tiempo real."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-websocket",children:"Ejemplo de WebSocket"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function connectWebSocket(url) {\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url);\n\n    ws.onopen = () => {\n      console.log("WebSocket connected");\n      resolve(ws);\n    };\n\n    ws.onerror = (error) => {\n      console.error("WebSocket error:", error);\n      reject(error);\n    };\n  });\n}\n\nasync function main() {\n  try {\n    const ws = await connectWebSocket("wss://example.com/socket");\n    ws.onmessage = (message) => {\n      console.log("Received message:", message.data);\n    };\n    // Send a message\n    ws.send("Hello WebSocket");\n  } catch (error) {\n    console.error("Failed to connect to WebSocket:", error);\n  }\n}\n\nmain();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, ",(0,o.jsx)(n.code,{children:"connectWebSocket"})," devuelve una promesa que se resuelve cuando el WebSocket se conecta exitosamente, y se rechaza si ocurre un error."]}),"\n",(0,o.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,o.jsxs)(n.p,{children:["El uso de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," ha revolucionado la manera en que los desarrolladores de JavaScript manejan operaciones as\xedncronas, especialmente en el contexto de las APIs REST. Estas herramientas permiten escribir c\xf3digo m\xe1s limpio, legible y f\xe1cil de mantener. La capacidad de manejar errores de manera intuitiva, ejecutar operaciones en paralelo y reintentar solicitudes fallidas hace que ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"})," sean indispensables para el desarrollo web moderno."]}),"\n",(0,o.jsxs)(n.p,{children:["En este documento, hemos explorado en profundidad qu\xe9 son ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),", c\xf3mo funcionan y c\xf3mo se pueden utilizar para simplificar el trabajo con promesas y solicitudes as\xedncronas en aplicaciones web. Tambi\xe9n hemos cubierto aplicaciones avanzadas, incluyendo la gesti\xf3n de errores, la ejecuci\xf3n concurrente y el uso de WebSockets."]}),"\n",(0,o.jsxs)(n.p,{children:["Con una comprensi\xf3n s\xf3lida de ",(0,o.jsx)(n.code,{children:"async"})," y ",(0,o.jsx)(n.code,{children:"await"}),", los desarrolladores pueden crear aplicaciones web m\xe1s robustas y eficientes, mejorando significativamente la experiencia del usuario final."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);