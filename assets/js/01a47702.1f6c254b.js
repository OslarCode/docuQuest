"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[4861],{2488:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"frontend/js/objetos_literales/this","title":"This","description":"Introducci\xf3n","source":"@site/docs/frontend/js/objetos_literales/this.md","sourceDirName":"frontend/js/objetos_literales","slug":"/frontend/js/objetos_literales/this","permalink":"/docuQuest/docs/frontend/js/objetos_literales/this","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/objetos_literales/this.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Objetos","permalink":"/docuQuest/docs/frontend/js/objetos_literales/"},"next":{"title":"\xbfPor qu\xe9 en JavaScript se dice que todo son objetos?","permalink":"/docuQuest/docs/frontend/js/objetos_literales/todoSonObjetos"}}');var s=o(4848),d=o(8453);const r={},a="This",t={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"\xbfQu\xe9 es &quot;this&quot; en JavaScript?",id:"qu\xe9-es-this-en-javascript",level:2},{value:"Funcionamiento de &quot;this&quot; en los Objetos",id:"funcionamiento-de-this-en-los-objetos",level:2},{value:"1. Uso de &quot;this&quot; dentro de un M\xe9todo de un Objeto",id:"1-uso-de-this-dentro-de-un-m\xe9todo-de-un-objeto",level:3},{value:"2. Uso de &quot;this&quot; en Funciones Anidadas",id:"2-uso-de-this-en-funciones-anidadas",level:3},{value:"3. Uso de &quot;this&quot; con Funciones de Flecha",id:"3-uso-de-this-con-funciones-de-flecha",level:3},{value:"4. Uso de &quot;this&quot; con la funci\xf3n &quot;bind&quot;",id:"4-uso-de-this-con-la-funci\xf3n-bind",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"this",children:"This"})}),"\n",(0,s.jsx)(n.h1,{id:"el-uso-de-this-en-los-objetos-de-javascript",children:'El Uso de "this" en los Objetos de JavaScript'}),"\n",(0,s.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,s.jsxs)(n.p,{children:["El uso de la palabra clave ",(0,s.jsx)(n.code,{children:"this"})," en JavaScript es fundamental para entender c\xf3mo funcionan los objetos y c\xf3mo interact\xfaan sus m\xe9todos y propiedades. ",(0,s.jsx)(n.code,{children:"this"})," se utiliza para hacer referencia al contexto de ejecuci\xf3n actual en el que se encuentra un c\xf3digo JavaScript. En el contexto de los objetos, ",(0,s.jsx)(n.code,{children:"this"})," juega un papel crucial al permitir el acceso din\xe1mico a las propiedades y m\xe9todos de un objeto."]}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-es-this-en-javascript",children:'\xbfQu\xe9 es "this" en JavaScript?'}),"\n",(0,s.jsxs)(n.p,{children:["En JavaScript, la palabra clave ",(0,s.jsx)(n.code,{children:"this"})," se refiere al contexto de ejecuci\xf3n actual. En el contexto de los objetos, ",(0,s.jsx)(n.code,{children:"this"})," se refiere al objeto al que pertenece el m\xe9todo o la propiedad en el que se utiliza. El valor de ",(0,s.jsx)(n.code,{children:"this"})," se determina en tiempo de ejecuci\xf3n y depende de c\xf3mo se invoca la funci\xf3n que lo contiene. ",(0,s.jsx)(n.code,{children:"this"})," puede tomar diferentes valores dependiendo del modo en que se llame a la funci\xf3n que lo contiene."]}),"\n",(0,s.jsx)(n.h2,{id:"funcionamiento-de-this-en-los-objetos",children:'Funcionamiento de "this" en los Objetos'}),"\n",(0,s.jsxs)(n.p,{children:["El comportamiento de ",(0,s.jsx)(n.code,{children:"this"})," en los objetos puede ser un tanto complejo, pero entender c\xf3mo funciona es fundamental para escribir c\xf3digo JavaScript robusto y eficiente. A continuaci\xf3n, exploraremos algunos casos comunes de uso de ",(0,s.jsx)(n.code,{children:"this"})," en los objetos:"]}),"\n",(0,s.jsx)(n.h3,{id:"1-uso-de-this-dentro-de-un-m\xe9todo-de-un-objeto",children:'1. Uso de "this" dentro de un M\xe9todo de un Objeto'}),"\n",(0,s.jsxs)(n.p,{children:["Cuando ",(0,s.jsx)(n.code,{children:"this"})," se utiliza dentro de un m\xe9todo de un objeto, hace referencia al propio objeto en el que se encuentra el m\xe9todo. Esto permite acceder din\xe1micamente a las propiedades y m\xe9todos del objeto sin necesidad de hacer referencia expl\xedcita al nombre del objeto."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let persona = {\r\n  nombre: "Juan",\r\n  edad: 30,\r\n  saludar: function () {\r\n    console.log(\r\n      "\xa1Hola! Mi nombre es " + this.nombre + " y tengo " + this.edad + " a\xf1os."\r\n    );\r\n  },\r\n};\r\n\r\npersona.saludar(); // Imprime: \xa1Hola! Mi nombre es Juan y tengo 30 a\xf1os.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, ",(0,s.jsx)(n.code,{children:"this"})," hace referencia al objeto ",(0,s.jsx)(n.code,{children:"persona"}),", lo que permite acceder a las propiedades ",(0,s.jsx)(n.code,{children:"nombre"})," y ",(0,s.jsx)(n.code,{children:"edad"})," del objeto dentro del m\xe9todo ",(0,s.jsx)(n.code,{children:"saludar"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"2-uso-de-this-en-funciones-anidadas",children:'2. Uso de "this" en Funciones Anidadas'}),"\n",(0,s.jsxs)(n.p,{children:["Cuando se utiliza ",(0,s.jsx)(n.code,{children:"this"})," dentro de una funci\xf3n anidada dentro de un m\xe9todo de un objeto, ",(0,s.jsx)(n.code,{children:"this"})," hace referencia al objeto global (",(0,s.jsx)(n.code,{children:"window"})," en el navegador, o ",(0,s.jsx)(n.code,{children:"global"})," en Node.js) en lugar del objeto al que pertenece el m\xe9todo."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let coche = {\r\n  marca: "Toyota",\r\n  modelo: "Corolla",\r\n  obtenerInformacion: function () {\r\n    console.log("Marca: " + this.marca + ", Modelo: " + this.modelo);\r\n\r\n    function imprimirMarca() {\r\n      console.log("Marca: " + this.marca); // "this" se refiere al objeto global\r\n    }\r\n\r\n    imprimirMarca();\r\n  },\r\n};\r\n\r\ncoche.obtenerInformacion();\r\n// Imprime:\r\n// Marca: Toyota, Modelo: Corolla\r\n// Marca: undefined\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, al llamar a ",(0,s.jsx)(n.code,{children:"imprimirMarca()"})," dentro del m\xe9todo ",(0,s.jsx)(n.code,{children:"obtenerInformacion"}),", ",(0,s.jsx)(n.code,{children:"this"})," ya no hace referencia al objeto ",(0,s.jsx)(n.code,{children:"coche"}),", sino al objeto global. Como resultado, ",(0,s.jsx)(n.code,{children:"this.marca"})," dentro de ",(0,s.jsx)(n.code,{children:"imprimirMarca()"})," devuelve ",(0,s.jsx)(n.code,{children:"undefined"}),", ya que no hay ninguna propiedad ",(0,s.jsx)(n.code,{children:"marca"})," en el objeto global."]}),"\n",(0,s.jsx)(n.h3,{id:"3-uso-de-this-con-funciones-de-flecha",children:'3. Uso de "this" con Funciones de Flecha'}),"\n",(0,s.jsxs)(n.p,{children:["Las funciones de flecha en JavaScript no tienen su propio ",(0,s.jsx)(n.code,{children:"this"}),". En su lugar, heredan el valor de ",(0,s.jsx)(n.code,{children:"this"})," del contexto en el que est\xe1n definidas. Esto significa que ",(0,s.jsx)(n.code,{children:"this"})," en una funci\xf3n de flecha siempre hace referencia al ",(0,s.jsx)(n.code,{children:"this"})," del \xe1mbito l\xe9xico exterior."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let cuenta = {\r\n  saldo: 1000,\r\n  depositar: function (cantidad) {\r\n    this.saldo += cantidad;\r\n    console.log("Saldo despu\xe9s del dep\xf3sito:", this.saldo);\r\n  },\r\n  depositarMil: () => {\r\n    this.saldo += 1000; // "this" se refiere al objeto global\r\n    console.log("Saldo despu\xe9s del dep\xf3sito de 1000:", this.saldo);\r\n  },\r\n};\r\n\r\ncuenta.depositar(500); // Imprime: Saldo despu\xe9s del dep\xf3sito: 1500\r\ncuenta.depositarMil(); // Imprime: Saldo despu\xe9s del dep\xf3sito de 1000: NaN\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, ",(0,s.jsx)(n.code,{children:"this"})," dentro de la funci\xf3n de flecha ",(0,s.jsx)(n.code,{children:"depositarMil"})," hace referencia al objeto global, lo que lleva a un comportamiento no deseado al intentar acceder a la propiedad ",(0,s.jsx)(n.code,{children:"saldo"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"4-uso-de-this-con-la-funci\xf3n-bind",children:'4. Uso de "this" con la funci\xf3n "bind"'}),"\n",(0,s.jsxs)(n.p,{children:["La funci\xf3n ",(0,s.jsx)(n.code,{children:"bind"})," se utiliza para enlazar un nuevo valor de ",(0,s.jsx)(n.code,{children:"this"})," a una funci\xf3n existente. Esto es \xfatil cuando se desea especificar el valor de ",(0,s.jsx)(n.code,{children:"this"})," en el momento de la creaci\xf3n de una funci\xf3n."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'let libro = {\r\n  titulo: "JavaScript para Principiantes",\r\n  autor: "Juan P\xe9rez",\r\n  obtenerInformacion: function () {\r\n    console.log("T\xedtulo:", this.titulo);\r\n    console.log("Autor:", this.autor);\r\n  },\r\n};\r\n\r\nlet obtenerTitulo = libro.obtenerInformacion.bind(libro);\r\nobtenerTitulo(); // Imprime: T\xedtulo: JavaScript para Principiantes, Autor: Juan P\xe9rez\n'})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, ",(0,s.jsx)(n.code,{children:"bind(libro)"})," enlaza la funci\xf3n ",(0,s.jsx)(n.code,{children:"obtenerInformacion"})," al objeto ",(0,s.jsx)(n.code,{children:"libro"}),", lo que garantiza que ",(0,s.jsx)(n.code,{children:"this"})," dentro de la funci\xf3n enlazada haga referencia al objeto ",(0,s.jsx)(n.code,{children:"libro"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,s.jsxs)(n.p,{children:["En conclusi\xf3n, el uso de ",(0,s.jsx)(n.code,{children:"this"})," en JavaScript es fundamental para trabajar con objetos de manera eficiente y efectiva. ",(0,s.jsx)(n.code,{children:"this"})," permite acceder din\xe1micamente a las propiedades y m\xe9todos de un objeto sin necesidad de hacer referencia expl\xedcita al nombre del objeto. Sin embargo, es importante tener en cuenta c\xf3mo funciona ",(0,s.jsx)(n.code,{children:"this"})," en diferentes contextos de ejecuci\xf3n para evitar comportamientos inesperados en el c\xf3digo. Al comprender c\xf3mo funciona ",(0,s.jsx)(n.code,{children:"this"})," y c\xf3mo utilizarlo correctamente, los desarrolladores pueden escribir c\xf3digo m\xe1s claro, conciso y mantenible en JavaScript."]})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var i=o(6540);const s={},d=i.createContext(s);function r(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);