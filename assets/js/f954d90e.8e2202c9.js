"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[779],{5352:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"js/api/codigosEstado","title":"C\xf3digos de estado HTTP","description":"Un componente crucial de esta interacci\xf3n son los c\xf3digos de estado HTTP, que indican el resultado de las solicitudes realizadas al servidor. Estos c\xf3digos permiten a los desarrolladores y a las aplicaciones entender c\xf3mo se procesaron las solicitudes y responder adecuadamente.","source":"@site/docs/js/api/codigosEstado.md","sourceDirName":"js/api","slug":"/js/api/codigosEstado","permalink":"/docuQuest/docs/js/api/codigosEstado","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/api/codigosEstado.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Headers","permalink":"/docuQuest/docs/js/api/headers"},"next":{"title":"Async/Await","permalink":"/docuQuest/docs/js/api/asyncAwait"}}');var o=i(4848),a=i(8453);const s={},c="C\xf3digos de estado HTTP",d={},l=[{value:"200 OK: Solicitud Exitosa",id:"200-ok-solicitud-exitosa",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito",level:3},{value:"Implementaci\xf3n en JavaScript",id:"implementaci\xf3n-en-javascript",level:3},{value:"Ejemplo con Fetch API",id:"ejemplo-con-fetch-api",level:3},{value:"Aplicaci\xf3n Pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica",level:3},{value:"Ejemplo de Respuesta de Servidor",id:"ejemplo-de-respuesta-de-servidor",level:3},{value:"201 Created: Recurso Creado",id:"201-created-recurso-creado",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito-1",level:3},{value:"Implementaci\xf3n en JavaScript",id:"implementaci\xf3n-en-javascript-1",level:3},{value:"Ejemplo con Fetch API",id:"ejemplo-con-fetch-api-1",level:3},{value:"Aplicaci\xf3n Pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica-1",level:3},{value:"Ejemplo de Respuesta de Servidor",id:"ejemplo-de-respuesta-de-servidor-1",level:3},{value:"400 Bad Request: Solicitud Incorrecta",id:"400-bad-request-solicitud-incorrecta",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito-2",level:3},{value:"Implementaci\xf3n en JavaScript",id:"implementaci\xf3n-en-javascript-2",level:3},{value:"Ejemplo con Fetch API",id:"ejemplo-con-fetch-api-2",level:3},{value:"Aplicaci\xf3n Pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica-2",level:3},{value:"Ejemplo de Respuesta de Servidor",id:"ejemplo-de-respuesta-de-servidor-2",level:3},{value:"401 Unauthorized: No Autorizado",id:"401-unauthorized-no-autorizado",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito-3",level:3},{value:"Implementaci\xf3n en JavaScript",id:"implementaci\xf3n-en-javascript-3",level:3},{value:"Ejemplo con Fetch API",id:"ejemplo-con-fetch-api-3",level:3},{value:"Aplicaci\xf3n Pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica-3",level:3},{value:"Ejemplo de Respuesta de Servidor",id:"ejemplo-de-respuesta-de-servidor-3",level:3},{value:"404 Not Found: Recurso No Encontrado",id:"404-not-found-recurso-no-encontrado",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito-4",level:3},{value:"Implementaci\xf3n en JavaScript",id:"implementaci\xf3n-en-javascript-4",level:3},{value:"Ejemplo con Fetch API",id:"ejemplo-con-fetch-api-4",level:3},{value:"Aplicaci\xf3n Pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica-4",level:3},{value:"Ejemplo de Respuesta de Servidor",id:"ejemplo-de-respuesta-de-servidor-4",level:3},{value:"500 Internal Server Error: Error en el Servidor",id:"500-internal-server-error-error-en-el-servidor",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito-5",level:3},{value:"Implementaci\xf3n en JavaScript",id:"implementaci\xf3n-en-javascript-5",level:3},{value:"Ejemplo con Fetch API",id:"ejemplo-con-fetch-api-5",level:3},{value:"Aplicaci\xf3n Pr\xe1ctica",id:"aplicaci\xf3n-pr\xe1ctica-5",level:3},{value:"Ejemplo de Respuesta de Servidor",id:"ejemplo-de-respuesta-de-servidor-5",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"c\xf3digos-de-estado-http",children:"C\xf3digos de estado HTTP"})}),"\n",(0,o.jsx)(n.h1,{id:"c\xf3digos-de-estado-http-en-las-apis-rest-de-javascript-para-p\xe1ginas-web",children:"C\xf3digos de Estado HTTP en las APIs REST de JavaScript para P\xe1ginas Web"}),"\n",(0,o.jsx)(n.p,{children:"Un componente crucial de esta interacci\xf3n son los c\xf3digos de estado HTTP, que indican el resultado de las solicitudes realizadas al servidor. Estos c\xf3digos permiten a los desarrolladores y a las aplicaciones entender c\xf3mo se procesaron las solicitudes y responder adecuadamente."}),"\n",(0,o.jsx)(n.h2,{id:"200-ok-solicitud-exitosa",children:"200 OK: Solicitud Exitosa"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo de estado 200 OK indica que la solicitud se ha procesado correctamente y que el servidor ha devuelto la respuesta esperada. Este es el c\xf3digo m\xe1s com\xfanmente utilizado para indicar \xe9xito en una operaci\xf3n HTTP."}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-en-javascript",children:"Implementaci\xf3n en JavaScript"}),"\n",(0,o.jsx)(n.p,{children:"En JavaScript, la respuesta con el c\xf3digo 200 OK se maneja com\xfanmente utilizando la Fetch API o bibliotecas como Axios."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-fetch-api",children:"Ejemplo con Fetch API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/users>")\n  .then((response) => {\n    if (response.status === 200) {\n      return response.json();\n    } else {\n      throw new Error("Failed to fetch users");\n    }\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se verifica si el estado de la respuesta es 200 OK antes de procesar los datos JSON."}),"\n",(0,o.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica",children:"Aplicaci\xf3n Pr\xe1ctica"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo 200 OK se utiliza en varias operaciones, como obtener listas de recursos, recuperar detalles espec\xedficos de un recurso y validar solicitudes exitosas en general."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-respuesta-de-servidor",children:"Ejemplo de Respuesta de Servidor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  "id": 1,\n  "name": "John Doe",\n  "email": "john.doe@example.com"\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Esta respuesta JSON representa un usuario que ha sido recuperado exitosamente del servidor."}),"\n",(0,o.jsx)(n.h2,{id:"201-created-recurso-creado",children:"201 Created: Recurso Creado"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito-1",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsxs)(n.p,{children:["El c\xf3digo de estado 201 Created indica que una solicitud que lleva a la creaci\xf3n de un recurso ha sido exitosa. Adem\xe1s de indicar \xe9xito, este c\xf3digo suele ir acompa\xf1ado de la ubicaci\xf3n del nuevo recurso mediante el header ",(0,o.jsx)(n.code,{children:"Location"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-en-javascript-1",children:"Implementaci\xf3n en JavaScript"}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-fetch-api-1",children:"Ejemplo con Fetch API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const data = { name: "John Doe", email: "john.doe@example.com" };\n\nfetch("<https://api.example.com/users>", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify(data),\n})\n  .then((response) => {\n    if (response.status === 201) {\n      return response.json();\n    } else {\n      throw new Error("Failed to create user");\n    }\n  })\n  .then((data) => console.log("User created:", data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se verifica si el estado de la respuesta es 201 Created antes de procesar los datos JSON del nuevo recurso."}),"\n",(0,o.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica-1",children:"Aplicaci\xf3n Pr\xe1ctica"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo 201 Created se utiliza principalmente en operaciones de creaci\xf3n de recursos, como agregar un nuevo usuario, crear una nueva entrada en una base de datos o registrar un nuevo producto."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-respuesta-de-servidor-1",children:"Ejemplo de Respuesta de Servidor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'HTTP/1.1 201 Created\nLocation: <https://api.example.com/users/1>\nContent-Type: application/json\n\n{\n  "id": 1,\n  "name": "John Doe",\n  "email": "john.doe@example.com"\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Esta respuesta JSON incluye la ubicaci\xf3n del nuevo recurso creado y los detalles del recurso."}),"\n",(0,o.jsx)(n.h2,{id:"400-bad-request-solicitud-incorrecta",children:"400 Bad Request: Solicitud Incorrecta"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito-2",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo de estado 400 Bad Request indica que el servidor no puede procesar la solicitud debido a un error del cliente, como una sintaxis incorrecta, par\xe1metros inv\xe1lidos o datos malformados."}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-en-javascript-2",children:"Implementaci\xf3n en JavaScript"}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-fetch-api-2",children:"Ejemplo con Fetch API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/users>", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify({ name: "", email: "not-an-email" }),\n})\n  .then((response) => {\n    if (response.status === 400) {\n      return response.json().then((error) => {\n        throw new Error(`Bad Request: ${error.message}`);\n      });\n    } else {\n      return response.json();\n    }\n  })\n  .then((data) => console.log("User created:", data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se maneja el estado 400 Bad Request verificando la respuesta del servidor y lanzando un error si la solicitud es incorrecta."}),"\n",(0,o.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica-2",children:"Aplicaci\xf3n Pr\xe1ctica"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo 400 Bad Request se utiliza en situaciones donde el cliente env\xeda datos malformados, par\xe1metros incorrectos o cualquier otra solicitud que el servidor no pueda procesar debido a un error del cliente."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-respuesta-de-servidor-2",children:"Ejemplo de Respuesta de Servidor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  "error": "Invalid email format"\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Esta respuesta JSON indica que el servidor no pudo procesar la solicitud debido a un formato de correo electr\xf3nico inv\xe1lido."}),"\n",(0,o.jsx)(n.h2,{id:"401-unauthorized-no-autorizado",children:"401 Unauthorized: No Autorizado"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito-3",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo de estado 401 Unauthorized indica que la solicitud no se ha completado porque carece de credenciales de autenticaci\xf3n v\xe1lidas. Este c\xf3digo se utiliza cuando el servidor requiere autenticaci\xf3n y las credenciales proporcionadas son inv\xe1lidas o inexistentes."}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-en-javascript-3",children:"Implementaci\xf3n en JavaScript"}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-fetch-api-3",children:"Ejemplo con Fetch API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/secure-data>", {\n  headers: {\n    Authorization: "Bearer invalid-token",\n  },\n})\n  .then((response) => {\n    if (response.status === 401) {\n      throw new Error("Unauthorized: Invalid token");\n    } else {\n      return response.json();\n    }\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se maneja el estado 401 Unauthorized verificando la respuesta del servidor y lanzando un error si las credenciales son inv\xe1lidas."}),"\n",(0,o.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica-3",children:"Aplicaci\xf3n Pr\xe1ctica"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo 401 Unauthorized se utiliza en operaciones que requieren autenticaci\xf3n, como acceder a datos sensibles, modificar informaci\xf3n de usuario o realizar cualquier acci\xf3n que requiera una sesi\xf3n autenticada."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-respuesta-de-servidor-3",children:"Ejemplo de Respuesta de Servidor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'HTTP/1.1 401 Unauthorized\nWWW-Authenticate: Bearer realm="example"\n\n{\n  "error": "Invalid token"\n}\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Esta respuesta JSON y el header ",(0,o.jsx)(n.code,{children:"WWW-Authenticate"})," indican que la solicitud no est\xe1 autorizada debido a un token inv\xe1lido."]}),"\n",(0,o.jsx)(n.h2,{id:"404-not-found-recurso-no-encontrado",children:"404 Not Found: Recurso No Encontrado"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito-4",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo de estado 404 Not Found indica que el servidor no pudo encontrar el recurso solicitado. Este c\xf3digo se utiliza cuando el recurso especificado en la URL no existe."}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-en-javascript-4",children:"Implementaci\xf3n en JavaScript"}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-fetch-api-4",children:"Ejemplo con Fetch API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/non-existent-resource>")\n  .then((response) => {\n    if (response.status === 404) {\n      throw new Error("Resource not found");\n    } else {\n      return response.json();\n    }\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se maneja el estado 404 Not Found verificando la respuesta del servidor y lanzando un error si el recurso no se encuentra."}),"\n",(0,o.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica-4",children:"Aplicaci\xf3n Pr\xe1ctica"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo 404 Not Found se utiliza cuando se solicita un recurso que no existe en el servidor, como una p\xe1gina web, un archivo, o una entrada en una base de datos."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-respuesta-de-servidor-4",children:"Ejemplo de Respuesta de Servidor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'HTTP/1.1 404 Not Found\nContent-Type: application/json\n\n{\n  "error": "Resource not found"\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Esta respuesta JSON indica que el servidor no pudo encontrar el recurso solicitado."}),"\n",(0,o.jsx)(n.h2,{id:"500-internal-server-error-error-en-el-servidor",children:"500 Internal Server Error: Error en el Servidor"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito-5",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo de estado 500 Internal Server Error indica que el servidor encontr\xf3 una condici\xf3n inesperada que le impidi\xf3 completar la solicitud. Este c\xf3digo se utiliza cuando ocurre un error gen\xe9rico en el servidor que no se puede clasificar en otra categor\xeda de c\xf3digos de estado."}),"\n",(0,o.jsx)(n.h3,{id:"implementaci\xf3n-en-javascript-5",children:"Implementaci\xf3n en JavaScript"}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-fetch-api-5",children:"Ejemplo con Fetch API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/unstable-endpoint>")\n  .then((response) => {\n    if (response.status === 500) {\n      throw new Error("Internal Server Error");\n    } else {\n      return response.json();\n    }\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se maneja el estado 500 Internal Server Error verificando la respuesta del servidor y lanzando un error si ocurre un problema en el servidor."}),"\n",(0,o.jsx)(n.h3,{id:"aplicaci\xf3n-pr\xe1ctica-5",children:"Aplicaci\xf3n Pr\xe1ctica"}),"\n",(0,o.jsx)(n.p,{children:"El c\xf3digo 500 Internal Server Error se utiliza cuando ocurre un error interno en el servidor, como una excepci\xf3n no controlada, problemas con la base de datos o cualquier otra falla del sistema."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-respuesta-de-servidor-5",children:"Ejemplo de Respuesta de Servidor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'HTTP/1.1 500 Internal Server Error\n\nContent-Type: application/json\n\n{\n  "error": "Unexpected server error"\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Esta respuesta JSON indica que el servidor encontr\xf3 un error inesperado que le impidi\xf3 completar la solicitud."}),"\n",(0,o.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Los c\xf3digos de estado HTTP son fundamentales para la comunicaci\xf3n efectiva entre clientes y servidores en las APIs REST. Entender y manejar adecuadamente estos c\xf3digos permite a los desarrolladores crear aplicaciones web m\xe1s robustas y eficientes. Este documento ha explorado en detalle los c\xf3digos de estado 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found y 500 Internal Server Error, proporcionando ejemplos pr\xe1cticos de su implementaci\xf3n en JavaScript y discutiendo su aplicaci\xf3n en el desarrollo de APIs REST."}),"\n",(0,o.jsx)(n.p,{children:"La correcta interpretaci\xf3n y gesti\xf3n de estos c\xf3digos de estado no solo mejora la experiencia del usuario, sino que tambi\xe9n facilita el mantenimiento y la depuraci\xf3n de aplicaciones web complejas. A medida que las tecnolog\xedas web contin\xfaan evolucionando, el conocimiento profundo de los c\xf3digos de estado HTTP seguir\xe1 siendo una habilidad esencial para los desarrolladores de software."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var r=i(6540);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);