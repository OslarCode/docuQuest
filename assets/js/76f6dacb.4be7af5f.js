"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[2490],{8453:(e,o,s)=>{s.d(o,{R:()=>i,x:()=>d});var n=s(6540);const t={},r=n.createContext(t);function i(e){const o=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(r.Provider,{value:o},e.children)}},9346:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>d,default:()=>j,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"frontend/js/objetos_literales/todoSonObjetos","title":"\xbfPor qu\xe9 en JavaScript se dice que todo son objetos?","description":"Se dice que en JavaScript todo son objetos porque, en su n\xfacleo, la mayor\xeda de los valores y estructuras de datos en JavaScript pueden comportarse como objetos o son efectivamente objetos. Aqu\xed hay algunas razones clave:","source":"@site/docs/frontend/js/objetos_literales/todoSonObjetos.md","sourceDirName":"frontend/js/objetos_literales","slug":"/frontend/js/objetos_literales/todoSonObjetos","permalink":"/docuQuest/docs/frontend/js/objetos_literales/todoSonObjetos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/objetos_literales/todoSonObjetos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"This","permalink":"/docuQuest/docs/frontend/js/objetos_literales/this"},"next":{"title":"Strings","permalink":"/docuQuest/docs/frontend/js/strings/"}}');var t=s(4848),r=s(8453);const i={},d="\xbfPor qu\xe9 en JavaScript se dice que todo son objetos?",l={},c=[{value:"1. <strong>Los tipos de datos primitivos tienen envoltorios de objeto</strong>",id:"1-los-tipos-de-datos-primitivos-tienen-envoltorios-de-objeto",level:3},{value:"2. <strong>Todo lo que no es primitivo es un objeto</strong>",id:"2-todo-lo-que-no-es-primitivo-es-un-objeto",level:3},{value:"3. <strong>Las funciones son objetos de primera clase</strong>",id:"3-las-funciones-son-objetos-de-primera-clase",level:3},{value:"4. <strong>Los objetos pueden extenderse din\xe1micamente</strong>",id:"4-los-objetos-pueden-extenderse-din\xe1micamente",level:3},{value:"5. <strong>El prototipo de los objetos</strong>",id:"5-el-prototipo-de-los-objetos",level:3},{value:"<strong>Conclusi\xf3n</strong>",id:"conclusi\xf3n",level:3}];function a(e){const o={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"por-qu\xe9-en-javascript-se-dice-que-todo-son-objetos",children:"\xbfPor qu\xe9 en JavaScript se dice que todo son objetos?"})}),"\n",(0,t.jsxs)(o.p,{children:["Se dice que en ",(0,t.jsx)(o.strong,{children:"JavaScript todo son objetos"})," porque, en su n\xfacleo, la mayor\xeda de los valores y estructuras de datos en JavaScript pueden comportarse como objetos o son efectivamente objetos. Aqu\xed hay algunas razones clave:"]}),"\n",(0,t.jsxs)(o.h3,{id:"1-los-tipos-de-datos-primitivos-tienen-envoltorios-de-objeto",children:["1. ",(0,t.jsx)(o.strong,{children:"Los tipos de datos primitivos tienen envoltorios de objeto"})]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Aunque JavaScript tiene tipos primitivos como ",(0,t.jsx)(o.code,{children:"string"}),", ",(0,t.jsx)(o.code,{children:"number"}),", ",(0,t.jsx)(o.code,{children:"boolean"}),", ",(0,t.jsx)(o.code,{children:"null"}),", ",(0,t.jsx)(o.code,{children:"undefined"}),", ",(0,t.jsx)(o.code,{children:"bigint"})," y ",(0,t.jsx)(o.code,{children:"symbol"}),", cuando se accede a m\xe9todos de estos valores, JavaScript autom\xe1ticamente los envuelve en sus versiones de objeto."]}),"\n",(0,t.jsx)(o.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["Internamente, JavaScript convierte ",(0,t.jsx)(o.code,{children:'"Hola"'})," en un ",(0,t.jsx)(o.code,{children:'new String("Hola")'}),", lo que permite el acceso a m\xe9todos."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'let str = "Hola";\r\nconsole.log(str.toUpperCase()); // "HOLA"\n'})}),"\n",(0,t.jsxs)(o.h3,{id:"2-todo-lo-que-no-es-primitivo-es-un-objeto",children:["2. ",(0,t.jsx)(o.strong,{children:"Todo lo que no es primitivo es un objeto"})]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Los arrays (",(0,t.jsx)(o.code,{children:"[]"}),"), funciones (",(0,t.jsx)(o.code,{children:"function"}),"), objetos (",(0,t.jsx)(o.code,{children:"{}"}),"), fechas (",(0,t.jsx)(o.code,{children:"new Date()"}),"), expresiones regulares (",(0,t.jsx)(o.code,{children:"/regex/"}),"), y casi todas las dem\xe1s estructuras de datos en JavaScript son objetos."]}),"\n",(0,t.jsx)(o.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["Aunque ",(0,t.jsx)(o.code,{children:"arr"})," es un array, en JavaScript sigue siendo tratado como un objeto."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'let arr = [1, 2, 3];\r\nconsole.log(typeof arr); // "object"\r\n\n'})}),"\n",(0,t.jsxs)(o.h3,{id:"3-las-funciones-son-objetos-de-primera-clase",children:["3. ",(0,t.jsx)(o.strong,{children:"Las funciones son objetos de primera clase"})]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["En JavaScript, las funciones son en realidad objetos con una propiedad especial (",(0,t.jsx)(o.code,{children:"[[Call]]"}),") que les permite ejecutarse."]}),"\n",(0,t.jsx)(o.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"Como puedes ver, una funci\xf3n puede tener propiedades, lo que confirma que es un objeto."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'function saludar() {\r\n  console.log("Hola");\r\n}\r\nsaludar.propiedad = "Soy un objeto";\r\nconsole.log(saludar.propiedad); // "Soy un objeto"\r\n\n'})}),"\n",(0,t.jsxs)(o.h3,{id:"4-los-objetos-pueden-extenderse-din\xe1micamente",children:["4. ",(0,t.jsx)(o.strong,{children:"Los objetos pueden extenderse din\xe1micamente"})]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsx)(o.p,{children:"A diferencia de otros lenguajes m\xe1s estrictos, en JavaScript se pueden agregar propiedades a objetos en cualquier momento."}),"\n"]}),"\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsx)(o.p,{children:"Ejemplo:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'let persona = { nombre: "Juan" };\r\npersona.edad = 30;\r\nconsole.log(persona); // { nombre: "Juan", edad: 30 }\r\n\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(o.h3,{id:"5-el-prototipo-de-los-objetos",children:["5. ",(0,t.jsx)(o.strong,{children:"El prototipo de los objetos"})]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Todos los objetos en JavaScript heredan propiedades y m\xe9todos de un prototipo (",(0,t.jsx)(o.code,{children:"Object.prototype"}),", ",(0,t.jsx)(o.code,{children:"Array.prototype"}),", etc.)."]}),"\n",(0,t.jsx)(o.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["Aunque ",(0,t.jsx)(o.code,{children:"obj"})," est\xe1 vac\xedo, hereda ",(0,t.jsx)(o.code,{children:"toString()"})," de ",(0,t.jsx)(o.code,{children:"Object.prototype"}),"."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'let obj = {};\r\nconsole.log(obj.toString()); // "[object Object]"\r\n\n'})}),"\n",(0,t.jsx)(o.h3,{id:"conclusi\xf3n",children:(0,t.jsx)(o.strong,{children:"Conclusi\xf3n"})}),"\n",(0,t.jsxs)(o.p,{children:["En JavaScript, ",(0,t.jsx)(o.strong,{children:"todo es un objeto o se comporta como tal"}),", excepto los tipos de datos primitivos en su estado puro. Sin embargo, incluso estos pueden ser envueltos en objetos temporalmente para permitir el uso de m\xe9todos y propiedades. Esta flexibilidad es lo que da lugar a la afirmaci\xf3n de que ",(0,t.jsx)(o.em,{children:'"en JavaScript, todo es un objeto"'}),". \ud83d\ude80"]})]})}function j(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);