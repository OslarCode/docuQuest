"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[7031],{4325:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"frontend/js/booleanos","title":"Booleanos","description":"\xbfQu\xe9 son los Booleanos?","source":"@site/docs/frontend/js/booleanos.md","sourceDirName":"frontend/js","slug":"/frontend/js/booleanos","permalink":"/docuQuest/docs/frontend/js/booleanos","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/booleanos.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Math","permalink":"/docuQuest/docs/frontend/js/math"},"next":{"title":"If/Else","permalink":"/docuQuest/docs/frontend/js/ifElse"}}');var r=s(4848),l=s(8453);const a={},d="Booleanos",i={},c=[{value:"\xbfQu\xe9 son los Booleanos?",id:"qu\xe9-son-los-booleanos",level:2},{value:"Declaraci\xf3n de Booleanos en JavaScript",id:"declaraci\xf3n-de-booleanos-en-javascript",level:2},{value:"Operadores de Comparaci\xf3n y Booleanos",id:"operadores-de-comparaci\xf3n-y-booleanos",level:2},{value:"Operadores L\xf3gicos y Booleanos",id:"operadores-l\xf3gicos-y-booleanos",level:2},{value:"Conclusiones",id:"conclusiones",level:2}];function t(e){const o={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"booleanos",children:"Booleanos"})}),"\n",(0,r.jsx)(o.h2,{id:"qu\xe9-son-los-booleanos",children:"\xbfQu\xe9 son los Booleanos?"}),"\n",(0,r.jsx)(o.p,{children:"En la l\xf3gica y las matem\xe1ticas, un booleano es un tipo de dato que puede tener uno de dos valores: verdadero (true) o falso (false). Estos valores se utilizan para representar el resultado de una condici\xf3n o expresi\xf3n l\xf3gica. En JavaScript, los booleanos son un tipo de dato primitivo que se utiliza ampliamente en la toma de decisiones y la l\xf3gica de los programas."}),"\n",(0,r.jsx)(o.h2,{id:"declaraci\xf3n-de-booleanos-en-javascript",children:"Declaraci\xf3n de Booleanos en JavaScript"}),"\n",(0,r.jsxs)(o.p,{children:["En JavaScript, se pueden declarar booleanos de varias formas. La forma m\xe1s com\xfan es utilizando los valores literales ",(0,r.jsx)(o.code,{children:"true"})," y ",(0,r.jsx)(o.code,{children:"false"}),". Tambi\xe9n es posible crear booleanos a partir de expresiones l\xf3gicas, como comparaciones o evaluaciones de condicionales."]}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.strong,{children:"Ejemplo:"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"let esVerdadero = true;\r\nlet esFalso = false;\r\n\r\nlet mayorQueCero = 10 > 0; // true\r\nlet menorQueCero = -5 < 0; // true\r\nlet esIgual = 5 === 5; // true\n"})}),"\n",(0,r.jsxs)(o.p,{children:["En el ejemplo anterior, ",(0,r.jsx)(o.code,{children:"esVerdadero"})," se declara como verdadero (",(0,r.jsx)(o.code,{children:"true"}),"), ",(0,r.jsx)(o.code,{children:"esFalso"})," se declara como falso (",(0,r.jsx)(o.code,{children:"false"}),"), y las variables ",(0,r.jsx)(o.code,{children:"mayorQueCero"}),", ",(0,r.jsx)(o.code,{children:"menorQueCero"})," y ",(0,r.jsx)(o.code,{children:"esIgual"})," se inicializan con valores booleanos basados en expresiones l\xf3gicas."]}),"\n",(0,r.jsx)(o.h2,{id:"operadores-de-comparaci\xf3n-y-booleanos",children:"Operadores de Comparaci\xf3n y Booleanos"}),"\n",(0,r.jsx)(o.p,{children:"En JavaScript, se utilizan operadores de comparaci\xf3n para comparar dos valores y devolver un resultado booleano. Algunos de los operadores de comparaci\xf3n m\xe1s comunes son:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"==="})," (igualdad estricta): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si los dos operandos son iguales en valor y tipo."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"!=="})," (diferencia estricta): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si los dos operandos son diferentes en valor o tipo."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:">"})," (mayor que): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si el operando izquierdo es mayor que el operando derecho."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"<"})," (menor que): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si el operando izquierdo es menor que el operando derecho."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:">="})," (mayor o igual que): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si el operando izquierdo es mayor o igual que el operando derecho."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"<="})," (menor o igual que): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si el operando izquierdo es menor o igual que el operando derecho."]}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.strong,{children:"Ejemplo:"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"let x = 5;\r\nlet y = 10;\r\n\r\nlet esIgual = x === y; // false\r\nlet esMayor = x > y; // false\r\nlet esMenorOIgual = x <= y; // true\n"})}),"\n",(0,r.jsxs)(o.p,{children:["En el ejemplo anterior, ",(0,r.jsx)(o.code,{children:"esIgual"})," se inicializa con el resultado de la comparaci\xf3n ",(0,r.jsx)(o.code,{children:"x === y"}),", que devuelve ",(0,r.jsx)(o.code,{children:"false"})," porque ",(0,r.jsx)(o.code,{children:"x"})," no es igual a ",(0,r.jsx)(o.code,{children:"y"}),". Similarmente, ",(0,r.jsx)(o.code,{children:"esMayor"})," se inicializa con el resultado de la comparaci\xf3n ",(0,r.jsx)(o.code,{children:"x > y"}),", que devuelve ",(0,r.jsx)(o.code,{children:"false"})," porque ",(0,r.jsx)(o.code,{children:"x"})," no es mayor que ",(0,r.jsx)(o.code,{children:"y"}),". Por \xfaltimo, ",(0,r.jsx)(o.code,{children:"esMenorOIgual"})," se inicializa con el resultado de la comparaci\xf3n ",(0,r.jsx)(o.code,{children:"x <= y"}),", que devuelve ",(0,r.jsx)(o.code,{children:"true"})," porque ",(0,r.jsx)(o.code,{children:"x"})," es menor o igual que ",(0,r.jsx)(o.code,{children:"y"}),"."]}),"\n",(0,r.jsx)(o.h2,{id:"operadores-l\xf3gicos-y-booleanos",children:"Operadores L\xf3gicos y Booleanos"}),"\n",(0,r.jsx)(o.p,{children:"Los operadores l\xf3gicos son utilizados para combinar o manipular valores booleanos. En JavaScript, los operadores l\xf3gicos m\xe1s comunes son:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"&&"})," (AND l\xf3gico): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si ambos operandos son verdaderos."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"||"})," (OR l\xf3gico): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si al menos uno de los operandos es verdadero."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"!"})," (NOT l\xf3gico): Devuelve ",(0,r.jsx)(o.code,{children:"true"})," si el operando es falso, y ",(0,r.jsx)(o.code,{children:"false"})," si el operando es verdadero."]}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.strong,{children:"Ejemplo:"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"let a = true;\r\nlet b = false;\r\n\r\nlet resultadoAND = a && b; // false\r\nlet resultadoOR = a || b; // true\r\nlet resultadoNOT = !a; // false\n"})}),"\n",(0,r.jsxs)(o.p,{children:["En el ejemplo anterior, ",(0,r.jsx)(o.code,{children:"resultadoAND"})," se inicializa con el resultado de la operaci\xf3n ",(0,r.jsx)(o.code,{children:"a && b"}),", que devuelve ",(0,r.jsx)(o.code,{children:"false"})," porque ambos operandos no son verdaderos. ",(0,r.jsx)(o.code,{children:"resultadoOR"})," se"]}),"\n",(0,r.jsxs)(o.p,{children:["inicializa con el resultado de la operaci\xf3n ",(0,r.jsx)(o.code,{children:"a || b"}),", que devuelve ",(0,r.jsx)(o.code,{children:"true"})," porque al menos uno de los operandos es verdadero. Por \xfaltimo, ",(0,r.jsx)(o.code,{children:"resultadoNOT"})," se inicializa con el resultado de la operaci\xf3n ",(0,r.jsx)(o.code,{children:"!a"}),", que devuelve ",(0,r.jsx)(o.code,{children:"false"})," porque el operando ",(0,r.jsx)(o.code,{children:"a"})," es verdadero."]}),"\n",(0,r.jsx)(o.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,r.jsx)(o.p,{children:"En resumen, los booleanos son un tipo de dato fundamental en JavaScript que representan valores de verdadero o falso. Se utilizan para controlar el flujo de ejecuci\xf3n en los programas, realizar comparaciones y evaluar expresiones l\xf3gicas. Al comprender c\xf3mo funcionan los booleanos y c\xf3mo se utilizan en JavaScript, los desarrolladores pueden escribir c\xf3digo m\xe1s eficiente y l\xf3gico para sus aplicaciones."})]})}function u(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,o,s)=>{s.d(o,{R:()=>a,x:()=>d});var n=s(6540);const r={},l=n.createContext(r);function a(e){const o=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(l.Provider,{value:o},e.children)}}}]);