"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[3843],{891:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"js/sets","title":"Sets","description":"Introducci\xf3n a los Sets en JavaScript","source":"@site/docs/js/sets.md","sourceDirName":"js","slug":"/js/sets","permalink":"/docuQuest/docs/js/sets","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/sets.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Iterables","permalink":"/docuQuest/docs/js/iterables"},"next":{"title":"Typeof","permalink":"/docuQuest/docs/js/typeof"}}');var o=n(4848),t=n(8453);const r={},c="Sets",i={},l=[{value:"Introducci\xf3n a los Sets en JavaScript",id:"introducci\xf3n-a-los-sets-en-javascript",level:2},{value:"Creaci\xf3n de Sets en JavaScript",id:"creaci\xf3n-de-sets-en-javascript",level:2},{value:"Ejemplo de Creaci\xf3n de Sets",id:"ejemplo-de-creaci\xf3n-de-sets",level:3},{value:"Caracter\xedsticas de los Sets en JavaScript",id:"caracter\xedsticas-de-los-sets-en-javascript",level:2},{value:"1. Almacenamiento de Valores \xdanicos",id:"1-almacenamiento-de-valores-\xfanicos",level:3},{value:"2. M\xe9todos para Manipular Sets",id:"2-m\xe9todos-para-manipular-sets",level:3},{value:"3. Iteraci\xf3n sobre Sets",id:"3-iteraci\xf3n-sobre-sets",level:3},{value:"4. Sets como Argumentos para M\xe9todos",id:"4-sets-como-argumentos-para-m\xe9todos",level:3},{value:"Conclusiones",id:"conclusiones",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"sets",children:"Sets"})}),"\n",(0,o.jsx)(s.h2,{id:"introducci\xf3n-a-los-sets-en-javascript",children:"Introducci\xf3n a los Sets en JavaScript"}),"\n",(0,o.jsx)(s.p,{children:"Un set en JavaScript es una colecci\xf3n de valores \xfanicos que pueden ser de cualquier tipo, incluyendo n\xfameros, cadenas, objetos, funciones, entre otros. A diferencia de los arrays, los sets no permiten elementos duplicados, lo que significa que cada valor en un set debe ser \xfanico."}),"\n",(0,o.jsx)(s.p,{children:"Los sets fueron introducidos en ECMAScript 6 (tambi\xe9n conocido como ES6 o ECMAScript 2015) como una nueva estructura de datos incorporada en el lenguaje JavaScript para ofrecer una soluci\xf3n simple y eficiente para el manejo de conjuntos de valores \xfanicos."}),"\n",(0,o.jsx)(s.h2,{id:"creaci\xf3n-de-sets-en-javascript",children:"Creaci\xf3n de Sets en JavaScript"}),"\n",(0,o.jsxs)(s.p,{children:["En JavaScript, se pueden crear sets utilizando la clase ",(0,o.jsx)(s.code,{children:"Set"}),". Para crear un nuevo set, simplemente se utiliza el constructor ",(0,o.jsx)(s.code,{children:"Set"})," sin ning\xfan argumento, o se pasa un iterable (como un array) como argumento para inicializar el set con valores iniciales."]}),"\n",(0,o.jsx)(s.h3,{id:"ejemplo-de-creaci\xf3n-de-sets",children:"Ejemplo de Creaci\xf3n de Sets"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:"// Creaci\xf3n de un set vac\xedo\nconst setVacio = new Set();\n\n// Creaci\xf3n de un set con valores iniciales\nconst setConValores = new Set([1, 2, 3, 4, 5]);\n"})}),"\n",(0,o.jsxs)(s.p,{children:["En este ejemplo, ",(0,o.jsx)(s.code,{children:"setVacio"})," es un set vac\xedo, mientras que ",(0,o.jsx)(s.code,{children:"setConValores"})," es un set que contiene los valores del 1 al 5."]}),"\n",(0,o.jsx)(s.h2,{id:"caracter\xedsticas-de-los-sets-en-javascript",children:"Caracter\xedsticas de los Sets en JavaScript"}),"\n",(0,o.jsx)(s.p,{children:"Los sets en JavaScript tienen varias caracter\xedsticas importantes que los hacen \xfatiles en diferentes contextos de programaci\xf3n. Algunas de estas caracter\xedsticas incluyen:"}),"\n",(0,o.jsx)(s.h3,{id:"1-almacenamiento-de-valores-\xfanicos",children:"1. Almacenamiento de Valores \xdanicos"}),"\n",(0,o.jsx)(s.p,{children:"Los sets garantizan que cada elemento almacenado en ellos sea \xfanico. Si se intenta agregar un valor que ya existe en el set, no se producir\xe1 ning\xfan cambio en el set."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:"const set = new Set();\nset.add(1); // Se agrega el valor 1 al set\nset.add(2); // Se agrega el valor 2 al set\nset.add(1); // Intento de agregar el valor 1 nuevamente (sin efecto)\n"})}),"\n",(0,o.jsx)(s.h3,{id:"2-m\xe9todos-para-manipular-sets",children:"2. M\xe9todos para Manipular Sets"}),"\n",(0,o.jsx)(s.p,{children:"Los sets en JavaScript proporcionan m\xe9todos integrados para realizar operaciones comunes, como agregar elementos, eliminar elementos, verificar la existencia de un elemento y obtener el tama\xf1o del set."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:"const set = new Set([1, 2, 3]);\nset.add(4); // Agrega el valor 4 al set\nset.delete(2); // Elimina el valor 2 del set\nconsole.log(set.has(3)); // Devuelve true si el valor 3 est\xe1 presente en el set\nconsole.log(set.size); // Devuelve el tama\xf1o del set\n"})}),"\n",(0,o.jsx)(s.h3,{id:"3-iteraci\xf3n-sobre-sets",children:"3. Iteraci\xf3n sobre Sets"}),"\n",(0,o.jsxs)(s.p,{children:["Los sets en JavaScript son iterables, lo que significa que se pueden recorrer f\xe1cilmente utilizando bucles ",(0,o.jsx)(s.code,{children:"for...of"})," o utilizando el m\xe9todo ",(0,o.jsx)(s.code,{children:"forEach()"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:'const set = new Set(["a", "b", "c"]);\nfor (const elemento of set) {\n  console.log(elemento);\n}\n\nset.forEach((elemento) => {\n  console.log(elemento);\n});\n'})}),"\n",(0,o.jsx)(s.h3,{id:"4-sets-como-argumentos-para-m\xe9todos",children:"4. Sets como Argumentos para M\xe9todos"}),"\n",(0,o.jsxs)(s.p,{children:["Los sets tambi\xe9n se pueden utilizar como argumentos para m\xe9todos como ",(0,o.jsx)(s.code,{children:"forEach()"}),", ",(0,o.jsx)(s.code,{children:"map()"}),", ",(0,o.jsx)(s.code,{children:"filter()"})," y ",(0,o.jsx)(s.code,{children:"reduce()"}),", lo que permite realizar operaciones sobre los elementos del set de manera eficiente."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-jsx",children:"const set = new Set([1, 2, 3, 4, 5]);\nconst resultado = new Set([...set].map((valor) => valor * 2));\nconsole.log(resultado); // Salida esperada: Set { 2, 4, 6, 8, 10 }\n"})}),"\n",(0,o.jsx)(s.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,o.jsx)(s.p,{children:"En conclusi\xf3n, los sets en JavaScript son una herramienta valiosa para manejar colecciones de valores \xfanicos de manera eficiente. Proporcionan m\xe9todos integrados para realizar operaciones comunes, como agregar y eliminar elementos, verificar la existencia de un valor y obtener el tama\xf1o del set. Adem\xe1s, los sets son iterables, lo que facilita su uso en bucles y m\xe9todos de iteraci\xf3n."}),"\n",(0,o.jsx)(s.p,{children:"Al comprender los fundamentos de los sets en JavaScript y c\xf3mo funcionan, los desarrolladores pueden aprovechar al m\xe1ximo esta poderosa estructura de datos para manipular y gestionar datos de forma efectiva en sus aplicaciones y programas. Con su capacidad para almacenar valores \xfanicos y realizar operaciones eficientes, los sets se han convertido en una herramienta indispensable en el arsenal de cualquier desarrollador de JavaScript."})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var a=n(6540);const o={},t=a.createContext(o);function r(e){const s=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);