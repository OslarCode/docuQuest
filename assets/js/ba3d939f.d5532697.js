"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[3444],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var a=s(6540);const r={},i=a.createContext(r);function l(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}},8526:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"backend/sqlite/JSON","title":"JSON y estructuras din\xe1micas","description":"1. \xbfPor qu\xe9 usar JSON en SQLite?","source":"@site/docs/backend/sqlite/JSON.md","sourceDirName":"backend/sqlite","slug":"/backend/sqlite/JSON","permalink":"/docuQuest/docs/backend/sqlite/JSON","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/backend/sqlite/JSON.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Seguridad pr\xe1ctica","permalink":"/docuQuest/docs/backend/sqlite/seguridad"},"next":{"title":"B\xfasqueda de texto completo con FTS5","permalink":"/docuQuest/docs/backend/sqlite/busquedaFTS5"}}');var r=s(4848),i=s(8453);const l={},c="JSON y estructuras din\xe1micas",d={},o=[{value:"1. \xbfPor qu\xe9 usar JSON en SQLite?",id:"1-por-qu\xe9-usar-json-en-sqlite",level:2},{value:"2. Creando una tabla con JSON",id:"2-creando-una-tabla-con-json",level:2},{value:"3. Consultar valores dentro de JSON \u2014 <code>json_extract</code>",id:"3-consultar-valores-dentro-de-json--json_extract",level:2},{value:"4. Filtrar por campos dentro de JSON",id:"4-filtrar-por-campos-dentro-de-json",level:2},{value:"5. Actualizar valores dentro de JSON \u2014 <code>json_set</code>",id:"5-actualizar-valores-dentro-de-json--json_set",level:2},{value:"6. Otras funciones \xfatiles de JSON1",id:"6-otras-funciones-\xfatiles-de-json1",level:2},{value:"7. Ejercicio pr\xe1ctico \u2014 estructura din\xe1mica de usuario",id:"7-ejercicio-pr\xe1ctico--estructura-din\xe1mica-de-usuario",level:2},{value:"8. Cu\xe1ndo usar JSON y cu\xe1ndo no",id:"8-cu\xe1ndo-usar-json-y-cu\xe1ndo-no",level:2},{value:"9. Errores comunes con JSON1",id:"9-errores-comunes-con-json1",level:2},{value:"10. Buenas pr\xe1cticas con JSON1",id:"10-buenas-pr\xe1cticas-con-json1",level:2},{value:"1. Qu\xe9 es una columna generada",id:"1-qu\xe9-es-una-columna-generada",level:2},{value:"2. Columna generada con \xedndice sobre campo JSON",id:"2-columna-generada-con-\xedndice-sobre-campo-json",level:2},{value:"3. Columna generada para valores en arrays JSON",id:"3-columna-generada-para-valores-en-arrays-json",level:2},{value:"4. Comparativa de rendimiento",id:"4-comparativa-de-rendimiento",level:2},{value:"Sin \xedndice:",id:"sin-\xedndice",level:3},{value:"Con columna generada + \xedndice:",id:"con-columna-generada--\xedndice",level:3},{value:"5. Ejercicio pr\xe1ctico \u2014 indexar un campo JSON",id:"5-ejercicio-pr\xe1ctico--indexar-un-campo-json",level:2},{value:"6. Cuando no usar columnas generadas",id:"6-cuando-no-usar-columnas-generadas",level:2},{value:"7. Columnas virtuales vs almacenadas (<code>VIRTUAL</code> vs <code>STORED</code>)",id:"7-columnas-virtuales-vs-almacenadas-virtual-vs-stored",level:2},{value:"8. Combinando JSON + JOIN",id:"8-combinando-json--join",level:2},{value:"9. Buenas pr\xe1cticas con JSON + \xedndices",id:"9-buenas-pr\xe1cticas-con-json--\xedndices",level:2},{value:"10. Errores comunes al indexar JSON",id:"10-errores-comunes-al-indexar-json",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"json-y-estructuras-din\xe1micas",children:"JSON y estructuras din\xe1micas"})}),"\n",(0,r.jsx)(n.h2,{id:"1-por-qu\xe9-usar-json-en-sqlite",children:"1. \xbfPor qu\xe9 usar JSON en SQLite?"}),"\n",(0,r.jsx)(n.p,{children:"SQLite es una base relacional, pero hay casos donde los datos:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tienen estructura variable,"}),"\n",(0,r.jsx)(n.li,{children:"No justifican crear tablas adicionales,"}),"\n",(0,r.jsx)(n.li,{children:"Necesitan almacenarse de forma compacta."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un perfil de usuario con configuraciones personalizadas."}),"\n",(0,r.jsx)(n.li,{children:"Etiquetas o arrays de valores din\xe1micos."}),"\n",(0,r.jsx)(n.li,{children:"Logs o respuestas de APIs con estructura flexible."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Con JSON1, puedes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Guardar JSON como texto"})," (en una columna ",(0,r.jsx)(n.code,{children:"TEXT"}),"),"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consultar valores dentro del JSON"})," como si fueran columnas,"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Actualizar valores internos"})," sin reescribir todo,"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Indexar"})," campos espec\xedficos para rendimiento."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-creando-una-tabla-con-json",children:"2. Creando una tabla con JSON"}),"\n",(0,r.jsx)(n.p,{children:"Ejemplo sencillo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  metadata TEXT CHECK (json_valid(metadata))\n);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Aqu\xed ",(0,r.jsx)(n.code,{children:"metadata"})," es un ",(0,r.jsx)(n.code,{children:"TEXT"})," que debe contener ",(0,r.jsx)(n.strong,{children:"JSON v\xe1lido"})," gracias a ",(0,r.jsx)(n.code,{children:"json_valid()"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Insertar un usuario con metadatos:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'INSERT INTO users (name, metadata)\nVALUES (\'Ana\', \'{"theme":"dark","notifications":true,"roles":["admin","editor"]}\');\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Puedes usar cualquier estructura JSON v\xe1lida (objetos, arrays, booleanos, etc.)."}),"\n",(0,r.jsxs)(n.h2,{id:"3-consultar-valores-dentro-de-json--json_extract",children:["3. Consultar valores dentro de JSON \u2014 ",(0,r.jsx)(n.code,{children:"json_extract"})]}),"\n",(0,r.jsx)(n.p,{children:"Para obtener valores internos de la columna JSON:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  name,\n  json_extract(metadata, '$.theme') AS theme,\n  json_extract(metadata, '$.roles[0]') AS first_role\nFROM users;\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Notas:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$.theme"})," \u2192 accede a la clave ",(0,r.jsx)(n.code,{children:"theme"})," dentro del objeto."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$.roles[0]"})," \u2192 accede al primer elemento del array ",(0,r.jsx)(n.code,{children:"roles"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si la clave no existe \u2192 devuelve ",(0,r.jsx)(n.code,{children:"NULL"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Resultado:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"name | theme | first_role\n-------------------------\nAna  | dark  | admin\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4-filtrar-por-campos-dentro-de-json",children:"4. Filtrar por campos dentro de JSON"}),"\n",(0,r.jsxs)(n.p,{children:["Puedes usar ",(0,r.jsx)(n.code,{children:"json_extract"})," en el ",(0,r.jsx)(n.code,{children:"WHERE"})," como si fuera una columna:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM users\nWHERE json_extract(metadata, '$.notifications') = 1;\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Esto selecciona todos los usuarios que tengan ",(0,r.jsx)(n.code,{children:'"notifications": true'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Tambi\xe9n funciona con arrays:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM users\nWHERE json_extract(metadata, '$.roles[0]') = 'admin';\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Aunque funciona, si tienes muchos registros puede ser ",(0,r.jsx)(n.strong,{children:"lento sin \xedndice"}),"\u2026 m\xe1s adelante veremos c\xf3mo optimizar esto."]}),"\n",(0,r.jsxs)(n.h2,{id:"5-actualizar-valores-dentro-de-json--json_set",children:["5. Actualizar valores dentro de JSON \u2014 ",(0,r.jsx)(n.code,{children:"json_set"})]}),"\n",(0,r.jsxs)(n.p,{children:["SQLite permite ",(0,r.jsx)(n.strong,{children:"actualizar partes espec\xedficas"})," de un JSON sin reescribir todo el objeto:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"UPDATE users\nSET metadata = json_set(metadata, '$.theme', 'light')\nWHERE id = 1;\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Ahora el campo ",(0,r.jsx)(n.code,{children:'"theme"'})," cambiar\xe1 de ",(0,r.jsx)(n.code,{children:'"dark"'})," a ",(0,r.jsx)(n.code,{children:'"light"'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Tambi\xe9n puedes agregar nuevas claves:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"UPDATE users\nSET metadata = json_set(metadata, '$.language', 'es-ES')\nWHERE id = 1;\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"json_set"})," devuelve un nuevo JSON con el cambio aplicado."]}),"\n",(0,r.jsx)(n.h2,{id:"6-otras-funciones-\xfatiles-de-json1",children:"6. Otras funciones \xfatiles de JSON1"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json_valid(expr)"})," \u2192 devuelve 1 si el texto es JSON v\xe1lido."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json_array_length(json, path)"})," \u2192 cuenta elementos en un array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json_object(key, value, ...)"})," \u2192 construye un objeto JSON desde cero."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json_array(value1, value2, ...)"})," \u2192 construye un array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json_remove(json, path)"})," \u2192 elimina una clave del objeto."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT json_array('a','b','c');\n-- [\"a\",\"b\",\"c\"]\n\nSELECT json_object('nombre','Oscar','edad',34);\n-- {\"nombre\":\"Oscar\",\"edad\":34}\n\nUPDATE users\nSET metadata = json_remove(metadata, '$.roles[0]')\nWHERE id = 1;\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"7-ejercicio-pr\xe1ctico--estructura-din\xe1mica-de-usuario",children:"7. Ejercicio pr\xe1ctico \u2014 estructura din\xe1mica de usuario"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Crear tabla:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  metadata TEXT CHECK (json_valid(metadata))\n);\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Insertar varios usuarios:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'INSERT INTO users (name, metadata) VALUES\n(\'Ana\', \'{"theme":"dark","notifications":true,"roles":["admin","editor"]}\'),\n(\'Luis\', \'{"theme":"light","notifications":false,"roles":["viewer"]}\'),\n(\'Marta\', \'{"theme":"dark","notifications":true,"roles":["editor"]}\');\n\n'})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Consultar:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, json_extract(metadata, '$.theme') AS theme FROM users;\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Filtrar por ",(0,r.jsx)(n.code,{children:"notifications = true"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name FROM users\nWHERE json_extract(metadata, '$.notifications') = 1;\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Actualizar un valor:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"UPDATE users\nSET metadata = json_set(metadata, '$.theme', 'light')\nWHERE name = 'Ana';\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Agregar un nuevo campo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"UPDATE users\nSET metadata = json_set(metadata, '$.last_login', datetime('now'))\nWHERE name = 'Luis';\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Resultado: tienes una estructura flexible ",(0,r.jsx)(n.strong,{children:"sin tener que modificar el esquema de la tabla"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"8-cu\xe1ndo-usar-json-y-cu\xe1ndo-no",children:"8. Cu\xe1ndo usar JSON y cu\xe1ndo no"}),"\n",(0,r.jsxs)(n.p,{children:["Usar JSON en SQLite ",(0,r.jsx)(n.strong,{children:"no significa olvidar el dise\xf1o relacional"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"\xdasalo cuando:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La estructura es opcional o variable (ej. preferencias de usuario)."}),"\n",(0,r.jsx)(n.li,{children:"No necesitas hacer JOINs complejos sobre esos datos."}),"\n",(0,r.jsx)(n.li,{children:"Buscas flexibilidad sin cambiar el esquema cada dos d\xedas."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Ev\xedtalo cuando:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Los datos son relacionales y se consultan con frecuencia."}),"\n",(0,r.jsx)(n.li,{children:"Necesitas indexar y filtrar mucho sobre campos internos."}),"\n",(0,r.jsx)(n.li,{children:"La estructura JSON termina pareciendo una tabla dentro de otra (antipatr\xf3n)."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["En esos casos, es mejor ",(0,r.jsx)(n.strong,{children:"crear tablas normales"})," y usar relaciones (",(0,r.jsx)(n.code,{children:"JOIN"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:"9-errores-comunes-con-json1",children:"9. Errores comunes con JSON1"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Error / s\xedntoma"}),(0,r.jsx)(n.th,{children:"Causa"}),(0,r.jsx)(n.th,{children:"Soluci\xf3n"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"json_extract"})," devuelve NULL"]}),(0,r.jsx)(n.td,{children:"Ruta mal escrita o clave inexistente"}),(0,r.jsxs)(n.td,{children:["Verifica el path (",(0,r.jsx)(n.code,{children:"$.clave"}),")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Consultas lentas con muchos registros"}),(0,r.jsx)(n.td,{children:"No hay \xedndice en campos JSON"}),(0,r.jsx)(n.td,{children:"Crear \xedndice sobre columna generada"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Datos corruptos en ",(0,r.jsx)(n.code,{children:"metadata"})]}),(0,r.jsx)(n.td,{children:"JSON mal formado"}),(0,r.jsxs)(n.td,{children:["Usar ",(0,r.jsx)(n.code,{children:"CHECK (json_valid())"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Actualizaciones destructivas"}),(0,r.jsx)(n.td,{children:"Reemplazar todo el JSON manualmente"}),(0,r.jsxs)(n.td,{children:["Usar ",(0,r.jsx)(n.code,{children:"json_set"})," y ",(0,r.jsx)(n.code,{children:"json_remove"})]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"10-buenas-pr\xe1cticas-con-json1",children:"10. Buenas pr\xe1cticas con JSON1"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Valida siempre el JSON con ",(0,r.jsx)(n.code,{children:"CHECK (json_valid(columna))"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Usa rutas bien escritas (",(0,r.jsx)(n.code,{children:"$.clave"})," o ",(0,r.jsx)(n.code,{children:"$.array[0]"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Guarda solo lo que realmente es din\xe1mico, no todo."}),"\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.code,{children:"json_set"})," para cambios puntuales."]}),"\n",(0,r.jsx)(n.li,{children:"No abuses de JSON si podr\xedas usar una tabla tradicional."}),"\n",(0,r.jsx)(n.li,{children:"Si manejas datos sensibles, considera cifrar esta columna tambi\xe9n (ver m\xf3dulo 6)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"1-qu\xe9-es-una-columna-generada",children:"1. Qu\xe9 es una columna generada"}),"\n",(0,r.jsxs)(n.p,{children:["Una ",(0,r.jsx)(n.strong,{children:"columna generada"})," es una columna cuyo valor ",(0,r.jsx)(n.strong,{children:"no se guarda directamente"}),", sino que ",(0,r.jsx)(n.strong,{children:"se calcula a partir de otras"})," cada vez que se inserta o actualiza una fila."]}),"\n",(0,r.jsx)(n.p,{children:"Ejemplo simple:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE ejemplo (\n  data TEXT,\n  valor TEXT GENERATED ALWAYS AS (json_extract(data, '$.clave')) STORED\n);\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valor"})," no se escribe manualmente."]}),"\n",(0,r.jsxs)(n.li,{children:["Se calcula autom\xe1ticamente leyendo el JSON de ",(0,r.jsx)(n.code,{children:"data"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Se puede ",(0,r.jsx)(n.strong,{children:"indexar"})," igual que cualquier otra columna."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"As\xed SQLite no necesita parsear el JSON en cada consulta."}),"\n",(0,r.jsx)(n.h2,{id:"2-columna-generada-con-\xedndice-sobre-campo-json",children:"2. Columna generada con \xedndice sobre campo JSON"}),"\n",(0,r.jsxs)(n.p,{children:["Supongamos que tenemos la tabla ",(0,r.jsx)(n.code,{children:"users"})," con un campo ",(0,r.jsx)(n.code,{children:"metadata"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  metadata TEXT CHECK (json_valid(metadata)),\n  notifications BOOLEAN GENERATED ALWAYS AS (json_extract(metadata, '$.notifications')) STORED\n);\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Explicaci\xf3n:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," \u2192 contiene el JSON original."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"notifications"})," \u2192 columna generada que extrae el valor del JSON."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"STORED"})," \u2192 significa que el valor se guarda f\xedsicamente (m\xe1s r\xe1pido que ",(0,r.jsx)(n.code,{children:"VIRTUAL"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Ahora podemos ",(0,r.jsx)(n.strong,{children:"indexar"})," esta columna:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_users_notifications ON users(notifications);\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Y la consulta:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name FROM users WHERE notifications = 1;\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Ya no eval\xfaa el JSON fila por fila, ",(0,r.jsx)(n.strong,{children:"usa el \xedndice directamente"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Puedes comprobarlo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLAIN QUERY PLAN\nSELECT name FROM users WHERE notifications = 1;\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ver\xe1s algo como:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"SEARCH TABLE users USING INDEX idx_users_notifications (notifications=?)\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Esto puede multiplicar por 10 o m\xe1s el rendimiento en tablas grandes."}),"\n",(0,r.jsx)(n.h2,{id:"3-columna-generada-para-valores-en-arrays-json",children:"3. Columna generada para valores en arrays JSON"}),"\n",(0,r.jsx)(n.p,{children:"Tambi\xe9n puedes indexar campos de arrays si tienes rutas deterministas:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  metadata TEXT CHECK (json_valid(metadata)),\n  first_role TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.roles[0]')) STORED\n);\nCREATE INDEX idx_users_first_role ON users(first_role);\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ahora consultas como:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM users WHERE first_role = 'admin';\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Usar\xe1n \xedndice sin parsear todo el JSON."}),"\n",(0,r.jsx)(n.h2,{id:"4-comparativa-de-rendimiento",children:"4. Comparativa de rendimiento"}),"\n",(0,r.jsx)(n.p,{children:"Sup\xf3n que tienes 100.000 usuarios con metadatos como:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"theme":"dark","notifications":true,"roles":["admin"]}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sin-\xedndice",children:"Sin \xedndice:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM users WHERE json_extract(metadata, '$.notifications') = 1;\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SQLite debe leer todo el JSON."}),"\n",(0,r.jsx)(n.li,{children:"Muy lento en tablas grandes."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"con-columna-generada--\xedndice",children:"Con columna generada + \xedndice:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM users WHERE notifications = 1;\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SQLite usa \xedndice directamente."}),"\n",(0,r.jsx)(n.li,{children:"Consulta r\xe1pida incluso con miles de filas."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Siempre que filtres repetidamente por un campo JSON, ",(0,r.jsx)(n.strong,{children:"conviene indexarlo"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"5-ejercicio-pr\xe1ctico--indexar-un-campo-json",children:"5. Ejercicio pr\xe1ctico \u2014 indexar un campo JSON"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Crear tabla:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  metadata TEXT CHECK (json_valid(metadata)),\n  theme TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.theme')) STORED\n);\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Insertar datos:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'INSERT INTO users (name, metadata) VALUES\n(\'Ana\', \'{"theme":"dark","notifications":true}\'),\n(\'Luis\', \'{"theme":"light","notifications":false}\'),\n(\'Marta\', \'{"theme":"dark","notifications":true}\');\n\n'})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Crear \xedndice:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_users_theme ON users(theme);\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Consultar con \xedndice:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLAIN QUERY PLAN\nSELECT * FROM users WHERE theme = 'dark';\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Ver\xe1s que ahora usa ",(0,r.jsx)(n.code,{children:"SEARCH TABLE ... USING INDEX"}),"."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Ejecutar la misma consulta sin \xedndice (elimina el \xedndice y repite)."}),"\n",(0,r.jsxs)(n.p,{children:["Ver\xe1s ",(0,r.jsx)(n.code,{children:"SCAN TABLE"})," \u2192 mucho menos eficiente."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"6-cuando-no-usar-columnas-generadas",children:"6. Cuando no usar columnas generadas"}),"\n",(0,r.jsxs)(n.p,{children:["Aunque son muy potentes, ",(0,r.jsx)(n.strong,{children:"no siempre debes indexar todos los campos JSON"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Ev\xedtalo si:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El campo casi nunca se usa en filtros."}),"\n",(0,r.jsx)(n.li,{children:"Tiene pocos valores distintos (ej. booleano con 50/50)."}),"\n",(0,r.jsx)(n.li,{children:"Cambia muy frecuentemente (porque actualizar \xedndices cuesta tiempo)."}),"\n",(0,r.jsx)(n.li,{children:"Es un JSON demasiado variable (diferentes estructuras por fila)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Crea \xedndices solo sobre campos realmente importantes para tus consultas."})}),"\n",(0,r.jsxs)(n.h2,{id:"7-columnas-virtuales-vs-almacenadas-virtual-vs-stored",children:["7. Columnas virtuales vs almacenadas (",(0,r.jsx)(n.code,{children:"VIRTUAL"})," vs ",(0,r.jsx)(n.code,{children:"STORED"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"SQLite permite dos tipos de columnas generadas:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"VIRTUAL"})," \u2192 no guarda el valor, lo calcula cada vez.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ocupa menos espacio."}),"\n",(0,r.jsx)(n.li,{children:"M\xe1s lenta si se consulta muchas veces."}),"\n",(0,r.jsx)(n.li,{children:"No siempre se puede indexar."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"STORED"})," \u2192 guarda el valor calculado.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ocupa m\xe1s espacio."}),"\n",(0,r.jsx)(n.li,{children:"Mucho m\xe1s r\xe1pida en consultas repetidas."}),"\n",(0,r.jsx)(n.li,{children:"Se puede indexar perfectamente."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"En la pr\xe1ctica:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Para filtros frecuentes \u2192 usa ",(0,r.jsx)(n.code,{children:"STORED"})," + \xedndice."]}),"\n",(0,r.jsxs)(n.li,{children:["Para casos raros \u2192 ",(0,r.jsx)(n.code,{children:"VIRTUAL"})," sin \xedndice puede bastar."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"8-combinando-json--join",children:"8. Combinando JSON + JOIN"}),"\n",(0,r.jsxs)(n.p,{children:["Tambi\xe9n puedes usar columnas generadas sobre JSON ",(0,r.jsx)(n.strong,{children:"y"})," combinarlas con otras tablas."]}),"\n",(0,r.jsx)(n.p,{children:"Por ejemplo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT u.name, p.name AS product\nFROM users u\nJOIN orders o ON u.id = o.client_id\nJOIN products p ON o.product_id = p.id\nWHERE u.theme = 'dark';\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Aqu\xed ",(0,r.jsx)(n.code,{children:"u.theme"})," viene de un campo JSON, pero ",(0,r.jsx)(n.strong,{children:"gracias al \xedndice"}),", el filtro se hace antes del JOIN, lo que mejora mucho el rendimiento."]}),"\n",(0,r.jsx)(n.h2,{id:"9-buenas-pr\xe1cticas-con-json--\xedndices",children:"9. Buenas pr\xe1cticas con JSON + \xedndices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Si filtras frecuentemente por un valor de JSON \u2192 crea ",(0,r.jsx)(n.strong,{children:"una columna generada STORED + \xedndice"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.code,{children:"EXPLAIN QUERY PLAN"})," para verificar que SQLite ",(0,r.jsx)(n.strong,{children:"realmente est\xe1 usando"})," el \xedndice."]}),"\n",(0,r.jsx)(n.li,{children:"No indexes campos JSON que no aportan valor en consultas."}),"\n",(0,r.jsx)(n.li,{children:"Prefiere \xedndices sobre valores simples (TEXT, INTEGER) extra\xeddos del JSON."}),"\n",(0,r.jsxs)(n.li,{children:["Mant\xe9n tus rutas JSON consistentes (",(0,r.jsx)(n.code,{children:"$.campo"})," siempre igual)."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"10-errores-comunes-al-indexar-json",children:"10. Errores comunes al indexar JSON"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Error / s\xedntoma"}),(0,r.jsx)(n.th,{children:"Causa"}),(0,r.jsx)(n.th,{children:"Soluci\xf3n"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"SCAN TABLE"})," pese a \xedndice"]}),(0,r.jsxs)(n.td,{children:["La consulta usa ",(0,r.jsx)(n.code,{children:"json_extract"})," en lugar de la columna generada"]}),(0,r.jsx)(n.td,{children:"Cambia a usar la columna generada"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\xcdndice no se usa"}),(0,r.jsx)(n.td,{children:"Ruta mal escrita o tipo no coincide"}),(0,r.jsx)(n.td,{children:"Verifica ruta y tipo de dato"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Consultas lentas"}),(0,r.jsx)(n.td,{children:"\xcdndices innecesarios o mala estrategia"}),(0,r.jsxs)(n.td,{children:["Revisa \xedndices y ",(0,r.jsx)(n.code,{children:"EXPLAIN"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Columna generada no se actualiza"}),(0,r.jsxs)(n.td,{children:["No usaste ",(0,r.jsx)(n.code,{children:"STORED"})]}),(0,r.jsx)(n.td,{children:"Cambia a STORED si necesitas persistencia"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Error de creaci\xf3n de \xedndice"}),(0,r.jsx)(n.td,{children:"Columna no indexable (ej. VIRTUAL)"}),(0,r.jsx)(n.td,{children:"Usa STORED en su lugar"})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}}}]);