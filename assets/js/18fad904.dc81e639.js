"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[2806],{616:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"js/api/fetch","title":"Fetch API","description":"Introducci\xf3n","source":"@site/docs/js/api/fetch.md","sourceDirName":"js/api","slug":"/js/api/fetch","permalink":"/docuQuest/docs/js/api/fetch","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/api/fetch.md","tags":[],"version":"current","frontMatter":{}}');var o=a(4848),s=a(8453);const i={},c="Fetch API",l={},t=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"\xbfQu\xe9 es la Fetch API y c\xf3mo funciona?",id:"qu\xe9-es-la-fetch-api-y-c\xf3mo-funciona",level:2},{value:"Definici\xf3n y Prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito",level:3},{value:"Funcionamiento B\xe1sico",id:"funcionamiento-b\xe1sico",level:3},{value:"Ventajas de la Fetch API",id:"ventajas-de-la-fetch-api",level:3},{value:"Sintaxis B\xe1sica de la Fetch API",id:"sintaxis-b\xe1sica-de-la-fetch-api",level:2},{value:"Realizar una Solicitud GET",id:"realizar-una-solicitud-get",level:3},{value:"Ejemplo B\xe1sico",id:"ejemplo-b\xe1sico",level:3},{value:"Realizar una Solicitud POST",id:"realizar-una-solicitud-post",level:3},{value:"Ejemplo B\xe1sico",id:"ejemplo-b\xe1sico-1",level:3},{value:"Manejo de Errores",id:"manejo-de-errores",level:3},{value:"Ejemplo de Manejo de Errores",id:"ejemplo-de-manejo-de-errores",level:3},{value:"Solicitudes con Autenticaci\xf3n",id:"solicitudes-con-autenticaci\xf3n",level:3},{value:"Ejemplo con Token de Autorizaci\xf3n",id:"ejemplo-con-token-de-autorizaci\xf3n",level:3},{value:"Uso de Async/Await",id:"uso-de-asyncawait",level:3},{value:"Ejemplo con Async/Await",id:"ejemplo-con-asyncawait",level:3},{value:"Manipulaci\xf3n de Headers",id:"manipulaci\xf3n-de-headers",level:3},{value:"Ejemplo de Manipulaci\xf3n de Headers",id:"ejemplo-de-manipulaci\xf3n-de-headers",level:3},{value:"Aplicaciones Avanzadas de la Fetch API",id:"aplicaciones-avanzadas-de-la-fetch-api",level:2},{value:"Subir Archivos",id:"subir-archivos",level:3},{value:"Ejemplo de Subida de Archivos",id:"ejemplo-de-subida-de-archivos",level:3},{value:"Descargar Archivos",id:"descargar-archivos",level:3},{value:"Ejemplo de Descarga de Archivos",id:"ejemplo-de-descarga-de-archivos",level:3},{value:"Gesti\xf3n de Tiempo de Espera (Timeout)",id:"gesti\xf3n-de-tiempo-de-espera-timeout",level:3},{value:"Ejemplo con Timeout",id:"ejemplo-con-timeout",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"fetch-api",children:"Fetch API"})}),"\n",(0,o.jsx)(n.h1,{id:"fetch-api-en-las-apis-rest-de-javascript-para-p\xe1ginas-web",children:"Fetch API en las APIs REST de JavaScript para P\xe1ginas Web"}),"\n",(0,o.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Para facilitar esta interacci\xf3n, JavaScript ofrece diversas herramientas, entre las cuales la Fetch API se destaca por su simplicidad y flexibilidad."}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-es-la-fetch-api-y-c\xf3mo-funciona",children:"\xbfQu\xe9 es la Fetch API y c\xf3mo funciona?"}),"\n",(0,o.jsx)(n.h3,{id:"definici\xf3n-y-prop\xf3sito",children:"Definici\xf3n y Prop\xf3sito"}),"\n",(0,o.jsx)(n.p,{children:"La Fetch API es una interfaz moderna proporcionada por JavaScript para realizar solicitudes HTTP as\xedncronas. Fue introducida como una mejora y eventual reemplazo de la interfaz XMLHttpRequest (XHR), ofreciendo una manera m\xe1s sencilla y poderosa de interactuar con recursos remotos a trav\xe9s de una red. La Fetch API es una promesa que facilita la gesti\xf3n de respuestas asincr\xf3nicas, haciendo el c\xf3digo m\xe1s limpio y manejable."}),"\n",(0,o.jsx)(n.h3,{id:"funcionamiento-b\xe1sico",children:"Funcionamiento B\xe1sico"}),"\n",(0,o.jsx)(n.p,{children:"La Fetch API opera mediante el uso de Promesas, una caracter\xedstica central de JavaScript para manejar operaciones as\xedncronas. Cuando se realiza una solicitud con Fetch, se devuelve una Promesa que se resuelve con la respuesta una vez que el servidor ha procesado la solicitud. Esta respuesta puede ser manejada y procesada de acuerdo con las necesidades de la aplicaci\xf3n."}),"\n",(0,o.jsx)(n.h3,{id:"ventajas-de-la-fetch-api",children:"Ventajas de la Fetch API"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicidad y Legibilidad"}),": La Fetch API utiliza Promesas, lo que hace que el c\xf3digo sea m\xe1s legible y menos propenso a errores en comparaci\xf3n con el enfoque de callback de XMLHttpRequest."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compatibilidad con Modern JavaScript"}),": Se integra perfectamente con las caracter\xedsticas modernas de JavaScript como async/await."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Mayor Control y Flexibilidad"}),": Proporciona una manera m\xe1s flexible y controlada de manejar solicitudes y respuestas HTTP."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"sintaxis-b\xe1sica-de-la-fetch-api",children:"Sintaxis B\xe1sica de la Fetch API"}),"\n",(0,o.jsx)(n.h3,{id:"realizar-una-solicitud-get",children:"Realizar una Solicitud GET"}),"\n",(0,o.jsx)(n.p,{children:"Una solicitud GET es la forma m\xe1s b\xe1sica de interactuar con una API REST, utilizada para recuperar datos del servidor."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-b\xe1sico",children:"Ejemplo B\xe1sico"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/data>")\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) =>\n    console.error("There was a problem with your fetch operation:", error)\n  );\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"fetch('<https://api.example.com/data>')"}),": Realiza una solicitud GET a la URL especificada."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"response.ok"}),": Verifica si la respuesta fue exitosa (c\xf3digo de estado 200-299)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"response.json()"}),": Convierte la respuesta en un objeto JSON."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"then(data => console.log(data))"}),": Maneja los datos de la respuesta."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"catch(error => console.error('There was a problem with your fetch operation:', error))"}),": Maneja cualquier error que ocurra durante la solicitud."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"realizar-una-solicitud-post",children:"Realizar una Solicitud POST"}),"\n",(0,o.jsx)(n.p,{children:"Las solicitudes POST se utilizan para enviar datos al servidor, a menudo para crear nuevos recursos."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-b\xe1sico-1",children:"Ejemplo B\xe1sico"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const data = { username: "example", password: "password123" };\n\nfetch("<https://api.example.com/login>", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify(data),\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) =>\n    console.error("There was a problem with your fetch operation:", error)\n  );\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"method: 'POST'"}),": Especifica que la solicitud es de tipo POST."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"headers: {'Content-Type': 'application/json'}"}),": Define que los datos enviados est\xe1n en formato JSON."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"body: JSON.stringify(data)"}),": Convierte el objeto ",(0,o.jsx)(n.code,{children:"data"})," a una cadena JSON para enviarla en el cuerpo de la solicitud."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"manejo-de-errores",children:"Manejo de Errores"}),"\n",(0,o.jsx)(n.p,{children:"El manejo de errores es esencial para garantizar que la aplicaci\xf3n pueda responder adecuadamente a fallos en la red o problemas con el servidor."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-manejo-de-errores",children:"Ejemplo de Manejo de Errores"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/data>")\n  .then((response) => {\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 500) {\n        throw new Error("Client error");\n      } else if (response.status >= 500) {\n        throw new Error("Server error");\n      }\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo, se verifican diferentes rangos de c\xf3digos de estado para distinguir entre errores del cliente (4xx) y del servidor (5xx), proporcionando mensajes de error espec\xedficos."}),"\n",(0,o.jsx)(n.h3,{id:"solicitudes-con-autenticaci\xf3n",children:"Solicitudes con Autenticaci\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Muchas APIs requieren autenticaci\xf3n para acceder a recursos protegidos. Esto a menudo se maneja mediante tokens de autorizaci\xf3n."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-token-de-autorizaci\xf3n",children:"Ejemplo con Token de Autorizaci\xf3n"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const token = "your-access-token";\n\nfetch("<https://api.example.com/protected-data>", {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Unauthorized");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"headers: {'Authorization':"})," Bearer $",token,(0,o.jsx)(n.code,{children:"}"}),": Incluye el token de autorizaci\xf3n en el header de la solicitud."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"uso-de-asyncawait",children:"Uso de Async/Await"}),"\n",(0,o.jsxs)(n.p,{children:["La Fetch API se integra bien con la sintaxis de ",(0,o.jsx)(n.code,{children:"async/await"}),", lo que permite un estilo de programaci\xf3n as\xedncrono m\xe1s limpio y legible."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-asyncawait",children:"Ejemplo con Async/Await"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'async function fetchData() {\n  try {\n    const response = await fetch("<https://api.example.com/data>");\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error("There was a problem with your fetch operation:", error);\n  }\n}\n\nfetchData();\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await fetch('<https://api.example.com/data>')"}),": Espera a que la solicitud se complete."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"await response.json()"}),": Espera a que la conversi\xf3n a JSON se complete."]}),"\n",(0,o.jsxs)(n.li,{children:["El manejo de errores se realiza con un bloque ",(0,o.jsx)(n.code,{children:"try/catch"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"manipulaci\xf3n-de-headers",children:"Manipulaci\xf3n de Headers"}),"\n",(0,o.jsx)(n.p,{children:"Los headers HTTP son cruciales para la configuraci\xf3n de solicitudes y respuestas. Pueden incluir informaci\xf3n sobre el tipo de contenido, la autenticaci\xf3n y m\xe1s."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-manipulaci\xf3n-de-headers",children:"Ejemplo de Manipulaci\xf3n de Headers"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const headers = new Headers();\nheaders.append("Content-Type", "application/json");\nheaders.append("Authorization", "Bearer your-access-token");\n\nfetch("<https://api.example.com/data>", { headers: headers })\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) =>\n    console.error("There was a problem with your fetch operation:", error)\n  );\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"new Headers()"}),": Crea un nuevo objeto Headers."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"headers.append('Content-Type', 'application/json')"}),": A\xf1ade un header de tipo de contenido."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"headers.append('Authorization', 'Bearer your-access-token')"}),": A\xf1ade un header de autorizaci\xf3n."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"aplicaciones-avanzadas-de-la-fetch-api",children:"Aplicaciones Avanzadas de la Fetch API"}),"\n",(0,o.jsx)(n.h3,{id:"subir-archivos",children:"Subir Archivos"}),"\n",(0,o.jsxs)(n.p,{children:["La Fetch API tambi\xe9n puede manejar la subida de archivos utilizando objetos ",(0,o.jsx)(n.code,{children:"FormData"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-subida-de-archivos",children:"Ejemplo de Subida de Archivos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const formData = new FormData();\nformData.append("file", fileInput.files[0]);\n\nfetch("<https://api.example.com/upload>", {\n  method: "POST",\n  body: formData,\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) =>\n    console.error("There was a problem with your fetch operation:", error)\n  );\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"new FormData()"}),": Crea un nuevo objeto FormData."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"formData.append('file', fileInput.files[0])"}),": A\xf1ade el archivo al FormData."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"body: formData"}),": Env\xeda el FormData en el cuerpo de la solicitud."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"descargar-archivos",children:"Descargar Archivos"}),"\n",(0,o.jsx)(n.p,{children:"La Fetch API puede utilizarse para descargar archivos, manipulando blobs (Binary Large Objects)."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-descarga-de-archivos",children:"Ejemplo de Descarga de Archivos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'fetch("<https://api.example.com/file>")\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.blob();\n  })\n  .then((blob) => {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement("a");\n    a.style.display = "none";\n    a.href = url;\n    a.download = "filename.txt";\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n  })\n  .catch((error) =>\n    console.error("There was a problem with your fetch operation:", error)\n  );\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"response.blob()"}),": Convierte la respuesta en un blob."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"window.URL.createObjectURL(blob)"}),": Crea una URL para el"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"blob."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"a.download = 'filename.txt'"}),": Especifica el nombre del archivo a descargar."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"gesti\xf3n-de-tiempo-de-espera-timeout",children:"Gesti\xf3n de Tiempo de Espera (Timeout)"}),"\n",(0,o.jsxs)(n.p,{children:["La Fetch API no tiene una funci\xf3n de timeout nativa, pero se puede implementar utilizando Promesas y ",(0,o.jsx)(n.code,{children:"AbortController"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-timeout",children:"Ejemplo con Timeout"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const controller = new AbortController();\nconst signal = controller.signal;\n\nconst fetchWithTimeout = (url, options, timeout = 5000) => {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      controller.abort();\n      reject(new Error("Request timed out"));\n    }, timeout);\n\n    fetch(url, { ...options, signal })\n      .then((response) => resolve(response))\n      .catch((error) => reject(error))\n      .finally(() => clearTimeout(timer));\n  });\n};\n\nfetchWithTimeout("<https://api.example.com/data>", {}, 3000)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error("Network response was not ok");\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error("Fetch error:", error));\n'})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"AbortController()"}),": Crea un nuevo controlador para abortar la solicitud."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setTimeout(() => { controller.abort(); }, timeout)"}),": Aborta la solicitud despu\xe9s de un tiempo determinado."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"La Fetch API es una herramienta poderosa y vers\xe1til para interactuar con APIs REST en aplicaciones web. Su simplicidad y compatibilidad con caracter\xedsticas modernas de JavaScript la convierten en una opci\xf3n preferida sobre la antigua interfaz XMLHttpRequest. Con un conocimiento s\xf3lido de su funcionamiento, sintaxis y aplicaciones avanzadas, los desarrolladores pueden aprovechar al m\xe1ximo la Fetch API para construir aplicaciones web robustas y eficientes."}),"\n",(0,o.jsx)(n.p,{children:"En este documento, hemos cubierto los fundamentos de la Fetch API, incluyendo su definici\xf3n, prop\xf3sito y funcionamiento b\xe1sico. Hemos explorado la sintaxis b\xe1sica para realizar solicitudes GET y POST, manejar errores, autenticaci\xf3n y c\xf3mo utilizar async/await para mejorar la legibilidad del c\xf3digo. Tambi\xe9n hemos visto aplicaciones avanzadas como la subida y descarga de archivos, as\xed como la gesti\xf3n de tiempos de espera."}),"\n",(0,o.jsx)(n.p,{children:"Este conocimiento es esencial para cualquier desarrollador web moderno que trabaje con APIs REST, proporcionando una base s\xf3lida para crear aplicaciones web din\xe1micas y receptivas."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var r=a(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);