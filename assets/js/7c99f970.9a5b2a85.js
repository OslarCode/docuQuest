"use strict";(globalThis.webpackChunkDocuQuest_oslar_code=globalThis.webpackChunkDocuQuest_oslar_code||[]).push([[273],{1957:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>t});const o=JSON.parse('{"id":"frontend/js/hoisting","title":"Hoisting","description":"El hoisting es un comportamiento clave en JavaScript que a menudo puede ser confuso para los desarrolladores, pero es esencial para comprender c\xf3mo funcionan las variables y las funciones en el lenguaje. El t\xe9rmino \\"hoisting\\" significa elevar o izar, y se refiere al comportamiento por el cual las declaraciones de variables y funciones son movidas al comienzo del contexto (ya sea global o local) durante la fase de interpretaci\xf3n del c\xf3digo. Aunque puede parecer extra\xf1o, es importante entenderlo para evitar errores y comportamientos inesperados en tu c\xf3digo JavaScript.","source":"@site/docs/frontend/js/hoisting.md","sourceDirName":"frontend/js","slug":"/frontend/js/hoisting","permalink":"/docuQuest/docs/frontend/js/hoisting","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/frontend/js/hoisting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Console.log()","permalink":"/docuQuest/docs/frontend/js/consoleLog"},"next":{"title":"Operadores","permalink":"/docuQuest/docs/frontend/js/operadores/"}}');var i=n(4848),l=n(8453);const s={},r="Hoisting",c={},t=[{value:"Elevaci\xf3n de Declaraciones de Variables",id:"elevaci\xf3n-de-declaraciones-de-variables",level:2},{value:"Elevaci\xf3n de Declaraciones de Funciones",id:"elevaci\xf3n-de-declaraciones-de-funciones",level:2},{value:"Hoisting en el \xc1mbito Global y Local",id:"hoisting-en-el-\xe1mbito-global-y-local",level:2},{value:"Evitando Problemas con el Hoisting",id:"evitando-problemas-con-el-hoisting",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"hoisting",children:"Hoisting"})}),"\n",(0,i.jsx)(a.h1,{id:"hoisting-1",children:"Hoisting"}),"\n",(0,i.jsx)(a.p,{children:'El hoisting es un comportamiento clave en JavaScript que a menudo puede ser confuso para los desarrolladores, pero es esencial para comprender c\xf3mo funcionan las variables y las funciones en el lenguaje. El t\xe9rmino "hoisting" significa elevar o izar, y se refiere al comportamiento por el cual las declaraciones de variables y funciones son movidas al comienzo del contexto (ya sea global o local) durante la fase de interpretaci\xf3n del c\xf3digo. Aunque puede parecer extra\xf1o, es importante entenderlo para evitar errores y comportamientos inesperados en tu c\xf3digo JavaScript.'}),"\n",(0,i.jsx)(a.p,{children:"A continuaci\xf3n, se explica c\xf3mo funciona el hoisting en JavaScript:"}),"\n",(0,i.jsx)(a.h2,{id:"elevaci\xf3n-de-declaraciones-de-variables",children:"Elevaci\xf3n de Declaraciones de Variables"}),"\n",(0,i.jsx)(a.p,{children:'Cuando declaras una variable con var, JavaScript "iza" la declaraci\xf3n de esa variable al comienzo de su contexto actual (ya sea el \xe1mbito global o el de una funci\xf3n). Sin embargo, solo la declaraci\xf3n se eleva, no la asignaci\xf3n de valor.'}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:"console.log(miVariable); // Undefined\r\nvar miVariable = 5;\r\n\r\nLo que realmente sucede:\r\n\r\nvar miVariable; // La declaraci\xf3n se eleva\r\nconsole.log(miVariable); // Undefined\r\nmiVariable = 5; // Asignaci\xf3n de valor\r\n\n"})}),"\n",(0,i.jsx)(a.p,{children:"Esto puede llevar a situaciones en las que la variable est\xe1 declarada pero su valor es undefined hasta que se le asigne uno."}),"\n",(0,i.jsx)(a.h2,{id:"elevaci\xf3n-de-declaraciones-de-funciones",children:"Elevaci\xf3n de Declaraciones de Funciones"}),"\n",(0,i.jsx)(a.p,{children:'Las funciones declaradas con la palabra clave function tambi\xe9n son "izadas" al comienzo de su contexto actual, lo que significa que puedes llamar a una funci\xf3n antes de declararla en el c\xf3digo.'}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:'sayHello(); // "Hola"\r\n\r\nfunction sayHello() {\r\n  console.log("Hola");\r\n}\r\n\r\nLo que realmente sucede:\r\n\r\nfunction sayHello() {\r\n  console.log("Hola");\r\n}\r\n\r\nsayHello(); // "Hola"\r\n\n'})}),"\n",(0,i.jsx)(a.p,{children:"Sin embargo, esto no es v\xe1lido para funciones expresadas o funciones asignadas a variables. Solo se aplica a las funciones declaradas con la palabra clave function."}),"\n",(0,i.jsx)(a.h2,{id:"hoisting-en-el-\xe1mbito-global-y-local",children:"Hoisting en el \xc1mbito Global y Local"}),"\n",(0,i.jsx)(a.p,{children:"El hoisting ocurre tanto en el \xe1mbito global como en los \xe1mbitos locales de las funciones. Si declaras una variable en un \xe1mbito local, esta se elevar\xe1 al comienzo de ese \xe1mbito, y no afectar\xe1 las variables en otros \xe1mbitos."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:"function example() {\r\n  console.log(x); // Undefined\r\n  var x = 10;\r\n  console.log(x); // 10\r\n}\r\nexample();\r\n\n"})}),"\n",(0,i.jsx)(a.p,{children:"Aqu\xed, la variable x se eleva solo dentro de la funci\xf3n example."}),"\n",(0,i.jsx)(a.h2,{id:"evitando-problemas-con-el-hoisting",children:"Evitando Problemas con el Hoisting"}),"\n",(0,i.jsx)(a.p,{children:"Para evitar comportamientos inesperados, es una buena pr\xe1ctica declarar tus variables al principio de las funciones o del \xe1mbito en lugar de depender del hoisting. Tambi\xe9n, considera utilizar let y const en lugar de var para declarar variables, ya que tienen un \xe1mbito m\xe1s claro y no se ven afectadas por el hoisting de la misma manera."}),"\n",(0,i.jsx)(a.p,{children:"En resumen, el hoisting en JavaScript se refiere al comportamiento de elevar declaraciones de variables y funciones al comienzo de su \xe1mbito, lo que puede llevar a resultados inesperados si no se entiende adecuadamente. Es importante conocer esta caracter\xedstica para escribir c\xf3digo m\xe1s claro y evitar errores sutiles en tus programas JavaScript."})]})}function u(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>r});var o=n(6540);const i={},l=o.createContext(i);function s(e){const a=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(l.Provider,{value:a},e.children)}}}]);