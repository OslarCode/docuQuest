"use strict";(self.webpackChunkDocuQuest_oslar_code=self.webpackChunkDocuQuest_oslar_code||[]).push([[6704],{1008:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"js/asincronia/asincronia","title":"Asincron\xeda","description":"La asincron\xeda en JavaScript permite ejecutar tareas sin bloquear el flujo principal del programa, lo que es esencial para manejar operaciones como peticiones a servidores, lectura de archivos o temporizadores. Gracias a mecanismos como callbacks, promesas y async/await, JavaScript puede responder a eventos o procesar datos externos sin detener la interacci\xf3n del usuario con la p\xe1gina. Esta capacidad hace que las aplicaciones web sean m\xe1s r\xe1pidas, reactivas y eficientes.","source":"@site/docs/js/asincronia/asincronia.md","sourceDirName":"js/asincronia","slug":"/js/asincronia/","permalink":"/docuQuest/docs/js/asincronia/","draft":false,"unlisted":false,"editUrl":"https://github.com/OslarCode/OslarCode/docs/js/asincronia/asincronia.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Depuraci\xf3n del c\xf3digo","permalink":"/docuQuest/docs/js/depuracionCodigo"},"next":{"title":"Introducci\xf3n","permalink":"/docuQuest/docs/js/asincronia/introduccion"}}');var r=a(4848),o=a(8453);const c={},l="Asincron\xeda",i={},d=[{value:"1. <strong>Conceptos B\xe1sicos</strong>",id:"1-conceptos-b\xe1sicos",level:2},{value:"\xbfQu\xe9 hace este ejemplo?",id:"qu\xe9-hace-este-ejemplo",level:3},{value:"2. <strong>Funciones de Callback</strong>",id:"2-funciones-de-callback",level:2},{value:"\xbfQu\xe9 hace este ejemplo?",id:"qu\xe9-hace-este-ejemplo-1",level:3},{value:"3. <strong>Promesas</strong>",id:"3-promesas",level:2},{value:"\ud83e\udde0 Explicaci\xf3n sencilla:",id:"-explicaci\xf3n-sencilla",level:3},{value:"\u2705 Ejemplo de Promesa:",id:"-ejemplo-de-promesa",level:3},{value:"\xbfQu\xe9 hace este ejemplo?",id:"qu\xe9-hace-este-ejemplo-2",level:3},{value:"\ud83e\uddea Ejemplo para ver los tres estados:",id:"-ejemplo-para-ver-los-tres-estados",level:3},{value:"\ud83e\udde0 Resumen del comportamiento:",id:"-resumen-del-comportamiento",level:3},{value:"\u2705 M\xe9todos principales de una promesa:",id:"-m\xe9todos-principales-de-una-promesa",level:3},{value:"\ud83e\uddea Ejemplo real:",id:"-ejemplo-real",level:3},{value:"\ud83d\udd0d \xbfQu\xe9 hace cada m\xe9todo?",id:"-qu\xe9-hace-cada-m\xe9todo",level:3},{value:"\ud83e\udde0 \xbfQu\xe9 es <code>async</code> / <code>await</code>?",id:"-qu\xe9-es-async--await",level:3},{value:"\u2705 Ejemplo real y comentado paso a paso",id:"-ejemplo-real-y-comentado-paso-a-paso",level:3},{value:"\ud83d\udd0d \xbfQu\xe9 ocurre aqu\xed?",id:"-qu\xe9-ocurre-aqu\xed",level:3},{value:"\u2705 \xbfPor qu\xe9 usar <code>async/await</code>?",id:"-por-qu\xe9-usar-asyncawait",level:3},{value:"<strong>Manejo de Errores</strong>",id:"manejo-de-errores",level:2},{value:"\ud83e\uddea Ejemplo real con manejo de errores usando <code>try...catch</code> :",id:"-ejemplo-real-con-manejo-de-errores-usando-trycatch-",level:3},{value:"\ud83d\udd0d \xbfQu\xe9 est\xe1 pasando aqu\xed?",id:"-qu\xe9-est\xe1-pasando-aqu\xed",level:3},{value:"\u2705 \xbfPor qu\xe9 es \xfatil esto?",id:"-por-qu\xe9-es-\xfatil-esto",level:3},{value:"<strong>Herramientas y Recursos</strong>",id:"herramientas-y-recursos",level:2},{value:"\xcdndice de contenidos",id:"\xedndice-de-contenidos",level:2}];function t(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"asincron\xeda",children:"Asincron\xeda"})}),"\n",(0,r.jsx)(n.h1,{id:"introducci\xf3n-a-al-asincron\xeda-con-javascript",children:"Introducci\xf3n a al asincron\xeda con JavaScript"}),"\n",(0,r.jsxs)(n.p,{children:["La asincron\xeda en JavaScript permite ejecutar tareas sin bloquear el flujo principal del programa, lo que es esencial para manejar operaciones como peticiones a servidores, lectura de archivos o temporizadores. Gracias a mecanismos como callbacks, promesas y ",(0,r.jsx)(n.code,{children:"async/await"}),", JavaScript puede responder a eventos o procesar datos externos sin detener la interacci\xf3n del usuario con la p\xe1gina. Esta capacidad hace que las aplicaciones web sean m\xe1s r\xe1pidas, reactivas y eficientes."]}),"\n",(0,r.jsxs)(n.p,{children:["Kyle Simpson, autor de la serie ",(0,r.jsx)(n.em,{children:"You Don\u2019t Know JS"}),", destaca que \u201cla asincron\xeda no trata de velocidad, sino de eficiencia\u201d, subrayando que JavaScript, aunque de un solo hilo, puede hacer m\xfaltiples cosas sin esperar a que cada una termine. Comprender bien la asincron\xeda es clave para dominar JavaScript moderno y construir experiencias web fluidas y profesionales."]}),"\n",(0,r.jsxs)(n.h2,{id:"1-conceptos-b\xe1sicos",children:["1. ",(0,r.jsx)(n.strong,{children:"Conceptos B\xe1sicos"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Asincron\xeda"}),": La capacidad de ejecutar operaciones sin bloquear el hilo principal. Permite que otras tareas contin\xfaen ejecut\xe1ndose mientras se espera que una operaci\xf3n se complete."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Loop (Bucle de Eventos)"}),": El mecanismo que permite a JavaScript realizar operaciones asincr\xf3nicas. Se encarga de manejar la pila de llamadas, la cola de tareas y la cola de microtareas."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Aqu\xed tienes un ",(0,r.jsx)(n.strong,{children:"ejemplo real y b\xe1sico"})," de asincron\xeda en JavaScript usando ",(0,r.jsx)(n.code,{children:"fetch()"})," para obtener datos de una API p\xfablica."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Definimos una funci\xf3n asincr\xf3nica para obtener datos de una API\nasync function obtenerUsuario() {\n  try {\n    // Mostramos un mensaje antes de iniciar la petici\xf3n\n    console.log("Obteniendo datos del usuario...");\n\n    // Usamos fetch() para hacer una petici\xf3n HTTP GET a una API p\xfablica\n    const respuesta = await fetch(\n      "https://jsonplaceholder.typicode.com/users/1"\n    );\n\n    // Convertimos la respuesta en formato JSON\n    const usuario = await respuesta.json();\n\n    // Mostramos los datos obtenidos\n    console.log("Datos del usuario recibidos:");\n    console.log(usuario);\n  } catch (error) {\n    // Capturamos errores de red o fallos en la petici\xf3n\n    console.error("Error al obtener los datos:", error);\n  }\n}\n\n// Llamamos a la funci\xf3n (esto dispara la ejecuci\xf3n asincr\xf3nica)\nobtenerUsuario();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"qu\xe9-hace-este-ejemplo",children:"\xbfQu\xe9 hace este ejemplo?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simula una situaci\xf3n real: obtener los datos de un usuario desde una API REST."}),"\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.code,{children:"async/await"})," para escribir c\xf3digo asincr\xf3nico de forma clara y legible."]}),"\n",(0,r.jsxs)(n.li,{children:["Maneja errores correctamente con ",(0,r.jsx)(n.code,{children:"try...catch"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Muestra c\xf3mo interactuar con un servicio externo sin bloquear la ejecuci\xf3n del resto de la aplicaci\xf3n."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Este tipo de l\xf3gica es la base de casi cualquier aplicaci\xf3n web moderna que se comunica con un servidor."}),"\n",(0,r.jsxs)(n.h2,{id:"2-funciones-de-callback",children:["2. ",(0,r.jsx)(n.strong,{children:"Funciones de Callback"})]}),"\n",(0,r.jsxs)(n.p,{children:["Un ",(0,r.jsx)(n.strong,{children:"callback"})," en JavaScript es simplemente una ",(0,r.jsx)(n.strong,{children:"funci\xf3n que se pasa como argumento a otra funci\xf3n"})," para que se ejecute ",(0,r.jsx)(n.strong,{children:"m\xe1s tarde"}),", normalmente ",(0,r.jsx)(n.strong,{children:"cuando algo ha terminado"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Piensa en esto como cuando haces un pedido en una cafeter\xeda: das tu orden (funci\xf3n principal) y dejas tu nombre (el callback). Cuando tu caf\xe9 est\xe1 listo, te llaman por tu nombre para d\xe1rtelo. El ",(0,r.jsx)(n.strong,{children:"callback es la funci\xf3n que se llama al final del proceso"}),", cuando ya todo est\xe1 listo."]}),"\n",(0,r.jsx)(n.p,{children:"En c\xf3digo, ser\xeda algo as\xed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function pedirCafe(callback) {\n  console.log("Preparando caf\xe9...");\n\n  setTimeout(() => {\n    console.log("Caf\xe9 listo.");\n    callback(); // Llamamos a la funci\xf3n que pasamos como argumento\n  }, 2000);\n}\n\nfunction avisar() {\n  console.log("\xa1Ven a recoger tu caf\xe9!");\n}\n\npedirCafe(avisar);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Aqu\xed, ",(0,r.jsx)(n.code,{children:"avisar"})," es el ",(0,r.jsx)(n.strong,{children:"callback"}),", y se ejecuta ",(0,r.jsx)(n.strong,{children:"solo despu\xe9s de que el caf\xe9 est\xe9 listo"}),". As\xed de simple."]}),"\n",(0,r.jsxs)(n.p,{children:["Aqu\xed tienes otro ",(0,r.jsx)(n.strong,{children:"ejemplo real de una funci\xf3n callback"})," en JavaScript."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Definimos una funci\xf3n que simula una operaci\xf3n que tarda en completarse (por ejemplo, procesar datos)\nfunction procesarDatos(nombre, callback) {\n  console.log("Procesando datos...");\n\n  // Simulamos un retardo con setTimeout (espera de 2 segundos)\n  setTimeout(() => {\n    // Mostramos que el procesamiento ha finalizado\n    console.log(`Datos procesados para: ${nombre}`);\n\n    // Llamamos a la funci\xf3n callback que se pas\xf3 como argumento\n    callback(nombre);\n  }, 2000); // 2000 milisegundos = 2 segundos\n}\n\n// Definimos una funci\xf3n que ser\xe1 usada como callback\nfunction saludar(nombre) {\n  console.log(`Hola, ${nombre}. Bienvenido a la aplicaci\xf3n.`);\n}\n\n// Llamamos a procesarDatos y le pasamos \'Carlos\' y la funci\xf3n saludar como callback\nprocesarDatos("Carlos", saludar);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"qu\xe9-hace-este-ejemplo-1",children:"\xbfQu\xe9 hace este ejemplo?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["La funci\xf3n ",(0,r.jsx)(n.code,{children:"procesarDatos"})," simula una tarea que toma tiempo (como una operaci\xf3n de red o c\xe1lculo pesado)."]}),"\n",(0,r.jsxs)(n.li,{children:["Una vez completada, llama a la funci\xf3n ",(0,r.jsx)(n.code,{children:"callback"}),", que en este caso es ",(0,r.jsx)(n.code,{children:"saludar"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setTimeout"})," representa la parte asincr\xf3nica: tras un retraso de 2 segundos, se ejecuta el bloque interno."]}),"\n",(0,r.jsxs)(n.li,{children:["El callback permite decidir ",(0,r.jsx)(n.strong,{children:"qu\xe9 hacer despu\xe9s"})," del proceso, sin necesidad de esperar o bloquear el flujo del programa."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Este patr\xf3n de callbacks es muy com\xfan en JavaScript, especialmente antes del uso extendido de Promesas y ",(0,r.jsx)(n.code,{children:"async/await"}),". A\xfan hoy se usa en bibliotecas, eventos y APIs cl\xe1sicas del navegador."]}),"\n",(0,r.jsxs)(n.h2,{id:"3-promesas",children:["3. ",(0,r.jsx)(n.strong,{children:"Promesas"})]}),"\n",(0,r.jsxs)(n.p,{children:["Una ",(0,r.jsx)(n.strong,{children:"promesa"})," en JavaScript es un ",(0,r.jsx)(n.strong,{children:"objeto que representa una tarea que se va a completar en el futuro"}),", ya sea con \xe9xito (",(0,r.jsx)(n.strong,{children:"resuelta"}),") o con error (",(0,r.jsx)(n.strong,{children:"rechazada"}),"). Es una forma moderna de trabajar con c\xf3digo asincr\xf3nico, m\xe1s clara y manejable que los antiguos callbacks."]}),"\n",(0,r.jsx)(n.h3,{id:"-explicaci\xf3n-sencilla",children:"\ud83e\udde0 Explicaci\xf3n sencilla:"}),"\n",(0,r.jsx)(n.p,{children:"Imagina que haces un pedido por Internet. La tienda te dice:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Te prometo que te lo entregar\xe9, o te avisar\xe9 si hay un problema."'})}),"\n",(0,r.jsxs)(n.p,{children:["Esa ",(0,r.jsx)(n.strong,{children:"promesa"})," puede:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"cumplirse (te entregan el pedido)"}),"\n",(0,r.jsx)(n.li,{children:"fallar (hay un problema con el env\xedo)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Lo mismo hace JavaScript con ",(0,r.jsx)(n.code,{children:"Promise"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"-ejemplo-de-promesa",children:"\u2705 Ejemplo de Promesa:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Creamos una funci\xf3n que devuelve una promesa\nfunction pedirProducto() {\n  return new Promise((resolve, reject) => {\n    console.log("Realizando pedido...");\n\n    // Simulamos que tarda 2 segundos en completarse\n    setTimeout(() => {\n      const productoDisponible = true; // Simulamos que todo va bien\n\n      if (productoDisponible) {\n        resolve("Producto entregado con \xe9xito.");\n      } else {\n        reject("El producto no est\xe1 disponible.");\n      }\n    }, 2000);\n  });\n}\n\n// Usamos la promesa\npedirProducto()\n  .then((mensaje) => {\n    // Esto se ejecuta si la promesa se cumple (resolve)\n    console.log("\xc9xito:", mensaje);\n  })\n  .catch((error) => {\n    // Esto se ejecuta si la promesa falla (reject)\n    console.error("Error:", error);\n  });\n'})}),"\n",(0,r.jsx)(n.h3,{id:"qu\xe9-hace-este-ejemplo-2",children:"\xbfQu\xe9 hace este ejemplo?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["La funci\xf3n ",(0,r.jsx)(n.code,{children:"pedirProducto"})," devuelve una ",(0,r.jsx)(n.strong,{children:"nueva promesa"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Dentro, se simula un retraso de 2 segundos con ",(0,r.jsx)(n.code,{children:"setTimeout"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si ",(0,r.jsx)(n.code,{children:"productoDisponible"})," es ",(0,r.jsx)(n.code,{children:"true"}),", se llama a ",(0,r.jsx)(n.code,{children:"resolve()"})," y la promesa se considera ",(0,r.jsx)(n.strong,{children:"resuelta con \xe9xito"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si fuera ",(0,r.jsx)(n.code,{children:"false"}),", se llama a ",(0,r.jsx)(n.code,{children:"reject()"})," y la promesa se ",(0,r.jsx)(n.strong,{children:"rechaza"})," con error."]}),"\n",(0,r.jsxs)(n.li,{children:["Luego, con ",(0,r.jsx)(n.code,{children:".then()"})," manejamos el caso exitoso, y con ",(0,r.jsx)(n.code,{children:".catch()"})," el caso de error."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["As\xed funcionan las promesas: ",(0,r.jsx)(n.strong,{children:"esperan que algo ocurra, y luego ejecutan el c\xf3digo correspondiente dependiendo del resultado"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Una ",(0,r.jsx)(n.strong,{children:"promesa en JavaScript"})," puede estar en uno de ",(0,r.jsx)(n.strong,{children:"tres estados"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pending"})," (pendiente): la promesa est\xe1 en curso, todav\xeda no ha terminado."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fulfilled"})," (cumplida): la operaci\xf3n se complet\xf3 con \xe9xito."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rejected"})," (rechazada): ocurri\xf3 un error o algo fall\xf3."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-ejemplo-para-ver-los-tres-estados",children:"\ud83e\uddea Ejemplo para ver los tres estados:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Creamos una funci\xf3n que devuelve una promesa\nfunction verificarEstadoPromesa(estadoSimulado) {\n  return new Promise((resolve, reject) => {\n    console.log("\u23f3 Estado: pending (pendiente)...");\n\n    // Simulamos una espera de 2 segundos\n    setTimeout(() => {\n      if (estadoSimulado === "exito") {\n        resolve("\u2705 Estado: fulfilled (cumplida). Operaci\xf3n exitosa.");\n      } else {\n        reject("\u274c Estado: rejected (rechazada). Ocurri\xf3 un error.");\n      }\n    }, 2000);\n  });\n}\n\n// Ejemplo 1: promesa cumplida\nverificarEstadoPromesa("exito")\n  .then((resultado) => {\n    // Si la promesa se cumple, se ejecuta esto\n    console.log(resultado);\n  })\n  .catch((error) => {\n    // Si la promesa se rechaza, se ejecuta esto\n    console.error(error);\n  });\n\n// Ejemplo 2: promesa rechazada\nverificarEstadoPromesa("error")\n  .then((resultado) => {\n    console.log(resultado);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-resumen-del-comportamiento",children:"\ud83e\udde0 Resumen del comportamiento:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Al ejecutarse, cada promesa entra primero en ",(0,r.jsxs)(n.strong,{children:["estado ",(0,r.jsx)(n.code,{children:"pending"})]}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si todo va bien (",(0,r.jsx)(n.code,{children:"resolve"}),"), cambia a ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"fulfilled"})})," y se ejecuta ",(0,r.jsx)(n.code,{children:".then()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si algo falla (",(0,r.jsx)(n.code,{children:"reject"}),"), cambia a ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"rejected"})})," y se ejecuta ",(0,r.jsx)(n.code,{children:".catch()"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Con esto puedes ",(0,r.jsx)(n.strong,{children:"controlar el flujo de tareas asincr\xf3nicas"})," de forma ordenada y profesional."]}),"\n",(0,r.jsxs)(n.p,{children:["Las ",(0,r.jsx)(n.strong,{children:"promesas"})," en JavaScript tienen ",(0,r.jsx)(n.strong,{children:"tres m\xe9todos principales"})," que se usan para manejar su resultado o estado:"]}),"\n",(0,r.jsx)(n.h3,{id:"-m\xe9todos-principales-de-una-promesa",children:"\u2705 M\xe9todos principales de una promesa:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".then()"})})," \u2013 se ejecuta cuando la promesa se ",(0,r.jsx)(n.strong,{children:"cumple"})," (",(0,r.jsx)(n.code,{children:"fulfilled"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".catch()"})})," \u2013 se ejecuta cuando la promesa ",(0,r.jsx)(n.strong,{children:"falla"})," (",(0,r.jsx)(n.code,{children:"rejected"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".finally()"})})," \u2013 se ejecuta ",(0,r.jsx)(n.strong,{children:"siempre"}),", haya \xe9xito o error (ideal para limpiar o cerrar procesos)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-ejemplo-real",children:"\ud83e\uddea Ejemplo real:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Creamos una funci\xf3n que devuelve una promesa\nfunction simularDescargaArchivo(estadoSimulado) {\n  return new Promise((resolve, reject) => {\n    console.log("\ud83d\ude80 Iniciando descarga...");\n\n    setTimeout(() => {\n      if (estadoSimulado === "ok") {\n        resolve("\u2705 Archivo descargado correctamente.");\n      } else {\n        reject("\u274c Error al descargar el archivo.");\n      }\n    }, 2000);\n  });\n}\n\n// Usamos la promesa con sus m\xe9todos principales\nsimularDescargaArchivo("ok") // Cambia a "error" para probar el catch()\n  .then((mensaje) => {\n    // Se ejecuta si la promesa se resuelve bien\n    console.log("THEN:", mensaje);\n  })\n  .catch((error) => {\n    // Se ejecuta si la promesa falla\n    console.error("CATCH:", error);\n  })\n  .finally(() => {\n    // Se ejecuta siempre, haya \xe9xito o fallo\n    console.log("FINALLY: Descarga finalizada (\xe9xito o error).");\n  });\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-qu\xe9-hace-cada-m\xe9todo",children:"\ud83d\udd0d \xbfQu\xe9 hace cada m\xe9todo?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".then()"})," recibe el resultado del ",(0,r.jsx)(n.code,{children:"resolve()"})," y ejecuta su funci\xf3n."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".catch()"})," recibe el error del ",(0,r.jsx)(n.code,{children:"reject()"})," y lo maneja."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".finally()"})," no recibe datos, ",(0,r.jsx)(n.strong,{children:"solo se ejecuta al final"})," pase lo que pase, \xfatil para mostrar un loader, cerrar procesos, etc."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Este patr\xf3n es fundamental para construir aplicaciones robustas, ya que te permite ",(0,r.jsx)(n.strong,{children:"controlar el flujo asincr\xf3nico"})," de forma limpia y predecible."]}),"\n",(0,r.jsxs)(n.h3,{id:"-qu\xe9-es-async--await",children:["\ud83e\udde0 \xbfQu\xe9 es ",(0,r.jsx)(n.code,{children:"async"})," / ",(0,r.jsx)(n.code,{children:"await"}),"?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*async**"})," convierte una funci\xf3n normal en una ",(0,r.jsx)(n.strong,{children:"funci\xf3n asincr\xf3nica"})," que ",(0,r.jsx)(n.strong,{children:"siempre devuelve una promesa"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*await**"})," se usa ",(0,r.jsx)(n.strong,{children:"dentro"})," de funciones ",(0,r.jsx)(n.code,{children:"async"})," para ",(0,r.jsx)(n.strong,{children:"esperar"})," el resultado de una promesa ",(0,r.jsx)(n.strong,{children:"sin bloquear"})," el resto del c\xf3digo."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\ud83e\uddfe Es como decir:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u201cEspera aqu\xed hasta que esta tarea termine, y luego contin\xfaa.\u201d"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-ejemplo-real-y-comentado-paso-a-paso",children:"\u2705 Ejemplo real y comentado paso a paso"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Definimos una funci\xf3n asincr\xf3nica\nasync function obtenerClima() {\n  try {\n    // Mostramos un mensaje antes de hacer la petici\xf3n\n    console.log("\ud83c\udf24 Obteniendo datos del clima...");\n\n    // Usamos \'await\' para esperar a que termine la promesa de fetch\n    const respuesta = await fetch(\n      "https://api.open-meteo.com/v1/forecast?latitude=40.4&longitude=-3.7&current_weather=true"\n    );\n\n    // Esperamos la conversi\xf3n de la respuesta a JSON\n    const datos = await respuesta.json();\n\n    // Mostramos la temperatura actual\n    console.log(\n      `\ud83d\udce1 Temperatura actual: ${datos.current_weather.temperature}\xb0C`\n    );\n  } catch (error) {\n    // Si algo falla, mostramos el error\n    console.error("\u26a0\ufe0f Error al obtener el clima:", error);\n  }\n}\n\n// Llamamos a la funci\xf3n (esto dispara el proceso asincr\xf3nico)\nobtenerClima();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-qu\xe9-ocurre-aqu\xed",children:"\ud83d\udd0d \xbfQu\xe9 ocurre aqu\xed?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"async function obtenerClima()"})," define una funci\xf3n asincr\xf3nica."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"await fetch(...)"})," ",(0,r.jsx)(n.strong,{children:"espera"})," la respuesta sin bloquear el navegador."]}),"\n",(0,r.jsxs)(n.li,{children:["Luego ",(0,r.jsx)(n.code,{children:"await respuesta.json()"})," espera a que se convierta a objeto."]}),"\n",(0,r.jsxs)(n.li,{children:["Todo esto est\xe1 dentro de un ",(0,r.jsx)(n.code,{children:"try...catch"})," para manejar errores f\xe1cilmente."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"-por-qu\xe9-usar-asyncawait",children:["\u2705 \xbfPor qu\xe9 usar ",(0,r.jsx)(n.code,{children:"async/await"}),"?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Es ",(0,r.jsx)(n.strong,{children:"m\xe1s legible"})," y natural que usar ",(0,r.jsx)(n.code,{children:".then()"})," y ",(0,r.jsx)(n.code,{children:".catch()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Puedes escribir c\xf3digo asincr\xf3nico como si fuera ",(0,r.jsx)(n.strong,{children:"secuencial"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Es ideal para tareas complejas que dependen de varias promesas."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Con ",(0,r.jsx)(n.code,{children:"async/await"}),", trabajar con datos externos o tareas que tardan (como APIs, timers, lecturas de archivos...) se vuelve mucho m\xe1s ",(0,r.jsx)(n.strong,{children:"f\xe1cil, claro y mantenible"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"manejo-de-errores",children:(0,r.jsx)(n.strong,{children:"Manejo de Errores"})}),"\n",(0,r.jsxs)(n.p,{children:["Con ",(0,r.jsx)(n.code,{children:"async/await"}),", la ",(0,r.jsx)(n.strong,{children:"forma correcta y clara de manejar errores"})," es usar un bloque ",(0,r.jsx)(n.code,{children:"**try...catch**"}),". As\xed puedes ",(0,r.jsx)(n.strong,{children:"atrapar cualquier error"})," que ocurra durante la ejecuci\xf3n asincr\xf3nica, ya sea al hacer ",(0,r.jsx)(n.code,{children:"fetch()"}),", convertir a JSON o cualquier otra promesa que falle."]}),"\n",(0,r.jsxs)(n.h3,{id:"-ejemplo-real-con-manejo-de-errores-usando-trycatch-",children:["\ud83e\uddea Ejemplo real con manejo de errores usando ",(0,r.jsx)(n.code,{children:"try...catch"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// Funci\xf3n asincr\xf3nica para obtener informaci\xf3n de una API\nasync function obtenerUsuario() {\n  try {\n    // Mostramos un mensaje indicando que empieza el proceso\n    console.log("\ud83d\udce1 Consultando usuario...");\n\n    // Simulamos una URL err\xf3nea (puedes cambiarla por una v\xe1lida para probar)\n    const respuesta = await fetch(\n      "https://jsonplaceholder.typicode.com/usuarios/1"\n    );\n\n    // Si la respuesta no es OK (por ejemplo, 404), lanzamos un error personalizado\n    if (!respuesta.ok) {\n      throw new Error(`\u26a0\ufe0f Error HTTP: ${respuesta.status}`);\n    }\n\n    // Esperamos a convertir la respuesta en JSON\n    const datos = await respuesta.json();\n\n    // Mostramos los datos recibidos\n    console.log("\ud83d\udc64 Usuario recibido:", datos);\n  } catch (error) {\n    // Capturamos cualquier error de red, JSON o error manual lanzado\n    console.error("\u274c Ha ocurrido un error:", error.message);\n  } finally {\n    // Esto se ejecuta siempre, haya error o no\n    console.log("\ud83d\udd1a Proceso completado.");\n  }\n}\n\n// Llamamos a la funci\xf3n\nobtenerUsuario();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-qu\xe9-est\xe1-pasando-aqu\xed",children:"\ud83d\udd0d \xbfQu\xe9 est\xe1 pasando aqu\xed?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"try"})}),": Aqu\xed colocamos todo el c\xf3digo que ",(0,r.jsx)(n.strong,{children:"puede fallar"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"fetch()"})}),": Si falla la conexi\xf3n o la URL est\xe1 mal, va directo al ",(0,r.jsx)(n.code,{children:"catch"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"respuesta.ok"})}),": Si el estado HTTP no es 200\u2013299, ",(0,r.jsx)(n.strong,{children:"lanzamos un error manual"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"catch"})}),": Captura y muestra cualquier error que haya ocurrido."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"finally"})}),": Siempre se ejecuta, perfecto para mostrar mensajes finales, cerrar loaders, etc."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-por-qu\xe9-es-\xfatil-esto",children:"\u2705 \xbfPor qu\xe9 es \xfatil esto?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Puedes ",(0,r.jsx)(n.strong,{children:"detectar y mostrar errores amigables"})," al usuario."]}),"\n",(0,r.jsxs)(n.li,{children:["Evitas que tu aplicaci\xf3n ",(0,r.jsx)(n.strong,{children:"se detenga"})," o se rompa."]}),"\n",(0,r.jsxs)(n.li,{children:["Te permite controlar cada paso de forma ",(0,r.jsx)(n.strong,{children:"limpia y profesional"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Con ",(0,r.jsx)(n.code,{children:"try...catch"}),", ",(0,r.jsx)(n.code,{children:"async/await"})," se vuelve una herramienta ",(0,r.jsx)(n.strong,{children:"poderosa y segura"})," para manejar tareas asincr\xf3nicas reales."]}),"\n",(0,r.jsx)(n.h2,{id:"herramientas-y-recursos",children:(0,r.jsx)(n.strong,{children:"Herramientas y Recursos"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentaci\xf3n"}),": Consulta la documentaci\xf3n oficial de MDN Web Docs sobre ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"promesas"}),", ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/async_function",children:"async/await"}),", y ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/es/docs/Web/API/Fetch_API",children:"fetch"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Playgrounds"}),": Usa entornos de desarrollo interactivos como CodePen, JSFiddle o ",(0,r.jsx)(n.a,{href:"http://repl.it/",children:"repl.it"})," para experimentar."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\xedndice-de-contenidos",children:"\xcdndice de contenidos"}),"\n",(0,r.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>l});var s=a(6540);const r={},o=s.createContext(r);function c(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);